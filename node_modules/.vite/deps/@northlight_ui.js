import {
  require_jsx_runtime
} from "./chunk-DT77FM6J.js";
import {
  borderRadius,
  boxShadow,
  color,
  fontSize,
  fontWeights,
  lineHeights,
  sizing,
  spacing,
  tott,
  tottComponents,
  typography,
  webapp,
  webappComponents,
  zIndex
} from "./chunk-MYS3GIYL.js";
import {
  __assign,
  __extends,
  __read,
  __rest,
  __spreadArray,
  require_prop_types,
  require_react_is
} from "./chunk-UFUXQCDI.js";
import {
  require_react_dom
} from "./chunk-ZW7WJ6XU.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys3 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys3 = keys3.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i2 = 0; i2 < keys3.length; ++i2) {
          var key2 = keys3[i2];
          if (!KNOWN_STATICS[key2] && !(blacklist && blacklist[key2]) && !(sourceStatics && sourceStatics[key2]) && !(targetStatics && targetStatics[key2])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key2);
            try {
              defineProperty(targetComponent, key2, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics2;
  }
});

// node_modules/lodash.mergewith/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.mergewith/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types3 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types3) {
          return types3;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func2, thisArg, args) {
      switch (args.length) {
        case 0:
          return func2.call(thisArg);
        case 1:
          return func2.call(thisArg, args[0]);
        case 2:
          return func2.call(thisArg, args[0], args[1]);
        case 3:
          return func2.call(thisArg, args[0], args[1], args[2]);
      }
      return func2.apply(thisArg, args);
    }
    function baseTimes(n3, iteratee) {
      var index5 = -1, result = Array(n3);
      while (++index5 < n3) {
        result[index5] = iteratee(index5);
      }
      return result;
    }
    function baseUnary(func2) {
      return function(value) {
        return func2(value);
      };
    }
    function getValue2(object2, key2) {
      return object2 == null ? void 0 : object2[key2];
    }
    function overArg(func2, transform4) {
      return function(arg) {
        return func2(transform4(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func2 = getNative(Object, "defineProperty");
        func2({}, "", {});
        return func2;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object2() {
      }
      return function(proto) {
        if (!isObject4(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object2.prototype = proto;
        var result = new object2();
        object2.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index5 = -1, length3 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index5 < length3) {
        var entry = entries[index5];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key2) {
      var result = this.has(key2) && delete this.__data__[key2];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key2];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key2) ? data[key2] : void 0;
    }
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty2.call(data, key2);
    }
    function hashSet(key2, value) {
      var data = this.__data__;
      this.size += this.has(key2) ? 0 : 1;
      data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index5 = -1, length3 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index5 < length3) {
        var entry = entries[index5];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key2) {
      var data = this.__data__, index5 = assocIndexOf(data, key2);
      if (index5 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index5 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index5, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key2) {
      var data = this.__data__, index5 = assocIndexOf(data, key2);
      return index5 < 0 ? void 0 : data[index5][1];
    }
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    function listCacheSet(key2, value) {
      var data = this.__data__, index5 = assocIndexOf(data, key2);
      if (index5 < 0) {
        ++this.size;
        data.push([key2, value]);
      } else {
        data[index5][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index5 = -1, length3 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index5 < length3) {
        var entry = entries[index5];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key2) {
      var result = getMapData(this, key2)["delete"](key2);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    function mapCacheSet(key2, value) {
      var data = getMapData(this, key2), size4 = data.size;
      data.set(key2, value);
      this.size += data.size == size4 ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack2(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key2) {
      var data = this.__data__, result = data["delete"](key2);
      this.size = data.size;
      return result;
    }
    function stackGet(key2) {
      return this.__data__.get(key2);
    }
    function stackHas(key2) {
      return this.__data__.has(key2);
    }
    function stackSet(key2, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key2, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key2, value);
      this.size = data.size;
      return this;
    }
    Stack2.prototype.clear = stackClear;
    Stack2.prototype["delete"] = stackDelete;
    Stack2.prototype.get = stackGet;
    Stack2.prototype.has = stackHas;
    Stack2.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray3(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length3 = result.length;
      for (var key2 in value) {
        if ((inherited || hasOwnProperty2.call(value, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
        isIndex(key2, length3)))) {
          result.push(key2);
        }
      }
      return result;
    }
    function assignMergeValue(object2, key2, value) {
      if (value !== void 0 && !eq(object2[key2], value) || value === void 0 && !(key2 in object2)) {
        baseAssignValue(object2, key2, value);
      }
    }
    function assignValue(object2, key2, value) {
      var objValue = object2[key2];
      if (!(hasOwnProperty2.call(object2, key2) && eq(objValue, value)) || value === void 0 && !(key2 in object2)) {
        baseAssignValue(object2, key2, value);
      }
    }
    function assocIndexOf(array, key2) {
      var length3 = array.length;
      while (length3--) {
        if (eq(array[length3][0], key2)) {
          return length3;
        }
      }
      return -1;
    }
    function baseAssignValue(object2, key2, value) {
      if (key2 == "__proto__" && defineProperty) {
        defineProperty(object2, key2, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object2[key2] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject4(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction6(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object2) {
      if (!isObject4(object2)) {
        return nativeKeysIn(object2);
      }
      var isProto = isPrototype(object2), result = [];
      for (var key2 in object2) {
        if (!(key2 == "constructor" && (isProto || !hasOwnProperty2.call(object2, key2)))) {
          result.push(key2);
        }
      }
      return result;
    }
    function baseMerge(object2, source, srcIndex, customizer, stack) {
      if (object2 === source) {
        return;
      }
      baseFor(source, function(srcValue, key2) {
        stack || (stack = new Stack2());
        if (isObject4(srcValue)) {
          baseMergeDeep(object2, source, key2, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object2, key2), srcValue, key2 + "", object2, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object2, key2, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object2, source, key2, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object2, key2), srcValue = safeGet(source, key2), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object2, key2, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key2 + "", object2, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray3(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray3(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject4(objValue) || isFunction6(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object2, key2, newValue);
    }
    function baseRest(func2, start2) {
      return setToString(overRest(func2, start2, identity3), func2 + "");
    }
    var baseSetToString = !defineProperty ? identity3 : function(func2, string2) {
      return defineProperty(func2, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string2),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length3 = buffer.length, result = allocUnsafe ? allocUnsafe(length3) : new buffer.constructor(length3);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index5 = -1, length3 = source.length;
      array || (array = Array(length3));
      while (++index5 < length3) {
        array[index5] = source[index5];
      }
      return array;
    }
    function copyObject(source, props, object2, customizer) {
      var isNew = !object2;
      object2 || (object2 = {});
      var index5 = -1, length3 = props.length;
      while (++index5 < length3) {
        var key2 = props[index5];
        var newValue = customizer ? customizer(object2[key2], source[key2], key2, object2, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key2];
        }
        if (isNew) {
          baseAssignValue(object2, key2, newValue);
        } else {
          assignValue(object2, key2, newValue);
        }
      }
      return object2;
    }
    function createAssigner(assigner) {
      return baseRest(function(object2, sources) {
        var index5 = -1, length3 = sources.length, customizer = length3 > 1 ? sources[length3 - 1] : void 0, guard2 = length3 > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length3--, customizer) : void 0;
        if (guard2 && isIterateeCall(sources[0], sources[1], guard2)) {
          customizer = length3 < 3 ? void 0 : customizer;
          length3 = 1;
        }
        object2 = Object(object2);
        while (++index5 < length3) {
          var source = sources[index5];
          if (source) {
            assigner(object2, source, index5, customizer);
          }
        }
        return object2;
      });
    }
    function createBaseFor(fromRight) {
      return function(object2, iteratee, keysFunc) {
        var index5 = -1, iterable = Object(object2), props = keysFunc(object2), length3 = props.length;
        while (length3--) {
          var key2 = props[fromRight ? length3 : ++index5];
          if (iteratee(iterable[key2], key2, iterable) === false) {
            break;
          }
        }
        return object2;
      };
    }
    function getMapData(map2, key2) {
      var data = map2.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object2, key2) {
      var value = getValue2(object2, key2);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object2) {
      return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate(getPrototype(object2)) : {};
    }
    function isIndex(value, length3) {
      var type = typeof value;
      length3 = length3 == null ? MAX_SAFE_INTEGER : length3;
      return !!length3 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length3);
    }
    function isIterateeCall(value, index5, object2) {
      if (!isObject4(object2)) {
        return false;
      }
      var type = typeof index5;
      if (type == "number" ? isArrayLike(object2) && isIndex(index5, object2.length) : type == "string" && index5 in object2) {
        return eq(object2[index5], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func2) {
      return !!maskSrcKey && maskSrcKey in func2;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object2) {
      var result = [];
      if (object2 != null) {
        for (var key2 in Object(object2)) {
          result.push(key2);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func2, start2, transform4) {
      start2 = nativeMax(start2 === void 0 ? func2.length - 1 : start2, 0);
      return function() {
        var args = arguments, index5 = -1, length3 = nativeMax(args.length - start2, 0), array = Array(length3);
        while (++index5 < length3) {
          array[index5] = args[start2 + index5];
        }
        index5 = -1;
        var otherArgs = Array(start2 + 1);
        while (++index5 < start2) {
          otherArgs[index5] = args[index5];
        }
        otherArgs[start2] = transform4(array);
        return apply(func2, this, otherArgs);
      };
    }
    function safeGet(object2, key2) {
      if (key2 === "constructor" && typeof object2[key2] === "function") {
        return;
      }
      if (key2 == "__proto__") {
        return;
      }
      return object2[key2];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func2) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func2.apply(void 0, arguments);
      };
    }
    function toSource(func2) {
      if (func2 != null) {
        try {
          return funcToString.call(func2);
        } catch (e) {
        }
        try {
          return func2 + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray3 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction6(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction6(value) {
      if (!isObject4(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject4(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject2(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object2) {
      return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
    }
    var mergeWith6 = createAssigner(function(object2, source, srcIndex, customizer) {
      baseMerge(object2, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity3(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = mergeWith6;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a2, b2) {
      if (a2 === b2)
        return true;
      if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
        if (a2.constructor !== b2.constructor)
          return false;
        var length3, i2, keys3;
        if (Array.isArray(a2)) {
          length3 = a2.length;
          if (length3 != b2.length)
            return false;
          for (i2 = length3; i2-- !== 0; )
            if (!equal(a2[i2], b2[i2]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a2 instanceof Map && b2 instanceof Map) {
          if (a2.size !== b2.size)
            return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!b2.has(i2.value[0]))
              return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!equal(i2.value[1], b2.get(i2.value[0])))
              return false;
          return true;
        }
        if (hasSet && a2 instanceof Set && b2 instanceof Set) {
          if (a2.size !== b2.size)
            return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!b2.has(i2.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
          length3 = a2.length;
          if (length3 != b2.length)
            return false;
          for (i2 = length3; i2-- !== 0; )
            if (a2[i2] !== b2[i2])
              return false;
          return true;
        }
        if (a2.constructor === RegExp)
          return a2.source === b2.source && a2.flags === b2.flags;
        if (a2.valueOf !== Object.prototype.valueOf && typeof a2.valueOf === "function" && typeof b2.valueOf === "function")
          return a2.valueOf() === b2.valueOf();
        if (a2.toString !== Object.prototype.toString && typeof a2.toString === "function" && typeof b2.toString === "function")
          return a2.toString() === b2.toString();
        keys3 = Object.keys(a2);
        length3 = keys3.length;
        if (length3 !== Object.keys(b2).length)
          return false;
        for (i2 = length3; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys3[i2]))
            return false;
        if (hasElementType && a2 instanceof Element)
          return false;
        for (i2 = length3; i2-- !== 0; ) {
          if ((keys3[i2] === "_owner" || keys3[i2] === "__v" || keys3[i2] === "__o") && a2.$$typeof) {
            continue;
          }
          if (!equal(a2[keys3[i2]], b2[keys3[i2]]))
            return false;
        }
        return true;
      }
      return a2 !== a2 && b2 !== b2;
    }
    module.exports = function isEqual4(a2, b2) {
      try {
        return equal(a2, b2);
      } catch (error2) {
        if ((error2.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error2;
      }
    };
  }
});

// node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.esm.js
function memoize4(fn2) {
  var cache2 = {};
  return function(arg) {
    if (cache2[arg] === void 0)
      cache2[arg] = fn2(arg);
    return cache2[arg];
  };
}
var memoize_browser_esm_default;
var init_memoize_browser_esm = __esm({
  "node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.esm.js"() {
    memoize_browser_esm_default = memoize4;
  }
});

// node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
var is_prop_valid_browser_esm_exports = {};
__export(is_prop_valid_browser_esm_exports, {
  default: () => is_prop_valid_browser_esm_default
});
var reactPropsRegex2, index, is_prop_valid_browser_esm_default;
var init_is_prop_valid_browser_esm = __esm({
  "node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js"() {
    init_memoize_browser_esm();
    reactPropsRegex2 = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    index = memoize_browser_esm_default(
      function(prop2) {
        return reactPropsRegex2.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    is_prop_valid_browser_esm_default = index;
  }
});

// node_modules/toggle-selection/index.js
var require_toggle_selection = __commonJS({
  "node_modules/toggle-selection/index.js"(exports, module) {
    module.exports = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i2 = 0; i2 < selection.rangeCount; i2++) {
        ranges.push(selection.getRangeAt(i2));
      }
      switch (active.tagName.toUpperCase()) {
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range2) {
            selection.addRange(range2);
          });
        }
        active && active.focus();
      };
    };
  }
});

// node_modules/copy-to-clipboard/index.js
var require_copy_to_clipboard = __commonJS({
  "node_modules/copy-to-clipboard/index.js"(exports, module) {
    "use strict";
    var deselectCurrent = require_toggle_selection();
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format2(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy3(text, options2) {
      var debug, message, reselectPrevious, range2, selection, mark, success = false;
      if (!options2) {
        options2 = {};
      }
      debug = options2.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range2 = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        mark.ariaHidden = "true";
        mark.style.all = "unset";
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        mark.style.whiteSpace = "pre";
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e) {
          e.stopPropagation();
          if (options2.format) {
            e.preventDefault();
            if (typeof e.clipboardData === "undefined") {
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format3 = clipboardToIE11Formatting[options2.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format3, text);
            } else {
              e.clipboardData.clearData();
              e.clipboardData.setData(options2.format, text);
            }
          }
          if (options2.onCopy) {
            e.preventDefault();
            options2.onCopy(e.clipboardData);
          }
        });
        document.body.appendChild(mark);
        range2.selectNodeContents(mark);
        selection.addRange(range2);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options2.format || "text", text);
          options2.onCopy && options2.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug && console.error("unable to copy using clipboardData: ", err2);
          debug && console.error("falling back to prompt");
          message = format2("message" in options2 ? options2.message : defaultMessage);
          window.prompt(message, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range2);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }
      return success;
    }
    module.exports = copy3;
  }
});

// node_modules/ramda/dist/ramda.js
var require_ramda = __commonJS({
  "node_modules/ramda/dist/ramda.js"(exports, module) {
    (function() {
      "use strict";
      var __ = { "@@functional/placeholder": true };
      var _add = function _add2(a2, b2) {
        return a2 + b2;
      };
      var _all = function _all2(fn2, list2) {
        var idx = 0;
        while (idx < list2.length) {
          if (!fn2(list2[idx])) {
            return false;
          }
          idx += 1;
        }
        return true;
      };
      var _any = function _any2(fn2, list2) {
        var idx = 0;
        while (idx < list2.length) {
          if (fn2(list2[idx])) {
            return true;
          }
          idx += 1;
        }
        return false;
      };
      var _assoc = function _assoc2(prop3, val, obj) {
        var result = {};
        for (var p in obj) {
          result[p] = obj[p];
        }
        result[prop3] = val;
        return result;
      };
      var _cloneRegExp = function _cloneRegExp2(pattern) {
        return new RegExp(pattern.source, (pattern.global ? "g" : "") + (pattern.ignoreCase ? "i" : "") + (pattern.multiline ? "m" : "") + (pattern.sticky ? "y" : "") + (pattern.unicode ? "u" : ""));
      };
      var _complement = function _complement2(f) {
        return function() {
          return !f.apply(this, arguments);
        };
      };
      var _compose = function _compose2(f, g) {
        return function() {
          return f.call(this, g.apply(this, arguments));
        };
      };
      var _concat = function _concat2(set1, set2) {
        set1 = set1 || [];
        set2 = set2 || [];
        var idx;
        var len1 = set1.length;
        var len2 = set2.length;
        var result = [];
        idx = 0;
        while (idx < len1) {
          result[result.length] = set1[idx];
          idx += 1;
        }
        idx = 0;
        while (idx < len2) {
          result[result.length] = set2[idx];
          idx += 1;
        }
        return result;
      };
      var _containsWith = function _containsWith2(pred, x, list2) {
        var idx = 0, len = list2.length;
        while (idx < len) {
          if (pred(x, list2[idx])) {
            return true;
          }
          idx += 1;
        }
        return false;
      };
      var _createMapEntry = function _createMapEntry2(key2, val) {
        var obj = {};
        obj[key2] = val;
        return obj;
      };
      var _createMaxMinBy = function _createMaxMinBy2(comparator2) {
        return function(valueComputer, list2) {
          if (!(list2 && list2.length > 0)) {
            return;
          }
          var idx = 1;
          var winner = list2[idx];
          var computedWinner = valueComputer(winner);
          var computedCurrent;
          while (idx < list2.length) {
            computedCurrent = valueComputer(list2[idx]);
            if (comparator2(computedCurrent, computedWinner)) {
              computedWinner = computedCurrent;
              winner = list2[idx];
            }
            idx += 1;
          }
          return winner;
        };
      };
      var _curry1 = function _curry12(fn2) {
        return function f1(a2) {
          if (arguments.length === 0) {
            return f1;
          } else if (a2 != null && a2["@@functional/placeholder"] === true) {
            return f1;
          } else {
            return fn2(a2);
          }
        };
      };
      var _curry2 = function _curry22(fn2) {
        return function f2(a2, b2) {
          var n3 = arguments.length;
          if (n3 === 0) {
            return f2;
          } else if (n3 === 1 && a2 != null && a2["@@functional/placeholder"] === true) {
            return f2;
          } else if (n3 === 1) {
            return _curry1(function(b3) {
              return fn2(a2, b3);
            });
          } else if (n3 === 2 && a2 != null && a2["@@functional/placeholder"] === true && b2 != null && b2["@@functional/placeholder"] === true) {
            return f2;
          } else if (n3 === 2 && a2 != null && a2["@@functional/placeholder"] === true) {
            return _curry1(function(a3) {
              return fn2(a3, b2);
            });
          } else if (n3 === 2 && b2 != null && b2["@@functional/placeholder"] === true) {
            return _curry1(function(b3) {
              return fn2(a2, b3);
            });
          } else {
            return fn2(a2, b2);
          }
        };
      };
      var _curry3 = function _curry32(fn2) {
        return function f3(a2, b2, c2) {
          var n3 = arguments.length;
          if (n3 === 0) {
            return f3;
          } else if (n3 === 1 && a2 != null && a2["@@functional/placeholder"] === true) {
            return f3;
          } else if (n3 === 1) {
            return _curry2(function(b3, c3) {
              return fn2(a2, b3, c3);
            });
          } else if (n3 === 2 && a2 != null && a2["@@functional/placeholder"] === true && b2 != null && b2["@@functional/placeholder"] === true) {
            return f3;
          } else if (n3 === 2 && a2 != null && a2["@@functional/placeholder"] === true) {
            return _curry2(function(a3, c3) {
              return fn2(a3, b2, c3);
            });
          } else if (n3 === 2 && b2 != null && b2["@@functional/placeholder"] === true) {
            return _curry2(function(b3, c3) {
              return fn2(a2, b3, c3);
            });
          } else if (n3 === 2) {
            return _curry1(function(c3) {
              return fn2(a2, b2, c3);
            });
          } else if (n3 === 3 && a2 != null && a2["@@functional/placeholder"] === true && b2 != null && b2["@@functional/placeholder"] === true && c2 != null && c2["@@functional/placeholder"] === true) {
            return f3;
          } else if (n3 === 3 && a2 != null && a2["@@functional/placeholder"] === true && b2 != null && b2["@@functional/placeholder"] === true) {
            return _curry2(function(a3, b3) {
              return fn2(a3, b3, c2);
            });
          } else if (n3 === 3 && a2 != null && a2["@@functional/placeholder"] === true && c2 != null && c2["@@functional/placeholder"] === true) {
            return _curry2(function(a3, c3) {
              return fn2(a3, b2, c3);
            });
          } else if (n3 === 3 && b2 != null && b2["@@functional/placeholder"] === true && c2 != null && c2["@@functional/placeholder"] === true) {
            return _curry2(function(b3, c3) {
              return fn2(a2, b3, c3);
            });
          } else if (n3 === 3 && a2 != null && a2["@@functional/placeholder"] === true) {
            return _curry1(function(a3) {
              return fn2(a3, b2, c2);
            });
          } else if (n3 === 3 && b2 != null && b2["@@functional/placeholder"] === true) {
            return _curry1(function(b3) {
              return fn2(a2, b3, c2);
            });
          } else if (n3 === 3 && c2 != null && c2["@@functional/placeholder"] === true) {
            return _curry1(function(c3) {
              return fn2(a2, b2, c3);
            });
          } else {
            return fn2(a2, b2, c2);
          }
        };
      };
      var _dissoc = function _dissoc2(prop3, obj) {
        var result = {};
        for (var p in obj) {
          if (p !== prop3) {
            result[p] = obj[p];
          }
        }
        return result;
      };
      var _eq = function _eq2(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      };
      var _filter = function _filter2(fn2, list2) {
        var idx = 0, len = list2.length, result = [];
        while (idx < len) {
          if (fn2(list2[idx])) {
            result[result.length] = list2[idx];
          }
          idx += 1;
        }
        return result;
      };
      var _filterIndexed = function _filterIndexed2(fn2, list2) {
        var idx = 0, len = list2.length, result = [];
        while (idx < len) {
          if (fn2(list2[idx], idx, list2)) {
            result[result.length] = list2[idx];
          }
          idx += 1;
        }
        return result;
      };
      var _forEach = function _forEach2(fn2, list2) {
        var idx = 0, len = list2.length;
        while (idx < len) {
          fn2(list2[idx]);
          idx += 1;
        }
        return list2;
      };
      var _forceReduced = function _forceReduced2(x) {
        return {
          "@@transducer/value": x,
          "@@transducer/reduced": true
        };
      };
      var _functionsWith = function _functionsWith2(fn2) {
        return function(obj) {
          return _filter(function(key2) {
            return typeof obj[key2] === "function";
          }, fn2(obj));
        };
      };
      var _gt = function _gt2(a2, b2) {
        return a2 > b2;
      };
      var _has = function _has2(prop3, obj) {
        return Object.prototype.hasOwnProperty.call(obj, prop3);
      };
      var _identity = function _identity2(x) {
        return x;
      };
      var _isArray = Array.isArray || function _isArray2(val) {
        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
      };
      var _isInteger = Number.isInteger || function _isInteger2(n3) {
        return n3 << 0 === n3;
      };
      var _isThenable = function _isThenable2(value) {
        return value != null && value === Object(value) && typeof value.then === "function";
      };
      var _isTransformer = function _isTransformer2(obj) {
        return typeof obj["@@transducer/step"] === "function";
      };
      var _lt = function _lt2(a2, b2) {
        return a2 < b2;
      };
      var _map = function _map2(fn2, list2) {
        var idx = 0, len = list2.length, result = [];
        while (idx < len) {
          result[idx] = fn2(list2[idx]);
          idx += 1;
        }
        return result;
      };
      var _multiply = function _multiply2(a2, b2) {
        return a2 * b2;
      };
      var _nth = function _nth2(n3, list2) {
        return n3 < 0 ? list2[list2.length + n3] : list2[n3];
      };
      var _path = function _path2(paths, obj) {
        if (obj == null) {
          return;
        } else {
          var val = obj;
          for (var idx = 0, len = paths.length; idx < len && val != null; idx += 1) {
            val = val[paths[idx]];
          }
          return val;
        }
      };
      var _prepend = function _prepend2(el, list2) {
        return _concat([el], list2);
      };
      var _quote = function _quote2(s) {
        return '"' + s.replace(/"/g, '\\"') + '"';
      };
      var _reduced = function _reduced2(x) {
        return x && x["@@transducer/reduced"] ? x : {
          "@@transducer/value": x,
          "@@transducer/reduced": true
        };
      };
      var _slice = function _slice2(args, from2, to) {
        switch (arguments.length) {
          case 1:
            return _slice2(args, 0, args.length);
          case 2:
            return _slice2(args, from2, args.length);
          default:
            var list2 = [];
            var idx = 0;
            var len = Math.max(0, Math.min(args.length, to) - from2);
            while (idx < len) {
              list2[idx] = args[from2 + idx];
              idx += 1;
            }
            return list2;
        }
      };
      var _toISOString = function() {
        var pad = function pad2(n3) {
          return (n3 < 10 ? "0" : "") + n3;
        };
        return typeof Date.prototype.toISOString === "function" ? function _toISOString2(d) {
          return d.toISOString();
        } : function _toISOString2(d) {
          return d.getUTCFullYear() + "-" + pad(d.getUTCMonth() + 1) + "-" + pad(d.getUTCDate()) + "T" + pad(d.getUTCHours()) + ":" + pad(d.getUTCMinutes()) + ":" + pad(d.getUTCSeconds()) + "." + (d.getUTCMilliseconds() / 1e3).toFixed(3).slice(2, 5) + "Z";
        };
      }();
      var _xdropRepeatsWith = function() {
        function XDropRepeatsWith(pred, xf) {
          this.xf = xf;
          this.pred = pred;
          this.lastValue = void 0;
          this.seenFirstValue = false;
        }
        XDropRepeatsWith.prototype["@@transducer/init"] = function() {
          return this.xf["@@transducer/init"]();
        };
        XDropRepeatsWith.prototype["@@transducer/result"] = function(result) {
          return this.xf["@@transducer/result"](result);
        };
        XDropRepeatsWith.prototype["@@transducer/step"] = function(result, input) {
          var sameAsLast = false;
          if (!this.seenFirstValue) {
            this.seenFirstValue = true;
          } else if (this.pred(this.lastValue, input)) {
            sameAsLast = true;
          }
          this.lastValue = input;
          return sameAsLast ? result : this.xf["@@transducer/step"](result, input);
        };
        return _curry2(function _xdropRepeatsWith2(pred, xf) {
          return new XDropRepeatsWith(pred, xf);
        });
      }();
      var _xfBase = {
        init: function() {
          return this.xf["@@transducer/init"]();
        },
        result: function(result) {
          return this.xf["@@transducer/result"](result);
        }
      };
      var _xfilter = function() {
        function XFilter(f, xf) {
          this.xf = xf;
          this.f = f;
        }
        XFilter.prototype["@@transducer/init"] = _xfBase.init;
        XFilter.prototype["@@transducer/result"] = _xfBase.result;
        XFilter.prototype["@@transducer/step"] = function(result, input) {
          return this.f(input) ? this.xf["@@transducer/step"](result, input) : result;
        };
        return _curry2(function _xfilter2(f, xf) {
          return new XFilter(f, xf);
        });
      }();
      var _xfind = function() {
        function XFind(f, xf) {
          this.xf = xf;
          this.f = f;
          this.found = false;
        }
        XFind.prototype["@@transducer/init"] = _xfBase.init;
        XFind.prototype["@@transducer/result"] = function(result) {
          if (!this.found) {
            result = this.xf["@@transducer/step"](result, void 0);
          }
          return this.xf["@@transducer/result"](result);
        };
        XFind.prototype["@@transducer/step"] = function(result, input) {
          if (this.f(input)) {
            this.found = true;
            result = _reduced(this.xf["@@transducer/step"](result, input));
          }
          return result;
        };
        return _curry2(function _xfind2(f, xf) {
          return new XFind(f, xf);
        });
      }();
      var _xfindIndex = function() {
        function XFindIndex(f, xf) {
          this.xf = xf;
          this.f = f;
          this.idx = -1;
          this.found = false;
        }
        XFindIndex.prototype["@@transducer/init"] = _xfBase.init;
        XFindIndex.prototype["@@transducer/result"] = function(result) {
          if (!this.found) {
            result = this.xf["@@transducer/step"](result, -1);
          }
          return this.xf["@@transducer/result"](result);
        };
        XFindIndex.prototype["@@transducer/step"] = function(result, input) {
          this.idx += 1;
          if (this.f(input)) {
            this.found = true;
            result = _reduced(this.xf["@@transducer/step"](result, this.idx));
          }
          return result;
        };
        return _curry2(function _xfindIndex2(f, xf) {
          return new XFindIndex(f, xf);
        });
      }();
      var _xfindLast = function() {
        function XFindLast(f, xf) {
          this.xf = xf;
          this.f = f;
        }
        XFindLast.prototype["@@transducer/init"] = _xfBase.init;
        XFindLast.prototype["@@transducer/result"] = function(result) {
          return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.last));
        };
        XFindLast.prototype["@@transducer/step"] = function(result, input) {
          if (this.f(input)) {
            this.last = input;
          }
          return result;
        };
        return _curry2(function _xfindLast2(f, xf) {
          return new XFindLast(f, xf);
        });
      }();
      var _xfindLastIndex = function() {
        function XFindLastIndex(f, xf) {
          this.xf = xf;
          this.f = f;
          this.idx = -1;
          this.lastIdx = -1;
        }
        XFindLastIndex.prototype["@@transducer/init"] = _xfBase.init;
        XFindLastIndex.prototype["@@transducer/result"] = function(result) {
          return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.lastIdx));
        };
        XFindLastIndex.prototype["@@transducer/step"] = function(result, input) {
          this.idx += 1;
          if (this.f(input)) {
            this.lastIdx = this.idx;
          }
          return result;
        };
        return _curry2(function _xfindLastIndex2(f, xf) {
          return new XFindLastIndex(f, xf);
        });
      }();
      var _xmap = function() {
        function XMap(f, xf) {
          this.xf = xf;
          this.f = f;
        }
        XMap.prototype["@@transducer/init"] = _xfBase.init;
        XMap.prototype["@@transducer/result"] = _xfBase.result;
        XMap.prototype["@@transducer/step"] = function(result, input) {
          return this.xf["@@transducer/step"](result, this.f(input));
        };
        return _curry2(function _xmap2(f, xf) {
          return new XMap(f, xf);
        });
      }();
      var _xtake = function() {
        function XTake(n3, xf) {
          this.xf = xf;
          this.n = n3;
        }
        XTake.prototype["@@transducer/init"] = _xfBase.init;
        XTake.prototype["@@transducer/result"] = _xfBase.result;
        XTake.prototype["@@transducer/step"] = function(result, input) {
          this.n -= 1;
          return this.n === 0 ? _reduced(this.xf["@@transducer/step"](result, input)) : this.xf["@@transducer/step"](result, input);
        };
        return _curry2(function _xtake2(n3, xf) {
          return new XTake(n3, xf);
        });
      }();
      var _xtakeWhile = function() {
        function XTakeWhile(f, xf) {
          this.xf = xf;
          this.f = f;
        }
        XTakeWhile.prototype["@@transducer/init"] = _xfBase.init;
        XTakeWhile.prototype["@@transducer/result"] = _xfBase.result;
        XTakeWhile.prototype["@@transducer/step"] = function(result, input) {
          return this.f(input) ? this.xf["@@transducer/step"](result, input) : _reduced(result);
        };
        return _curry2(function _xtakeWhile2(f, xf) {
          return new XTakeWhile(f, xf);
        });
      }();
      var _xwrap = function() {
        function XWrap(fn2) {
          this.f = fn2;
        }
        XWrap.prototype["@@transducer/init"] = function() {
          throw new Error("init not implemented on XWrap");
        };
        XWrap.prototype["@@transducer/result"] = function(acc) {
          return acc;
        };
        XWrap.prototype["@@transducer/step"] = function(acc, x) {
          return this.f(acc, x);
        };
        return function _xwrap2(fn2) {
          return new XWrap(fn2);
        };
      }();
      var add5 = _curry2(_add);
      var adjust = _curry3(function(fn2, idx, list2) {
        if (idx >= list2.length || idx < -list2.length) {
          return list2;
        }
        var start2 = idx < 0 ? list2.length : 0;
        var _idx = start2 + idx;
        var _list = _concat(list2);
        _list[_idx] = fn2(list2[_idx]);
        return _list;
      });
      var always2 = _curry1(function always3(val) {
        return function() {
          return val;
        };
      });
      var aperture = _curry2(function aperture2(n3, list2) {
        var idx = 0;
        var limit = list2.length - (n3 - 1);
        var acc = new Array(limit >= 0 ? limit : 0);
        while (idx < limit) {
          acc[idx] = _slice(list2, idx, idx + n3);
          idx += 1;
        }
        return acc;
      });
      var apply = _curry2(function apply2(fn2, args) {
        return fn2.apply(this, args);
      });
      var arity = _curry2(function(n3, fn2) {
        switch (n3) {
          case 0:
            return function() {
              return fn2.apply(this, arguments);
            };
          case 1:
            return function(a0) {
              return fn2.apply(this, arguments);
            };
          case 2:
            return function(a0, a1) {
              return fn2.apply(this, arguments);
            };
          case 3:
            return function(a0, a1, a2) {
              return fn2.apply(this, arguments);
            };
          case 4:
            return function(a0, a1, a2, a3) {
              return fn2.apply(this, arguments);
            };
          case 5:
            return function(a0, a1, a2, a3, a4) {
              return fn2.apply(this, arguments);
            };
          case 6:
            return function(a0, a1, a2, a3, a4, a5) {
              return fn2.apply(this, arguments);
            };
          case 7:
            return function(a0, a1, a2, a3, a4, a5, a6) {
              return fn2.apply(this, arguments);
            };
          case 8:
            return function(a0, a1, a2, a3, a4, a5, a6, a7) {
              return fn2.apply(this, arguments);
            };
          case 9:
            return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
              return fn2.apply(this, arguments);
            };
          case 10:
            return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
              return fn2.apply(this, arguments);
            };
          default:
            throw new Error("First argument to arity must be a non-negative integer no greater than ten");
        }
      });
      var assoc = _curry3(_assoc);
      var bind = _curry2(function bind2(fn2, thisObj) {
        return arity(fn2.length, function() {
          return fn2.apply(thisObj, arguments);
        });
      });
      var both = _curry2(function both2(f, g) {
        return function _both() {
          return f.apply(this, arguments) && g.apply(this, arguments);
        };
      });
      var comparator = _curry1(function comparator2(pred) {
        return function(a2, b2) {
          return pred(a2, b2) ? -1 : pred(b2, a2) ? 1 : 0;
        };
      });
      var complement = _curry1(_complement);
      var cond = function cond2() {
        var pairs = arguments;
        return function() {
          var idx = 0;
          while (idx < pairs.length) {
            if (pairs[idx][0].apply(this, arguments)) {
              return pairs[idx][1].apply(this, arguments);
            }
            idx += 1;
          }
        };
      };
      var containsWith = _curry3(_containsWith);
      var countBy = _curry2(function countBy2(fn2, list2) {
        var counts = {};
        var len = list2.length;
        var idx = 0;
        while (idx < len) {
          var key2 = fn2(list2[idx]);
          counts[key2] = (_has(key2, counts) ? counts[key2] : 0) + 1;
          idx += 1;
        }
        return counts;
      });
      var createMapEntry = _curry2(_createMapEntry);
      var dec2 = add5(-1);
      var defaultTo2 = _curry2(function defaultTo3(d, v) {
        return v == null ? d : v;
      });
      var differenceWith = _curry3(function differenceWith2(pred, first, second) {
        var out = [];
        var idx = 0;
        var firstLen = first.length;
        var containsPred = containsWith(pred);
        while (idx < firstLen) {
          if (!containsPred(first[idx], second) && !containsPred(first[idx], out)) {
            out[out.length] = first[idx];
          }
          idx += 1;
        }
        return out;
      });
      var dissoc = _curry2(_dissoc);
      var divide3 = _curry2(function divide4(a2, b2) {
        return a2 / b2;
      });
      var either = _curry2(function either2(f, g) {
        return function _either() {
          return f.apply(this, arguments) || g.apply(this, arguments);
        };
      });
      var eq = _curry2(_eq);
      var evolve = _curry2(function evolve2(transformations, object2) {
        var transformation, key2, type2, result = {};
        for (key2 in object2) {
          transformation = transformations[key2];
          type2 = typeof transformation;
          result[key2] = type2 === "function" ? transformation(object2[key2]) : type2 === "object" ? evolve2(transformations[key2], object2[key2]) : object2[key2];
        }
        return result;
      });
      var filterIndexed = _curry2(_filterIndexed);
      var forEachIndexed = _curry2(function forEachIndexed2(fn2, list2) {
        var idx = 0, len = list2.length;
        while (idx < len) {
          fn2(list2[idx], idx, list2);
          idx += 1;
        }
        return list2;
      });
      var fromPairs = _curry1(function fromPairs2(pairs) {
        var idx = 0, len = pairs.length, out = {};
        while (idx < len) {
          if (_isArray(pairs[idx]) && pairs[idx].length) {
            out[pairs[idx][0]] = pairs[idx][1];
          }
          idx += 1;
        }
        return out;
      });
      var gt2 = _curry2(_gt);
      var gte = _curry2(function gte2(a2, b2) {
        return a2 >= b2;
      });
      var has2 = _curry2(_has);
      var hasIn = _curry2(function(prop3, obj) {
        return prop3 in obj;
      });
      var identical = _curry2(function identical2(a2, b2) {
        if (a2 === b2) {
          return a2 !== 0 || 1 / a2 === 1 / b2;
        } else {
          return a2 !== a2 && b2 !== b2;
        }
      });
      var identity3 = _curry1(_identity);
      var inc2 = add5(1);
      var insertAll = _curry3(function insertAll2(idx, elts, list2) {
        idx = idx < list2.length && idx >= 0 ? idx : list2.length;
        return _concat(_concat(_slice(list2, 0, idx), elts), _slice(list2, idx));
      });
      var is2 = _curry2(function is3(Ctor, val) {
        return val != null && val.constructor === Ctor || val instanceof Ctor;
      });
      var isArrayLike = _curry1(function isArrayLike2(x) {
        if (_isArray(x)) {
          return true;
        }
        if (!x) {
          return false;
        }
        if (typeof x !== "object") {
          return false;
        }
        if (x instanceof String) {
          return false;
        }
        if (x.nodeType === 1) {
          return !!x.length;
        }
        if (x.length === 0) {
          return true;
        }
        if (x.length > 0) {
          return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
        }
        return false;
      });
      var isEmpty3 = _curry1(function isEmpty4(list2) {
        return Object(list2).length === 0;
      });
      var isNil3 = _curry1(function isNil4(x) {
        return x == null;
      });
      var keys3 = function() {
        var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
        var nonEnumerableProps = [
          "constructor",
          "valueOf",
          "isPrototypeOf",
          "toString",
          "propertyIsEnumerable",
          "hasOwnProperty",
          "toLocaleString"
        ];
        var contains8 = function contains9(list2, item) {
          var idx = 0;
          while (idx < list2.length) {
            if (list2[idx] === item) {
              return true;
            }
            idx += 1;
          }
          return false;
        };
        return typeof Object.keys === "function" ? _curry1(function keys4(obj) {
          return Object(obj) !== obj ? [] : Object.keys(obj);
        }) : _curry1(function keys4(obj) {
          if (Object(obj) !== obj) {
            return [];
          }
          var prop3, ks = [], nIdx;
          for (prop3 in obj) {
            if (_has(prop3, obj)) {
              ks[ks.length] = prop3;
            }
          }
          if (hasEnumBug) {
            nIdx = nonEnumerableProps.length - 1;
            while (nIdx >= 0) {
              prop3 = nonEnumerableProps[nIdx];
              if (_has(prop3, obj) && !contains8(ks, prop3)) {
                ks[ks.length] = prop3;
              }
              nIdx -= 1;
            }
          }
          return ks;
        });
      }();
      var keysIn = _curry1(function keysIn2(obj) {
        var prop3, ks = [];
        for (prop3 in obj) {
          ks[ks.length] = prop3;
        }
        return ks;
      });
      var length3 = _curry1(function length4(list2) {
        return list2 != null && is2(Number, list2.length) ? list2.length : NaN;
      });
      var lens = _curry2(function lens2(get4, set2) {
        var lns = function(a2) {
          return get4(a2);
        };
        lns.set = _curry2(set2);
        lns.map = _curry2(function(fn2, a2) {
          return set2(fn2(get4(a2)), a2);
        });
        return lns;
      });
      var lensOn = _curry3(function lensOn2(get4, set2, obj) {
        var lns = function() {
          return get4(obj);
        };
        lns.set = set2;
        lns.map = function(fn2) {
          return set2(fn2(get4(obj)));
        };
        return lns;
      });
      var lt = _curry2(_lt);
      var lte = _curry2(function lte2(a2, b2) {
        return a2 <= b2;
      });
      var mapAccum = _curry3(function mapAccum2(fn2, acc, list2) {
        var idx = 0, len = list2.length, result = [], tuple = [acc];
        while (idx < len) {
          tuple = fn2(tuple[0], list2[idx]);
          result[idx] = tuple[1];
          idx += 1;
        }
        return [
          tuple[0],
          result
        ];
      });
      var mapAccumRight = _curry3(function mapAccumRight2(fn2, acc, list2) {
        var idx = list2.length - 1, result = [], tuple = [acc];
        while (idx >= 0) {
          tuple = fn2(tuple[0], list2[idx]);
          result[idx] = tuple[1];
          idx -= 1;
        }
        return [
          tuple[0],
          result
        ];
      });
      var mapIndexed = _curry2(function mapIndexed2(fn2, list2) {
        var idx = 0, len = list2.length, result = [];
        while (idx < len) {
          result[idx] = fn2(list2[idx], idx, list2);
          idx += 1;
        }
        return result;
      });
      var mathMod = _curry2(function mathMod2(m3, p) {
        if (!_isInteger(m3)) {
          return NaN;
        }
        if (!_isInteger(p) || p < 1) {
          return NaN;
        }
        return (m3 % p + p) % p;
      });
      var maxBy = _curry2(_createMaxMinBy(_gt));
      var minBy = _curry2(_createMaxMinBy(_lt));
      var modulo = _curry2(function modulo2(a2, b2) {
        return a2 % b2;
      });
      var multiply3 = _curry2(_multiply);
      var nAry = _curry2(function(n3, fn2) {
        switch (n3) {
          case 0:
            return function() {
              return fn2.call(this);
            };
          case 1:
            return function(a0) {
              return fn2.call(this, a0);
            };
          case 2:
            return function(a0, a1) {
              return fn2.call(this, a0, a1);
            };
          case 3:
            return function(a0, a1, a2) {
              return fn2.call(this, a0, a1, a2);
            };
          case 4:
            return function(a0, a1, a2, a3) {
              return fn2.call(this, a0, a1, a2, a3);
            };
          case 5:
            return function(a0, a1, a2, a3, a4) {
              return fn2.call(this, a0, a1, a2, a3, a4);
            };
          case 6:
            return function(a0, a1, a2, a3, a4, a5) {
              return fn2.call(this, a0, a1, a2, a3, a4, a5);
            };
          case 7:
            return function(a0, a1, a2, a3, a4, a5, a6) {
              return fn2.call(this, a0, a1, a2, a3, a4, a5, a6);
            };
          case 8:
            return function(a0, a1, a2, a3, a4, a5, a6, a7) {
              return fn2.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
            };
          case 9:
            return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
              return fn2.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
            };
          case 10:
            return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
              return fn2.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
            };
          default:
            throw new Error("First argument to nAry must be a non-negative integer no greater than ten");
        }
      });
      var negate3 = _curry1(function negate4(n3) {
        return -n3;
      });
      var not2 = _curry1(function not3(a2) {
        return !a2;
      });
      var nth = _curry2(_nth);
      var nthArg = _curry1(function nthArg2(n3) {
        return function() {
          return _nth(n3, arguments);
        };
      });
      var nthChar = _curry2(function nthChar2(n3, str) {
        return str.charAt(n3 < 0 ? str.length + n3 : n3);
      });
      var nthCharCode = _curry2(function nthCharCode2(n3, str) {
        return str.charCodeAt(n3 < 0 ? str.length + n3 : n3);
      });
      var of = _curry1(function of2(x) {
        return [x];
      });
      var once2 = _curry1(function once3(fn2) {
        var called = false, result;
        return function() {
          if (called) {
            return result;
          }
          called = true;
          result = fn2.apply(this, arguments);
          return result;
        };
      });
      var path2 = _curry2(_path);
      var pick5 = _curry2(function pick6(names2, obj) {
        var result = {};
        var idx = 0;
        while (idx < names2.length) {
          if (names2[idx] in obj) {
            result[names2[idx]] = obj[names2[idx]];
          }
          idx += 1;
        }
        return result;
      });
      var pickAll = _curry2(function pickAll2(names2, obj) {
        var result = {};
        var idx = 0;
        var len = names2.length;
        while (idx < len) {
          var name = names2[idx];
          result[name] = obj[name];
          idx += 1;
        }
        return result;
      });
      var pickBy = _curry2(function pickBy2(test5, obj) {
        var result = {};
        for (var prop3 in obj) {
          if (test5(obj[prop3], prop3, obj)) {
            result[prop3] = obj[prop3];
          }
        }
        return result;
      });
      var prepend = _curry2(_prepend);
      var prop2 = _curry2(function prop3(p, obj) {
        return obj[p];
      });
      var propOr = _curry3(function propOr2(val, p, obj) {
        return obj != null && _has(p, obj) ? obj[p] : val;
      });
      var props = _curry2(function props2(ps, obj) {
        var len = ps.length;
        var out = [];
        var idx = 0;
        while (idx < len) {
          out[idx] = obj[ps[idx]];
          idx += 1;
        }
        return out;
      });
      var range2 = _curry2(function range3(from2, to) {
        var result = [];
        var n3 = from2;
        while (n3 < to) {
          result[result.length] = n3;
          n3 += 1;
        }
        return result;
      });
      var reduceIndexed = _curry3(function reduceIndexed2(fn2, acc, list2) {
        var idx = 0, len = list2.length;
        while (idx < len) {
          acc = fn2(acc, list2[idx], idx, list2);
          idx += 1;
        }
        return acc;
      });
      var reduceRight = _curry3(function reduceRight2(fn2, acc, list2) {
        var idx = list2.length - 1;
        while (idx >= 0) {
          acc = fn2(acc, list2[idx]);
          idx -= 1;
        }
        return acc;
      });
      var reduceRightIndexed = _curry3(function reduceRightIndexed2(fn2, acc, list2) {
        var idx = list2.length - 1;
        while (idx >= 0) {
          acc = fn2(acc, list2[idx], idx, list2);
          idx -= 1;
        }
        return acc;
      });
      var reduced = _curry1(_reduced);
      var rejectIndexed = _curry2(function rejectIndexed2(fn2, list2) {
        return _filterIndexed(_complement(fn2), list2);
      });
      var remove2 = _curry3(function remove3(start2, count, list2) {
        return _concat(_slice(list2, 0, Math.min(start2, list2.length)), _slice(list2, Math.min(list2.length, start2 + count)));
      });
      var replace3 = _curry3(function replace4(regex2, replacement, str) {
        return str.replace(regex2, replacement);
      });
      var reverse = _curry1(function reverse2(list2) {
        return _slice(list2).reverse();
      });
      var scan = _curry3(function scan2(fn2, acc, list2) {
        var idx = 0, len = list2.length, result = [acc];
        while (idx < len) {
          acc = fn2(acc, list2[idx]);
          result[idx + 1] = acc;
          idx += 1;
        }
        return result;
      });
      var sort = _curry2(function sort2(comparator2, list2) {
        return _slice(list2).sort(comparator2);
      });
      var sortBy = _curry2(function sortBy2(fn2, list2) {
        return _slice(list2).sort(function(a2, b2) {
          var aa = fn2(a2);
          var bb = fn2(b2);
          return aa < bb ? -1 : aa > bb ? 1 : 0;
        });
      });
      var strIndexOf = _curry2(function strIndexOf2(c2, str) {
        return str.indexOf(c2);
      });
      var strLastIndexOf = _curry2(function(c2, str) {
        return str.lastIndexOf(c2);
      });
      var subtract6 = _curry2(function subtract7(a2, b2) {
        return a2 - b2;
      });
      var tap = _curry2(function tap2(fn2, x) {
        fn2(x);
        return x;
      });
      var test4 = _curry2(function test5(pattern, str) {
        return _cloneRegExp(pattern).test(str);
      });
      var times2 = _curry2(function times3(fn2, n3) {
        var len = Number(n3);
        var list2 = new Array(len);
        var idx = 0;
        while (idx < len) {
          list2[idx] = fn2(idx);
          idx += 1;
        }
        return list2;
      });
      var toPairs = _curry1(function toPairs2(obj) {
        var pairs = [];
        for (var prop3 in obj) {
          if (_has(prop3, obj)) {
            pairs[pairs.length] = [
              prop3,
              obj[prop3]
            ];
          }
        }
        return pairs;
      });
      var toPairsIn = _curry1(function toPairsIn2(obj) {
        var pairs = [];
        for (var prop3 in obj) {
          pairs[pairs.length] = [
            prop3,
            obj[prop3]
          ];
        }
        return pairs;
      });
      var trim3 = function() {
        var ws = "	\n\v\f\r   ᠎             　\u2028\u2029\uFEFF";
        var zeroWidth = "​";
        var hasProtoTrim = typeof String.prototype.trim === "function";
        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {
          return _curry1(function trim4(str) {
            var beginRx = new RegExp("^[" + ws + "][" + ws + "]*");
            var endRx = new RegExp("[" + ws + "][" + ws + "]*$");
            return str.replace(beginRx, "").replace(endRx, "");
          });
        } else {
          return _curry1(function trim4(str) {
            return str.trim();
          });
        }
      }();
      var type = _curry1(function type2(val) {
        return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
      });
      var unapply = _curry1(function unapply2(fn2) {
        return function() {
          return fn2(_slice(arguments));
        };
      });
      var unary = _curry1(function unary2(fn2) {
        return nAry(1, fn2);
      });
      var unfold = _curry2(function unfold2(fn2, seed) {
        var pair = fn2(seed);
        var result = [];
        while (pair && pair.length) {
          result[result.length] = pair[0];
          pair = fn2(pair[1]);
        }
        return result;
      });
      var uniqWith = _curry2(function uniqWith2(pred, list2) {
        var idx = 0, len = list2.length;
        var result = [], item;
        while (idx < len) {
          item = list2[idx];
          if (!_containsWith(pred, item, result)) {
            result[result.length] = item;
          }
          idx += 1;
        }
        return result;
      });
      var update = _curry3(function(idx, x, list2) {
        return adjust(always2(x), idx, list2);
      });
      var values2 = _curry1(function values3(obj) {
        var props2 = keys3(obj);
        var len = props2.length;
        var vals = [];
        var idx = 0;
        while (idx < len) {
          vals[idx] = obj[props2[idx]];
          idx += 1;
        }
        return vals;
      });
      var valuesIn = _curry1(function valuesIn2(obj) {
        var prop3, vs = [];
        for (prop3 in obj) {
          vs[vs.length] = obj[prop3];
        }
        return vs;
      });
      var where = _curry2(function where2(spec, testObj) {
        for (var prop3 in spec) {
          if (_has(prop3, spec) && !spec[prop3](testObj[prop3])) {
            return false;
          }
        }
        return true;
      });
      var xprod = _curry2(function xprod2(a2, b2) {
        var idx = 0;
        var ilen = a2.length;
        var j;
        var jlen = b2.length;
        var result = [];
        while (idx < ilen) {
          j = 0;
          while (j < jlen) {
            result[result.length] = [
              a2[idx],
              b2[j]
            ];
            j += 1;
          }
          idx += 1;
        }
        return result;
      });
      var zip = _curry2(function zip2(a2, b2) {
        var rv = [];
        var idx = 0;
        var len = Math.min(a2.length, b2.length);
        while (idx < len) {
          rv[idx] = [
            a2[idx],
            b2[idx]
          ];
          idx += 1;
        }
        return rv;
      });
      var zipObj = _curry2(function zipObj2(keys4, values3) {
        var idx = 0, len = keys4.length, out = {};
        while (idx < len) {
          out[keys4[idx]] = values3[idx];
          idx += 1;
        }
        return out;
      });
      var zipWith = _curry3(function zipWith2(fn2, a2, b2) {
        var rv = [], idx = 0, len = Math.min(a2.length, b2.length);
        while (idx < len) {
          rv[idx] = fn2(a2[idx], b2[idx]);
          idx += 1;
        }
        return rv;
      });
      var F = always2(false);
      var T2 = always2(true);
      var _append = function _append2(el, list2) {
        return _concat(list2, [el]);
      };
      var _assocPath = function _assocPath2(path3, val, obj) {
        switch (path3.length) {
          case 0:
            return obj;
          case 1:
            return _assoc(path3[0], val, obj);
          default:
            return _assoc(path3[0], _assocPath2(_slice(path3, 1), val, Object(obj[path3[0]])), obj);
        }
      };
      var _baseCopy = function _baseCopy2(value, refFrom, refTo) {
        var copy3 = function copy4(copiedValue) {
          var len = refFrom.length;
          var idx = 0;
          while (idx < len) {
            if (value === refFrom[idx]) {
              return refTo[idx];
            }
            idx += 1;
          }
          refFrom[idx + 1] = value;
          refTo[idx + 1] = copiedValue;
          for (var key2 in value) {
            copiedValue[key2] = _baseCopy2(value[key2], refFrom, refTo);
          }
          return copiedValue;
        };
        switch (type(value)) {
          case "Object":
            return copy3({});
          case "Array":
            return copy3([]);
          case "Date":
            return new Date(value);
          case "RegExp":
            return _cloneRegExp(value);
          default:
            return value;
        }
      };
      var _checkForMethod = function _checkForMethod2(methodname, fn2) {
        return function() {
          var length4 = arguments.length;
          if (length4 === 0) {
            return fn2();
          }
          var obj = arguments[length4 - 1];
          return _isArray(obj) || typeof obj[methodname] !== "function" ? fn2.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length4 - 1));
        };
      };
      var _composeL = function _composeL2(innerLens, outerLens) {
        return lens(_compose(innerLens, outerLens), function(x, source) {
          var newInnerValue = innerLens.set(x, outerLens(source));
          return outerLens.set(newInnerValue, source);
        });
      };
      var _composeP = function _composeP2(f, g) {
        return function() {
          var context2 = this;
          var value = g.apply(this, arguments);
          if (_isThenable(value)) {
            return value.then(function(result) {
              return f.call(context2, result);
            });
          } else {
            return f.call(this, value);
          }
        };
      };
      var _createComposer = function _createComposer2(composeFunction) {
        return function() {
          var fn2 = arguments[arguments.length - 1];
          var length4 = fn2.length;
          var idx = arguments.length - 2;
          while (idx >= 0) {
            fn2 = composeFunction(arguments[idx], fn2);
            idx -= 1;
          }
          return arity(length4, fn2);
        };
      };
      var _createMaxMin = function _createMaxMin2(comparator2, initialVal) {
        return _curry1(function(list2) {
          var idx = 0, winner = initialVal, computed;
          while (idx < list2.length) {
            computed = +list2[idx];
            if (comparator2(computed, winner)) {
              winner = computed;
            }
            idx += 1;
          }
          return winner;
        });
      };
      var _createPartialApplicator = function _createPartialApplicator2(concat3) {
        return function(fn2) {
          var args = _slice(arguments, 1);
          return arity(Math.max(0, fn2.length - args.length), function() {
            return fn2.apply(this, concat3(args, arguments));
          });
        };
      };
      var _curryN = function _curryN2(length4, received, fn2) {
        return function() {
          var combined = [];
          var argsIdx = 0;
          var left2 = length4;
          var combinedIdx = 0;
          while (combinedIdx < received.length || argsIdx < arguments.length) {
            var result;
            if (combinedIdx < received.length && (received[combinedIdx] == null || received[combinedIdx]["@@functional/placeholder"] !== true || argsIdx >= arguments.length)) {
              result = received[combinedIdx];
            } else {
              result = arguments[argsIdx];
              argsIdx += 1;
            }
            combined[combinedIdx] = result;
            if (result == null || result["@@functional/placeholder"] !== true) {
              left2 -= 1;
            }
            combinedIdx += 1;
          }
          return left2 <= 0 ? fn2.apply(this, combined) : arity(left2, _curryN2(length4, combined, fn2));
        };
      };
      var _dispatchable = function _dispatchable2(methodname, xf, fn2) {
        return function() {
          var length4 = arguments.length;
          if (length4 === 0) {
            return fn2();
          }
          var obj = arguments[length4 - 1];
          if (!_isArray(obj)) {
            var args = _slice(arguments, 0, length4 - 1);
            if (typeof obj[methodname] === "function") {
              return obj[methodname].apply(obj, args);
            }
            if (_isTransformer(obj)) {
              var transducer = xf.apply(null, args);
              return transducer(obj);
            }
          }
          return fn2.apply(this, arguments);
        };
      };
      var _dissocPath = function _dissocPath2(path3, obj) {
        switch (path3.length) {
          case 0:
            return obj;
          case 1:
            return _dissoc(path3[0], obj);
          default:
            var head3 = path3[0];
            var tail2 = _slice(path3, 1);
            return obj[head3] == null ? obj : _assoc(head3, _dissocPath2(tail2, obj[head3]), obj);
        }
      };
      var _equals = function _eqDeep(a2, b2, stackA, stackB) {
        var typeA = type(a2);
        if (typeA !== type(b2)) {
          return false;
        }
        if (typeA === "Boolean" || typeA === "Number" || typeA === "String") {
          return typeof a2 === "object" ? typeof b2 === "object" && identical(a2.valueOf(), b2.valueOf()) : identical(a2, b2);
        }
        if (identical(a2, b2)) {
          return true;
        }
        if (typeA === "RegExp") {
          return a2.source === b2.source && a2.global === b2.global && a2.ignoreCase === b2.ignoreCase && a2.multiline === b2.multiline && a2.sticky === b2.sticky && a2.unicode === b2.unicode;
        }
        if (Object(a2) === a2) {
          if (typeA === "Date" && a2.getTime() !== b2.getTime()) {
            return false;
          }
          var keysA = keys3(a2);
          if (keysA.length !== keys3(b2).length) {
            return false;
          }
          var idx = stackA.length - 1;
          while (idx >= 0) {
            if (stackA[idx] === a2) {
              return stackB[idx] === b2;
            }
            idx -= 1;
          }
          stackA[stackA.length] = a2;
          stackB[stackB.length] = b2;
          idx = keysA.length - 1;
          while (idx >= 0) {
            var key2 = keysA[idx];
            if (!_has(key2, b2) || !_eqDeep(b2[key2], a2[key2], stackA, stackB)) {
              return false;
            }
            idx -= 1;
          }
          stackA.pop();
          stackB.pop();
          return true;
        }
        return false;
      };
      var _extend = function _extend2(destination, other) {
        var props2 = keys3(other);
        var idx = 0, length4 = props2.length;
        while (idx < length4) {
          destination[props2[idx]] = other[props2[idx]];
          idx += 1;
        }
        return destination;
      };
      var _hasMethod = function _hasMethod2(methodName, obj) {
        return obj != null && !_isArray(obj) && typeof obj[methodName] === "function";
      };
      var _makeFlat = function _makeFlat2(recursive) {
        return function flatt(list2) {
          var value, result = [], idx = 0, j, ilen = list2.length, jlen;
          while (idx < ilen) {
            if (isArrayLike(list2[idx])) {
              value = recursive ? flatt(list2[idx]) : list2[idx];
              j = 0;
              jlen = value.length;
              while (j < jlen) {
                result[result.length] = value[j];
                j += 1;
              }
            } else {
              result[result.length] = list2[idx];
            }
            idx += 1;
          }
          return result;
        };
      };
      var _reduce = /* @__PURE__ */ function() {
        function _arrayReduce(xf, acc, list2) {
          var idx = 0, len = list2.length;
          while (idx < len) {
            acc = xf["@@transducer/step"](acc, list2[idx]);
            if (acc && acc["@@transducer/reduced"]) {
              acc = acc["@@transducer/value"];
              break;
            }
            idx += 1;
          }
          return xf["@@transducer/result"](acc);
        }
        function _iterableReduce(xf, acc, iter) {
          var step = iter.next();
          while (!step.done) {
            acc = xf["@@transducer/step"](acc, step.value);
            if (acc && acc["@@transducer/reduced"]) {
              acc = acc["@@transducer/value"];
              break;
            }
            step = iter.next();
          }
          return xf["@@transducer/result"](acc);
        }
        function _methodReduce(xf, acc, obj) {
          return xf["@@transducer/result"](obj.reduce(bind(xf["@@transducer/step"], xf), acc));
        }
        var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
        return function _reduce2(fn2, acc, list2) {
          if (typeof fn2 === "function") {
            fn2 = _xwrap(fn2);
          }
          if (isArrayLike(list2)) {
            return _arrayReduce(fn2, acc, list2);
          }
          if (typeof list2.reduce === "function") {
            return _methodReduce(fn2, acc, list2);
          }
          if (list2[symIterator] != null) {
            return _iterableReduce(fn2, acc, list2[symIterator]());
          }
          if (typeof list2.next === "function") {
            return _iterableReduce(fn2, acc, list2);
          }
          throw new TypeError("reduce: list must be array or iterable");
        };
      }();
      var _xall = function() {
        function XAll(f, xf) {
          this.xf = xf;
          this.f = f;
          this.all = true;
        }
        XAll.prototype["@@transducer/init"] = _xfBase.init;
        XAll.prototype["@@transducer/result"] = function(result) {
          if (this.all) {
            result = this.xf["@@transducer/step"](result, true);
          }
          return this.xf["@@transducer/result"](result);
        };
        XAll.prototype["@@transducer/step"] = function(result, input) {
          if (!this.f(input)) {
            this.all = false;
            result = _reduced(this.xf["@@transducer/step"](result, false));
          }
          return result;
        };
        return _curry2(function _xall2(f, xf) {
          return new XAll(f, xf);
        });
      }();
      var _xany = function() {
        function XAny(f, xf) {
          this.xf = xf;
          this.f = f;
          this.any = false;
        }
        XAny.prototype["@@transducer/init"] = _xfBase.init;
        XAny.prototype["@@transducer/result"] = function(result) {
          if (!this.any) {
            result = this.xf["@@transducer/step"](result, false);
          }
          return this.xf["@@transducer/result"](result);
        };
        XAny.prototype["@@transducer/step"] = function(result, input) {
          if (this.f(input)) {
            this.any = true;
            result = _reduced(this.xf["@@transducer/step"](result, true));
          }
          return result;
        };
        return _curry2(function _xany2(f, xf) {
          return new XAny(f, xf);
        });
      }();
      var _xdrop = function() {
        function XDrop(n3, xf) {
          this.xf = xf;
          this.n = n3;
        }
        XDrop.prototype["@@transducer/init"] = _xfBase.init;
        XDrop.prototype["@@transducer/result"] = _xfBase.result;
        XDrop.prototype.step = function(result, input) {
          if (this.n > 0) {
            this.n -= 1;
            return result;
          }
          return this.xf["@@transducer/step"](result, input);
        };
        return _curry2(function _xdrop2(n3, xf) {
          return new XDrop(n3, xf);
        });
      }();
      var _xdropWhile = function() {
        function XDropWhile(f, xf) {
          this.xf = xf;
          this.f = f;
        }
        XDropWhile.prototype["@@transducer/init"] = _xfBase.init;
        XDropWhile.prototype["@@transducer/result"] = _xfBase.result;
        XDropWhile.prototype["@@transducer/step"] = function(result, input) {
          if (this.f) {
            if (this.f(input)) {
              return result;
            }
            this.f = null;
          }
          return this.xf["@@transducer/step"](result, input);
        };
        return _curry2(function _xdropWhile2(f, xf) {
          return new XDropWhile(f, xf);
        });
      }();
      var _xgroupBy = function() {
        function XGroupBy(f, xf) {
          this.xf = xf;
          this.f = f;
          this.inputs = {};
        }
        XGroupBy.prototype["@@transducer/init"] = _xfBase.init;
        XGroupBy.prototype["@@transducer/result"] = function(result) {
          var key2;
          for (key2 in this.inputs) {
            if (_has(key2, this.inputs)) {
              result = this.xf["@@transducer/step"](result, this.inputs[key2]);
              if (result["@@transducer/reduced"]) {
                result = result["@@transducer/value"];
                break;
              }
            }
          }
          return this.xf["@@transducer/result"](result);
        };
        XGroupBy.prototype["@@transducer/step"] = function(result, input) {
          var key2 = this.f(input);
          this.inputs[key2] = this.inputs[key2] || [
            key2,
            []
          ];
          this.inputs[key2][1] = _append(input, this.inputs[key2][1]);
          return result;
        };
        return _curry2(function _xgroupBy2(f, xf) {
          return new XGroupBy(f, xf);
        });
      }();
      var all2 = _curry2(_dispatchable("all", _xall, _all));
      var and = _curry2(function and2(a2, b2) {
        return _hasMethod("and", a2) ? a2.and(b2) : a2 && b2;
      });
      var any3 = _curry2(_dispatchable("any", _xany, _any));
      var append3 = _curry2(_append);
      var assocPath = _curry3(_assocPath);
      var binary = _curry1(function binary2(fn2) {
        return nAry(2, fn2);
      });
      var clone = _curry1(function clone2(value) {
        return _baseCopy(value, [], []);
      });
      var compose2 = _createComposer(_compose);
      var composeL = function() {
        var fn2 = arguments[arguments.length - 1];
        var idx = arguments.length - 2;
        while (idx >= 0) {
          fn2 = _composeL(arguments[idx], fn2);
          idx -= 1;
        }
        return fn2;
      };
      var composeP = _createComposer(_composeP);
      var concat2 = _curry2(function(set1, set2) {
        if (_isArray(set2)) {
          return _concat(set1, set2);
        } else if (_hasMethod("concat", set1)) {
          return set1.concat(set2);
        } else {
          throw new TypeError("can't concat " + typeof set1);
        }
      });
      var curryN = _curry2(function curryN2(length4, fn2) {
        return arity(length4, _curryN(length4, [], fn2));
      });
      var dissocPath = _curry2(_dissocPath);
      var dropWhile = _curry2(_dispatchable("dropWhile", _xdropWhile, function dropWhile2(pred, list2) {
        var idx = 0, len = list2.length;
        while (idx < len && pred(list2[idx])) {
          idx += 1;
        }
        return _slice(list2, idx);
      }));
      var empty = _curry1(function empty2(x) {
        return _hasMethod("empty", x) ? x.empty() : [];
      });
      var equals2 = _curry2(function equals3(a2, b2) {
        return _hasMethod("equals", a2) ? a2.equals(b2) : _hasMethod("equals", b2) ? b2.equals(a2) : _equals(a2, b2, [], []);
      });
      var filter6 = _curry2(_dispatchable("filter", _xfilter, _filter));
      var find2 = _curry2(_dispatchable("find", _xfind, function find3(fn2, list2) {
        var idx = 0;
        var len = list2.length;
        while (idx < len) {
          if (fn2(list2[idx])) {
            return list2[idx];
          }
          idx += 1;
        }
      }));
      var findIndex2 = _curry2(_dispatchable("findIndex", _xfindIndex, function findIndex3(fn2, list2) {
        var idx = 0;
        var len = list2.length;
        while (idx < len) {
          if (fn2(list2[idx])) {
            return idx;
          }
          idx += 1;
        }
        return -1;
      }));
      var findLast = _curry2(_dispatchable("findLast", _xfindLast, function findLast2(fn2, list2) {
        var idx = list2.length - 1;
        while (idx >= 0) {
          if (fn2(list2[idx])) {
            return list2[idx];
          }
          idx -= 1;
        }
      }));
      var findLastIndex = _curry2(_dispatchable("findLastIndex", _xfindLastIndex, function findLastIndex2(fn2, list2) {
        var idx = list2.length - 1;
        while (idx >= 0) {
          if (fn2(list2[idx])) {
            return idx;
          }
          idx -= 1;
        }
        return -1;
      }));
      var flatten2 = _curry1(_makeFlat(true));
      var forEach2 = _curry2(function forEach3(fn2, list2) {
        return _hasMethod("forEach", list2) ? list2.forEach(fn2) : _forEach(fn2, list2);
      });
      var functions = _curry1(_functionsWith(keys3));
      var functionsIn = _curry1(_functionsWith(keysIn));
      var groupBy = _curry2(_dispatchable("groupBy", _xgroupBy, function groupBy2(fn2, list2) {
        return _reduce(function(acc, elt) {
          var key2 = fn2(elt);
          acc[key2] = _append(elt, acc[key2] || (acc[key2] = []));
          return acc;
        }, {}, list2);
      }));
      var head2 = nth(0);
      var ifElse2 = _curry3(function ifElse3(condition, onTrue, onFalse) {
        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
          return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
        });
      });
      var insert3 = _curry3(function insert4(idx, elt, list2) {
        idx = idx < list2.length && idx >= 0 ? idx : list2.length;
        return _concat(_append(elt, _slice(list2, 0, idx)), _slice(list2, idx));
      });
      var intersectionWith = _curry3(function intersectionWith2(pred, list1, list2) {
        var results = [], idx = 0;
        while (idx < list1.length) {
          if (_containsWith(pred, list1[idx], list2)) {
            results[results.length] = list1[idx];
          }
          idx += 1;
        }
        return uniqWith(pred, results);
      });
      var intersperse = _curry2(_checkForMethod("intersperse", function intersperse2(separator, list2) {
        var out = [];
        var idx = 0;
        var length4 = list2.length;
        while (idx < length4) {
          if (idx === length4 - 1) {
            out.push(list2[idx]);
          } else {
            out.push(list2[idx], separator);
          }
          idx += 1;
        }
        return out;
      }));
      var invert = _curry1(function invert2(obj) {
        var props2 = keys3(obj);
        var len = props2.length;
        var idx = 0;
        var out = {};
        while (idx < len) {
          var key2 = props2[idx];
          var val = obj[key2];
          var list2 = _has(val, out) ? out[val] : out[val] = [];
          list2[list2.length] = key2;
          idx += 1;
        }
        return out;
      });
      var invertObj = _curry1(function invertObj2(obj) {
        var props2 = keys3(obj);
        var len = props2.length;
        var idx = 0;
        var out = {};
        while (idx < len) {
          var key2 = props2[idx];
          out[obj[key2]] = key2;
          idx += 1;
        }
        return out;
      });
      var invoker = _curry2(function invoker2(arity2, method) {
        return curryN(arity2 + 1, function() {
          var target = arguments[arity2];
          return target[method].apply(target, _slice(arguments, 0, arity2));
        });
      });
      var join = invoker(1, "join");
      var last2 = nth(-1);
      var lensIndex = _curry1(function lensIndex2(n3) {
        return lens(nth(n3), update(n3));
      });
      var lensProp = _curry1(function lensProp2(k) {
        return lens(prop2(k), assoc(k));
      });
      var map2 = _curry2(_dispatchable("map", _xmap, _map));
      var mapObj = _curry2(function mapObject(fn2, obj) {
        return _reduce(function(acc, key2) {
          acc[key2] = fn2(obj[key2]);
          return acc;
        }, {}, keys3(obj));
      });
      var mapObjIndexed = _curry2(function mapObjectIndexed(fn2, obj) {
        return _reduce(function(acc, key2) {
          acc[key2] = fn2(obj[key2], key2, obj);
          return acc;
        }, {}, keys3(obj));
      });
      var match4 = invoker(1, "match");
      var max3 = _createMaxMin(_gt, -Infinity);
      var merge4 = _curry2(function merge5(a2, b2) {
        return _extend(_extend({}, a2), b2);
      });
      var min3 = _createMaxMin(_lt, Infinity);
      var none = _curry2(_complement(_dispatchable("any", _xany, _any)));
      var or = _curry2(function or2(a2, b2) {
        return _hasMethod("or", a2) ? a2.or(b2) : a2 || b2;
      });
      var partition = _curry2(function partition2(pred, list2) {
        return _reduce(function(acc, elt) {
          var xs = acc[pred(elt) ? 0 : 1];
          xs[xs.length] = elt;
          return acc;
        }, [
          [],
          []
        ], list2);
      });
      var pathEq = _curry3(function pathEq2(path3, val, obj) {
        return equals2(_path(path3, obj), val);
      });
      var pipe7 = function pipe8() {
        return compose2.apply(this, reverse(arguments));
      };
      var pipeL = compose2(apply(composeL), unapply(reverse));
      var pipeP = function pipeP2() {
        return composeP.apply(this, reverse(arguments));
      };
      var propEq2 = _curry3(function propEq3(name, val, obj) {
        return equals2(obj[name], val);
      });
      var reduce = _curry3(_reduce);
      var reject = _curry2(function reject2(fn2, list2) {
        return filter6(_complement(fn2), list2);
      });
      var repeat2 = _curry2(function repeat3(value, n3) {
        return times2(always2(value), n3);
      });
      var slice2 = _curry3(_checkForMethod("slice", function slice3(fromIndex, toIndex, xs) {
        return Array.prototype.slice.call(xs, fromIndex, toIndex);
      }));
      var split6 = invoker(1, "split");
      var substring = slice2;
      var substringFrom = substring(__, Infinity);
      var substringTo = substring(0);
      var sum = reduce(_add, 0);
      var tail = _checkForMethod("tail", function(list2) {
        return _slice(list2, 1);
      });
      var take2 = _curry2(_dispatchable("take", _xtake, function take3(n3, xs) {
        return slice2(0, n3 < 0 ? Infinity : n3, xs);
      }));
      var takeWhile = _curry2(_dispatchable("takeWhile", _xtakeWhile, function takeWhile2(fn2, list2) {
        var idx = 0, len = list2.length;
        while (idx < len && fn2(list2[idx])) {
          idx += 1;
        }
        return _slice(list2, 0, idx);
      }));
      var toLower2 = invoker(0, "toLowerCase");
      var toUpper = invoker(0, "toUpperCase");
      var transduce = curryN(4, function(xf, fn2, acc, list2) {
        return _reduce(xf(typeof fn2 === "function" ? _xwrap(fn2) : fn2), acc, list2);
      });
      var uncurryN = _curry2(function uncurryN2(depth, fn2) {
        return curryN(depth, function() {
          var currentDepth = 1;
          var value = fn2;
          var idx = 0;
          var endIdx;
          while (currentDepth <= depth && typeof value === "function") {
            endIdx = currentDepth === depth ? arguments.length : idx + value.length;
            value = value.apply(this, _slice(arguments, idx, endIdx));
            currentDepth += 1;
            idx = endIdx;
          }
          return value;
        });
      });
      var unionWith = _curry3(function unionWith2(pred, list1, list2) {
        return uniqWith(pred, _concat(list1, list2));
      });
      var uniq = uniqWith(equals2);
      var unnest = _curry1(_makeFlat(false));
      var whereEq = _curry2(function whereEq2(spec, testObj) {
        return where(mapObj(equals2, spec), testObj);
      });
      var wrap6 = _curry2(function wrap7(fn2, wrapper) {
        return curryN(fn2.length, function() {
          return wrapper.apply(this, _concat([fn2], arguments));
        });
      });
      var _chain = _curry2(function _chain2(f, list2) {
        return unnest(map2(f, list2));
      });
      var _flatCat = /* @__PURE__ */ function() {
        var preservingReduced = function(xf) {
          return {
            "@@transducer/init": _xfBase.init,
            "@@transducer/result": function(result) {
              return xf["@@transducer/result"](result);
            },
            "@@transducer/step": function(result, input) {
              var ret = xf["@@transducer/step"](result, input);
              return ret["@@transducer/reduced"] ? _forceReduced(ret) : ret;
            }
          };
        };
        return function _xcat(xf) {
          var rxf = preservingReduced(xf);
          return {
            "@@transducer/init": _xfBase.init,
            "@@transducer/result": function(result) {
              return rxf["@@transducer/result"](result);
            },
            "@@transducer/step": function(result, input) {
              return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
            }
          };
        };
      }();
      var _indexOf = function _indexOf2(list2, item, from2) {
        var idx = 0, len = list2.length;
        if (typeof from2 === "number") {
          idx = from2 < 0 ? Math.max(0, len + from2) : from2;
        }
        while (idx < len) {
          if (equals2(list2[idx], item)) {
            return idx;
          }
          idx += 1;
        }
        return -1;
      };
      var _lastIndexOf = function _lastIndexOf2(list2, item, from2) {
        var idx;
        if (typeof from2 === "number") {
          idx = from2 < 0 ? list2.length + from2 : Math.min(list2.length - 1, from2);
        } else {
          idx = list2.length - 1;
        }
        while (idx >= 0) {
          if (equals2(list2[idx], item)) {
            return idx;
          }
          idx -= 1;
        }
        return -1;
      };
      var _pluck = function _pluck2(p, list2) {
        return map2(prop2(p), list2);
      };
      var _predicateWrap = function _predicateWrap2(predPicker) {
        return function(preds) {
          var predIterator = function() {
            var args = arguments;
            return predPicker(function(predicate) {
              return predicate.apply(null, args);
            }, preds);
          };
          return arguments.length > 1 ? (
            // Call function immediately if given arguments
            predIterator.apply(null, _slice(arguments, 1))
          ) : (
            // Return a function which will call the predicates with the provided arguments
            arity(max3(_pluck("length", preds)), predIterator)
          );
        };
      };
      var _stepCat = /* @__PURE__ */ function() {
        var _stepCatArray = {
          "@@transducer/init": Array,
          "@@transducer/step": function(xs, x) {
            return _concat(xs, [x]);
          },
          "@@transducer/result": _identity
        };
        var _stepCatString = {
          "@@transducer/init": String,
          "@@transducer/step": _add,
          "@@transducer/result": _identity
        };
        var _stepCatObject = {
          "@@transducer/init": Object,
          "@@transducer/step": function(result, input) {
            return merge4(result, isArrayLike(input) ? _createMapEntry(input[0], input[1]) : input);
          },
          "@@transducer/result": _identity
        };
        return function _stepCat2(obj) {
          if (_isTransformer(obj)) {
            return obj;
          }
          if (isArrayLike(obj)) {
            return _stepCatArray;
          }
          if (typeof obj === "string") {
            return _stepCatString;
          }
          if (typeof obj === "object") {
            return _stepCatObject;
          }
          throw new Error("Cannot create transformer for " + obj);
        };
      }();
      var _toString = function _toString2(x, seen) {
        var recur = function recur2(y) {
          var xs = seen.concat([x]);
          return _indexOf(xs, y) >= 0 ? "<Circular>" : _toString2(y, xs);
        };
        switch (Object.prototype.toString.call(x)) {
          case "[object Arguments]":
            return "(function() { return arguments; }(" + _map(recur, x).join(", ") + "))";
          case "[object Array]":
            return "[" + _map(recur, x).join(", ") + "]";
          case "[object Boolean]":
            return typeof x === "object" ? "new Boolean(" + recur(x.valueOf()) + ")" : x.toString();
          case "[object Date]":
            return "new Date(" + _quote(_toISOString(x)) + ")";
          case "[object Null]":
            return "null";
          case "[object Number]":
            return typeof x === "object" ? "new Number(" + recur(x.valueOf()) + ")" : 1 / x === -Infinity ? "-0" : x.toString(10);
          case "[object String]":
            return typeof x === "object" ? "new String(" + recur(x.valueOf()) + ")" : _quote(x);
          case "[object Undefined]":
            return "undefined";
          default:
            return typeof x.constructor === "function" && x.constructor.name !== "Object" && typeof x.toString === "function" && x.toString() !== "[object Object]" ? x.toString() : (
              // Function, RegExp, user-defined types
              "{" + _map(function(k) {
                return _quote(k) + ": " + recur(x[k]);
              }, keys3(x).sort()).join(", ") + "}"
            );
        }
      };
      var _xchain = _curry2(function _xchain2(f, xf) {
        return map2(f, _flatCat(xf));
      });
      var addIndex = _curry1(function(fn2) {
        return curryN(fn2.length, function() {
          var idx = 0;
          var origFn = arguments[0];
          var list2 = arguments[arguments.length - 1];
          var indexedFn = function() {
            var result = origFn.apply(this, _concat(arguments, [
              idx,
              list2
            ]));
            idx += 1;
            return result;
          };
          return fn2.apply(this, _prepend(indexedFn, _slice(arguments, 1)));
        });
      });
      var ap = _curry2(function ap2(fns, vs) {
        return _hasMethod("ap", fns) ? fns.ap(vs) : _reduce(function(acc, fn2) {
          return _concat(acc, map2(fn2, vs));
        }, [], fns);
      });
      var chain = _curry2(_dispatchable("chain", _xchain, _chain));
      var commuteMap = _curry3(function commuteMap2(fn2, of2, list2) {
        function consF(acc, ftor) {
          return ap(map2(append3, fn2(ftor)), acc);
        }
        return _reduce(consF, of2([]), list2);
      });
      var curry = _curry1(function curry2(fn2) {
        return curryN(fn2.length, fn2);
      });
      var drop = _curry2(_dispatchable("drop", _xdrop, function drop2(n3, xs) {
        return slice2(Math.max(0, n3), Infinity, xs);
      }));
      var dropRepeatsWith = _curry2(_dispatchable("dropRepeatsWith", _xdropRepeatsWith, function dropRepeatsWith2(pred, list2) {
        var result = [];
        var idx = 1;
        var len = list2.length;
        if (len !== 0) {
          result[0] = list2[0];
          while (idx < len) {
            if (!pred(last2(result), list2[idx])) {
              result[result.length] = list2[idx];
            }
            idx += 1;
          }
        }
        return result;
      }));
      var eqDeep = equals2;
      var eqProps = _curry3(function eqProps2(prop3, obj1, obj2) {
        return equals2(obj1[prop3], obj2[prop3]);
      });
      var flip3 = _curry1(function flip4(fn2) {
        return curry(function(a2, b2) {
          var args = _slice(arguments);
          args[0] = b2;
          args[1] = a2;
          return fn2.apply(this, args);
        });
      });
      var indexOf2 = _curry2(function indexOf3(target, xs) {
        return _hasMethod("indexOf", xs) ? xs.indexOf(target) : _indexOf(xs, target);
      });
      var init2 = slice2(0, -1);
      var into = _curry3(function into2(acc, xf, list2) {
        return _isTransformer(acc) ? _reduce(xf(acc), acc["@@transducer/init"](), list2) : _reduce(xf(_stepCat(acc)), acc, list2);
      });
      var invoke = curry(function invoke2(methodName, args, obj) {
        return obj[methodName].apply(obj, args);
      });
      var isSet = _curry1(function isSet2(list2) {
        var len = list2.length;
        var idx = 0;
        while (idx < len) {
          if (_indexOf(list2, list2[idx], idx + 1) >= 0) {
            return false;
          }
          idx += 1;
        }
        return true;
      });
      var lastIndexOf = _curry2(function lastIndexOf2(target, xs) {
        return _hasMethod("lastIndexOf", xs) ? xs.lastIndexOf(target) : _lastIndexOf(xs, target);
      });
      var liftN = _curry2(function liftN2(arity2, fn2) {
        var lifted = curryN(arity2, fn2);
        return curryN(arity2, function() {
          return _reduce(ap, map2(lifted, arguments[0]), _slice(arguments, 1));
        });
      });
      var mean = _curry1(function mean2(list2) {
        return sum(list2) / list2.length;
      });
      var median = _curry1(function median2(list2) {
        var len = list2.length;
        if (len === 0) {
          return NaN;
        }
        var width = 2 - len % 2;
        var idx = (len - width) / 2;
        return mean(_slice(list2).sort(function(a2, b2) {
          return a2 < b2 ? -1 : a2 > b2 ? 1 : 0;
        }).slice(idx, idx + width));
      });
      var mergeAll2 = _curry1(function mergeAll3(list2) {
        return reduce(merge4, {}, list2);
      });
      var omit9 = _curry2(function omit10(names2, obj) {
        var result = {};
        for (var prop3 in obj) {
          if (_indexOf(names2, prop3) < 0) {
            result[prop3] = obj[prop3];
          }
        }
        return result;
      });
      var partial = curry(_createPartialApplicator(_concat));
      var partialRight = curry(_createPartialApplicator(flip3(_concat)));
      var pluck = _curry2(_pluck);
      var product = reduce(_multiply, 1);
      var toString = _curry1(function toString2(val) {
        return _toString(val, []);
      });
      var union = _curry2(compose2(uniq, _concat));
      var useWith = curry(function useWith2(fn2) {
        var transformers = _slice(arguments, 1);
        var tlen = transformers.length;
        return curry(arity(tlen, function() {
          var args = [], idx = 0;
          while (idx < tlen) {
            args[idx] = transformers[idx](arguments[idx]);
            idx += 1;
          }
          return fn2.apply(this, args.concat(_slice(arguments, tlen)));
        }));
      });
      var _contains = function _contains2(a2, list2) {
        return _indexOf(list2, a2) >= 0;
      };
      var allPass = curry(_predicateWrap(_all));
      var anyPass = curry(_predicateWrap(_any));
      var call = curry(function call2(fn2) {
        return fn2.apply(this, _slice(arguments, 1));
      });
      var commute = commuteMap(map2(identity3));
      var constructN = _curry2(function constructN2(n3, Fn) {
        if (n3 > 10) {
          throw new Error("Constructor with greater than ten arguments");
        }
        if (n3 === 0) {
          return function() {
            return new Fn();
          };
        }
        return curry(nAry(n3, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
          switch (arguments.length) {
            case 1:
              return new Fn($0);
            case 2:
              return new Fn($0, $1);
            case 3:
              return new Fn($0, $1, $2);
            case 4:
              return new Fn($0, $1, $2, $3);
            case 5:
              return new Fn($0, $1, $2, $3, $4);
            case 6:
              return new Fn($0, $1, $2, $3, $4, $5);
            case 7:
              return new Fn($0, $1, $2, $3, $4, $5, $6);
            case 8:
              return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
            case 9:
              return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
            case 10:
              return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
          }
        }));
      });
      var contains7 = _curry2(_contains);
      var converge = curryN(3, function(after) {
        var fns = _slice(arguments, 1);
        return curryN(max3(pluck("length", fns)), function() {
          var args = arguments;
          var context2 = this;
          return after.apply(context2, _map(function(fn2) {
            return fn2.apply(context2, args);
          }, fns));
        });
      });
      var difference2 = _curry2(function difference3(first, second) {
        var out = [];
        var idx = 0;
        var firstLen = first.length;
        while (idx < firstLen) {
          if (!_contains(first[idx], second) && !_contains(first[idx], out)) {
            out[out.length] = first[idx];
          }
          idx += 1;
        }
        return out;
      });
      var dropRepeats = _curry1(_dispatchable("dropRepeats", _xdropRepeatsWith(equals2), dropRepeatsWith(equals2)));
      var intersection2 = _curry2(function intersection3(list1, list2) {
        return uniq(_filter(flip3(_contains)(list1), list2));
      });
      var lift = _curry1(function lift2(fn2) {
        return liftN(fn2.length, fn2);
      });
      var memoize7 = _curry1(function memoize8(fn2) {
        var cache2 = {};
        return function() {
          var key2 = toString(arguments);
          if (!_has(key2, cache2)) {
            cache2[key2] = fn2.apply(this, arguments);
          }
          return cache2[key2];
        };
      });
      var project = useWith(_map, pickAll, identity3);
      var construct = _curry1(function construct2(Fn) {
        return constructN(Fn.length, Fn);
      });
      var R = {
        F,
        T: T2,
        __,
        add: add5,
        addIndex,
        adjust,
        all: all2,
        allPass,
        always: always2,
        and,
        any: any3,
        anyPass,
        ap,
        aperture,
        append: append3,
        apply,
        arity,
        assoc,
        assocPath,
        binary,
        bind,
        both,
        call,
        chain,
        clone,
        commute,
        commuteMap,
        comparator,
        complement,
        compose: compose2,
        composeL,
        composeP,
        concat: concat2,
        cond,
        construct,
        constructN,
        contains: contains7,
        containsWith,
        converge,
        countBy,
        createMapEntry,
        curry,
        curryN,
        dec: dec2,
        defaultTo: defaultTo2,
        difference: difference2,
        differenceWith,
        dissoc,
        dissocPath,
        divide: divide3,
        drop,
        dropRepeats,
        dropRepeatsWith,
        dropWhile,
        either,
        empty,
        eq,
        eqDeep,
        eqProps,
        equals: equals2,
        evolve,
        filter: filter6,
        filterIndexed,
        find: find2,
        findIndex: findIndex2,
        findLast,
        findLastIndex,
        flatten: flatten2,
        flip: flip3,
        forEach: forEach2,
        forEachIndexed,
        fromPairs,
        functions,
        functionsIn,
        groupBy,
        gt: gt2,
        gte,
        has: has2,
        hasIn,
        head: head2,
        identical,
        identity: identity3,
        ifElse: ifElse2,
        inc: inc2,
        indexOf: indexOf2,
        init: init2,
        insert: insert3,
        insertAll,
        intersection: intersection2,
        intersectionWith,
        intersperse,
        into,
        invert,
        invertObj,
        invoke,
        invoker,
        is: is2,
        isArrayLike,
        isEmpty: isEmpty3,
        isNil: isNil3,
        isSet,
        join,
        keys: keys3,
        keysIn,
        last: last2,
        lastIndexOf,
        length: length3,
        lens,
        lensIndex,
        lensOn,
        lensProp,
        lift,
        liftN,
        lt,
        lte,
        map: map2,
        mapAccum,
        mapAccumRight,
        mapIndexed,
        mapObj,
        mapObjIndexed,
        match: match4,
        mathMod,
        max: max3,
        maxBy,
        mean,
        median,
        memoize: memoize7,
        merge: merge4,
        mergeAll: mergeAll2,
        min: min3,
        minBy,
        modulo,
        multiply: multiply3,
        nAry,
        negate: negate3,
        none,
        not: not2,
        nth,
        nthArg,
        nthChar,
        nthCharCode,
        of,
        omit: omit9,
        once: once2,
        or,
        partial,
        partialRight,
        partition,
        path: path2,
        pathEq,
        pick: pick5,
        pickAll,
        pickBy,
        pipe: pipe7,
        pipeL,
        pipeP,
        pluck,
        prepend,
        product,
        project,
        prop: prop2,
        propEq: propEq2,
        propOr,
        props,
        range: range2,
        reduce,
        reduceIndexed,
        reduceRight,
        reduceRightIndexed,
        reduced,
        reject,
        rejectIndexed,
        remove: remove2,
        repeat: repeat2,
        replace: replace3,
        reverse,
        scan,
        slice: slice2,
        sort,
        sortBy,
        split: split6,
        strIndexOf,
        strLastIndexOf,
        substring,
        substringFrom,
        substringTo,
        subtract: subtract6,
        sum,
        tail,
        take: take2,
        takeWhile,
        tap,
        test: test4,
        times: times2,
        toLower: toLower2,
        toPairs,
        toPairsIn,
        toString,
        toUpper,
        transduce,
        trim: trim3,
        type,
        unapply,
        unary,
        uncurryN,
        unfold,
        union,
        unionWith,
        uniq,
        uniqWith,
        unnest,
        update,
        useWith,
        values: values2,
        valuesIn,
        where,
        whereEq,
        wrap: wrap6,
        xprod,
        zip,
        zipObj,
        zipWith
      };
      if (typeof exports === "object") {
        module.exports = R;
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return R;
        });
      } else {
        this.R = R;
      }
    }).call(exports);
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports, module) {
    module.exports = Array.isArray || function(arr) {
      return Object.prototype.toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/@northlight/ui/node_modules/path-to-regexp/index.js
var require_path_to_regexp = __commonJS({
  "node_modules/@northlight/ui/node_modules/path-to-regexp/index.js"(exports, module) {
    var isarray = require_isarray();
    module.exports = pathToRegexp2;
    module.exports.parse = parse6;
    module.exports.compile = compile2;
    module.exports.tokensToFunction = tokensToFunction;
    module.exports.tokensToRegExp = tokensToRegExp;
    var PATH_REGEXP = new RegExp([
      // Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      "(\\\\.)",
      // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
      // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
      // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
      "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"
    ].join("|"), "g");
    function parse6(str, options2) {
      var tokens2 = [];
      var key2 = 0;
      var index5 = 0;
      var path2 = "";
      var defaultDelimiter = options2 && options2.delimiter || "/";
      var res;
      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m3 = res[0];
        var escaped = res[1];
        var offset3 = res.index;
        path2 += str.slice(index5, offset3);
        index5 = offset3 + m3.length;
        if (escaped) {
          path2 += escaped[1];
          continue;
        }
        var next2 = str[index5];
        var prefix4 = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7];
        if (path2) {
          tokens2.push(path2);
          path2 = "";
        }
        var partial = prefix4 != null && next2 != null && next2 !== prefix4;
        var repeat2 = modifier === "+" || modifier === "*";
        var optional = modifier === "?" || modifier === "*";
        var delimiter2 = res[2] || defaultDelimiter;
        var pattern = capture || group;
        tokens2.push({
          name: name || key2++,
          prefix: prefix4 || "",
          delimiter: delimiter2,
          optional,
          repeat: repeat2,
          partial,
          asterisk: !!asterisk,
          pattern: pattern ? escapeGroup(pattern) : asterisk ? ".*" : "[^" + escapeString(delimiter2) + "]+?"
        });
      }
      if (index5 < str.length) {
        path2 += str.substr(index5);
      }
      if (path2) {
        tokens2.push(path2);
      }
      return tokens2;
    }
    function compile2(str, options2) {
      return tokensToFunction(parse6(str, options2), options2);
    }
    function encodeURIComponentPretty(str) {
      return encodeURI(str).replace(/[\/?#]/g, function(c2) {
        return "%" + c2.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeAsterisk(str) {
      return encodeURI(str).replace(/[?#]/g, function(c2) {
        return "%" + c2.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function tokensToFunction(tokens2, options2) {
      var matches = new Array(tokens2.length);
      for (var i2 = 0; i2 < tokens2.length; i2++) {
        if (typeof tokens2[i2] === "object") {
          matches[i2] = new RegExp("^(?:" + tokens2[i2].pattern + ")$", flags(options2));
        }
      }
      return function(obj, opts) {
        var path2 = "";
        var data = obj || {};
        var options3 = opts || {};
        var encode = options3.pretty ? encodeURIComponentPretty : encodeURIComponent;
        for (var i3 = 0; i3 < tokens2.length; i3++) {
          var token2 = tokens2[i3];
          if (typeof token2 === "string") {
            path2 += token2;
            continue;
          }
          var value = data[token2.name];
          var segment;
          if (value == null) {
            if (token2.optional) {
              if (token2.partial) {
                path2 += token2.prefix;
              }
              continue;
            } else {
              throw new TypeError('Expected "' + token2.name + '" to be defined');
            }
          }
          if (isarray(value)) {
            if (!token2.repeat) {
              throw new TypeError('Expected "' + token2.name + '" to not repeat, but received `' + JSON.stringify(value) + "`");
            }
            if (value.length === 0) {
              if (token2.optional) {
                continue;
              } else {
                throw new TypeError('Expected "' + token2.name + '" to not be empty');
              }
            }
            for (var j = 0; j < value.length; j++) {
              segment = encode(value[j]);
              if (!matches[i3].test(segment)) {
                throw new TypeError('Expected all "' + token2.name + '" to match "' + token2.pattern + '", but received `' + JSON.stringify(segment) + "`");
              }
              path2 += (j === 0 ? token2.prefix : token2.delimiter) + segment;
            }
            continue;
          }
          segment = token2.asterisk ? encodeAsterisk(value) : encode(value);
          if (!matches[i3].test(segment)) {
            throw new TypeError('Expected "' + token2.name + '" to match "' + token2.pattern + '", but received "' + segment + '"');
          }
          path2 += token2.prefix + segment;
        }
        return path2;
      };
    }
    function escapeString(str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
    }
    function escapeGroup(group) {
      return group.replace(/([=!:$\/()])/g, "\\$1");
    }
    function attachKeys(re, keys3) {
      re.keys = keys3;
      return re;
    }
    function flags(options2) {
      return options2 && options2.sensitive ? "" : "i";
    }
    function regexpToRegexp(path2, keys3) {
      var groups = path2.source.match(/\((?!\?)/g);
      if (groups) {
        for (var i2 = 0; i2 < groups.length; i2++) {
          keys3.push({
            name: i2,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            asterisk: false,
            pattern: null
          });
        }
      }
      return attachKeys(path2, keys3);
    }
    function arrayToRegexp(path2, keys3, options2) {
      var parts = [];
      for (var i2 = 0; i2 < path2.length; i2++) {
        parts.push(pathToRegexp2(path2[i2], keys3, options2).source);
      }
      var regexp = new RegExp("(?:" + parts.join("|") + ")", flags(options2));
      return attachKeys(regexp, keys3);
    }
    function stringToRegexp(path2, keys3, options2) {
      return tokensToRegExp(parse6(path2, options2), keys3, options2);
    }
    function tokensToRegExp(tokens2, keys3, options2) {
      if (!isarray(keys3)) {
        options2 = /** @type {!Object} */
        keys3 || options2;
        keys3 = [];
      }
      options2 = options2 || {};
      var strict = options2.strict;
      var end2 = options2.end !== false;
      var route = "";
      for (var i2 = 0; i2 < tokens2.length; i2++) {
        var token2 = tokens2[i2];
        if (typeof token2 === "string") {
          route += escapeString(token2);
        } else {
          var prefix4 = escapeString(token2.prefix);
          var capture = "(?:" + token2.pattern + ")";
          keys3.push(token2);
          if (token2.repeat) {
            capture += "(?:" + prefix4 + capture + ")*";
          }
          if (token2.optional) {
            if (!token2.partial) {
              capture = "(?:" + prefix4 + "(" + capture + "))?";
            } else {
              capture = prefix4 + "(" + capture + ")?";
            }
          } else {
            capture = prefix4 + "(" + capture + ")";
          }
          route += capture;
        }
      }
      var delimiter2 = escapeString(options2.delimiter || "/");
      var endsWithDelimiter = route.slice(-delimiter2.length) === delimiter2;
      if (!strict) {
        route = (endsWithDelimiter ? route.slice(0, -delimiter2.length) : route) + "(?:" + delimiter2 + "(?=$))?";
      }
      if (end2) {
        route += "$";
      } else {
        route += strict && endsWithDelimiter ? "" : "(?=" + delimiter2 + "|$)";
      }
      return attachKeys(new RegExp("^" + route, flags(options2)), keys3);
    }
    function pathToRegexp2(path2, keys3, options2) {
      if (!isarray(keys3)) {
        options2 = /** @type {!Object} */
        keys3 || options2;
        keys3 = [];
      }
      options2 = options2 || {};
      if (path2 instanceof RegExp) {
        return regexpToRegexp(
          path2,
          /** @type {!Array} */
          keys3
        );
      }
      if (isarray(path2)) {
        return arrayToRegexp(
          /** @type {!Array} */
          path2,
          /** @type {!Array} */
          keys3,
          options2
        );
      }
      return stringToRegexp(
        /** @type {string} */
        path2,
        /** @type {!Array} */
        keys3,
        options2
      );
    }
  }
});

// node_modules/@northlight/ui/node_modules/@emotion/memoize/dist/memoize.browser.esm.js
function memoize6(fn2) {
  var cache2 = {};
  return function(arg) {
    if (cache2[arg] === void 0)
      cache2[arg] = fn2(arg);
    return cache2[arg];
  };
}
var memoize_browser_esm_default2;
var init_memoize_browser_esm2 = __esm({
  "node_modules/@northlight/ui/node_modules/@emotion/memoize/dist/memoize.browser.esm.js"() {
    memoize_browser_esm_default2 = memoize6;
  }
});

// node_modules/@northlight/ui/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
var is_prop_valid_browser_esm_exports2 = {};
__export(is_prop_valid_browser_esm_exports2, {
  default: () => is_prop_valid_browser_esm_default2
});
var reactPropsRegex3, index4, is_prop_valid_browser_esm_default2;
var init_is_prop_valid_browser_esm2 = __esm({
  "node_modules/@northlight/ui/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js"() {
    init_memoize_browser_esm2();
    reactPropsRegex3 = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    index4 = memoize_browser_esm_default2(
      function(prop2) {
        return reactPropsRegex3.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    is_prop_valid_browser_esm_default2 = index4;
  }
});

// node_modules/react-avatar-editor/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-avatar-editor/dist/index.js"(exports, module) {
    !function(e, t3) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t3(require_prop_types(), require_react()) : "function" == typeof define && define.amd ? define(["prop-types", "react"], t3) : (e = "undefined" != typeof globalThis ? globalThis : e || self).AvatarEditor = t3(e.PropTypes, e.React);
    }(exports, function(e, t3) {
      "use strict";
      function o2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var n3 = o2(e), i2 = o2(t3);
      function r3(e2, t4) {
        for (var o3 = 0; o3 < t4.length; o3++) {
          var n4 = t4[o3];
          n4.enumerable = n4.enumerable || false, n4.configurable = true, "value" in n4 && (n4.writable = true), Object.defineProperty(e2, n4.key, n4);
        }
      }
      function s(e2, t4, o3) {
        return t4 in e2 ? Object.defineProperty(e2, t4, { value: o3, enumerable: true, configurable: true, writable: true }) : e2[t4] = o3, e2;
      }
      function u() {
        return (u = Object.assign || function(e2) {
          for (var t4 = 1; t4 < arguments.length; t4++) {
            var o3 = arguments[t4];
            for (var n4 in o3)
              Object.prototype.hasOwnProperty.call(o3, n4) && (e2[n4] = o3[n4]);
          }
          return e2;
        }).apply(this, arguments);
      }
      function a2(t4, e2) {
        var o3, n4 = Object.keys(t4);
        return Object.getOwnPropertySymbols && (o3 = Object.getOwnPropertySymbols(t4), e2 && (o3 = o3.filter(function(e3) {
          return Object.getOwnPropertyDescriptor(t4, e3).enumerable;
        })), n4.push.apply(n4, o3)), n4;
      }
      function y(t4) {
        for (var e2 = 1; e2 < arguments.length; e2++) {
          var o3 = null != arguments[e2] ? arguments[e2] : {};
          e2 % 2 ? a2(Object(o3), true).forEach(function(e3) {
            s(t4, e3, o3[e3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t4, Object.getOwnPropertyDescriptors(o3)) : a2(Object(o3)).forEach(function(e3) {
            Object.defineProperty(t4, e3, Object.getOwnPropertyDescriptor(o3, e3));
          });
        }
        return t4;
      }
      function h(e2) {
        return (h = Object.setPrototypeOf ? Object.getPrototypeOf : function(e3) {
          return e3.__proto__ || Object.getPrototypeOf(e3);
        })(e2);
      }
      function c2(e2, t4) {
        return (c2 = Object.setPrototypeOf || function(e3, t5) {
          return e3.__proto__ = t5, e3;
        })(e2, t4);
      }
      function l(e2, t4) {
        if (null == e2)
          return {};
        var o3, n4 = function(e3, t5) {
          if (null == e3)
            return {};
          for (var o4, n5 = {}, a4 = Object.keys(e3), r5 = 0; r5 < a4.length; r5++)
            o4 = a4[r5], 0 <= t5.indexOf(o4) || (n5[o4] = e3[o4]);
          return n5;
        }(e2, t4);
        if (Object.getOwnPropertySymbols)
          for (var a3 = Object.getOwnPropertySymbols(e2), r4 = 0; r4 < a3.length; r4++)
            o3 = a3[r4], 0 <= t4.indexOf(o3) || Object.prototype.propertyIsEnumerable.call(e2, o3) && (n4[o3] = e2[o3]);
        return n4;
      }
      function d(e2) {
        if (void 0 === e2)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e2;
      }
      function p(r4) {
        var i3 = function() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
            })), true;
          } catch (e2) {
            return false;
          }
        }();
        return function() {
          var e2, t4, o3, n4, a3 = h(r4);
          return t4 = i3 ? (e2 = h(this).constructor, Reflect.construct(a3, arguments, e2)) : a3.apply(this, arguments), o3 = this, !(n4 = t4) || "object" != typeof n4 && "function" != typeof n4 ? d(o3) : n4;
        };
      }
      function m3(e2, t4) {
        return function(e3) {
          if (Array.isArray(e3))
            return e3;
        }(e2) || function(e3, t5) {
          if ("undefined" == typeof Symbol || !(Symbol.iterator in Object(e3)))
            return;
          var o3 = [], n4 = true, a3 = false, r4 = void 0;
          try {
            for (var i3, s2 = e3[Symbol.iterator](); !(n4 = (i3 = s2.next()).done) && (o3.push(i3.value), !t5 || o3.length !== t5); n4 = true)
              ;
          } catch (e4) {
            a3 = true, r4 = e4;
          } finally {
            try {
              n4 || null == s2.return || s2.return();
            } finally {
              if (a3)
                throw r4;
            }
          }
          return o3;
        }(e2, t4) || g(e2, t4) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function g(e2, t4) {
        if (e2) {
          if ("string" == typeof e2)
            return f(e2, t4);
          var o3 = Object.prototype.toString.call(e2).slice(8, -1);
          return "Object" === o3 && e2.constructor && (o3 = e2.constructor.name), "Map" === o3 || "Set" === o3 ? Array.from(e2) : "Arguments" === o3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o3) ? f(e2, t4) : void 0;
        }
      }
      function f(e2, t4) {
        (null == t4 || t4 > e2.length) && (t4 = e2.length);
        for (var o3 = 0, n4 = new Array(t4); o3 < t4; o3++)
          n4[o3] = e2[o3];
        return n4;
      }
      function v(a3, r4) {
        return new Promise(function(e2, t4) {
          var o3, n4 = new Image();
          n4.onload = function() {
            return e2(n4);
          }, n4.onerror = t4, false == (null !== (o3 = a3) && !!o3.match(/^\s*data:([a-z]+\/[a-z]+(;[a-z-]+=[a-z-]+)?)?(;base64)?,[a-z0-9!$&',()*+;=\-._~:@/?%\s]*\s*$/i)) && r4 && (n4.crossOrigin = r4), n4.src = a3;
        });
      }
      var b2, w2 = !("undefined" == typeof window || "undefined" == typeof navigator || !("ontouchstart" in window || 0 < navigator.msMaxTouchPoints)), M = "undefined" != typeof File, O = { touch: { react: { down: "onTouchStart", mouseDown: "onMouseDown", drag: "onTouchMove", move: "onTouchMove", mouseMove: "onMouseMove", up: "onTouchEnd", mouseUp: "onMouseUp" }, native: { down: "touchstart", mouseDown: "mousedown", drag: "touchmove", move: "touchmove", mouseMove: "mousemove", up: "touchend", mouseUp: "mouseup" } }, desktop: { react: { down: "onMouseDown", drag: "onDragOver", move: "onMouseMove", up: "onMouseUp" }, native: { down: "mousedown", drag: "dragStart", move: "mousemove", up: "mouseup" } } }, I = w2 ? O.touch : O.desktop, P2 = "undefined" != typeof window && window.devicePixelRatio ? window.devicePixelRatio : 1, C = { x: 0.5, y: 0.5 }, x = function() {
        !function(e3, t5) {
          if ("function" != typeof t5 && null !== t5)
            throw new TypeError("Super expression must either be null or a function");
          e3.prototype = Object.create(t5 && t5.prototype, { constructor: { value: e3, writable: true, configurable: true } }), t5 && c2(e3, t5);
        }(a3, i2["default"].Component);
        var e2, t4, o3, n4 = p(a3);
        function a3(e3) {
          var v2;
          return function(e4, t5) {
            if (!(e4 instanceof t5))
              throw new TypeError("Cannot call a class as a function");
          }(this, a3), s(d(v2 = n4.call(this, e3)), "state", { drag: false, my: null, mx: null, image: C }), s(d(v2), "handleImageReady", function(e4) {
            var t5 = v2.getInitialSize(e4.width, e4.height);
            t5.resource = e4, t5.x = 0.5, t5.y = 0.5, t5.backgroundColor = v2.props.backgroundColor, v2.setState({ drag: false, image: t5 }, v2.props.onImageReady), v2.props.onLoadSuccess(t5);
          }), s(d(v2), "clearImage", function() {
            v2.canvas.getContext("2d").clearRect(0, 0, v2.canvas.width, v2.canvas.height), v2.setState({ image: C });
          }), s(d(v2), "handleMouseDown", function(e4) {
            (e4 = e4 || window.event).preventDefault(), v2.setState({ drag: true, mx: null, my: null });
          }), s(d(v2), "handleMouseUp", function() {
            v2.state.drag && (v2.setState({ drag: false }), v2.props.onMouseUp());
          }), s(d(v2), "handleMouseMove", function(e4) {
            var t5, o4, n5, a4, r4, i3, s2, u2, h2, c3, l2, d2, p2, g2, f2, m4;
            e4 = e4 || window.event, false !== v2.state.drag && (e4.preventDefault(), n5 = { mx: t5 = e4.targetTouches ? e4.targetTouches[0].pageX : e4.clientX, my: o4 = e4.targetTouches ? e4.targetTouches[0].pageY : e4.clientY }, m4 = v2.props.rotate, m4 = (m4 %= 360) < 0 ? m4 + 360 : m4, v2.state.mx && v2.state.my && (a4 = v2.state.mx - t5, r4 = v2.state.my - o4, i3 = v2.state.image.width * v2.props.scale, s2 = v2.state.image.height * v2.props.scale, h2 = (u2 = v2.getCroppingRect()).x, c3 = u2.y, h2 *= i3, c3 *= s2, l2 = function(e5) {
              return e5 * (Math.PI / 180);
            }, d2 = Math.cos(l2(m4)), g2 = c3 + -a4 * (p2 = Math.sin(l2(m4))) + r4 * d2, f2 = { x: (h2 + a4 * d2 + r4 * p2) / i3 + 1 / v2.props.scale * v2.getXScale() / 2, y: g2 / s2 + 1 / v2.props.scale * v2.getYScale() / 2 }, v2.props.onPositionChange(f2), n5.image = y(y({}, v2.state.image), f2)), v2.setState(n5), v2.props.onMouseMove(e4));
          }), s(d(v2), "setCanvas", function(e4) {
            v2.canvas = e4;
          }), v2.canvas = null, v2;
        }
        return e2 = a3, (t4 = [{ key: "componentDidMount", value: function() {
          this.props.disableHiDPIScaling && (P2 = 1);
          var e3, t5, o4 = this.canvas.getContext("2d");
          this.props.image && this.loadImage(this.props.image), this.paint(o4), document && (e3 = !!function() {
            var t6 = false;
            try {
              var e4 = Object.defineProperty({}, "passive", { get: function() {
                t6 = true;
              } });
              window.addEventListener("test", e4, e4), window.removeEventListener("test", e4, e4);
            } catch (e5) {
              t6 = false;
            }
            return t6;
          }() && { passive: false }, t5 = I.native, document.addEventListener(t5.move, this.handleMouseMove, e3), document.addEventListener(t5.up, this.handleMouseUp, e3), w2 && (document.addEventListener(t5.mouseMove, this.handleMouseMove, e3), document.addEventListener(t5.mouseUp, this.handleMouseUp, e3)));
        } }, { key: "componentDidUpdate", value: function(e3, t5) {
          this.props.image && this.props.image !== e3.image || this.props.width !== e3.width || this.props.height !== e3.height || this.props.backgroundColor !== e3.backgroundColor ? this.loadImage(this.props.image) : this.props.image || t5.image === C || this.clearImage();
          var o4 = this.canvas.getContext("2d");
          o4.clearRect(0, 0, this.canvas.width, this.canvas.height), this.paint(o4), this.paintImage(o4, this.state.image, this.props.border), e3.image === this.props.image && e3.width === this.props.width && e3.height === this.props.height && e3.position === this.props.position && e3.scale === this.props.scale && e3.rotate === this.props.rotate && t5.my === this.state.my && t5.mx === this.state.mx && t5.image.x === this.state.image.x && t5.image.y === this.state.image.y && t5.backgroundColor === this.state.backgroundColor || this.props.onImageChange();
        } }, { key: "componentWillUnmount", value: function() {
          var e3;
          document && (e3 = I.native, document.removeEventListener(e3.move, this.handleMouseMove, false), document.removeEventListener(e3.up, this.handleMouseUp, false), w2 && (document.removeEventListener(e3.mouseMove, this.handleMouseMove, false), document.removeEventListener(e3.mouseUp, this.handleMouseUp, false)));
        } }, { key: "isVertical", value: function() {
          return !this.props.disableCanvasRotation && this.props.rotate % 180 != 0;
        } }, { key: "getBorders", value: function(e3) {
          var t5 = 0 < arguments.length && void 0 !== e3 ? e3 : this.props.border;
          return Array.isArray(t5) ? t5 : [t5, t5];
        } }, { key: "getDimensions", value: function() {
          var e3 = this.props, t5 = e3.width, o4 = e3.height, n5 = e3.rotate, a4 = e3.border, r4 = {}, i3 = m3(this.getBorders(a4), 2), s2 = i3[0], u2 = i3[1], h2 = t5, c3 = o4;
          return this.isVertical() ? (r4.width = c3, r4.height = h2) : (r4.width = h2, r4.height = c3), r4.width += 2 * s2, r4.height += 2 * u2, { canvas: r4, rotate: n5, width: t5, height: o4, border: a4 };
        } }, { key: "getImage", value: function() {
          var e3 = this.getCroppingRect(), t5 = this.state.image;
          e3.x *= t5.resource.width, e3.y *= t5.resource.height, e3.width *= t5.resource.width, e3.height *= t5.resource.height;
          var o4 = document.createElement("canvas");
          this.isVertical() ? (o4.width = e3.height, o4.height = e3.width) : (o4.width = e3.width, o4.height = e3.height);
          var n5 = o4.getContext("2d");
          return n5.translate(o4.width / 2, o4.height / 2), n5.rotate(this.props.rotate * Math.PI / 180), n5.translate(-o4.width / 2, -o4.height / 2), this.isVertical() && n5.translate((o4.width - o4.height) / 2, (o4.height - o4.width) / 2), t5.backgroundColor && (n5.fillStyle = t5.backgroundColor, n5.fillRect(-e3.x, -e3.y, t5.resource.width, t5.resource.height)), n5.drawImage(t5.resource, -e3.x, -e3.y), o4;
        } }, { key: "getImageScaledToCanvas", value: function() {
          var e3 = this.getDimensions(), t5 = e3.width, o4 = e3.height, n5 = document.createElement("canvas");
          return this.isVertical() ? (n5.width = o4, n5.height = t5) : (n5.width = t5, n5.height = o4), this.paintImage(n5.getContext("2d"), this.state.image, 0, 1), n5;
        } }, { key: "getXScale", value: function() {
          var e3 = this.props.width / this.props.height, t5 = this.state.image.width / this.state.image.height;
          return Math.min(1, e3 / t5);
        } }, { key: "getYScale", value: function() {
          var e3 = this.props.height / this.props.width, t5 = this.state.image.height / this.state.image.width;
          return Math.min(1, e3 / t5);
        } }, { key: "getCroppingRect", value: function() {
          var e3 = this.props.position || { x: this.state.image.x, y: this.state.image.y }, t5 = 1 / this.props.scale * this.getXScale(), o4 = 1 / this.props.scale * this.getYScale(), n5 = { x: e3.x - t5 / 2, y: e3.y - o4 / 2, width: t5, height: o4 }, a4 = 0, r4 = 1 - n5.width, i3 = 0, s2 = 1 - n5.height;
          return (this.props.disableBoundaryChecks || 1 < t5 || 1 < o4) && (a4 = -n5.width, i3 = -n5.height, s2 = r4 = 1), y(y({}, n5), {}, { x: Math.max(a4, Math.min(n5.x, r4)), y: Math.max(i3, Math.min(n5.y, s2)) });
        } }, { key: "loadImage", value: function(e3) {
          var t5;
          M && e3 instanceof File ? this.loadingImage = (t5 = e3, new Promise(function(o4, n5) {
            var e4 = new FileReader();
            e4.onload = function(e5) {
              try {
                var t6 = v(e5.target.result);
                o4(t6);
              } catch (e6) {
                n5(e6);
              }
            }, e4.readAsDataURL(t5);
          }).then(this.handleImageReady).catch(this.props.onLoadFailure)) : "string" == typeof e3 && (this.loadingImage = v(e3, this.props.crossOrigin).then(this.handleImageReady).catch(this.props.onLoadFailure));
        } }, { key: "getInitialSize", value: function(e3, t5) {
          var o4, n5, a4 = this.getDimensions();
          return t5 / e3 < a4.height / a4.width ? n5 = e3 * ((o4 = this.getDimensions().height) / t5) : o4 = t5 * ((n5 = this.getDimensions().width) / e3), { height: o4, width: n5 };
        } }, { key: "paintImage", value: function(e3, t5, o4, n5) {
          var a4, r4 = 3 < arguments.length && void 0 !== n5 ? n5 : P2;
          t5.resource && (a4 = this.calculatePosition(t5, o4), e3.save(), e3.translate(e3.canvas.width / 2, e3.canvas.height / 2), e3.rotate(this.props.rotate * Math.PI / 180), e3.translate(-e3.canvas.width / 2, -e3.canvas.height / 2), this.isVertical() && e3.translate((e3.canvas.width - e3.canvas.height) / 2, (e3.canvas.height - e3.canvas.width) / 2), e3.scale(r4, r4), e3.globalCompositeOperation = "destination-over", e3.drawImage(t5.resource, a4.x, a4.y, a4.width, a4.height), t5.backgroundColor && (e3.fillStyle = t5.backgroundColor, e3.fillRect(a4.x, a4.y, a4.width, a4.height)), e3.restore());
        } }, { key: "calculatePosition", value: function(e3, t5) {
          e3 = e3 || this.state.image;
          var o4 = m3(this.getBorders(t5), 2), n5 = o4[0], a4 = o4[1], r4 = this.getCroppingRect(), i3 = e3.width * this.props.scale, s2 = e3.height * this.props.scale, u2 = -r4.x * i3, h2 = -r4.y * s2;
          return this.isVertical() ? (u2 += a4, h2 += n5) : (u2 += n5, h2 += a4), { x: u2, y: h2, height: s2, width: i3 };
        } }, { key: "paint", value: function(e3) {
          e3.save(), e3.scale(P2, P2), e3.translate(0, 0), e3.fillStyle = "rgba(" + this.props.color.slice(0, 4).join(",") + ")";
          var t5, o4, n5, a4, r4, i3, s2, u2, h2 = this.props.borderRadius, c3 = this.getDimensions(), l2 = m3(this.getBorders(c3.border), 2), d2 = l2[0], p2 = l2[1], g2 = c3.canvas.height, f2 = c3.canvas.width, h2 = Math.max(h2, 0);
          h2 = Math.min(h2, f2 / 2 - d2, g2 / 2 - p2), e3.beginPath(), t5 = e3, a4 = f2 - 2 * (o4 = d2), r4 = g2 - 2 * (n5 = p2), 0 === (i3 = h2) ? t5.rect(o4, n5, a4, r4) : (s2 = a4 - i3, u2 = r4 - i3, t5.translate(o4, n5), t5.arc(i3, i3, i3, Math.PI, 1.5 * Math.PI), t5.lineTo(s2, 0), t5.arc(s2, i3, i3, 1.5 * Math.PI, 2 * Math.PI), t5.lineTo(a4, u2), t5.arc(s2, u2, i3, 2 * Math.PI, 0.5 * Math.PI), t5.lineTo(i3, r4), t5.arc(i3, u2, i3, 0.5 * Math.PI, Math.PI), t5.translate(-o4, -n5)), e3.rect(f2, 0, -f2, g2), e3.fill("evenodd"), e3.restore();
        } }, { key: "render", value: function() {
          var e3 = this.props, t5 = (e3.scale, e3.rotate, e3.image, e3.border, e3.borderRadius, e3.width, e3.height, e3.position, e3.color, e3.backgroundColor, e3.style), o4 = (e3.crossOrigin, e3.onLoadFailure, e3.onLoadSuccess, e3.onImageReady, e3.onImageChange, e3.onMouseUp, e3.onMouseMove, e3.onPositionChange, e3.disableBoundaryChecks, e3.disableHiDPIScaling, e3.disableCanvasRotation, l(e3, ["scale", "rotate", "image", "border", "borderRadius", "width", "height", "position", "color", "backgroundColor", "style", "crossOrigin", "onLoadFailure", "onLoadSuccess", "onImageReady", "onImageChange", "onMouseUp", "onMouseMove", "onPositionChange", "disableBoundaryChecks", "disableHiDPIScaling", "disableCanvasRotation"])), n5 = this.getDimensions(), a4 = { width: n5.canvas.width, height: n5.canvas.height, cursor: this.state.drag ? "grabbing" : "grab", touchAction: "none" }, r4 = { width: n5.canvas.width * P2, height: n5.canvas.height * P2, style: y(y({}, a4), t5) };
          return r4[I.react.down] = this.handleMouseDown, w2 && (r4[I.react.mouseDown] = this.handleMouseDown), i2.default.createElement("canvas", u({ ref: this.setCanvas }, r4, o4));
        } }]) && r3(e2.prototype, t4), o3 && r3(e2, o3), a3;
      }();
      return s(x, "propTypes", { scale: n3.default.number, rotate: n3.default.number, image: n3.default.oneOfType([n3.default.string].concat(function(e2) {
        if (Array.isArray(e2))
          return f(e2);
      }(b2 = M ? [n3.default.instanceOf(File)] : []) || function(e2) {
        if ("undefined" != typeof Symbol && Symbol.iterator in Object(e2))
          return Array.from(e2);
      }(b2) || g(b2) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }())), border: n3.default.oneOfType([n3.default.number, n3.default.arrayOf(n3.default.number)]), borderRadius: n3.default.number, width: n3.default.number, height: n3.default.number, position: n3.default.shape({ x: n3.default.number, y: n3.default.number }), color: n3.default.arrayOf(n3.default.number), backgroundColor: n3.default.string, crossOrigin: n3.default.oneOf(["", "anonymous", "use-credentials"]), onLoadFailure: n3.default.func, onLoadSuccess: n3.default.func, onImageReady: n3.default.func, onImageChange: n3.default.func, onMouseUp: n3.default.func, onMouseMove: n3.default.func, onPositionChange: n3.default.func, disableBoundaryChecks: n3.default.bool, disableHiDPIScaling: n3.default.bool, disableCanvasRotation: n3.default.bool }), s(x, "defaultProps", { scale: 1, rotate: 0, border: 25, borderRadius: 0, width: 200, height: 200, color: [0, 0, 0, 0.5], onLoadFailure: function() {
      }, onLoadSuccess: function() {
      }, onImageReady: function() {
      }, onImageChange: function() {
      }, onMouseUp: function() {
      }, onMouseMove: function() {
      }, onPositionChange: function() {
      }, disableBoundaryChecks: false, disableHiDPIScaling: false, disableCanvasRotation: true }), x;
    });
  }
});

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant4 = function(condition, format2, a2, b2, c2, d, e, f) {
      if (true) {
        if (format2 === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error2;
        if (format2 === void 0) {
          error2 = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a2, b2, c2, d, e, f];
          var argIndex = 0;
          error2 = new Error(
            format2.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error2.name = "Invariant Violation";
        }
        error2.framesToPop = 1;
        throw error2;
      }
    };
    module.exports = invariant4;
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__2 = true;
    var warning4 = function() {
    };
    if (__DEV__2) {
      printWarning = function printWarning2(format2, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key2 = 1; key2 < len; key2++) {
          args[key2 - 1] = arguments[key2];
        }
        var argIndex = 0;
        var message = "Warning: " + format2.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning4 = function(condition, format2, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key2 = 2; key2 < len; key2++) {
          args[key2 - 2] = arguments[key2];
        }
        if (format2 === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format2].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning4;
  }
});

// node_modules/react-input-mask/lib/react-input-mask.development.js
var require_react_input_mask_development = __commonJS({
  "node_modules/react-input-mask/lib/react-input-mask.development.js"(exports, module) {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React68 = _interopDefault(require_react());
    var reactDom = require_react_dom();
    var invariant4 = _interopDefault(require_browser());
    var warning4 = _interopDefault(require_warning());
    function _defaults2(obj, defaults) {
      var keys3 = Object.getOwnPropertyNames(defaults);
      for (var i2 = 0; i2 < keys3.length; i2++) {
        var key2 = keys3[i2];
        var value = Object.getOwnPropertyDescriptor(defaults, key2);
        if (value && value.configurable && obj[key2] === void 0) {
          Object.defineProperty(obj, key2, value);
        }
      }
      return obj;
    }
    function _extends15() {
      _extends15 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target[key2] = source[key2];
            }
          }
        }
        return target;
      };
      return _extends15.apply(this, arguments);
    }
    function _inheritsLoose2(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _defaults2(subClass, superClass);
    }
    function _objectWithoutPropertiesLoose6(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key2, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key2 = sourceKeys[i2];
        if (excluded.indexOf(key2) >= 0)
          continue;
        target[key2] = source[key2];
      }
      return target;
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function setInputSelection(input, start2, end2) {
      if ("selectionStart" in input && "selectionEnd" in input) {
        input.selectionStart = start2;
        input.selectionEnd = end2;
      } else {
        var range2 = input.createTextRange();
        range2.collapse(true);
        range2.moveStart("character", start2);
        range2.moveEnd("character", end2 - start2);
        range2.select();
      }
    }
    function getInputSelection(input) {
      var start2 = 0;
      var end2 = 0;
      if ("selectionStart" in input && "selectionEnd" in input) {
        start2 = input.selectionStart;
        end2 = input.selectionEnd;
      } else {
        var range2 = document.selection.createRange();
        if (range2.parentElement() === input) {
          start2 = -range2.moveStart("character", -input.value.length);
          end2 = -range2.moveEnd("character", -input.value.length);
        }
      }
      return {
        start: start2,
        end: end2,
        length: end2 - start2
      };
    }
    var defaultFormatChars = {
      "9": "[0-9]",
      "a": "[A-Za-z]",
      "*": "[A-Za-z0-9]"
    };
    var defaultMaskChar = "_";
    function parseMask(mask, maskChar, formatChars) {
      var parsedMaskString = "";
      var prefix4 = "";
      var lastEditablePosition = null;
      var permanents = [];
      if (maskChar === void 0) {
        maskChar = defaultMaskChar;
      }
      if (formatChars == null) {
        formatChars = defaultFormatChars;
      }
      if (!mask || typeof mask !== "string") {
        return {
          maskChar,
          formatChars,
          mask: null,
          prefix: null,
          lastEditablePosition: null,
          permanents: []
        };
      }
      var isPermanent = false;
      mask.split("").forEach(function(character2) {
        if (!isPermanent && character2 === "\\") {
          isPermanent = true;
        } else {
          if (isPermanent || !formatChars[character2]) {
            permanents.push(parsedMaskString.length);
            if (parsedMaskString.length === permanents.length - 1) {
              prefix4 += character2;
            }
          } else {
            lastEditablePosition = parsedMaskString.length + 1;
          }
          parsedMaskString += character2;
          isPermanent = false;
        }
      });
      return {
        maskChar,
        formatChars,
        prefix: prefix4,
        mask: parsedMaskString,
        lastEditablePosition,
        permanents
      };
    }
    function isPermanentCharacter(maskOptions, pos) {
      return maskOptions.permanents.indexOf(pos) !== -1;
    }
    function isAllowedCharacter(maskOptions, pos, character2) {
      var mask = maskOptions.mask, formatChars = maskOptions.formatChars;
      if (!character2) {
        return false;
      }
      if (isPermanentCharacter(maskOptions, pos)) {
        return mask[pos] === character2;
      }
      var ruleChar = mask[pos];
      var charRule = formatChars[ruleChar];
      return new RegExp(charRule).test(character2);
    }
    function isEmpty3(maskOptions, value) {
      return value.split("").every(function(character2, i2) {
        return isPermanentCharacter(maskOptions, i2) || !isAllowedCharacter(maskOptions, i2, character2);
      });
    }
    function getFilledLength(maskOptions, value) {
      var maskChar = maskOptions.maskChar, prefix4 = maskOptions.prefix;
      if (!maskChar) {
        while (value.length > prefix4.length && isPermanentCharacter(maskOptions, value.length - 1)) {
          value = value.slice(0, value.length - 1);
        }
        return value.length;
      }
      var filledLength = prefix4.length;
      for (var i2 = value.length; i2 >= prefix4.length; i2--) {
        var character2 = value[i2];
        var isEnteredCharacter = !isPermanentCharacter(maskOptions, i2) && isAllowedCharacter(maskOptions, i2, character2);
        if (isEnteredCharacter) {
          filledLength = i2 + 1;
          break;
        }
      }
      return filledLength;
    }
    function isFilled(maskOptions, value) {
      return getFilledLength(maskOptions, value) === maskOptions.mask.length;
    }
    function formatValue(maskOptions, value) {
      var maskChar = maskOptions.maskChar, mask = maskOptions.mask, prefix4 = maskOptions.prefix;
      if (!maskChar) {
        value = insertString(maskOptions, "", value, 0);
        if (value.length < prefix4.length) {
          value = prefix4;
        }
        while (value.length < mask.length && isPermanentCharacter(maskOptions, value.length)) {
          value += mask[value.length];
        }
        return value;
      }
      if (value) {
        var emptyValue = formatValue(maskOptions, "");
        return insertString(maskOptions, emptyValue, value, 0);
      }
      for (var i2 = 0; i2 < mask.length; i2++) {
        if (isPermanentCharacter(maskOptions, i2)) {
          value += mask[i2];
        } else {
          value += maskChar;
        }
      }
      return value;
    }
    function clearRange(maskOptions, value, start2, len) {
      var end2 = start2 + len;
      var maskChar = maskOptions.maskChar, mask = maskOptions.mask, prefix4 = maskOptions.prefix;
      var arrayValue = value.split("");
      if (!maskChar) {
        for (var i2 = end2; i2 < arrayValue.length; i2++) {
          if (isPermanentCharacter(maskOptions, i2)) {
            arrayValue[i2] = "";
          }
        }
        start2 = Math.max(prefix4.length, start2);
        arrayValue.splice(start2, end2 - start2);
        value = arrayValue.join("");
        return formatValue(maskOptions, value);
      }
      return arrayValue.map(function(character2, i3) {
        if (i3 < start2 || i3 >= end2) {
          return character2;
        }
        if (isPermanentCharacter(maskOptions, i3)) {
          return mask[i3];
        }
        return maskChar;
      }).join("");
    }
    function insertString(maskOptions, value, insertStr, insertPosition) {
      var mask = maskOptions.mask, maskChar = maskOptions.maskChar, prefix4 = maskOptions.prefix;
      var arrayInsertStr = insertStr.split("");
      var isInputFilled = isFilled(maskOptions, value);
      var isUsablePosition = function isUsablePosition2(pos, character2) {
        return !isPermanentCharacter(maskOptions, pos) || character2 === mask[pos];
      };
      var isUsableCharacter = function isUsableCharacter2(character2, pos) {
        return !maskChar || !isPermanentCharacter(maskOptions, pos) || character2 !== maskChar;
      };
      if (!maskChar && insertPosition > value.length) {
        value += mask.slice(value.length, insertPosition);
      }
      arrayInsertStr.every(function(insertCharacter) {
        while (!isUsablePosition(insertPosition, insertCharacter)) {
          if (insertPosition >= value.length) {
            value += mask[insertPosition];
          }
          if (!isUsableCharacter(insertCharacter, insertPosition)) {
            return true;
          }
          insertPosition++;
          if (insertPosition >= mask.length) {
            return false;
          }
        }
        var isAllowed = isAllowedCharacter(maskOptions, insertPosition, insertCharacter) || insertCharacter === maskChar;
        if (!isAllowed) {
          return true;
        }
        if (insertPosition < value.length) {
          if (maskChar || isInputFilled || insertPosition < prefix4.length) {
            value = value.slice(0, insertPosition) + insertCharacter + value.slice(insertPosition + 1);
          } else {
            value = value.slice(0, insertPosition) + insertCharacter + value.slice(insertPosition);
            value = formatValue(maskOptions, value);
          }
        } else if (!maskChar) {
          value += insertCharacter;
        }
        insertPosition++;
        return insertPosition < mask.length;
      });
      return value;
    }
    function getInsertStringLength(maskOptions, value, insertStr, insertPosition) {
      var mask = maskOptions.mask, maskChar = maskOptions.maskChar;
      var arrayInsertStr = insertStr.split("");
      var initialInsertPosition = insertPosition;
      var isUsablePosition = function isUsablePosition2(pos, character2) {
        return !isPermanentCharacter(maskOptions, pos) || character2 === mask[pos];
      };
      arrayInsertStr.every(function(insertCharacter) {
        while (!isUsablePosition(insertPosition, insertCharacter)) {
          insertPosition++;
          if (insertPosition >= mask.length) {
            return false;
          }
        }
        var isAllowed = isAllowedCharacter(maskOptions, insertPosition, insertCharacter) || insertCharacter === maskChar;
        if (isAllowed) {
          insertPosition++;
        }
        return insertPosition < mask.length;
      });
      return insertPosition - initialInsertPosition;
    }
    function getLeftEditablePosition(maskOptions, pos) {
      for (var i2 = pos; i2 >= 0; --i2) {
        if (!isPermanentCharacter(maskOptions, i2)) {
          return i2;
        }
      }
      return null;
    }
    function getRightEditablePosition(maskOptions, pos) {
      var mask = maskOptions.mask;
      for (var i2 = pos; i2 < mask.length; ++i2) {
        if (!isPermanentCharacter(maskOptions, i2)) {
          return i2;
        }
      }
      return null;
    }
    function getStringValue(value) {
      return !value && value !== 0 ? "" : value + "";
    }
    function processChange(maskOptions, value, selection, previousValue, previousSelection) {
      var mask = maskOptions.mask, prefix4 = maskOptions.prefix, lastEditablePosition = maskOptions.lastEditablePosition;
      var newValue = value;
      var enteredString = "";
      var formattedEnteredStringLength = 0;
      var removedLength = 0;
      var cursorPosition = Math.min(previousSelection.start, selection.start);
      if (selection.end > previousSelection.start) {
        enteredString = newValue.slice(previousSelection.start, selection.end);
        formattedEnteredStringLength = getInsertStringLength(maskOptions, previousValue, enteredString, cursorPosition);
        if (!formattedEnteredStringLength) {
          removedLength = 0;
        } else {
          removedLength = previousSelection.length;
        }
      } else if (newValue.length < previousValue.length) {
        removedLength = previousValue.length - newValue.length;
      }
      newValue = previousValue;
      if (removedLength) {
        if (removedLength === 1 && !previousSelection.length) {
          var deleteFromRight = previousSelection.start === selection.start;
          cursorPosition = deleteFromRight ? getRightEditablePosition(maskOptions, selection.start) : getLeftEditablePosition(maskOptions, selection.start);
        }
        newValue = clearRange(maskOptions, newValue, cursorPosition, removedLength);
      }
      newValue = insertString(maskOptions, newValue, enteredString, cursorPosition);
      cursorPosition = cursorPosition + formattedEnteredStringLength;
      if (cursorPosition >= mask.length) {
        cursorPosition = mask.length;
      } else if (cursorPosition < prefix4.length && !formattedEnteredStringLength) {
        cursorPosition = prefix4.length;
      } else if (cursorPosition >= prefix4.length && cursorPosition < lastEditablePosition && formattedEnteredStringLength) {
        cursorPosition = getRightEditablePosition(maskOptions, cursorPosition);
      }
      newValue = formatValue(maskOptions, newValue);
      if (!enteredString) {
        enteredString = null;
      }
      return {
        value: newValue,
        enteredString,
        selection: {
          start: cursorPosition,
          end: cursorPosition
        }
      };
    }
    function isWindowsPhoneBrowser() {
      var windows = new RegExp("windows", "i");
      var phone = new RegExp("phone", "i");
      var ua = navigator.userAgent;
      return windows.test(ua) && phone.test(ua);
    }
    function isFunction6(value) {
      return typeof value === "function";
    }
    function getRequestAnimationFrame() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;
    }
    function getCancelAnimationFrame() {
      return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame;
    }
    function defer(fn2) {
      var hasCancelAnimationFrame = !!getCancelAnimationFrame();
      var deferFn;
      if (hasCancelAnimationFrame) {
        deferFn = getRequestAnimationFrame();
      } else {
        deferFn = function deferFn2() {
          return setTimeout(fn2, 1e3 / 60);
        };
      }
      return deferFn(fn2);
    }
    function cancelDefer(deferId) {
      var cancelFn = getCancelAnimationFrame() || clearTimeout;
      cancelFn(deferId);
    }
    var InputElement3 = function(_React$Component) {
      _inheritsLoose2(InputElement4, _React$Component);
      function InputElement4(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.focused = false;
        _this.mounted = false;
        _this.previousSelection = null;
        _this.selectionDeferId = null;
        _this.saveSelectionLoopDeferId = null;
        _this.saveSelectionLoop = function() {
          _this.previousSelection = _this.getSelection();
          _this.saveSelectionLoopDeferId = defer(_this.saveSelectionLoop);
        };
        _this.runSaveSelectionLoop = function() {
          if (_this.saveSelectionLoopDeferId === null) {
            _this.saveSelectionLoop();
          }
        };
        _this.stopSaveSelectionLoop = function() {
          if (_this.saveSelectionLoopDeferId !== null) {
            cancelDefer(_this.saveSelectionLoopDeferId);
            _this.saveSelectionLoopDeferId = null;
            _this.previousSelection = null;
          }
        };
        _this.getInputDOMNode = function() {
          if (!_this.mounted) {
            return null;
          }
          var input = reactDom.findDOMNode(_assertThisInitialized2(_assertThisInitialized2(_this)));
          var isDOMNode = typeof window !== "undefined" && input instanceof window.Element;
          if (input && !isDOMNode) {
            return null;
          }
          if (input.nodeName !== "INPUT") {
            input = input.querySelector("input");
          }
          if (!input) {
            throw new Error("react-input-mask: inputComponent doesn't contain input node");
          }
          return input;
        };
        _this.getInputValue = function() {
          var input = _this.getInputDOMNode();
          if (!input) {
            return null;
          }
          return input.value;
        };
        _this.setInputValue = function(value) {
          var input = _this.getInputDOMNode();
          if (!input) {
            return;
          }
          _this.value = value;
          input.value = value;
        };
        _this.setCursorToEnd = function() {
          var filledLength = getFilledLength(_this.maskOptions, _this.value);
          var pos = getRightEditablePosition(_this.maskOptions, filledLength);
          if (pos !== null) {
            _this.setCursorPosition(pos);
          }
        };
        _this.setSelection = function(start2, end2, options2) {
          if (options2 === void 0) {
            options2 = {};
          }
          var input = _this.getInputDOMNode();
          var isFocused = _this.isFocused();
          if (!input || !isFocused) {
            return;
          }
          var _options = options2, deferred = _options.deferred;
          if (!deferred) {
            setInputSelection(input, start2, end2);
          }
          if (_this.selectionDeferId !== null) {
            cancelDefer(_this.selectionDeferId);
          }
          _this.selectionDeferId = defer(function() {
            _this.selectionDeferId = null;
            setInputSelection(input, start2, end2);
          });
          _this.previousSelection = {
            start: start2,
            end: end2,
            length: Math.abs(end2 - start2)
          };
        };
        _this.getSelection = function() {
          var input = _this.getInputDOMNode();
          return getInputSelection(input);
        };
        _this.getCursorPosition = function() {
          return _this.getSelection().start;
        };
        _this.setCursorPosition = function(pos) {
          _this.setSelection(pos, pos);
        };
        _this.isFocused = function() {
          return _this.focused;
        };
        _this.getBeforeMaskedValueChangeConfig = function() {
          var _this$maskOptions = _this.maskOptions, mask = _this$maskOptions.mask, maskChar = _this$maskOptions.maskChar, permanents = _this$maskOptions.permanents, formatChars = _this$maskOptions.formatChars;
          var alwaysShowMask = _this.props.alwaysShowMask;
          return {
            mask,
            maskChar,
            permanents,
            alwaysShowMask: !!alwaysShowMask,
            formatChars
          };
        };
        _this.isInputAutofilled = function(value, selection, previousValue, previousSelection) {
          var input = _this.getInputDOMNode();
          try {
            if (input.matches(":-webkit-autofill")) {
              return true;
            }
          } catch (e) {
          }
          if (!_this.focused) {
            return true;
          }
          return previousSelection.end < previousValue.length && selection.end === value.length;
        };
        _this.onChange = function(event) {
          var _assertThisInitialize = _assertThisInitialized2(_assertThisInitialized2(_this)), beforePasteState = _assertThisInitialize.beforePasteState;
          var _assertThisInitialize2 = _assertThisInitialized2(_assertThisInitialized2(_this)), previousSelection = _assertThisInitialize2.previousSelection;
          var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;
          var value = _this.getInputValue();
          var previousValue = _this.value;
          var selection = _this.getSelection();
          if (_this.isInputAutofilled(value, selection, previousValue, previousSelection)) {
            previousValue = formatValue(_this.maskOptions, "");
            previousSelection = {
              start: 0,
              end: 0,
              length: 0
            };
          }
          if (beforePasteState) {
            previousSelection = beforePasteState.selection;
            previousValue = beforePasteState.value;
            selection = {
              start: previousSelection.start + value.length,
              end: previousSelection.start + value.length,
              length: 0
            };
            value = previousValue.slice(0, previousSelection.start) + value + previousValue.slice(previousSelection.end);
            _this.beforePasteState = null;
          }
          var changedState = processChange(_this.maskOptions, value, selection, previousValue, previousSelection);
          var enteredString = changedState.enteredString;
          var newSelection = changedState.selection;
          var newValue = changedState.value;
          if (isFunction6(beforeMaskedValueChange)) {
            var modifiedValue2 = beforeMaskedValueChange({
              value: newValue,
              selection: newSelection
            }, {
              value: previousValue,
              selection: previousSelection
            }, enteredString, _this.getBeforeMaskedValueChangeConfig());
            newValue = modifiedValue2.value;
            newSelection = modifiedValue2.selection;
          }
          _this.setInputValue(newValue);
          if (isFunction6(_this.props.onChange)) {
            _this.props.onChange(event);
          }
          if (_this.isWindowsPhoneBrowser) {
            _this.setSelection(newSelection.start, newSelection.end, {
              deferred: true
            });
          } else {
            _this.setSelection(newSelection.start, newSelection.end);
          }
        };
        _this.onFocus = function(event) {
          var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;
          var _this$maskOptions2 = _this.maskOptions, mask = _this$maskOptions2.mask, prefix4 = _this$maskOptions2.prefix;
          _this.focused = true;
          _this.mounted = true;
          if (mask) {
            if (!_this.value) {
              var emptyValue = formatValue(_this.maskOptions, prefix4);
              var newValue = formatValue(_this.maskOptions, emptyValue);
              var filledLength = getFilledLength(_this.maskOptions, newValue);
              var cursorPosition = getRightEditablePosition(_this.maskOptions, filledLength);
              var newSelection = {
                start: cursorPosition,
                end: cursorPosition
              };
              if (isFunction6(beforeMaskedValueChange)) {
                var modifiedValue2 = beforeMaskedValueChange({
                  value: newValue,
                  selection: newSelection
                }, {
                  value: _this.value,
                  selection: null
                }, null, _this.getBeforeMaskedValueChangeConfig());
                newValue = modifiedValue2.value;
                newSelection = modifiedValue2.selection;
              }
              var isInputValueChanged = newValue !== _this.getInputValue();
              if (isInputValueChanged) {
                _this.setInputValue(newValue);
              }
              if (isInputValueChanged && isFunction6(_this.props.onChange)) {
                _this.props.onChange(event);
              }
              _this.setSelection(newSelection.start, newSelection.end);
            } else if (getFilledLength(_this.maskOptions, _this.value) < _this.maskOptions.mask.length) {
              _this.setCursorToEnd();
            }
            _this.runSaveSelectionLoop();
          }
          if (isFunction6(_this.props.onFocus)) {
            _this.props.onFocus(event);
          }
        };
        _this.onBlur = function(event) {
          var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;
          var mask = _this.maskOptions.mask;
          _this.stopSaveSelectionLoop();
          _this.focused = false;
          if (mask && !_this.props.alwaysShowMask && isEmpty3(_this.maskOptions, _this.value)) {
            var newValue = "";
            if (isFunction6(beforeMaskedValueChange)) {
              var modifiedValue2 = beforeMaskedValueChange({
                value: newValue,
                selection: null
              }, {
                value: _this.value,
                selection: _this.previousSelection
              }, null, _this.getBeforeMaskedValueChangeConfig());
              newValue = modifiedValue2.value;
            }
            var isInputValueChanged = newValue !== _this.getInputValue();
            if (isInputValueChanged) {
              _this.setInputValue(newValue);
            }
            if (isInputValueChanged && isFunction6(_this.props.onChange)) {
              _this.props.onChange(event);
            }
          }
          if (isFunction6(_this.props.onBlur)) {
            _this.props.onBlur(event);
          }
        };
        _this.onMouseDown = function(event) {
          if (!_this.focused && document.addEventListener) {
            _this.mouseDownX = event.clientX;
            _this.mouseDownY = event.clientY;
            _this.mouseDownTime = (/* @__PURE__ */ new Date()).getTime();
            var mouseUpHandler = function mouseUpHandler2(mouseUpEvent) {
              document.removeEventListener("mouseup", mouseUpHandler2);
              if (!_this.focused) {
                return;
              }
              var deltaX = Math.abs(mouseUpEvent.clientX - _this.mouseDownX);
              var deltaY = Math.abs(mouseUpEvent.clientY - _this.mouseDownY);
              var axisDelta = Math.max(deltaX, deltaY);
              var timeDelta = (/* @__PURE__ */ new Date()).getTime() - _this.mouseDownTime;
              if (axisDelta <= 10 && timeDelta <= 200 || axisDelta <= 5 && timeDelta <= 300) {
                _this.setCursorToEnd();
              }
            };
            document.addEventListener("mouseup", mouseUpHandler);
          }
          if (isFunction6(_this.props.onMouseDown)) {
            _this.props.onMouseDown(event);
          }
        };
        _this.onPaste = function(event) {
          if (isFunction6(_this.props.onPaste)) {
            _this.props.onPaste(event);
          }
          if (!event.defaultPrevented) {
            _this.beforePasteState = {
              value: _this.getInputValue(),
              selection: _this.getSelection()
            };
            _this.setInputValue("");
          }
        };
        _this.handleRef = function(ref) {
          if (_this.props.children == null && isFunction6(_this.props.inputRef)) {
            _this.props.inputRef(ref);
          }
        };
        var _mask = props.mask, _maskChar = props.maskChar, _formatChars = props.formatChars, _alwaysShowMask = props.alwaysShowMask, _beforeMaskedValueChange = props.beforeMaskedValueChange;
        var defaultValue2 = props.defaultValue, _value = props.value;
        _this.maskOptions = parseMask(_mask, _maskChar, _formatChars);
        if (defaultValue2 == null) {
          defaultValue2 = "";
        }
        if (_value == null) {
          _value = defaultValue2;
        }
        var _newValue = getStringValue(_value);
        if (_this.maskOptions.mask && (_alwaysShowMask || _newValue)) {
          _newValue = formatValue(_this.maskOptions, _newValue);
          if (isFunction6(_beforeMaskedValueChange)) {
            var oldValue = props.value;
            if (props.value == null) {
              oldValue = defaultValue2;
            }
            oldValue = getStringValue(oldValue);
            var modifiedValue = _beforeMaskedValueChange({
              value: _newValue,
              selection: null
            }, {
              value: oldValue,
              selection: null
            }, null, _this.getBeforeMaskedValueChangeConfig());
            _newValue = modifiedValue.value;
          }
        }
        _this.value = _newValue;
        return _this;
      }
      var _proto = InputElement4.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        if (!this.getInputDOMNode()) {
          return;
        }
        this.isWindowsPhoneBrowser = isWindowsPhoneBrowser();
        if (this.maskOptions.mask && this.getInputValue() !== this.value) {
          this.setInputValue(this.value);
        }
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        var previousSelection = this.previousSelection;
        var _this$props = this.props, beforeMaskedValueChange = _this$props.beforeMaskedValueChange, alwaysShowMask = _this$props.alwaysShowMask, mask = _this$props.mask, maskChar = _this$props.maskChar, formatChars = _this$props.formatChars;
        var previousMaskOptions = this.maskOptions;
        var showEmpty = alwaysShowMask || this.isFocused();
        var hasValue = this.props.value != null;
        var newValue = hasValue ? getStringValue(this.props.value) : this.value;
        var cursorPosition = previousSelection ? previousSelection.start : null;
        this.maskOptions = parseMask(mask, maskChar, formatChars);
        if (!this.maskOptions.mask) {
          if (previousMaskOptions.mask) {
            this.stopSaveSelectionLoop();
            this.forceUpdate();
          }
          return;
        } else if (!previousMaskOptions.mask && this.isFocused()) {
          this.runSaveSelectionLoop();
        }
        var isMaskChanged = this.maskOptions.mask && this.maskOptions.mask !== previousMaskOptions.mask;
        if (!previousMaskOptions.mask && !hasValue) {
          newValue = this.getInputValue();
        }
        if (isMaskChanged || this.maskOptions.mask && (newValue || showEmpty)) {
          newValue = formatValue(this.maskOptions, newValue);
        }
        if (isMaskChanged) {
          var filledLength = getFilledLength(this.maskOptions, newValue);
          if (cursorPosition === null || filledLength < cursorPosition) {
            if (isFilled(this.maskOptions, newValue)) {
              cursorPosition = filledLength;
            } else {
              cursorPosition = getRightEditablePosition(this.maskOptions, filledLength);
            }
          }
        }
        if (this.maskOptions.mask && isEmpty3(this.maskOptions, newValue) && !showEmpty && (!hasValue || !this.props.value)) {
          newValue = "";
        }
        var newSelection = {
          start: cursorPosition,
          end: cursorPosition
        };
        if (isFunction6(beforeMaskedValueChange)) {
          var modifiedValue = beforeMaskedValueChange({
            value: newValue,
            selection: newSelection
          }, {
            value: this.value,
            selection: this.previousSelection
          }, null, this.getBeforeMaskedValueChangeConfig());
          newValue = modifiedValue.value;
          newSelection = modifiedValue.selection;
        }
        this.value = newValue;
        var isValueChanged = this.getInputValue() !== this.value;
        if (isValueChanged) {
          this.setInputValue(this.value);
          this.forceUpdate();
        } else if (isMaskChanged) {
          this.forceUpdate();
        }
        var isSelectionChanged = false;
        if (newSelection.start != null && newSelection.end != null) {
          isSelectionChanged = !previousSelection || previousSelection.start !== newSelection.start || previousSelection.end !== newSelection.end;
        }
        if (isSelectionChanged || isValueChanged) {
          this.setSelection(newSelection.start, newSelection.end);
        }
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
        if (this.selectionDeferId !== null) {
          cancelDefer(this.selectionDeferId);
        }
        this.stopSaveSelectionLoop();
      };
      _proto.render = function render() {
        var _this$props2 = this.props, mask = _this$props2.mask, alwaysShowMask = _this$props2.alwaysShowMask, maskChar = _this$props2.maskChar, formatChars = _this$props2.formatChars, inputRef = _this$props2.inputRef, beforeMaskedValueChange = _this$props2.beforeMaskedValueChange, children = _this$props2.children, restProps = _objectWithoutPropertiesLoose6(_this$props2, ["mask", "alwaysShowMask", "maskChar", "formatChars", "inputRef", "beforeMaskedValueChange", "children"]);
        var inputElement;
        true ? warning4(
          // parse mask to test against actual mask prop as this.maskOptions
          // will be updated later in componentDidUpdate
          !restProps.maxLength || !parseMask(mask, maskChar, formatChars).mask,
          "react-input-mask: maxLength property shouldn't be passed to the masked input. It breaks masking and unnecessary because length is limited by the mask length."
        ) : void 0;
        if (children) {
          !isFunction6(children) ? true ? invariant4(false, "react-input-mask: children must be a function") : invariant4(false) : void 0;
          var controlledProps = ["onChange", "onPaste", "onMouseDown", "onFocus", "onBlur", "value", "disabled", "readOnly"];
          var childrenProps = _extends15({}, restProps);
          controlledProps.forEach(function(propId) {
            return delete childrenProps[propId];
          });
          inputElement = children(childrenProps);
          var conflictProps = controlledProps.filter(function(propId) {
            return inputElement.props[propId] != null && inputElement.props[propId] !== restProps[propId];
          });
          !!conflictProps.length ? true ? invariant4(false, "react-input-mask: the following props should be passed to the react-input-mask's component and should not be altered in children's function: " + conflictProps.join(", ")) : invariant4(false) : void 0;
          true ? warning4(!inputRef, "react-input-mask: inputRef is ignored when children is passed, attach ref to the children instead") : void 0;
        } else {
          inputElement = React68.createElement("input", _extends15({
            ref: this.handleRef
          }, restProps));
        }
        var changedProps = {
          onFocus: this.onFocus,
          onBlur: this.onBlur
        };
        if (this.maskOptions.mask) {
          if (!restProps.disabled && !restProps.readOnly) {
            changedProps.onChange = this.onChange;
            changedProps.onPaste = this.onPaste;
            changedProps.onMouseDown = this.onMouseDown;
          }
          if (restProps.value != null) {
            changedProps.value = this.value;
          }
        }
        inputElement = React68.cloneElement(inputElement, changedProps);
        return inputElement;
      };
      return InputElement4;
    }(React68.Component);
    module.exports = InputElement3;
  }
});

// node_modules/react-input-mask/index.js
var require_react_input_mask = __commonJS({
  "node_modules/react-input-mask/index.js"(exports, module) {
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_input_mask_development();
    }
  }
});

// node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js
var React2 = __toESM(require_react());
var import_react = __toESM(require_react());

// node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
    if (document.styleSheets[i2].ownerNode === tag) {
      return document.styleSheets[i2];
    }
  }
}
function createStyleElement(options2) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options2.key);
  if (options2.nonce !== void 0) {
    tag.setAttribute("nonce", options2.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = function() {
  function StyleSheet2(options2) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options2.speedy === void 0 ? false : options2.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options2.nonce;
    this.key = options2.key;
    this.container = options2.container;
    this.prepend = options2.prepend;
    this.insertionPoint = options2.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert3(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    if (true) {
      var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
      if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
        console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
      }
      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
    }
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
          console.error('There was a problem inserting the following rule: "' + rule + '"', e);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      return tag.parentNode && tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
    if (true) {
      this._alreadyInsertedOrderInsensitiveRule = false;
    }
  };
  return StyleSheet2;
}();

// node_modules/stylis/src/Enum.js
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";

// node_modules/stylis/src/Utility.js
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash(value, length3) {
  return charat(value, 0) ^ 45 ? (((length3 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index5) {
  return value.charCodeAt(index5) | 0;
}
function substr(value, begin, end2) {
  return value.slice(begin, end2);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}

// node_modules/stylis/src/Tokenizer.js
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type, props, children, length3) {
  return { value, root, parent, type, props, children, line, column, length: length3, return: "" };
}
function copy(root, props) {
  return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end2) {
  return substr(characters, begin, end2);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index5, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index5, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index5) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index5, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index5) {
  while (!token(peek()))
    next();
  return slice(index5, position);
}

// node_modules/stylis/src/Parser.js
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index5 = 0;
  var offset3 = 0;
  var length3 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference2 = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length3 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index5++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset3:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length3)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length3 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length3 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference2 = ruleset(characters2, root, parent, index5, offset3, rules, points, type, props = [], children = [], length3), rulesets);
            if (character2 === 123)
              if (offset3 === 0)
                parse(characters2, root, reference2, reference2, props, rulesets, length3, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length3), children), rules, children, length3, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                }
        }
        index5 = offset3 = property = 0, variable = ampersand = 1, type = characters2 = "", length3 = pseudo;
        break;
      case 58:
        length3 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset3 > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index5++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset3 = length3 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index5, offset3, rules, points, type, props, children, length3) {
  var post = offset3 - 1;
  var rule = offset3 === 0 ? rules : [""];
  var size4 = sizeof(rule);
  for (var i2 = 0, j = 0, k = 0; i2 < index5; ++i2)
    for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i2])), z = value; x < size4; ++x)
      if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
        props[k++] = z;
  return node(value, root, parent, offset3 === 0 ? RULESET : type, props, children, length3);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length3) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length3), substr(value, length3 + 1, -1), length3);
}

// node_modules/stylis/src/Serializer.js
function serialize(children, callback) {
  var output = "";
  var length3 = sizeof(children);
  for (var i2 = 0; i2 < length3; i2++)
    output += callback(children[i2], i2, children, callback) || "";
  return output;
}
function stringify(element, index5, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}

// node_modules/stylis/src/Middleware.js
function middleware(collection) {
  var length3 = sizeof(collection);
  return function(element, index5, children, callback) {
    var output = "";
    for (var i2 = 0; i2 < length3; i2++)
      output += collection[i2](element, index5, children, callback) || "";
    return output;
  };
}

// node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
var weakMemoize = function weakMemoize2(func2) {
  var cache2 = /* @__PURE__ */ new WeakMap();
  return function(arg) {
    if (cache2.has(arg)) {
      return cache2.get(arg);
    }
    var ret = func2(arg);
    cache2.set(arg, ret);
    return ret;
  };
};

// node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
function memoize(fn2) {
  var cache2 = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache2[arg] === void 0)
      cache2[arg] = fn2(arg);
    return cache2[arg];
  };
}

// node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index5) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index5] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index5 = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index5] = 1;
        }
        parsed[index5] += identifierWithPointTracking(position - 1, points, index5);
        break;
      case 2:
        parsed[index5] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index5] = peek() === 58 ? "&\f" : "";
          points[index5] = parsed[index5].length;
          break;
        }
      default:
        parsed[index5] += from(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value = element.value, parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent)
      return;
  }
  if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i2 = 0, k = 0; i2 < rules.length; i2++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i2] ? rules[i2].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i2];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value = element.value;
    if (
      // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98
    ) {
      element["return"] = "";
      element.value = "";
    }
  }
};
var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var isIgnoringComment = function isIgnoringComment2(element) {
  return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache2) {
  return function(element, index5, children) {
    if (element.type !== "rule" || cache2.compat)
      return;
    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
    if (unsafePseudoClasses) {
      var isNested = !!element.parent;
      var commentContainer = isNested ? element.parent.children : (
        // global rule at the root level
        children
      );
      for (var i2 = commentContainer.length - 1; i2 >= 0; i2--) {
        var node3 = commentContainer[i2];
        if (node3.line < element.line) {
          break;
        }
        if (node3.column < element.column) {
          if (isIgnoringComment(node3)) {
            return;
          }
          break;
        }
      }
      unsafePseudoClasses.forEach(function(unsafePseudoClass) {
        console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
      });
    }
  };
};
var isImportRule = function isImportRule2(element) {
  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index5, children) {
  for (var i2 = index5 - 1; i2 >= 0; i2--) {
    if (!isImportRule(children[i2])) {
      return true;
    }
  }
  return false;
};
var nullifyElement = function nullifyElement2(element) {
  element.type = "";
  element.value = "";
  element["return"] = "";
  element.children = "";
  element.props = "";
};
var incorrectImportAlarm = function incorrectImportAlarm2(element, index5, children) {
  if (!isImportRule(element)) {
    return;
  }
  if (element.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element);
  } else if (isPrependedWithRegularRules(index5, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element);
  }
};
function prefix2(value, length3) {
  switch (hash(value, length3)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length3 > 6)
        switch (charat(value, length3 + 1)) {
          case 109:
            if (charat(value, length3 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length3 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix2(replace(value, "stretch", "fill-available"), length3) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length3 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length3 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var prefixer = function prefixer2(element, index5, children, callback) {
  if (element.length > -1) {
    if (!element["return"])
      switch (element.type) {
        case DECLARATION:
          element["return"] = prefix2(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy(element, {
            value: replace(element.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element.length)
            return combine(element.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy(element, {
                    props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback);
                case "::placeholder":
                  return serialize([copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                  })], callback);
              }
              return "";
            });
      }
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options2) {
  var key2 = options2.key;
  if (!key2) {
    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
  }
  if (key2 === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node3) {
      var dataEmotionAttribute = node3.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node3);
      node3.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options2.stylisPlugins || defaultStylisPlugins;
  if (true) {
    if (/[^a-z-]/.test(key2)) {
      throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key2 + '" was passed');
    }
  }
  var inserted = {};
  var container2;
  var nodesToHydrate = [];
  {
    container2 = options2.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key2 + ' "]'),
      function(node3) {
        var attrib = node3.getAttribute("data-emotion").split(" ");
        for (var i2 = 1; i2 < attrib.length; i2++) {
          inserted[attrib[i2]] = true;
        }
        nodesToHydrate.push(node3);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  if (true) {
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
      get compat() {
        return cache2.compat;
      }
    }), incorrectImportAlarm);
  }
  {
    var currentSheet;
    var finalizingPlugins = [stringify, true ? function(element) {
      if (!element.root) {
        if (element["return"]) {
          currentSheet.insert(element["return"]);
        } else if (element.value && element.type !== COMMENT) {
          currentSheet.insert(element.value + "{}");
        }
      }
    } : rulesheet(function(rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles2) {
      return serialize(compile(styles2), serializer);
    };
    _insert = function insert3(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      if (serialized.map !== void 0) {
        currentSheet = {
          insert: function insert4(rule) {
            sheet.insert(rule + serialized.map);
          }
        };
      }
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache2.inserted[serialized.name] = true;
      }
    };
  }
  var cache2 = {
    key: key2,
    sheet: new StyleSheet({
      key: key2,
      container: container2,
      nonce: options2.nonce,
      speedy: options2.speedy,
      prepend: options2.prepend,
      insertionPoint: options2.insertionPoint
    }),
    nonce: options2.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache2.sheet.hydrate(nodesToHydrate);
  return cache2;
};

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());

// node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames3) {
  var rawClassName = "";
  classNames3.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache2, serialized, isStringTag) {
  var className = cache2.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache2.registered[className] === void 0
  ) {
    cache2.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache2, serialized, isStringTag) {
  registerStyles(cache2, serialized, isStringTag);
  var className = cache2.key + "-" + serialized.name;
  if (cache2.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache2.insert(serialized === current ? "." + className : "", current, cache2.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};

// node_modules/@emotion/hash/dist/emotion-hash.esm.js
function murmur2(str) {
  var h = 0;
  var k, i2 = 0, len = str.length;
  for (; len >= 4; ++i2, len -= 4) {
    k = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
    k = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
    k ^= /* k >>> r: */
    k >>> 24;
    h = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i2 + 2) & 255) << 16;
    case 2:
      h ^= (str.charCodeAt(i2 + 1) & 255) << 8;
    case 1:
      h ^= str.charCodeAt(i2) & 255;
      h = /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  h ^= h >>> 13;
  h = /* Math.imul(h, m): */
  (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

// node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

// node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = memoize(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key2, value) {
  switch (key2) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match4, p1, p2) {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key2] !== 1 && !isCustomProperty(key2) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
if (true) {
  contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
  contentValues = ["normal", "none", "initial", "inherit", "unset"];
  oldProcessStyleValue = processStyleValue;
  msPattern = /^-ms-/;
  hyphenPattern = /-(.)/g;
  hyphenatedCache = {};
  processStyleValue = function processStyleValue3(key2, value) {
    if (key2 === "content") {
      if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }
    var processed = oldProcessStyleValue(key2, value);
    if (processed !== "" && !isCustomProperty(key2) && key2.indexOf("-") !== -1 && hyphenatedCache[key2] === void 0) {
      hyphenatedCache[key2] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key2.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }
    return processed;
  };
}
var contentValuePattern;
var contentValues;
var oldProcessStyleValue;
var msPattern;
var hyphenPattern;
var hyphenatedCache;
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
      throw new Error(noComponentSelectorMessage);
    }
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles2 = interpolation.styles + ";";
        if (interpolation.map !== void 0) {
          styles2 += interpolation.map;
        }
        return styles2;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      } else if (true) {
        console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      }
      break;
    }
    case "string":
      if (true) {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function(match4, p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
          return "${" + fakeVarName + "}";
        });
        if (matched.length) {
          console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
        }
      }
      break;
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string2 = "";
  if (Array.isArray(obj)) {
    for (var i2 = 0; i2 < obj.length; i2++) {
      string2 += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];
      if (typeof value !== "object") {
        if (registered != null && registered[value] !== void 0) {
          string2 += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string2 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && true) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string2 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (_key) {
            case "animation":
            case "animationName": {
              string2 += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              if (_key === "undefined") {
                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
              }
              string2 += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string2;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
if (true) {
  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
}
var cursor;
var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles2 = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles2 += handleInterpolation(mergedProps, registered, strings);
  } else {
    if (strings[0] === void 0) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
    }
    styles2 += strings[0];
  }
  for (var i2 = 1; i2 < args.length; i2++) {
    styles2 += handleInterpolation(mergedProps, registered, args[i2]);
    if (stringMode) {
      if (strings[i2] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles2 += strings[i2];
    }
  }
  var sourceMap;
  if (true) {
    styles2 = styles2.replace(sourceMapPattern, function(match5) {
      sourceMap = match5;
      return "";
    });
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match4;
  while ((match4 = labelPattern.exec(styles2)) !== null) {
    identifierName += "-" + // $FlowFixMe we know it's not null
    match4[1];
  }
  var name = murmur2(styles2) + identifierName;
  if (true) {
    return {
      name,
      styles: styles2,
      map: sourceMap,
      next: cursor,
      toString: function toString() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
  }
  return {
    name,
    styles: styles2,
    next: cursor
  };
};

// node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
var React = __toESM(require_react());
var syncFallback = function syncFallback2(create2) {
  return create2();
};
var useInsertionEffect2 = React["useInsertionEffect"] ? React["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React.useLayoutEffect;

// node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js
var isBrowser2 = true;
var hasOwnProperty = {}.hasOwnProperty;
var EmotionCacheContext = React2.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? createCache({
    key: "css"
  }) : null
);
if (true) {
  EmotionCacheContext.displayName = "EmotionCacheContext";
}
var CacheProvider = EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache2(func2) {
  return (0, import_react.forwardRef)(function(props, ref) {
    var cache2 = (0, import_react.useContext)(EmotionCacheContext);
    return func2(props, cache2, ref);
  });
};
if (!isBrowser2) {
  withEmotionCache = function withEmotionCache3(func2) {
    return function(props) {
      var cache2 = (0, import_react.useContext)(EmotionCacheContext);
      if (cache2 === null) {
        cache2 = createCache({
          key: "css"
        });
        return React2.createElement(EmotionCacheContext.Provider, {
          value: cache2
        }, func2(props, cache2));
      } else {
        return func2(props, cache2);
      }
    };
  };
}
var ThemeContext = React2.createContext({});
if (true) {
  ThemeContext.displayName = "EmotionThemeContext";
}
var getTheme = function getTheme2(outerTheme, theme3) {
  if (typeof theme3 === "function") {
    var mergedTheme = theme3(outerTheme);
    if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
      throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
    }
    return mergedTheme;
  }
  if (theme3 == null || typeof theme3 !== "object" || Array.isArray(theme3)) {
    throw new Error("[ThemeProvider] Please make your theme prop a plain object");
  }
  return _extends({}, outerTheme, theme3);
};
var createCacheWithTheme = weakMemoize(function(outerTheme) {
  return weakMemoize(function(theme3) {
    return getTheme(outerTheme, theme3);
  });
});
var ThemeProvider = function ThemeProvider2(props) {
  var theme3 = React2.useContext(ThemeContext);
  if (props.theme !== theme3) {
    theme3 = createCacheWithTheme(theme3)(props.theme);
  }
  return React2.createElement(ThemeContext.Provider, {
    value: theme3
  }, props.children);
};
var getLastPart = function getLastPart2(functionName) {
  var parts = functionName.split(".");
  return parts[parts.length - 1];
};
var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
  var match4 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
  if (match4)
    return getLastPart(match4[1]);
  match4 = /^([A-Za-z0-9$.]+)@/.exec(line2);
  if (match4)
    return getLastPart(match4[1]);
  return void 0;
};
var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
var sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
  return identifier2.replace(/\$/g, "-");
};
var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
  if (!stackTrace)
    return void 0;
  var lines = stackTrace.split("\n");
  for (var i2 = 0; i2 < lines.length; i2++) {
    var functionName = getFunctionNameFromStackTraceLine(lines[i2]);
    if (!functionName)
      continue;
    if (internalReactFunctionNames.has(functionName))
      break;
    if (/^[A-Z]/.test(functionName))
      return sanitizeIdentifier(functionName);
  }
  return void 0;
};
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var createEmotionProps = function createEmotionProps2(type, props) {
  if (typeof props.css === "string" && // check if there is a css declaration
  props.css.indexOf(":") !== -1) {
    throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
  }
  var newProps = {};
  for (var key2 in props) {
    if (hasOwnProperty.call(props, key2)) {
      newProps[key2] = props[key2];
    }
  }
  newProps[typePropName] = type;
  if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
    var label = getLabelFromStackTrace(new Error().stack);
    if (label)
      newProps[labelPropName] = label;
  }
  return newProps;
};
var Insertion = function Insertion2(_ref4) {
  var cache2 = _ref4.cache, serialized = _ref4.serialized, isStringTag = _ref4.isStringTag;
  registerStyles(cache2, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache2, serialized, isStringTag);
  });
  return null;
};
var Emotion = withEmotionCache(function(props, cache2, ref) {
  var cssProp = props.css;
  if (typeof cssProp === "string" && cache2.registered[cssProp] !== void 0) {
    cssProp = cache2.registered[cssProp];
  }
  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = "";
  if (typeof props.className === "string") {
    className = getRegisteredStyles(cache2.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }
  var serialized = serializeStyles(registeredStyles, void 0, React2.useContext(ThemeContext));
  if (serialized.name.indexOf("-") === -1) {
    var labelFromStack = props[labelPropName];
    if (labelFromStack) {
      serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
    }
  }
  className += cache2.key + "-" + serialized.name;
  var newProps = {};
  for (var key2 in props) {
    if (hasOwnProperty.call(props, key2) && key2 !== "css" && key2 !== typePropName && key2 !== labelPropName) {
      newProps[key2] = props[key2];
    }
  }
  newProps.ref = ref;
  newProps.className = className;
  return React2.createElement(React2.Fragment, null, React2.createElement(Insertion, {
    cache: cache2,
    serialized,
    isStringTag: typeof WrappedComponent === "string"
  }), React2.createElement(WrappedComponent, newProps));
});
if (true) {
  Emotion.displayName = "EmotionCssPropInternal";
}
var Emotion$1 = Emotion;

// node_modules/@emotion/react/dist/emotion-react.browser.esm.js
var React3 = __toESM(require_react());
var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
var pkg = {
  name: "@emotion/react",
  version: "11.11.3",
  main: "dist/emotion-react.cjs.js",
  module: "dist/emotion-react.esm.js",
  browser: {
    "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  },
  exports: {
    ".": {
      module: {
        worker: "./dist/emotion-react.worker.esm.js",
        browser: "./dist/emotion-react.browser.esm.js",
        "default": "./dist/emotion-react.esm.js"
      },
      "import": "./dist/emotion-react.cjs.mjs",
      "default": "./dist/emotion-react.cjs.js"
    },
    "./jsx-runtime": {
      module: {
        worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
        browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
        "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
      },
      "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
      "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
    },
    "./_isolated-hnrs": {
      module: {
        worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
        browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
        "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
      },
      "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
      "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
    },
    "./jsx-dev-runtime": {
      module: {
        worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
        browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
        "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
      },
      "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
      "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
    },
    "./package.json": "./package.json",
    "./types/css-prop": "./types/css-prop.d.ts",
    "./macro": {
      types: {
        "import": "./macro.d.mts",
        "default": "./macro.d.ts"
      },
      "default": "./macro.js"
    }
  },
  types: "types/index.d.ts",
  files: [
    "src",
    "dist",
    "jsx-runtime",
    "jsx-dev-runtime",
    "_isolated-hnrs",
    "types/*.d.ts",
    "macro.*"
  ],
  sideEffects: false,
  author: "Emotion Contributors",
  license: "MIT",
  scripts: {
    "test:typescript": "dtslint types"
  },
  dependencies: {
    "@babel/runtime": "^7.18.3",
    "@emotion/babel-plugin": "^11.11.0",
    "@emotion/cache": "^11.11.0",
    "@emotion/serialize": "^1.1.3",
    "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
    "@emotion/utils": "^1.2.1",
    "@emotion/weak-memoize": "^0.3.1",
    "hoist-non-react-statics": "^3.3.1"
  },
  peerDependencies: {
    react: ">=16.8.0"
  },
  peerDependenciesMeta: {
    "@types/react": {
      optional: true
    }
  },
  devDependencies: {
    "@definitelytyped/dtslint": "0.0.112",
    "@emotion/css": "11.11.2",
    "@emotion/css-prettifier": "1.1.3",
    "@emotion/server": "11.11.0",
    "@emotion/styled": "11.11.0",
    "html-tag-names": "^1.1.2",
    react: "16.14.0",
    "svg-tag-names": "^1.1.1",
    typescript: "^4.5.5"
  },
  repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  publishConfig: {
    access: "public"
  },
  "umd:main": "dist/emotion-react.umd.min.js",
  preconstruct: {
    entrypoints: [
      "./index.js",
      "./jsx-runtime.js",
      "./jsx-dev-runtime.js",
      "./_isolated-hnrs.js"
    ],
    umdName: "emotionReact",
    exports: {
      envConditions: [
        "browser",
        "worker"
      ],
      extra: {
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
          types: {
            "import": "./macro.d.mts",
            "default": "./macro.d.ts"
          },
          "default": "./macro.js"
        }
      }
    }
  }
};
var jsx = function jsx2(type, props) {
  var args = arguments;
  if (props == null || !hasOwnProperty.call(props, "css")) {
    return React3.createElement.apply(void 0, args);
  }
  var argsLength = args.length;
  var createElementArgArray = new Array(argsLength);
  createElementArgArray[0] = Emotion$1;
  createElementArgArray[1] = createEmotionProps(type, props);
  for (var i2 = 2; i2 < argsLength; i2++) {
    createElementArgArray[i2] = args[i2];
  }
  return React3.createElement.apply(null, createElementArgArray);
};
var warnedAboutCssPropForGlobal = false;
var Global = withEmotionCache(function(props, cache2) {
  if (!warnedAboutCssPropForGlobal && // check for className as well since the user is
  // probably using the custom createElement which
  // means it will be turned into a className prop
  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
  (props.className || props.css)) {
    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
    warnedAboutCssPropForGlobal = true;
  }
  var styles2 = props.styles;
  var serialized = serializeStyles([styles2], void 0, React3.useContext(ThemeContext));
  if (!isBrowser2) {
    var _ref4;
    var serializedNames = serialized.name;
    var serializedStyles = serialized.styles;
    var next2 = serialized.next;
    while (next2 !== void 0) {
      serializedNames += " " + next2.name;
      serializedStyles += next2.styles;
      next2 = next2.next;
    }
    var shouldCache = cache2.compat === true;
    var rules = cache2.insert("", {
      name: serializedNames,
      styles: serializedStyles
    }, cache2.sheet, shouldCache);
    if (shouldCache) {
      return null;
    }
    return React3.createElement("style", (_ref4 = {}, _ref4["data-emotion"] = cache2.key + "-global " + serializedNames, _ref4.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref4.nonce = cache2.sheet.nonce, _ref4));
  }
  var sheetRef = React3.useRef();
  useInsertionEffectWithLayoutFallback(function() {
    var key2 = cache2.key + "-global";
    var sheet = new cache2.sheet.constructor({
      key: key2,
      nonce: cache2.sheet.nonce,
      container: cache2.sheet.container,
      speedy: cache2.sheet.isSpeedy
    });
    var rehydrating = false;
    var node3 = document.querySelector('style[data-emotion="' + key2 + " " + serialized.name + '"]');
    if (cache2.sheet.tags.length) {
      sheet.before = cache2.sheet.tags[0];
    }
    if (node3 !== null) {
      rehydrating = true;
      node3.setAttribute("data-emotion", key2);
      sheet.hydrate([node3]);
    }
    sheetRef.current = [sheet, rehydrating];
    return function() {
      sheet.flush();
    };
  }, [cache2]);
  useInsertionEffectWithLayoutFallback(function() {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }
    if (serialized.next !== void 0) {
      insertStyles(cache2, serialized.next, true);
    }
    if (sheet.tags.length) {
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }
    cache2.insert("", serialized, sheet, false);
  }, [cache2, serialized.name]);
  return null;
});
if (true) {
  Global.displayName = "EmotionGlobal";
}
function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
var keyframes = function keyframes2() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};
var classnames = function classnames2(args) {
  var len = args.length;
  var i2 = 0;
  var cls = "";
  for (; i2 < len; i2++) {
    var arg = args[i2];
    if (arg == null)
      continue;
    var toAdd = void 0;
    switch (typeof arg) {
      case "boolean":
        break;
      case "object": {
        if (Array.isArray(arg)) {
          toAdd = classnames2(arg);
        } else {
          if (arg.styles !== void 0 && arg.name !== void 0) {
            console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
          }
          toAdd = "";
          for (var k in arg) {
            if (arg[k] && k) {
              toAdd && (toAdd += " ");
              toAdd += k;
            }
          }
        }
        break;
      }
      default: {
        toAdd = arg;
      }
    }
    if (toAdd) {
      cls && (cls += " ");
      cls += toAdd;
    }
  }
  return cls;
};
function merge(registered, css7, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
  if (registeredStyles.length < 2) {
    return className;
  }
  return rawClassName + css7(registeredStyles);
}
var Insertion3 = function Insertion4(_ref4) {
  var cache2 = _ref4.cache, serializedArr = _ref4.serializedArr;
  useInsertionEffectAlwaysWithSyncFallback(function() {
    for (var i2 = 0; i2 < serializedArr.length; i2++) {
      insertStyles(cache2, serializedArr[i2], false);
    }
  });
  return null;
};
var ClassNames = withEmotionCache(function(props, cache2) {
  var hasRendered = false;
  var serializedArr = [];
  var css7 = function css8() {
    if (hasRendered && true) {
      throw new Error("css can only be used during render");
    }
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var serialized = serializeStyles(args, cache2.registered);
    serializedArr.push(serialized);
    registerStyles(cache2, serialized, false);
    return cache2.key + "-" + serialized.name;
  };
  var cx4 = function cx5() {
    if (hasRendered && true) {
      throw new Error("cx can only be used during render");
    }
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return merge(cache2.registered, css7, classnames(args));
  };
  var content = {
    css: css7,
    cx: cx4,
    theme: React3.useContext(ThemeContext)
  };
  var ele = props.children(content);
  hasRendered = true;
  return React3.createElement(React3.Fragment, null, React3.createElement(Insertion3, {
    cache: cache2,
    serializedArr
  }), ele);
});
if (true) {
  ClassNames.displayName = "EmotionClassNames";
}
if (true) {
  isBrowser7 = true;
  isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
  if (isBrowser7 && !isTestEnv) {
    globalContext = // $FlowIgnore
    typeof globalThis !== "undefined" ? globalThis : isBrowser7 ? window : global;
    globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
    if (globalContext[globalKey]) {
      console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    }
    globalContext[globalKey] = true;
  }
}
var isBrowser7;
var isTestEnv;
var globalContext;
var globalKey;

// node_modules/@chakra-ui/css-reset/dist/chunk-B4LBJQ3X.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var css2 = String.raw;
var vhPolyfill = css2`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`;
var CSSPolyfill = () => (0, import_jsx_runtime.jsx)(Global, { styles: vhPolyfill });
var CSSReset = ({ scope = "" }) => (0, import_jsx_runtime.jsx)(
  Global,
  {
    styles: css2`
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: "kern";
      }

      ${scope} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${scope} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${scope} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${scope} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${scope} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${scope} :where(b, strong) {
        font-weight: bold;
      }

      ${scope} small {
        font-size: 80%;
      }

      ${scope} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${scope} sub {
        bottom: -0.25em;
      }

      ${scope} sup {
        top: -0.5em;
      }

      ${scope} img {
        border-style: none;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${scope} :where(button, input) {
        overflow: visible;
      }

      ${scope} :where(button, select) {
        text-transform: none;
      }

      ${scope} :where(
          button::-moz-focus-inner,
          [type="button"]::-moz-focus-inner,
          [type="reset"]::-moz-focus-inner,
          [type="submit"]::-moz-focus-inner
        ) {
        border-style: none;
        padding: 0;
      }

      ${scope} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${scope} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${scope} progress {
        vertical-align: baseline;
      }

      ${scope} textarea {
        overflow: auto;
      }

      ${scope} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${scope} input[type="number"]::-webkit-inner-spin-button,
      ${scope} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${scope} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${scope} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${scope} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${scope} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${scope} details {
        display: block;
      }

      ${scope} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${scope} :where(
          blockquote,
          dl,
          dd,
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          hr,
          figure,
          p,
          pre
        ) {
        margin: 0;
      }

      ${scope} button {
        background: transparent;
        padding: 0;
      }

      ${scope} fieldset {
        margin: 0;
        padding: 0;
      }

      ${scope} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${scope} textarea {
        resize: vertical;
      }

      ${scope} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${scope} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${scope} table {
        border-collapse: collapse;
      }

      ${scope} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${scope} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${scope} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${scope} select::-ms-expand {
        display: none;
      }

      ${vhPolyfill}
    `
  }
);

// node_modules/@chakra-ui/react-context/dist/index.mjs
var import_react3 = __toESM(require_react(), 1);
function getErrorMessage(hook, provider) {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
}
function createContext2(options2 = {}) {
  const {
    name,
    strict = true,
    hookName = "useContext",
    providerName = "Provider",
    errorMessage,
    defaultValue: defaultValue2
  } = options2;
  const Context2 = (0, import_react3.createContext)(defaultValue2);
  Context2.displayName = name;
  function useContext44() {
    var _a9;
    const context2 = (0, import_react3.useContext)(Context2);
    if (!context2 && strict) {
      const error2 = new Error(
        errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName)
      );
      error2.name = "ContextError";
      (_a9 = Error.captureStackTrace) == null ? void 0 : _a9.call(Error, error2, useContext44);
      throw error2;
    }
    return context2;
  }
  return [Context2.Provider, useContext44, Context2];
}

// node_modules/@chakra-ui/portal/dist/chunk-HK66PB7M.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var [PortalManagerContextProvider, usePortalManager] = createContext2({
  strict: false,
  name: "PortalManagerContext"
});
function PortalManager(props) {
  const { children, zIndex: zIndex2 } = props;
  return (0, import_jsx_runtime2.jsx)(PortalManagerContextProvider, { value: { zIndex: zIndex2 }, children });
}
PortalManager.displayName = "PortalManager";

// node_modules/@chakra-ui/react-use-safe-layout-effect/dist/index.mjs
var import_react4 = __toESM(require_react(), 1);
var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react4.useLayoutEffect : import_react4.useEffect;

// node_modules/@chakra-ui/portal/dist/chunk-34PD6CUK.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var [PortalContextProvider, usePortalContext] = createContext2({
  strict: false,
  name: "PortalContext"
});
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = `.chakra-portal`;
var Container = (props) => (0, import_jsx_runtime3.jsx)(
  "div",
  {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: props.zIndex,
      top: 0,
      left: 0,
      right: 0
      // NB: Don't add `bottom: 0`, it makes the entire app unusable
      // @see https://github.com/chakra-ui/chakra-ui/issues/3201
    },
    children: props.children
  }
);
var DefaultPortal = (props) => {
  const { appendToParentPortal, children } = props;
  const [tempNode, setTempNode] = (0, import_react5.useState)(null);
  const portal = (0, import_react5.useRef)(null);
  const [, forceUpdate] = (0, import_react5.useState)({});
  (0, import_react5.useEffect)(() => forceUpdate({}), []);
  const parentPortal = usePortalContext();
  const manager = usePortalManager();
  useSafeLayoutEffect(() => {
    if (!tempNode)
      return;
    const doc = tempNode.ownerDocument;
    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;
    if (!host)
      return;
    portal.current = doc.createElement("div");
    portal.current.className = PORTAL_CLASSNAME;
    host.appendChild(portal.current);
    forceUpdate({});
    const portalNode = portal.current;
    return () => {
      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, [tempNode]);
  const _children = (manager == null ? void 0 : manager.zIndex) ? (0, import_jsx_runtime3.jsx)(Container, { zIndex: manager == null ? void 0 : manager.zIndex, children }) : children;
  return portal.current ? (0, import_react_dom.createPortal)(
    (0, import_jsx_runtime3.jsx)(PortalContextProvider, { value: portal.current, children: _children }),
    portal.current
  ) : (0, import_jsx_runtime3.jsx)(
    "span",
    {
      ref: (el) => {
        if (el)
          setTempNode(el);
      }
    }
  );
};
var ContainerPortal = (props) => {
  const { children, containerRef, appendToParentPortal } = props;
  const containerEl = containerRef.current;
  const host = containerEl != null ? containerEl : typeof window !== "undefined" ? document.body : void 0;
  const portal = (0, import_react5.useMemo)(() => {
    const node3 = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
    if (node3)
      node3.className = PORTAL_CLASSNAME;
    return node3;
  }, [containerEl]);
  const [, forceUpdate] = (0, import_react5.useState)({});
  useSafeLayoutEffect(() => forceUpdate({}), []);
  useSafeLayoutEffect(() => {
    if (!portal || !host)
      return;
    host.appendChild(portal);
    return () => {
      host.removeChild(portal);
    };
  }, [portal, host]);
  if (host && portal) {
    return (0, import_react_dom.createPortal)(
      (0, import_jsx_runtime3.jsx)(PortalContextProvider, { value: appendToParentPortal ? portal : null, children }),
      portal
    );
  }
  return null;
};
function Portal(props) {
  const portalProps = {
    appendToParentPortal: true,
    ...props
  };
  const { containerRef, ...rest } = portalProps;
  return containerRef ? (0, import_jsx_runtime3.jsx)(ContainerPortal, { containerRef, ...rest }) : (0, import_jsx_runtime3.jsx)(DefaultPortal, { ...rest });
}
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
Portal.displayName = "Portal";

// node_modules/@chakra-ui/system/dist/chunk-UIGT7YZF.mjs
var import_react7 = __toESM(require_react(), 1);
function useTheme2() {
  const theme3 = (0, import_react7.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/color-mode/dist/chunk-UQDW7KKV.mjs
var import_react8 = __toESM(require_react(), 1);
var ColorModeContext = (0, import_react8.createContext)({});
ColorModeContext.displayName = "ColorModeContext";
function useColorMode() {
  const context2 = (0, import_react8.useContext)(ColorModeContext);
  if (context2 === void 0) {
    throw new Error("useColorMode must be used within a ColorModeProvider");
  }
  return context2;
}
function useColorModeValue(light, dark) {
  const { colorMode } = useColorMode();
  return colorMode === "dark" ? dark : light;
}

// node_modules/@chakra-ui/color-mode/dist/chunk-X7ZBZ4KW.mjs
var classNames = {
  light: "chakra-ui-light",
  dark: "chakra-ui-dark"
};
function getColorModeUtils(options2 = {}) {
  const { preventTransition = true } = options2;
  const utils = {
    setDataset: (value) => {
      const cleanup = preventTransition ? utils.preventTransition() : void 0;
      document.documentElement.dataset.theme = value;
      document.documentElement.style.colorScheme = value;
      cleanup == null ? void 0 : cleanup();
    },
    setClassName(dark) {
      document.body.classList.add(dark ? classNames.dark : classNames.light);
      document.body.classList.remove(dark ? classNames.light : classNames.dark);
    },
    query() {
      return window.matchMedia("(prefers-color-scheme: dark)");
    },
    getSystemTheme(fallback) {
      var _a9;
      const dark = (_a9 = utils.query().matches) != null ? _a9 : fallback === "dark";
      return dark ? "dark" : "light";
    },
    addListener(fn2) {
      const mql = utils.query();
      const listener = (e) => {
        fn2(e.matches ? "dark" : "light");
      };
      if (typeof mql.addListener === "function")
        mql.addListener(listener);
      else
        mql.addEventListener("change", listener);
      return () => {
        if (typeof mql.removeListener === "function")
          mql.removeListener(listener);
        else
          mql.removeEventListener("change", listener);
      };
    },
    preventTransition() {
      const css7 = document.createElement("style");
      css7.appendChild(
        document.createTextNode(
          `*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`
        )
      );
      document.head.appendChild(css7);
      return () => {
        ;
        (() => window.getComputedStyle(document.body))();
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            document.head.removeChild(css7);
          });
        });
      };
    }
  };
  return utils;
}

// node_modules/@chakra-ui/color-mode/dist/chunk-44OWBZ77.mjs
var STORAGE_KEY = "chakra-ui-color-mode";
function createLocalStorageManager(key2) {
  return {
    ssr: false,
    type: "localStorage",
    get(init2) {
      if (!(globalThis == null ? void 0 : globalThis.document))
        return init2;
      let value;
      try {
        value = localStorage.getItem(key2) || init2;
      } catch (e) {
      }
      return value || init2;
    },
    set(value) {
      try {
        localStorage.setItem(key2, value);
      } catch (e) {
      }
    }
  };
}
var localStorageManager = createLocalStorageManager(STORAGE_KEY);
function parseCookie(cookie, key2) {
  const match4 = cookie.match(new RegExp(`(^| )${key2}=([^;]+)`));
  return match4 == null ? void 0 : match4[2];
}
function createCookieStorageManager(key2, cookie) {
  return {
    ssr: !!cookie,
    type: "cookie",
    get(init2) {
      if (cookie)
        return parseCookie(cookie, key2);
      if (!(globalThis == null ? void 0 : globalThis.document))
        return init2;
      return parseCookie(document.cookie, key2) || init2;
    },
    set(value) {
      document.cookie = `${key2}=${value}; max-age=31536000; path=/`;
    }
  };
}
var cookieStorageManager = createCookieStorageManager(STORAGE_KEY);

// node_modules/@chakra-ui/color-mode/dist/chunk-AMBGAKG2.mjs
var import_react9 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var noop = () => {
};
function getTheme3(manager, fallback) {
  return manager.type === "cookie" && manager.ssr ? manager.get(fallback) : fallback;
}
function ColorModeProvider(props) {
  const {
    value,
    children,
    options: {
      useSystemColorMode,
      initialColorMode,
      disableTransitionOnChange
    } = {},
    colorModeManager = localStorageManager
  } = props;
  const defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
  const [colorMode, rawSetColorMode] = (0, import_react9.useState)(
    () => getTheme3(colorModeManager, defaultColorMode)
  );
  const [resolvedColorMode, setResolvedColorMode] = (0, import_react9.useState)(
    () => getTheme3(colorModeManager)
  );
  const { getSystemTheme, setClassName, setDataset, addListener } = (0, import_react9.useMemo)(
    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),
    [disableTransitionOnChange]
  );
  const resolvedValue = initialColorMode === "system" && !colorMode ? resolvedColorMode : colorMode;
  const setColorMode = (0, import_react9.useCallback)(
    (value2) => {
      const resolved = value2 === "system" ? getSystemTheme() : value2;
      rawSetColorMode(resolved);
      setClassName(resolved === "dark");
      setDataset(resolved);
      colorModeManager.set(resolved);
    },
    [colorModeManager, getSystemTheme, setClassName, setDataset]
  );
  useSafeLayoutEffect(() => {
    if (initialColorMode === "system") {
      setResolvedColorMode(getSystemTheme());
    }
  }, []);
  (0, import_react9.useEffect)(() => {
    const managerValue = colorModeManager.get();
    if (managerValue) {
      setColorMode(managerValue);
      return;
    }
    if (initialColorMode === "system") {
      setColorMode("system");
      return;
    }
    setColorMode(defaultColorMode);
  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);
  const toggleColorMode = (0, import_react9.useCallback)(() => {
    setColorMode(resolvedValue === "dark" ? "light" : "dark");
  }, [resolvedValue, setColorMode]);
  (0, import_react9.useEffect)(() => {
    if (!useSystemColorMode)
      return;
    return addListener(setColorMode);
  }, [useSystemColorMode, addListener, setColorMode]);
  const context2 = (0, import_react9.useMemo)(
    () => ({
      colorMode: value != null ? value : resolvedValue,
      toggleColorMode: value ? noop : toggleColorMode,
      setColorMode: value ? noop : setColorMode,
      forced: value !== void 0
    }),
    [resolvedValue, toggleColorMode, setColorMode, value]
  );
  return (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, { value: context2, children });
}
ColorModeProvider.displayName = "ColorModeProvider";
function DarkMode(props) {
  const context2 = (0, import_react9.useMemo)(
    () => ({
      colorMode: "dark",
      toggleColorMode: noop,
      setColorMode: noop,
      forced: true
    }),
    []
  );
  return (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, { value: context2, ...props });
}
DarkMode.displayName = "DarkMode";
function LightMode(props) {
  const context2 = (0, import_react9.useMemo)(
    () => ({
      colorMode: "light",
      toggleColorMode: noop,
      setColorMode: noop,
      forced: true
    }),
    []
  );
  return (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, { value: context2, ...props });
}
LightMode.displayName = "LightMode";

// node_modules/@chakra-ui/color-mode/dist/chunk-WP4V2BSL.mjs
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/system/dist/chunk-7FWEOSAE.mjs
function useChakra() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme2();
  return { ...colorModeResult, theme: theme3 };
}
function getBreakpointValue(theme3, value, fallback) {
  var _a9, _b5;
  if (value == null)
    return value;
  const getValue2 = (val) => {
    var _a24, _b22;
    return (_b22 = (_a24 = theme3.__breakpoints) == null ? void 0 : _a24.asArray) == null ? void 0 : _b22[val];
  };
  return (_b5 = (_a9 = getValue2(value)) != null ? _a9 : getValue2(fallback)) != null ? _b5 : fallback;
}
function getTokenValue(theme3, value, fallback) {
  var _a9, _b5;
  if (value == null)
    return value;
  const getValue2 = (val) => {
    var _a24, _b22;
    return (_b22 = (_a24 = theme3.__cssMap) == null ? void 0 : _a24[val]) == null ? void 0 : _b22.value;
  };
  return (_b5 = (_a9 = getValue2(value)) != null ? _a9 : getValue2(fallback)) != null ? _b5 : fallback;
}
function useToken(scale4, token2, fallback) {
  const theme3 = useTheme2();
  return getToken(scale4, token2, fallback)(theme3);
}
function getToken(scale4, token2, fallback) {
  const _token = Array.isArray(token2) ? token2 : [token2];
  const _fallback = Array.isArray(fallback) ? fallback : [fallback];
  return (theme3) => {
    const fallbackArr = _fallback.filter(Boolean);
    const result = _token.map((token22, index5) => {
      var _a9, _b5;
      if (scale4 === "breakpoints") {
        return getBreakpointValue(theme3, token22, (_a9 = fallbackArr[index5]) != null ? _a9 : token22);
      }
      const path2 = `${scale4}.${token22}`;
      return getTokenValue(theme3, path2, (_b5 = fallbackArr[index5]) != null ? _b5 : token22);
    });
    return Array.isArray(token2) ? result : result[0];
  };
}

// node_modules/@chakra-ui/shared-utils/dist/index.mjs
var cx = (...classNames3) => classNames3.filter(Boolean).join(" ");
function isDev() {
  return true;
}
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function") && !Array.isArray(value);
}
var warn = (options2) => {
  const { condition, message } = options2;
  if (condition && isDev()) {
    console.warn(message);
  }
};
function runIfFn(valueOrFn, ...args) {
  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
var isFunction = (value) => typeof value === "function";
var dataAttr = (condition) => condition ? "" : void 0;
var ariaAttr = (condition) => condition ? true : void 0;
function callAllHandlers(...fns) {
  return function func2(event) {
    fns.some((fn2) => {
      fn2 == null ? void 0 : fn2(event);
      return event == null ? void 0 : event.defaultPrevented;
    });
  };
}
function callAll(...fns) {
  return function mergedFn(arg) {
    fns.forEach((fn2) => {
      fn2 == null ? void 0 : fn2(arg);
    });
  };
}

// node_modules/@chakra-ui/styled-system/dist/index.mjs
var import_lodash = __toESM(require_lodash(), 1);
var import_lodash2 = __toESM(require_lodash(), 1);
var import_lodash3 = __toESM(require_lodash(), 1);
var import_lodash4 = __toESM(require_lodash(), 1);
var isImportant = (value) => /!(important)?$/.test(value);
var withoutImportant = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
var tokenToCSSVar = (scale4, value) => (theme3) => {
  const valueStr = String(value);
  const important = isImportant(valueStr);
  const valueWithoutImportant = withoutImportant(valueStr);
  const key2 = scale4 ? `${scale4}.${valueWithoutImportant}` : valueWithoutImportant;
  let transformed = isObject(theme3.__cssMap) && key2 in theme3.__cssMap ? theme3.__cssMap[key2].varRef : value;
  transformed = withoutImportant(transformed);
  return important ? `${transformed} !important` : transformed;
};
function createTransform(options2) {
  const { scale: scale4, transform: transform22, compose: compose2 } = options2;
  const fn2 = (value, theme3) => {
    var _a9;
    const _value = tokenToCSSVar(scale4, value)(theme3);
    let result = (_a9 = transform22 == null ? void 0 : transform22(_value, theme3)) != null ? _a9 : _value;
    if (compose2) {
      result = compose2(result, theme3);
    }
    return result;
  };
  return fn2;
}
var pipe = (...fns) => (v) => fns.reduce((a2, b2) => b2(a2), v);
function toConfig(scale4, transform22) {
  return (property) => {
    const result = { property, scale: scale4 };
    result.transform = createTransform({
      scale: scale4,
      transform: transform22
    });
    return result;
  };
}
var getRtl = ({ rtl, ltr }) => (theme3) => theme3.direction === "rtl" ? rtl : ltr;
function logical(options2) {
  const { property, scale: scale4, transform: transform22 } = options2;
  return {
    scale: scale4,
    property: getRtl(property),
    transform: scale4 ? createTransform({
      scale: scale4,
      compose: transform22
    }) : transform22
  };
}
var transformTemplate = [
  "rotate(var(--chakra-rotate, 0))",
  "scaleX(var(--chakra-scale-x, 1))",
  "scaleY(var(--chakra-scale-y, 1))",
  "skewX(var(--chakra-skew-x, 0))",
  "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate() {
  return [
    "translateX(var(--chakra-translate-x, 0))",
    "translateY(var(--chakra-translate-y, 0))",
    ...transformTemplate
  ].join(" ");
}
function getTransformGpuTemplate() {
  return [
    "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
    ...transformTemplate
  ].join(" ");
}
var filterTemplate = {
  "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
  filter: [
    "var(--chakra-blur)",
    "var(--chakra-brightness)",
    "var(--chakra-contrast)",
    "var(--chakra-grayscale)",
    "var(--chakra-hue-rotate)",
    "var(--chakra-invert)",
    "var(--chakra-saturate)",
    "var(--chakra-sepia)",
    "var(--chakra-drop-shadow)"
  ].join(" ")
};
var backdropFilterTemplate = {
  backdropFilter: [
    "var(--chakra-backdrop-blur)",
    "var(--chakra-backdrop-brightness)",
    "var(--chakra-backdrop-contrast)",
    "var(--chakra-backdrop-grayscale)",
    "var(--chakra-backdrop-hue-rotate)",
    "var(--chakra-backdrop-invert)",
    "var(--chakra-backdrop-opacity)",
    "var(--chakra-backdrop-saturate)",
    "var(--chakra-backdrop-sepia)"
  ].join(" "),
  "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
function getRingTemplate(value) {
  return {
    "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
    "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
    "--chakra-ring-width": value,
    boxShadow: [
      `var(--chakra-ring-offset-shadow)`,
      `var(--chakra-ring-shadow)`,
      `var(--chakra-shadow, 0 0 #0000)`
    ].join(", ")
  };
}
var flexDirectionTemplate = {
  "row-reverse": {
    space: "--chakra-space-x-reverse",
    divide: "--chakra-divide-x-reverse"
  },
  "column-reverse": {
    space: "--chakra-space-y-reverse",
    divide: "--chakra-divide-y-reverse"
  }
};
var directionMap = {
  "to-t": "to top",
  "to-tr": "to top right",
  "to-r": "to right",
  "to-br": "to bottom right",
  "to-b": "to bottom",
  "to-bl": "to bottom left",
  "to-l": "to left",
  "to-tl": "to top left"
};
var valueSet = new Set(Object.values(directionMap));
var globalSet = /* @__PURE__ */ new Set([
  "none",
  "-moz-initial",
  "inherit",
  "initial",
  "revert",
  "unset"
]);
var trimSpace = (str) => str.trim();
function parseGradient(value, theme3) {
  if (value == null || globalSet.has(value))
    return value;
  const prevent = isCSSFunction(value) || globalSet.has(value);
  if (!prevent)
    return `url('${value}')`;
  const regex2 = /(^[a-z-A-Z]+)\((.*)\)/g;
  const results = regex2.exec(value);
  const type = results == null ? void 0 : results[1];
  const values2 = results == null ? void 0 : results[2];
  if (!type || !values2)
    return value;
  const _type = type.includes("-gradient") ? type : `${type}-gradient`;
  const [maybeDirection, ...stops] = values2.split(",").map(trimSpace).filter(Boolean);
  if ((stops == null ? void 0 : stops.length) === 0)
    return value;
  const direction2 = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
  stops.unshift(direction2);
  const _values = stops.map((stop) => {
    if (valueSet.has(stop))
      return stop;
    const firstStop = stop.indexOf(" ");
    const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
    const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
    const key2 = `colors.${_color}`;
    const color22 = key2 in theme3.__cssMap ? theme3.__cssMap[key2].varRef : _color;
    return _stopOrFunc ? [
      color22,
      ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
    ].join(" ") : color22;
  });
  return `${_type}(${_values.join(", ")})`;
}
var isCSSFunction = (value) => {
  return typeof value === "string" && value.includes("(") && value.includes(")");
};
var gradientTransform = (value, theme3) => parseGradient(value, theme3 != null ? theme3 : {});
function isCssVar(value) {
  return /^var\(--.+\)$/.test(value);
}
var analyzeCSSValue = (value) => {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
};
var wrap = (str) => (value) => `${str}(${value})`;
var transformFunctions = {
  filter(value) {
    return value !== "auto" ? value : filterTemplate;
  },
  backdropFilter(value) {
    return value !== "auto" ? value : backdropFilterTemplate;
  },
  ring(value) {
    return getRingTemplate(transformFunctions.px(value));
  },
  bgClip(value) {
    return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
  },
  transform(value) {
    if (value === "auto")
      return getTransformTemplate();
    if (value === "auto-gpu")
      return getTransformGpuTemplate();
    return value;
  },
  vh(value) {
    return value === "$100vh" ? "var(--chakra-vh)" : value;
  },
  px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  },
  fraction(value) {
    return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
  },
  float(value, theme3) {
    const map2 = { left: "right", right: "left" };
    return theme3.direction === "rtl" ? map2[value] : value;
  },
  degree(value) {
    if (isCssVar(value) || value == null)
      return value;
    const unitless = typeof value === "string" && !value.endsWith("deg");
    return typeof value === "number" || unitless ? `${value}deg` : value;
  },
  gradient: gradientTransform,
  blur: wrap("blur"),
  opacity: wrap("opacity"),
  brightness: wrap("brightness"),
  contrast: wrap("contrast"),
  dropShadow: wrap("drop-shadow"),
  grayscale: wrap("grayscale"),
  hueRotate: (value) => wrap("hue-rotate")(transformFunctions.degree(value)),
  invert: wrap("invert"),
  saturate: wrap("saturate"),
  sepia: wrap("sepia"),
  bgImage(value) {
    if (value == null)
      return value;
    const prevent = isCSSFunction(value) || globalSet.has(value);
    return !prevent ? `url(${value})` : value;
  },
  outline(value) {
    const isNoneOrZero = String(value) === "0" || String(value) === "none";
    return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
  },
  flexDirection(value) {
    var _a9;
    const { space: space2, divide: divide22 } = (_a9 = flexDirectionTemplate[value]) != null ? _a9 : {};
    const result = { flexDirection: value };
    if (space2)
      result[space2] = 1;
    if (divide22)
      result[divide22] = 1;
    return result;
  }
};
var t = {
  borderWidths: toConfig("borderWidths"),
  borderStyles: toConfig("borderStyles"),
  colors: toConfig("colors"),
  borders: toConfig("borders"),
  gradients: toConfig("gradients", transformFunctions.gradient),
  radii: toConfig("radii", transformFunctions.px),
  space: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
  spaceT: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
  degreeT(property) {
    return { property, transform: transformFunctions.degree };
  },
  prop(property, scale4, transform22) {
    return {
      property,
      scale: scale4,
      ...scale4 && {
        transform: createTransform({ scale: scale4, transform: transform22 })
      }
    };
  },
  propT(property, transform22) {
    return { property, transform: transform22 };
  },
  sizes: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.px)),
  sizesT: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.fraction)),
  shadows: toConfig("shadows"),
  logical,
  blur: toConfig("blur", transformFunctions.blur)
};
var background = {
  background: t.colors("background"),
  backgroundColor: t.colors("backgroundColor"),
  backgroundImage: t.gradients("backgroundImage"),
  backgroundSize: true,
  backgroundPosition: true,
  backgroundRepeat: true,
  backgroundAttachment: true,
  backgroundClip: { transform: transformFunctions.bgClip },
  bgSize: t.prop("backgroundSize"),
  bgPosition: t.prop("backgroundPosition"),
  bg: t.colors("background"),
  bgColor: t.colors("backgroundColor"),
  bgPos: t.prop("backgroundPosition"),
  bgRepeat: t.prop("backgroundRepeat"),
  bgAttachment: t.prop("backgroundAttachment"),
  bgGradient: t.gradients("backgroundImage"),
  bgClip: { transform: transformFunctions.bgClip }
};
Object.assign(background, {
  bgImage: background.backgroundImage,
  bgImg: background.backgroundImage
});
var border = {
  border: t.borders("border"),
  borderWidth: t.borderWidths("borderWidth"),
  borderStyle: t.borderStyles("borderStyle"),
  borderColor: t.colors("borderColor"),
  borderRadius: t.radii("borderRadius"),
  borderTop: t.borders("borderTop"),
  borderBlockStart: t.borders("borderBlockStart"),
  borderTopLeftRadius: t.radii("borderTopLeftRadius"),
  borderStartStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopLeftRadius",
      rtl: "borderTopRightRadius"
    }
  }),
  borderEndStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomLeftRadius",
      rtl: "borderBottomRightRadius"
    }
  }),
  borderTopRightRadius: t.radii("borderTopRightRadius"),
  borderStartEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopRightRadius",
      rtl: "borderTopLeftRadius"
    }
  }),
  borderEndEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomRightRadius",
      rtl: "borderBottomLeftRadius"
    }
  }),
  borderRight: t.borders("borderRight"),
  borderInlineEnd: t.borders("borderInlineEnd"),
  borderBottom: t.borders("borderBottom"),
  borderBlockEnd: t.borders("borderBlockEnd"),
  borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
  borderBottomRightRadius: t.radii("borderBottomRightRadius"),
  borderLeft: t.borders("borderLeft"),
  borderInlineStart: {
    property: "borderInlineStart",
    scale: "borders"
  },
  borderInlineStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
    }
  }),
  borderInlineEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
    }
  }),
  borderX: t.borders(["borderLeft", "borderRight"]),
  borderInline: t.borders("borderInline"),
  borderY: t.borders(["borderTop", "borderBottom"]),
  borderBlock: t.borders("borderBlock"),
  borderTopWidth: t.borderWidths("borderTopWidth"),
  borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
  borderTopColor: t.colors("borderTopColor"),
  borderBlockStartColor: t.colors("borderBlockStartColor"),
  borderTopStyle: t.borderStyles("borderTopStyle"),
  borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
  borderBottomWidth: t.borderWidths("borderBottomWidth"),
  borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
  borderBottomColor: t.colors("borderBottomColor"),
  borderBlockEndColor: t.colors("borderBlockEndColor"),
  borderBottomStyle: t.borderStyles("borderBottomStyle"),
  borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
  borderLeftWidth: t.borderWidths("borderLeftWidth"),
  borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
  borderLeftColor: t.colors("borderLeftColor"),
  borderInlineStartColor: t.colors("borderInlineStartColor"),
  borderLeftStyle: t.borderStyles("borderLeftStyle"),
  borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
  borderRightWidth: t.borderWidths("borderRightWidth"),
  borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
  borderRightColor: t.colors("borderRightColor"),
  borderInlineEndColor: t.colors("borderInlineEndColor"),
  borderRightStyle: t.borderStyles("borderRightStyle"),
  borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
  borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
  borderBottomRadius: t.radii([
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ]),
  borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
  borderRightRadius: t.radii([
    "borderTopRightRadius",
    "borderBottomRightRadius"
  ])
};
Object.assign(border, {
  rounded: border.borderRadius,
  roundedTop: border.borderTopRadius,
  roundedTopLeft: border.borderTopLeftRadius,
  roundedTopRight: border.borderTopRightRadius,
  roundedTopStart: border.borderStartStartRadius,
  roundedTopEnd: border.borderStartEndRadius,
  roundedBottom: border.borderBottomRadius,
  roundedBottomLeft: border.borderBottomLeftRadius,
  roundedBottomRight: border.borderBottomRightRadius,
  roundedBottomStart: border.borderEndStartRadius,
  roundedBottomEnd: border.borderEndEndRadius,
  roundedLeft: border.borderLeftRadius,
  roundedRight: border.borderRightRadius,
  roundedStart: border.borderInlineStartRadius,
  roundedEnd: border.borderInlineEndRadius,
  borderStart: border.borderInlineStart,
  borderEnd: border.borderInlineEnd,
  borderTopStartRadius: border.borderStartStartRadius,
  borderTopEndRadius: border.borderStartEndRadius,
  borderBottomStartRadius: border.borderEndStartRadius,
  borderBottomEndRadius: border.borderEndEndRadius,
  borderStartRadius: border.borderInlineStartRadius,
  borderEndRadius: border.borderInlineEndRadius,
  borderStartWidth: border.borderInlineStartWidth,
  borderEndWidth: border.borderInlineEndWidth,
  borderStartColor: border.borderInlineStartColor,
  borderEndColor: border.borderInlineEndColor,
  borderStartStyle: border.borderInlineStartStyle,
  borderEndStyle: border.borderInlineEndStyle
});
var color2 = {
  color: t.colors("color"),
  textColor: t.colors("color"),
  fill: t.colors("fill"),
  stroke: t.colors("stroke")
};
var effect = {
  boxShadow: t.shadows("boxShadow"),
  mixBlendMode: true,
  blendMode: t.prop("mixBlendMode"),
  backgroundBlendMode: true,
  bgBlendMode: t.prop("backgroundBlendMode"),
  opacity: true
};
Object.assign(effect, {
  shadow: effect.boxShadow
});
var filter = {
  filter: { transform: transformFunctions.filter },
  blur: t.blur("--chakra-blur"),
  brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
  contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
  hueRotate: t.propT("--chakra-hue-rotate", transformFunctions.hueRotate),
  invert: t.propT("--chakra-invert", transformFunctions.invert),
  saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
  dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
  backdropFilter: { transform: transformFunctions.backdropFilter },
  backdropBlur: t.blur("--chakra-backdrop-blur"),
  backdropBrightness: t.propT(
    "--chakra-backdrop-brightness",
    transformFunctions.brightness
  ),
  backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
  backdropHueRotate: t.propT(
    "--chakra-backdrop-hue-rotate",
    transformFunctions.hueRotate
  ),
  backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
  backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
};
var flexbox = {
  alignItems: true,
  alignContent: true,
  justifyItems: true,
  justifyContent: true,
  flexWrap: true,
  flexDirection: { transform: transformFunctions.flexDirection },
  flex: true,
  flexFlow: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: t.sizes("flexBasis"),
  justifySelf: true,
  alignSelf: true,
  order: true,
  placeItems: true,
  placeContent: true,
  placeSelf: true,
  gap: t.space("gap"),
  rowGap: t.space("rowGap"),
  columnGap: t.space("columnGap")
};
Object.assign(flexbox, {
  flexDir: flexbox.flexDirection
});
var grid = {
  gridGap: t.space("gridGap"),
  gridColumnGap: t.space("gridColumnGap"),
  gridRowGap: t.space("gridRowGap"),
  gridColumn: true,
  gridRow: true,
  gridAutoFlow: true,
  gridAutoColumns: true,
  gridColumnStart: true,
  gridColumnEnd: true,
  gridRowStart: true,
  gridRowEnd: true,
  gridAutoRows: true,
  gridTemplate: true,
  gridTemplateColumns: true,
  gridTemplateRows: true,
  gridTemplateAreas: true,
  gridArea: true
};
var interactivity = {
  appearance: true,
  cursor: true,
  resize: true,
  userSelect: true,
  pointerEvents: true,
  outline: { transform: transformFunctions.outline },
  outlineOffset: true,
  outlineColor: t.colors("outlineColor")
};
var layout = {
  width: t.sizesT("width"),
  inlineSize: t.sizesT("inlineSize"),
  height: t.sizes("height"),
  blockSize: t.sizes("blockSize"),
  boxSize: t.sizes(["width", "height"]),
  minWidth: t.sizes("minWidth"),
  minInlineSize: t.sizes("minInlineSize"),
  minHeight: t.sizes("minHeight"),
  minBlockSize: t.sizes("minBlockSize"),
  maxWidth: t.sizes("maxWidth"),
  maxInlineSize: t.sizes("maxInlineSize"),
  maxHeight: t.sizes("maxHeight"),
  maxBlockSize: t.sizes("maxBlockSize"),
  overflow: true,
  overflowX: true,
  overflowY: true,
  overscrollBehavior: true,
  overscrollBehaviorX: true,
  overscrollBehaviorY: true,
  display: true,
  aspectRatio: true,
  hideFrom: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a9, _b5, _c3;
      const breakpoint = (_c3 = (_b5 = (_a9 = theme3.__breakpoints) == null ? void 0 : _a9.get(value)) == null ? void 0 : _b5.minW) != null ? _c3 : value;
      const mq = `@media screen and (min-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  hideBelow: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a9, _b5, _c3;
      const breakpoint = (_c3 = (_b5 = (_a9 = theme3.__breakpoints) == null ? void 0 : _a9.get(value)) == null ? void 0 : _b5._minW) != null ? _c3 : value;
      const mq = `@media screen and (max-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  verticalAlign: true,
  boxSizing: true,
  boxDecorationBreak: true,
  float: t.propT("float", transformFunctions.float),
  objectFit: true,
  objectPosition: true,
  visibility: true,
  isolation: true
};
Object.assign(layout, {
  w: layout.width,
  h: layout.height,
  minW: layout.minWidth,
  maxW: layout.maxWidth,
  minH: layout.minHeight,
  maxH: layout.maxHeight,
  overscroll: layout.overscrollBehavior,
  overscrollX: layout.overscrollBehaviorX,
  overscrollY: layout.overscrollBehaviorY
});
var list = {
  listStyleType: true,
  listStylePosition: true,
  listStylePos: t.prop("listStylePosition"),
  listStyleImage: true,
  listStyleImg: t.prop("listStyleImage")
};
function get(obj, path2, fallback, index5) {
  const key2 = typeof path2 === "string" ? path2.split(".") : [path2];
  for (index5 = 0; index5 < key2.length; index5 += 1) {
    if (!obj)
      break;
    obj = obj[key2[index5]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize2 = (fn2) => {
  const cache2 = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path2, fallback, index5) => {
    if (typeof obj === "undefined") {
      return fn2(obj, path2, fallback);
    }
    if (!cache2.has(obj)) {
      cache2.set(obj, /* @__PURE__ */ new Map());
    }
    const map2 = cache2.get(obj);
    if (map2.has(path2)) {
      return map2.get(path2);
    }
    const value = fn2(obj, path2, fallback, index5);
    map2.set(path2, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet = memoize2(get);
var srOnly = {
  border: "0px",
  clip: "rect(0, 0, 0, 0)",
  width: "1px",
  height: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
var srFocusable = {
  position: "static",
  width: "auto",
  height: "auto",
  clip: "auto",
  padding: "0",
  margin: "0",
  overflow: "visible",
  whiteSpace: "normal"
};
var getWithPriority = (theme3, key2, styles2) => {
  const result = {};
  const obj = memoizedGet(theme3, key2, {});
  for (const prop2 in obj) {
    const isInStyles = prop2 in styles2 && styles2[prop2] != null;
    if (!isInStyles)
      result[prop2] = obj[prop2];
  }
  return result;
};
var others = {
  srOnly: {
    transform(value) {
      if (value === true)
        return srOnly;
      if (value === "focusable")
        return srFocusable;
      return {};
    }
  },
  layerStyle: {
    processResult: true,
    transform: (value, theme3, styles2) => getWithPriority(theme3, `layerStyles.${value}`, styles2)
  },
  textStyle: {
    processResult: true,
    transform: (value, theme3, styles2) => getWithPriority(theme3, `textStyles.${value}`, styles2)
  },
  apply: {
    processResult: true,
    transform: (value, theme3, styles2) => getWithPriority(theme3, value, styles2)
  }
};
var position2 = {
  position: true,
  pos: t.prop("position"),
  zIndex: t.prop("zIndex", "zIndices"),
  inset: t.spaceT("inset"),
  insetX: t.spaceT(["left", "right"]),
  insetInline: t.spaceT("insetInline"),
  insetY: t.spaceT(["top", "bottom"]),
  insetBlock: t.spaceT("insetBlock"),
  top: t.spaceT("top"),
  insetBlockStart: t.spaceT("insetBlockStart"),
  bottom: t.spaceT("bottom"),
  insetBlockEnd: t.spaceT("insetBlockEnd"),
  left: t.spaceT("left"),
  insetInlineStart: t.logical({
    scale: "space",
    property: { ltr: "left", rtl: "right" }
  }),
  right: t.spaceT("right"),
  insetInlineEnd: t.logical({
    scale: "space",
    property: { ltr: "right", rtl: "left" }
  })
};
Object.assign(position2, {
  insetStart: position2.insetInlineStart,
  insetEnd: position2.insetInlineEnd
});
var ring = {
  ring: { transform: transformFunctions.ring },
  ringColor: t.colors("--chakra-ring-color"),
  ringOffset: t.prop("--chakra-ring-offset-width"),
  ringOffsetColor: t.colors("--chakra-ring-offset-color"),
  ringInset: t.prop("--chakra-ring-inset")
};
var space = {
  margin: t.spaceT("margin"),
  marginTop: t.spaceT("marginTop"),
  marginBlockStart: t.spaceT("marginBlockStart"),
  marginRight: t.spaceT("marginRight"),
  marginInlineEnd: t.spaceT("marginInlineEnd"),
  marginBottom: t.spaceT("marginBottom"),
  marginBlockEnd: t.spaceT("marginBlockEnd"),
  marginLeft: t.spaceT("marginLeft"),
  marginInlineStart: t.spaceT("marginInlineStart"),
  marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
  marginInline: t.spaceT("marginInline"),
  marginY: t.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t.spaceT("marginBlock"),
  padding: t.space("padding"),
  paddingTop: t.space("paddingTop"),
  paddingBlockStart: t.space("paddingBlockStart"),
  paddingRight: t.space("paddingRight"),
  paddingBottom: t.space("paddingBottom"),
  paddingBlockEnd: t.space("paddingBlockEnd"),
  paddingLeft: t.space("paddingLeft"),
  paddingInlineStart: t.space("paddingInlineStart"),
  paddingInlineEnd: t.space("paddingInlineEnd"),
  paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
  paddingInline: t.space("paddingInline"),
  paddingY: t.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t.space("paddingBlock")
};
Object.assign(space, {
  m: space.margin,
  mt: space.marginTop,
  mr: space.marginRight,
  me: space.marginInlineEnd,
  marginEnd: space.marginInlineEnd,
  mb: space.marginBottom,
  ml: space.marginLeft,
  ms: space.marginInlineStart,
  marginStart: space.marginInlineStart,
  mx: space.marginX,
  my: space.marginY,
  p: space.padding,
  pt: space.paddingTop,
  py: space.paddingY,
  px: space.paddingX,
  pb: space.paddingBottom,
  pl: space.paddingLeft,
  ps: space.paddingInlineStart,
  paddingStart: space.paddingInlineStart,
  pr: space.paddingRight,
  pe: space.paddingInlineEnd,
  paddingEnd: space.paddingInlineEnd
});
var textDecoration = {
  textDecorationColor: t.colors("textDecorationColor"),
  textDecoration: true,
  textDecor: { property: "textDecoration" },
  textDecorationLine: true,
  textDecorationStyle: true,
  textDecorationThickness: true,
  textUnderlineOffset: true,
  textShadow: t.shadows("textShadow")
};
var transform = {
  clipPath: true,
  transform: t.propT("transform", transformFunctions.transform),
  transformOrigin: true,
  translateX: t.spaceT("--chakra-translate-x"),
  translateY: t.spaceT("--chakra-translate-y"),
  skewX: t.degreeT("--chakra-skew-x"),
  skewY: t.degreeT("--chakra-skew-y"),
  scaleX: t.prop("--chakra-scale-x"),
  scaleY: t.prop("--chakra-scale-y"),
  scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
  rotate: t.degreeT("--chakra-rotate")
};
var transition = {
  transition: true,
  transitionDelay: true,
  animation: true,
  willChange: true,
  transitionDuration: t.prop("transitionDuration", "transition.duration"),
  transitionProperty: t.prop("transitionProperty", "transition.property"),
  transitionTimingFunction: t.prop(
    "transitionTimingFunction",
    "transition.easing"
  )
};
var typography2 = {
  fontFamily: t.prop("fontFamily", "fonts"),
  fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
  fontWeight: t.prop("fontWeight", "fontWeights"),
  lineHeight: t.prop("lineHeight", "lineHeights"),
  letterSpacing: t.prop("letterSpacing", "letterSpacings"),
  textAlign: true,
  fontStyle: true,
  textIndent: true,
  wordBreak: true,
  overflowWrap: true,
  textOverflow: true,
  textTransform: true,
  whiteSpace: true,
  isTruncated: {
    transform(value) {
      if (value === true) {
        return {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        };
      }
    }
  },
  noOfLines: {
    static: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      //@ts-ignore
      WebkitLineClamp: "var(--chakra-line-clamp)"
    },
    property: "--chakra-line-clamp"
  }
};
var scroll = {
  scrollBehavior: true,
  scrollSnapAlign: true,
  scrollSnapStop: true,
  scrollSnapType: true,
  // scroll margin
  scrollMargin: t.spaceT("scrollMargin"),
  scrollMarginTop: t.spaceT("scrollMarginTop"),
  scrollMarginBottom: t.spaceT("scrollMarginBottom"),
  scrollMarginLeft: t.spaceT("scrollMarginLeft"),
  scrollMarginRight: t.spaceT("scrollMarginRight"),
  scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
  scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
  // scroll padding
  scrollPadding: t.spaceT("scrollPadding"),
  scrollPaddingTop: t.spaceT("scrollPaddingTop"),
  scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
  scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
  scrollPaddingRight: t.spaceT("scrollPaddingRight"),
  scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
  scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
};
function resolveReference(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
var add = (...operands) => `calc(${toExpression("+", ...operands)})`;
var subtract = (...operands) => `calc(${toExpression("-", ...operands)})`;
var multiply = (...operands) => `calc(${toExpression("*", ...operands)})`;
var divide = (...operands) => `calc(${toExpression("/", ...operands)})`;
var negate = (x) => {
  const value = resolveReference(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply(value, -1);
};
var calc = Object.assign(
  (x) => ({
    add: (...operands) => calc(add(x, ...operands)),
    subtract: (...operands) => calc(subtract(x, ...operands)),
    multiply: (...operands) => calc(multiply(x, ...operands)),
    divide: (...operands) => calc(divide(x, ...operands)),
    negate: () => calc(negate(x)),
    toString: () => x.toString()
  }),
  {
    add,
    subtract,
    multiply,
    divide,
    negate
  }
);
function replaceWhiteSpace(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape(value) {
  const valueStr = replaceWhiteSpace(value.toString());
  return escapeSymbol(escapeDot(valueStr));
}
function escapeDot(value) {
  if (value.includes("\\."))
    return value;
  const isDecimal2 = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal2 ? value.replace(".", `\\.`) : value;
}
function escapeSymbol(value) {
  return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
}
function addPrefix(value, prefix4 = "") {
  return [prefix4, value].filter(Boolean).join("-");
}
function toVarReference(name, fallback) {
  return `var(${name}${fallback ? `, ${fallback}` : ""})`;
}
function toVarDefinition(value, prefix4 = "") {
  return escape(`--${addPrefix(value, prefix4)}`);
}
function cssVar(name, fallback, cssVarPrefix) {
  const cssVariable = toVarDefinition(name, cssVarPrefix);
  return {
    variable: cssVariable,
    reference: toVarReference(cssVariable, fallback)
  };
}
function defineCssVars(scope, keys22) {
  const vars2 = {};
  for (const key2 of keys22) {
    if (Array.isArray(key2)) {
      const [name, fallback] = key2;
      vars2[name] = cssVar(`${scope}-${name}`, fallback);
      continue;
    }
    vars2[key2] = cssVar(`${scope}-${key2}`);
  }
  return vars2;
}
function getLastItem(array) {
  const length3 = array == null ? 0 : array.length;
  return length3 ? array[length3 - 1] : void 0;
}
function analyzeCSSValue2(value) {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
}
function px(value) {
  if (value == null)
    return value;
  const { unitless } = analyzeCSSValue2(value);
  return unitless || typeof value === "number" ? `${value}px` : value;
}
var sortByBreakpointValue = (a2, b2) => parseInt(a2[1], 10) > parseInt(b2[1], 10) ? 1 : -1;
var sortBps = (breakpoints4) => Object.fromEntries(Object.entries(breakpoints4).sort(sortByBreakpointValue));
function normalize(breakpoints4) {
  const sorted = sortBps(breakpoints4);
  return Object.assign(Object.values(sorted), sorted);
}
function keys(breakpoints4) {
  const value = Object.keys(sortBps(breakpoints4));
  return new Set(value);
}
function subtract2(value) {
  var _a9;
  if (!value)
    return value;
  value = (_a9 = px(value)) != null ? _a9 : value;
  const OFFSET = -0.02;
  return typeof value === "number" ? `${value + OFFSET}` : value.replace(/(\d+\.?\d*)/u, (m3) => `${parseFloat(m3) + OFFSET}`);
}
function toMediaQueryString(min3, max3) {
  const query = ["@media screen"];
  if (min3)
    query.push("and", `(min-width: ${px(min3)})`);
  if (max3)
    query.push("and", `(max-width: ${px(max3)})`);
  return query.join(" ");
}
function analyzeBreakpoints(breakpoints4) {
  var _a9;
  if (!breakpoints4)
    return null;
  breakpoints4.base = (_a9 = breakpoints4.base) != null ? _a9 : "0px";
  const normalized = normalize(breakpoints4);
  const queries = Object.entries(breakpoints4).sort(sortByBreakpointValue).map(([breakpoint, minW], index5, entry) => {
    var _a24;
    let [, maxW] = (_a24 = entry[index5 + 1]) != null ? _a24 : [];
    maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;
    return {
      _minW: subtract2(minW),
      breakpoint,
      minW,
      maxW,
      maxWQuery: toMediaQueryString(null, maxW),
      minWQuery: toMediaQueryString(minW),
      minMaxQuery: toMediaQueryString(minW, maxW)
    };
  });
  const _keys = keys(breakpoints4);
  const _keysArr = Array.from(_keys.values());
  return {
    keys: _keys,
    normalized,
    isResponsive(test4) {
      const keys22 = Object.keys(test4);
      return keys22.length > 0 && keys22.every((key2) => _keys.has(key2));
    },
    asObject: sortBps(breakpoints4),
    asArray: normalize(breakpoints4),
    details: queries,
    get(key2) {
      return queries.find((q) => q.breakpoint === key2);
    },
    media: [
      null,
      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)
    ],
    /**
     * Converts the object responsive syntax to array syntax
     *
     * @example
     * toArrayValue({ base: 1, sm: 2, md: 3 }) // => [1, 2, 3]
     */
    toArrayValue(test4) {
      if (!isObject(test4)) {
        throw new Error("toArrayValue: value must be an object");
      }
      const result = _keysArr.map((bp) => {
        var _a24;
        return (_a24 = test4[bp]) != null ? _a24 : null;
      });
      while (getLastItem(result) === null) {
        result.pop();
      }
      return result;
    },
    /**
     * Converts the array responsive syntax to object syntax
     *
     * @example
     * toObjectValue([1, 2, 3]) // => { base: 1, sm: 2, md: 3 }
     */
    toObjectValue(test4) {
      if (!Array.isArray(test4)) {
        throw new Error("toObjectValue: value must be an array");
      }
      return test4.reduce((acc, value, index5) => {
        const key2 = _keysArr[index5];
        if (key2 != null && value != null)
          acc[key2] = value;
        return acc;
      }, {});
    }
  };
}
var state = {
  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
  focusVisible: (str, post) => `${str}:focus-visible ${post}`,
  focusWithin: (str, post) => `${str}:focus-within ${post}`,
  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
  indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
  readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
  expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
};
var toGroup = (fn2) => merge2((v) => fn2(v, "&"), "[role=group]", "[data-group]", ".group");
var toPeer = (fn2) => merge2((v) => fn2(v, "~ &"), "[data-peer]", ".peer");
var merge2 = (fn2, ...selectors) => selectors.map(fn2).join(", ");
var pseudoSelectors = {
  /**
   * Styles for CSS selector `&:hover`
   */
  _hover: "&:hover, &[data-hover]",
  /**
   * Styles for CSS Selector `&:active`
   */
  _active: "&:active, &[data-active]",
  /**
   * Styles for CSS selector `&:focus`
   *
   */
  _focus: "&:focus, &[data-focus]",
  /**
   * Styles for the highlighted state.
   */
  _highlighted: "&[data-highlighted]",
  /**
   * Styles to apply when a child of this element has received focus
   * - CSS Selector `&:focus-within`
   */
  _focusWithin: "&:focus-within",
  /**
   * Styles to apply when this element has received focus via tabbing
   * - CSS Selector `&:focus-visible`
   */
  _focusVisible: "&:focus-visible, &[data-focus-visible]",
  /**
   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:
   * - `&[aria-disabled=true]`
   * - `&:disabled`
   * - `&[data-disabled]`
   * - `&[disabled]`
   */
  _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
  /**
   * Styles for CSS Selector `&:readonly`
   */
  _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
  /**
   * Styles for CSS selector `&::before`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _before={{content:`""` }}/>
   * ```
   */
  _before: "&::before",
  /**
   * Styles for CSS selector `&::after`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _after={{content:`""` }}/>
   * ```
   */
  _after: "&::after",
  /**
   * Styles for CSS selector `&:empty`
   */
  _empty: "&:empty",
  /**
   * Styles to apply when the ARIA attribute `aria-expanded` is `true`
   * - CSS selector `&[aria-expanded=true]`
   */
  _expanded: "&[aria-expanded=true], &[data-expanded]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `true`
   * - CSS selector `&[aria-checked=true]`
   */
  _checked: "&[aria-checked=true], &[data-checked]",
  /**
   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`
   * - CSS selector `&[aria-grabbed=true]`
   */
  _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
  /**
   * Styles for CSS Selector `&[aria-pressed=true]`
   * Typically used to style the current "pressed" state of toggle buttons
   */
  _pressed: "&[aria-pressed=true], &[data-pressed]",
  /**
   * Styles to apply when the ARIA attribute `aria-invalid` is `true`
   * - CSS selector `&[aria-invalid=true]`
   */
  _invalid: "&[aria-invalid=true], &[data-invalid]",
  /**
   * Styles for the valid state
   * - CSS selector `&[data-valid], &[data-state=valid]`
   */
  _valid: "&[data-valid], &[data-state=valid]",
  /**
   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.
   * Useful for styling loading states
   */
  _loading: "&[data-loading], &[aria-busy=true]",
  /**
   * Styles to apply when the ARIA attribute `aria-selected` is `true`
   *
   * - CSS selector `&[aria-selected=true]`
   */
  _selected: "&[aria-selected=true], &[data-selected]",
  /**
   * Styles for CSS Selector `[hidden=true]`
   */
  _hidden: "&[hidden], &[data-hidden]",
  /**
   * Styles for CSS Selector `&:-webkit-autofill`
   */
  _autofill: "&:-webkit-autofill",
  /**
   * Styles for CSS Selector `&:nth-child(even)`
   */
  _even: "&:nth-of-type(even)",
  /**
   * Styles for CSS Selector `&:nth-child(odd)`
   */
  _odd: "&:nth-of-type(odd)",
  /**
   * Styles for CSS Selector `&:first-of-type`
   */
  _first: "&:first-of-type",
  /**
   * Styles for CSS selector `&::first-letter`
   *
   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.
   * @example
   * ```jsx
   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>
   * ```
   */
  _firstLetter: "&::first-letter",
  /**
   * Styles for CSS Selector `&:last-of-type`
   */
  _last: "&:last-of-type",
  /**
   * Styles for CSS Selector `&:not(:first-of-type)`
   */
  _notFirst: "&:not(:first-of-type)",
  /**
   * Styles for CSS Selector `&:not(:last-of-type)`
   */
  _notLast: "&:not(:last-of-type)",
  /**
   * Styles for CSS Selector `&:visited`
   */
  _visited: "&:visited",
  /**
   * Used to style the active link in a navigation
   * Styles for CSS Selector `&[aria-current=page]`
   */
  _activeLink: "&[aria-current=page]",
  /**
   * Used to style the current step within a process
   * Styles for CSS Selector `&[aria-current=step]`
   */
  _activeStep: "&[aria-current=step]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`
   * - CSS selector `&[aria-checked=mixed]`
   */
  _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered
   */
  _groupHover: toGroup(state.hover),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered
   */
  _peerHover: toPeer(state.hover),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused
   */
  _groupFocus: toGroup(state.focus),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused
   */
  _peerFocus: toPeer(state.focus),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus
   */
  _groupFocusVisible: toGroup(state.focusVisible),
  /**
   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus
   */
  _peerFocusVisible: toPeer(state.focusVisible),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active
   */
  _groupActive: toGroup(state.active),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is active
   */
  _peerActive: toPeer(state.active),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled
   */
  _groupDisabled: toGroup(state.disabled),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled
   */
  _peerDisabled: toPeer(state.disabled),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid
   */
  _groupInvalid: toGroup(state.invalid),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid
   */
  _peerInvalid: toPeer(state.invalid),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked
   */
  _groupChecked: toGroup(state.checked),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked
   */
  _peerChecked: toPeer(state.checked),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within
   */
  _groupFocusWithin: toGroup(state.focusWithin),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within
   */
  _peerFocusWithin: toPeer(state.focusWithin),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown
   */
  _peerPlaceholderShown: toPeer(state.placeholderShown),
  /**
   * Styles for CSS Selector `&::placeholder`.
   */
  _placeholder: "&::placeholder",
  /**
   * Styles for CSS Selector `&:placeholder-shown`.
   */
  _placeholderShown: "&:placeholder-shown",
  /**
   * Styles for CSS Selector `&:fullscreen`.
   */
  _fullScreen: "&:fullscreen",
  /**
   * Styles for CSS Selector `&::selection`
   */
  _selection: "&::selection",
  /**
   * Styles for CSS Selector `[dir=rtl] &`
   * It is applied when a parent element or this element has `dir="rtl"`
   */
  _rtl: "[dir=rtl] &, &[dir=rtl]",
  /**
   * Styles for CSS Selector `[dir=ltr] &`
   * It is applied when a parent element or this element has `dir="ltr"`
   */
  _ltr: "[dir=ltr] &, &[dir=ltr]",
  /**
   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`
   * It is used when the user has requested the system use a light or dark color theme.
   */
  _mediaDark: "@media (prefers-color-scheme: dark)",
  /**
   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`
   * It is used when the user has requested the system to reduce the amount of animations.
   */
  _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",
  /**
   * Styles for the CSS Selector `&[data-orientation=horizontal]`
   */
  _horizontal: "&[data-orientation=horizontal]",
  /**
   * Styles for the CSS Selector `&[data-orientation=vertical]`
   */
  _vertical: "&[data-orientation=vertical]"
};
var pseudoPropNames = Object.keys(
  pseudoSelectors
);
function tokenToCssVar(token2, prefix4) {
  return cssVar(String(token2).replace(/\./g, "-"), void 0, prefix4);
}
function createThemeVars(flatTokens, options2) {
  let cssVars2 = {};
  const cssMap = {};
  for (const [token2, tokenValue] of Object.entries(flatTokens)) {
    const { isSemantic, value } = tokenValue;
    const { variable, reference: reference2 } = tokenToCssVar(token2, options2 == null ? void 0 : options2.cssVarPrefix);
    if (!isSemantic) {
      if (token2.startsWith("space")) {
        const keys22 = token2.split(".");
        const [firstKey, ...referenceKeys] = keys22;
        const negativeLookupKey = `${firstKey}.-${referenceKeys.join(".")}`;
        const negativeValue = calc.negate(value);
        const negatedReference = calc.negate(reference2);
        cssMap[negativeLookupKey] = {
          value: negativeValue,
          var: variable,
          varRef: negatedReference
        };
      }
      cssVars2[variable] = value;
      cssMap[token2] = {
        value,
        var: variable,
        varRef: reference2
      };
      continue;
    }
    const lookupToken = (maybeToken) => {
      const scale4 = String(token2).split(".")[0];
      const withScale = [scale4, maybeToken].join(".");
      const resolvedTokenValue = flatTokens[withScale];
      if (!resolvedTokenValue)
        return maybeToken;
      const { reference: reference22 } = tokenToCssVar(withScale, options2 == null ? void 0 : options2.cssVarPrefix);
      return reference22;
    };
    const normalizedValue = isObject(value) ? value : { default: value };
    cssVars2 = (0, import_lodash.default)(
      cssVars2,
      Object.entries(normalizedValue).reduce(
        (acc, [conditionAlias, conditionValue]) => {
          var _a9, _b5;
          if (!conditionValue)
            return acc;
          const tokenReference = lookupToken(`${conditionValue}`);
          if (conditionAlias === "default") {
            acc[variable] = tokenReference;
            return acc;
          }
          const conditionSelector = (_b5 = (_a9 = pseudoSelectors) == null ? void 0 : _a9[conditionAlias]) != null ? _b5 : conditionAlias;
          acc[conditionSelector] = { [variable]: tokenReference };
          return acc;
        },
        {}
      )
    );
    cssMap[token2] = {
      value: reference2,
      var: variable,
      varRef: reference2
    };
  }
  return {
    cssVars: cssVars2,
    cssMap
  };
}
function omit(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key2 of keysToOmit) {
    if (key2 in clone) {
      delete clone[key2];
    }
  }
  return clone;
}
function pick(object2, keysToPick) {
  const result = {};
  for (const key2 of keysToPick) {
    if (key2 in object2) {
      result[key2] = object2[key2];
    }
  }
  return result;
}
function isObject5(value) {
  return typeof value === "object" && value != null && !Array.isArray(value);
}
function walkObject(target, predicate, options2 = {}) {
  const { stop, getKey } = options2;
  function inner(value, path2 = []) {
    var _a9;
    if (isObject5(value) || Array.isArray(value)) {
      const result = {};
      for (const [prop2, child] of Object.entries(value)) {
        const key2 = (_a9 = getKey == null ? void 0 : getKey(prop2)) != null ? _a9 : prop2;
        const childPath = [...path2, key2];
        if (stop == null ? void 0 : stop(value, childPath)) {
          return predicate(value, path2);
        }
        result[key2] = inner(child, childPath);
      }
      return result;
    }
    return predicate(value, path2);
  }
  return inner(target);
}
var tokens = [
  "colors",
  "borders",
  "borderWidths",
  "borderStyles",
  "fonts",
  "fontSizes",
  "fontWeights",
  "gradients",
  "letterSpacings",
  "lineHeights",
  "radii",
  "space",
  "shadows",
  "sizes",
  "zIndices",
  "transition",
  "blur",
  "breakpoints"
];
function extractTokens(theme3) {
  const _tokens = tokens;
  return pick(theme3, _tokens);
}
function extractSemanticTokens(theme3) {
  return theme3.semanticTokens;
}
function omitVars(rawTheme) {
  const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;
  return cleanTheme;
}
var isSemanticCondition = (key2) => pseudoPropNames.includes(key2) || "default" === key2;
function flattenTokens({
  tokens: tokens2,
  semanticTokens: semanticTokens2
}) {
  const result = {};
  walkObject(tokens2, (value, path2) => {
    if (value == null)
      return;
    result[path2.join(".")] = { isSemantic: false, value };
  });
  walkObject(
    semanticTokens2,
    (value, path2) => {
      if (value == null)
        return;
      result[path2.join(".")] = { isSemantic: true, value };
    },
    {
      stop: (value) => Object.keys(value).every(isSemanticCondition)
    }
  );
  return result;
}
function toCSSVar(rawTheme) {
  var _a9;
  const theme3 = omitVars(rawTheme);
  const tokens2 = extractTokens(theme3);
  const semanticTokens2 = extractSemanticTokens(theme3);
  const flatTokens = flattenTokens({ tokens: tokens2, semanticTokens: semanticTokens2 });
  const cssVarPrefix = (_a9 = theme3.config) == null ? void 0 : _a9.cssVarPrefix;
  const {
    /**
     * This is more like a dictionary of tokens users will type `green.500`,
     * and their equivalent css variable.
     */
    cssMap,
    /**
     * The extracted css variables will be stored here, and used in
     * the emotion's <Global/> component to attach variables to `:root`
     */
    cssVars: cssVars2
  } = createThemeVars(flatTokens, { cssVarPrefix });
  const defaultCssVars = {
    "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-ring-offset-width": "0px",
    "--chakra-ring-offset-color": "#fff",
    "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
    "--chakra-ring-offset-shadow": "0 0 #0000",
    "--chakra-ring-shadow": "0 0 #0000",
    "--chakra-space-x-reverse": "0",
    "--chakra-space-y-reverse": "0"
  };
  Object.assign(theme3, {
    __cssVars: { ...defaultCssVars, ...cssVars2 },
    __cssMap: cssMap,
    __breakpoints: analyzeBreakpoints(theme3.breakpoints)
  });
  return theme3;
}
var systemProps = (0, import_lodash3.default)(
  {},
  background,
  border,
  color2,
  flexbox,
  layout,
  filter,
  ring,
  interactivity,
  grid,
  others,
  position2,
  effect,
  space,
  scroll,
  typography2,
  textDecoration,
  transform,
  list,
  transition
);
var layoutSystem = Object.assign({}, space, layout, flexbox, grid, position2);
var layoutPropNames = Object.keys(
  layoutSystem
);
var propNames = [...Object.keys(systemProps), ...pseudoPropNames];
var styleProps = { ...systemProps, ...pseudoSelectors };
var isStyleProp = (prop2) => prop2 in styleProps;
var expandResponsive = (styles2) => (theme3) => {
  if (!theme3.__breakpoints)
    return styles2;
  const { isResponsive, toArrayValue, media: medias } = theme3.__breakpoints;
  const computedStyles = {};
  for (const key2 in styles2) {
    let value = runIfFn(styles2[key2], theme3);
    if (value == null)
      continue;
    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;
    if (!Array.isArray(value)) {
      computedStyles[key2] = value;
      continue;
    }
    const queries = value.slice(0, medias.length).length;
    for (let index5 = 0; index5 < queries; index5 += 1) {
      const media = medias == null ? void 0 : medias[index5];
      if (!media) {
        computedStyles[key2] = value[index5];
        continue;
      }
      computedStyles[media] = computedStyles[media] || {};
      if (value[index5] == null) {
        continue;
      }
      computedStyles[media][key2] = value[index5];
    }
  }
  return computedStyles;
};
function splitByComma(value) {
  const chunks = [];
  let chunk2 = "";
  let inParens = false;
  for (let i2 = 0; i2 < value.length; i2++) {
    const char2 = value[i2];
    if (char2 === "(") {
      inParens = true;
      chunk2 += char2;
    } else if (char2 === ")") {
      inParens = false;
      chunk2 += char2;
    } else if (char2 === "," && !inParens) {
      chunks.push(chunk2);
      chunk2 = "";
    } else {
      chunk2 += char2;
    }
  }
  chunk2 = chunk2.trim();
  if (chunk2) {
    chunks.push(chunk2);
  }
  return chunks;
}
function isCssVar2(value) {
  return /^var\(--.+\)$/.test(value);
}
var isCSSVariableTokenValue = (key2, value) => key2.startsWith("--") && typeof value === "string" && !isCssVar2(value);
var resolveTokenValue = (theme3, value) => {
  var _a9, _b5;
  if (value == null)
    return value;
  const getVar = (val) => {
    var _a24, _b22;
    return (_b22 = (_a24 = theme3.__cssMap) == null ? void 0 : _a24[val]) == null ? void 0 : _b22.varRef;
  };
  const getValue2 = (val) => {
    var _a24;
    return (_a24 = getVar(val)) != null ? _a24 : val;
  };
  const [tokenValue, fallbackValue] = splitByComma(value);
  value = (_b5 = (_a9 = getVar(tokenValue)) != null ? _a9 : getValue2(fallbackValue)) != null ? _b5 : getValue2(value);
  return value;
};
function getCss(options2) {
  const { configs = {}, pseudos = {}, theme: theme3 } = options2;
  const css22 = (stylesOrFn, nested = false) => {
    var _a9, _b5, _c3;
    const _styles = runIfFn(stylesOrFn, theme3);
    const styles2 = expandResponsive(_styles)(theme3);
    let computedStyles = {};
    for (let key2 in styles2) {
      const valueOrFn = styles2[key2];
      let value = runIfFn(valueOrFn, theme3);
      if (key2 in pseudos) {
        key2 = pseudos[key2];
      }
      if (isCSSVariableTokenValue(key2, value)) {
        value = resolveTokenValue(theme3, value);
      }
      let config2 = configs[key2];
      if (config2 === true) {
        config2 = { property: key2 };
      }
      if (isObject(value)) {
        computedStyles[key2] = (_a9 = computedStyles[key2]) != null ? _a9 : {};
        computedStyles[key2] = (0, import_lodash2.default)(
          {},
          computedStyles[key2],
          css22(value, true)
        );
        continue;
      }
      let rawValue = (_c3 = (_b5 = config2 == null ? void 0 : config2.transform) == null ? void 0 : _b5.call(config2, value, theme3, _styles)) != null ? _c3 : value;
      rawValue = (config2 == null ? void 0 : config2.processResult) ? css22(rawValue, true) : rawValue;
      const configProperty = runIfFn(config2 == null ? void 0 : config2.property, theme3);
      if (!nested && (config2 == null ? void 0 : config2.static)) {
        const staticStyles = runIfFn(config2.static, theme3);
        computedStyles = (0, import_lodash2.default)({}, computedStyles, staticStyles);
      }
      if (configProperty && Array.isArray(configProperty)) {
        for (const property of configProperty) {
          computedStyles[property] = rawValue;
        }
        continue;
      }
      if (configProperty) {
        if (configProperty === "&" && isObject(rawValue)) {
          computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
        } else {
          computedStyles[configProperty] = rawValue;
        }
        continue;
      }
      if (isObject(rawValue)) {
        computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
        continue;
      }
      computedStyles[key2] = rawValue;
    }
    return computedStyles;
  };
  return css22;
}
var css3 = (styles2) => (theme3) => {
  const cssFn = getCss({
    theme: theme3,
    pseudos: pseudoSelectors,
    configs: systemProps
  });
  return cssFn(styles2);
};
function defineStyle(styles2) {
  return styles2;
}
function defineStyleConfig(config2) {
  return config2;
}
function createMultiStyleConfigHelpers(parts) {
  return {
    definePartsStyle(config2) {
      return config2;
    },
    defineMultiStyleConfig(config2) {
      return { parts, ...config2 };
    }
  };
}
function normalize2(value, toArray3) {
  if (Array.isArray(value))
    return value;
  if (isObject(value))
    return toArray3(value);
  if (value != null)
    return [value];
}
function getNextIndex(values2, i2) {
  for (let j = i2 + 1; j < values2.length; j++) {
    if (values2[j] != null)
      return j;
  }
  return -1;
}
function createResolver(theme3) {
  const breakpointUtil = theme3.__breakpoints;
  return function resolver(config2, prop2, value, props) {
    var _a9, _b5;
    if (!breakpointUtil)
      return;
    const result = {};
    const normalized = normalize2(value, breakpointUtil.toArrayValue);
    if (!normalized)
      return result;
    const len = normalized.length;
    const isSingle = len === 1;
    const isMultipart = !!config2.parts;
    for (let i2 = 0; i2 < len; i2++) {
      const key2 = breakpointUtil.details[i2];
      const nextKey = breakpointUtil.details[getNextIndex(normalized, i2)];
      const query = toMediaQueryString(key2.minW, nextKey == null ? void 0 : nextKey._minW);
      const styles2 = runIfFn((_a9 = config2[prop2]) == null ? void 0 : _a9[normalized[i2]], props);
      if (!styles2)
        continue;
      if (isMultipart) {
        (_b5 = config2.parts) == null ? void 0 : _b5.forEach((part) => {
          (0, import_lodash4.default)(result, {
            [part]: isSingle ? styles2[part] : { [query]: styles2[part] }
          });
        });
        continue;
      }
      if (!isMultipart) {
        if (isSingle)
          (0, import_lodash4.default)(result, styles2);
        else
          result[query] = styles2;
        continue;
      }
      result[query] = styles2;
    }
    return result;
  };
}
function resolveStyleConfig(config2) {
  return (props) => {
    var _a9;
    const { variant, size: size4, theme: theme3 } = props;
    const recipe = createResolver(theme3);
    return (0, import_lodash4.default)(
      {},
      runIfFn((_a9 = config2.baseStyle) != null ? _a9 : {}, props),
      recipe(config2, "sizes", size4, props),
      recipe(config2, "variants", variant, props)
    );
  };
}
function getCSSVar(theme3, scale4, value) {
  var _a9, _b5, _c3;
  return (_c3 = (_b5 = (_a9 = theme3.__cssMap) == null ? void 0 : _a9[`${scale4}.${value}`]) == null ? void 0 : _b5.varRef) != null ? _c3 : value;
}
function omitThemingProps(props) {
  return omit(props, ["styleConfig", "size", "variant", "colorScheme"]);
}

// node_modules/@chakra-ui/theme/dist/chunk-P56GPN75.mjs
var requiredChakraThemeKeys = [
  "borders",
  "breakpoints",
  "colors",
  "components",
  "config",
  "direction",
  "fonts",
  "fontSizes",
  "fontWeights",
  "letterSpacings",
  "lineHeights",
  "radii",
  "shadows",
  "sizes",
  "space",
  "styles",
  "transition",
  "zIndices"
];
function isChakraTheme(unit) {
  if (!isObject(unit)) {
    return false;
  }
  return requiredChakraThemeKeys.every(
    (propertyName) => Object.prototype.hasOwnProperty.call(unit, propertyName)
  );
}

// node_modules/@chakra-ui/theme/dist/chunk-SIH73G3H.mjs
var transitionProperty = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition2 = {
  property: transitionProperty,
  easing: transitionTimingFunction,
  duration: transitionDuration
};
var transition_default = transition2;

// node_modules/@chakra-ui/theme/dist/chunk-45VJLTIL.mjs
var zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var z_index_default = zIndices;

// node_modules/@chakra-ui/theme/dist/chunk-B75T2J64.mjs
var borders = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var borders_default = borders;

// node_modules/@chakra-ui/theme/dist/chunk-TXLFBUTF.mjs
var breakpoints = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};
var breakpoints_default = breakpoints;

// node_modules/@chakra-ui/theme/dist/chunk-E47HH2QS.mjs
var colors = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var colors_default = colors;

// node_modules/@chakra-ui/theme/dist/chunk-VIVTPWHP.mjs
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var radius_default = radii;

// node_modules/@chakra-ui/theme/dist/chunk-IZUFFCXS.mjs
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default = shadows;

// node_modules/@chakra-ui/theme/dist/chunk-HQ6WXDYV.mjs
var blur = {
  none: 0,
  sm: "4px",
  base: "8px",
  md: "12px",
  lg: "16px",
  xl: "24px",
  "2xl": "40px",
  "3xl": "64px"
};
var blur_default = blur;

// node_modules/@chakra-ui/theme/dist/chunk-6XA2KDUD.mjs
var typography3 = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
  },
  fontSizes: {
    "3xs": "0.45rem",
    "2xs": "0.625rem",
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var typography_default = typography3;

// node_modules/@chakra-ui/theme/dist/chunk-V7WMN6TQ.mjs
var spacing2 = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// node_modules/@chakra-ui/theme/dist/chunk-NJCYBKFH.mjs
var largeSizes = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem",
  prose: "60ch"
};
var container = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes = {
  ...spacing2,
  ...largeSizes,
  container
};
var sizes_default = sizes;

// node_modules/@chakra-ui/theme/dist/chunk-3WO5B3NB.mjs
var foundations = {
  breakpoints: breakpoints_default,
  zIndices: z_index_default,
  radii: radius_default,
  blur: blur_default,
  colors: colors_default,
  ...typography_default,
  sizes: sizes_default,
  shadows: shadows_default,
  space: spacing2,
  borders: borders_default,
  transition: transition_default
};

// node_modules/@chakra-ui/theme/dist/chunk-Q5NOVGYN.mjs
var { defineMultiStyleConfig, definePartsStyle } = createMultiStyleConfigHelpers([
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
]);
var $size = cssVar("stepper-indicator-size");
var $iconSize = cssVar("stepper-icon-size");
var $titleFontSize = cssVar("stepper-title-font-size");
var $descFontSize = cssVar("stepper-description-font-size");
var $accentColor = cssVar("stepper-accent-color");
var baseStyle = definePartsStyle(({ colorScheme: c2 }) => ({
  stepper: {
    display: "flex",
    justifyContent: "space-between",
    gap: "4",
    "&[data-orientation=vertical]": {
      flexDirection: "column",
      alignItems: "flex-start"
    },
    "&[data-orientation=horizontal]": {
      flexDirection: "row",
      alignItems: "center"
    },
    [$accentColor.variable]: `colors.${c2}.500`,
    _dark: {
      [$accentColor.variable]: `colors.${c2}.200`
    }
  },
  title: {
    fontSize: $titleFontSize.reference,
    fontWeight: "medium"
  },
  description: {
    fontSize: $descFontSize.reference,
    color: "chakra-subtle-text"
  },
  number: {
    fontSize: $titleFontSize.reference
  },
  step: {
    flexShrink: 0,
    position: "relative",
    display: "flex",
    gap: "2",
    "&[data-orientation=horizontal]": {
      alignItems: "center"
    },
    flex: "1",
    "&:last-of-type:not([data-stretch])": {
      flex: "initial"
    }
  },
  icon: {
    flexShrink: 0,
    width: $iconSize.reference,
    height: $iconSize.reference
  },
  indicator: {
    flexShrink: 0,
    borderRadius: "full",
    width: $size.reference,
    height: $size.reference,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    "&[data-status=active]": {
      borderWidth: "2px",
      borderColor: $accentColor.reference
    },
    "&[data-status=complete]": {
      bg: $accentColor.reference,
      color: "chakra-inverse-text"
    },
    "&[data-status=incomplete]": {
      borderWidth: "2px"
    }
  },
  separator: {
    bg: "chakra-border-color",
    flex: "1",
    "&[data-status=complete]": {
      bg: $accentColor.reference
    },
    "&[data-orientation=horizontal]": {
      width: "100%",
      height: "2px",
      marginStart: "2"
    },
    "&[data-orientation=vertical]": {
      width: "2px",
      position: "absolute",
      height: "100%",
      maxHeight: `calc(100% - ${$size.reference} - 8px)`,
      top: `calc(${$size.reference} + 4px)`,
      insetStart: `calc(${$size.reference} / 2 - 1px)`
    }
  }
}));
var stepperTheme = defineMultiStyleConfig({
  baseStyle,
  sizes: {
    xs: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.4",
        [$iconSize.variable]: "sizes.3",
        [$titleFontSize.variable]: "fontSizes.xs",
        [$descFontSize.variable]: "fontSizes.xs"
      }
    }),
    sm: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.6",
        [$iconSize.variable]: "sizes.4",
        [$titleFontSize.variable]: "fontSizes.sm",
        [$descFontSize.variable]: "fontSizes.xs"
      }
    }),
    md: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.8",
        [$iconSize.variable]: "sizes.5",
        [$titleFontSize.variable]: "fontSizes.md",
        [$descFontSize.variable]: "fontSizes.sm"
      }
    }),
    lg: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.10",
        [$iconSize.variable]: "sizes.6",
        [$titleFontSize.variable]: "fontSizes.lg",
        [$descFontSize.variable]: "fontSizes.md"
      }
    })
  },
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/anatomy/dist/chunk-OA3DH5LS.mjs
function anatomy(name, map2 = {}) {
  let called = false;
  function assert() {
    if (!called) {
      called = true;
      return;
    }
    throw new Error(
      "[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?"
    );
  }
  function parts(...values2) {
    assert();
    for (const part of values2) {
      ;
      map2[part] = toPart(part);
    }
    return anatomy(name, map2);
  }
  function extend(...parts2) {
    for (const part of parts2) {
      if (part in map2)
        continue;
      map2[part] = toPart(part);
    }
    return anatomy(name, map2);
  }
  function selectors() {
    const value = Object.fromEntries(
      Object.entries(map2).map(([key2, part]) => [key2, part.selector])
    );
    return value;
  }
  function classnames3() {
    const value = Object.fromEntries(
      Object.entries(map2).map(([key2, part]) => [key2, part.className])
    );
    return value;
  }
  function toPart(part) {
    const el = ["container", "root"].includes(part != null ? part : "") ? [name] : [name, part];
    const attr = el.filter(Boolean).join("__");
    const className = `chakra-${attr}`;
    const partObj = {
      className,
      selector: `.${className}`,
      toString: () => part
    };
    return partObj;
  }
  const __type = {};
  return {
    parts,
    toPart,
    extend,
    selectors,
    classnames: classnames3,
    get keys() {
      return Object.keys(map2);
    },
    __type
  };
}

// node_modules/@chakra-ui/anatomy/dist/chunk-7OOI6RFH.mjs
var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon", "spinner");
var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
var buttonAnatomy = anatomy("button").parts();
var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
var circularProgressAnatomy = anatomy("progress").parts("track", "filledTrack").extend("label");
var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var editableAnatomy = anatomy("editable").parts(
  "preview",
  "input",
  "textarea"
);
var formAnatomy = anatomy("form").parts(
  "container",
  "requiredIndicator",
  "helperText"
);
var formErrorAnatomy = anatomy("formError").parts("text", "icon");
var inputAnatomy = anatomy("input").parts(
  "addon",
  "field",
  "element",
  "group"
);
var listAnatomy = anatomy("list").parts("container", "item", "icon");
var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "icon", "command", "divider");
var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var numberInputAnatomy = anatomy("numberinput").parts(
  "root",
  "field",
  "stepperGroup",
  "stepper"
);
var pinInputAnatomy = anatomy("pininput").parts("field");
var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
var progressAnatomy = anatomy("progress").parts(
  "label",
  "filledTrack",
  "track"
);
var radioAnatomy = anatomy("radio").parts(
  "container",
  "control",
  "label"
);
var selectAnatomy = anatomy("select").parts("field", "icon");
var sliderAnatomy = anatomy("slider").parts(
  "container",
  "track",
  "thumb",
  "filledTrack",
  "mark"
);
var statAnatomy = anatomy("stat").parts(
  "container",
  "label",
  "helpText",
  "number",
  "icon"
);
var switchAnatomy = anatomy("switch").parts(
  "container",
  "track",
  "thumb",
  "label"
);
var tableAnatomy = anatomy("table").parts(
  "table",
  "thead",
  "tbody",
  "tr",
  "th",
  "td",
  "tfoot",
  "caption"
);
var tabsAnatomy = anatomy("tabs").parts(
  "root",
  "tab",
  "tablist",
  "tabpanel",
  "tabpanels",
  "indicator"
);
var tagAnatomy = anatomy("tag").parts(
  "container",
  "label",
  "closeButton"
);
var cardAnatomy = anatomy("card").parts(
  "container",
  "header",
  "body",
  "footer"
);
var stepperAnatomy = anatomy("stepper").parts(
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
);

// node_modules/color2k/dist/index.exports.import.es.mjs
function guard(low, high, value) {
  return Math.min(Math.max(low, value), high);
}
var ColorError = class extends Error {
  constructor(color5) {
    super(`Failed to parse color: "${color5}"`);
  }
};
var ColorError$1 = ColorError;
function parseToRgba(color5) {
  if (typeof color5 !== "string")
    throw new ColorError$1(color5);
  if (color5.trim().toLowerCase() === "transparent")
    return [0, 0, 0, 0];
  let normalizedColor = color5.trim();
  normalizedColor = namedColorRegex.test(color5) ? nameToHex(color5) : color5;
  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);
  if (reducedHexMatch) {
    const arr = Array.from(reducedHexMatch).slice(1);
    return [...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)), parseInt(r(arr[3] || "f", 2), 16) / 255];
  }
  const hexMatch = hexRegex.exec(normalizedColor);
  if (hexMatch) {
    const arr = Array.from(hexMatch).slice(1);
    return [...arr.slice(0, 3).map((x) => parseInt(x, 16)), parseInt(arr[3] || "ff", 16) / 255];
  }
  const rgbaMatch = rgbaRegex.exec(normalizedColor);
  if (rgbaMatch) {
    const arr = Array.from(rgbaMatch).slice(1);
    return [...arr.slice(0, 3).map((x) => parseInt(x, 10)), parseFloat(arr[3] || "1")];
  }
  const hslaMatch = hslaRegex.exec(normalizedColor);
  if (hslaMatch) {
    const [h, s, l, a2] = Array.from(hslaMatch).slice(1).map(parseFloat);
    if (guard(0, 100, s) !== s)
      throw new ColorError$1(color5);
    if (guard(0, 100, l) !== l)
      throw new ColorError$1(color5);
    return [...hslToRgb(h, s, l), Number.isNaN(a2) ? 1 : a2];
  }
  throw new ColorError$1(color5);
}
function hash2(str) {
  let hash5 = 5381;
  let i2 = str.length;
  while (i2) {
    hash5 = hash5 * 33 ^ str.charCodeAt(--i2);
  }
  return (hash5 >>> 0) % 2341;
}
var colorToInt = (x) => parseInt(x.replace(/_/g, ""), 36);
var compressedColorMap = "1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm".split(" ").reduce((acc, next2) => {
  const key2 = colorToInt(next2.substring(0, 3));
  const hex3 = colorToInt(next2.substring(3)).toString(16);
  let prefix4 = "";
  for (let i2 = 0; i2 < 6 - hex3.length; i2++) {
    prefix4 += "0";
  }
  acc[key2] = `${prefix4}${hex3}`;
  return acc;
}, {});
function nameToHex(color5) {
  const normalizedColorName = color5.toLowerCase().trim();
  const result = compressedColorMap[hash2(normalizedColorName)];
  if (!result)
    throw new ColorError$1(color5);
  return `#${result}`;
}
var r = (str, amount) => Array.from(Array(amount)).map(() => str).join("");
var reducedHexRegex = new RegExp(`^#${r("([a-f0-9])", 3)}([a-f0-9])?$`, "i");
var hexRegex = new RegExp(`^#${r("([a-f0-9]{2})", 3)}([a-f0-9]{2})?$`, "i");
var rgbaRegex = new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${r(",\\s*(\\d+)\\s*", 2)}(?:,\\s*([\\d.]+))?\\s*\\)$`, "i");
var hslaRegex = /^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i;
var namedColorRegex = /^[a-z]+$/i;
var roundColor = (color5) => {
  return Math.round(color5 * 255);
};
var hslToRgb = (hue, saturation, lightness) => {
  let l = lightness / 100;
  if (saturation === 0) {
    return [l, l, l].map(roundColor);
  }
  const huePrime = (hue % 360 + 360) % 360 / 60;
  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);
  const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  let red = 0;
  let green = 0;
  let blue = 0;
  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }
  const lightnessModification = l - chroma / 2;
  const finalRed = red + lightnessModification;
  const finalGreen = green + lightnessModification;
  const finalBlue = blue + lightnessModification;
  return [finalRed, finalGreen, finalBlue].map(roundColor);
};
function rgba(red, green, blue, alpha3) {
  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha3).toFixed(3))})`;
}
function transparentize(color5, amount) {
  const [r3, g, b2, a2] = parseToRgba(color5);
  return rgba(r3, g, b2, a2 - amount);
}
function toHex(color5) {
  const [r3, g, b2, a2] = parseToRgba(color5);
  let hex3 = (x) => {
    const h = guard(0, 255, x).toString(16);
    return h.length === 1 ? `0${h}` : h;
  };
  return `#${hex3(r3)}${hex3(g)}${hex3(b2)}${a2 < 1 ? hex3(Math.round(a2 * 255)) : ""}`;
}

// node_modules/@chakra-ui/theme-tools/dist/chunk-6IC2I3BY.mjs
function dlv_es_default(t3, e, l, n3, r3) {
  for (e = e.split ? e.split(".") : e, n3 = 0; n3 < e.length; n3++)
    t3 = t3 ? t3[e[n3]] : r3;
  return t3 === r3 ? l : t3;
}
var isEmptyObject = (obj) => Object.keys(obj).length === 0;
var getColor = (theme3, color5, fallback) => {
  const hex3 = dlv_es_default(theme3, `colors.${color5}`, color5);
  try {
    toHex(hex3);
    return hex3;
  } catch {
    return fallback != null ? fallback : "#000000";
  }
};
var getBrightness = (color5) => {
  const [r3, g, b2] = parseToRgba(color5);
  return (r3 * 299 + g * 587 + b2 * 114) / 1e3;
};
var tone = (color5) => (theme3) => {
  const hex3 = getColor(theme3, color5);
  const brightness = getBrightness(hex3);
  const isDark2 = brightness < 128;
  return isDark2 ? "dark" : "light";
};
var isDark = (color5) => (theme3) => tone(color5)(theme3) === "dark";
var transparentize2 = (color5, opacity) => (theme3) => {
  const raw = getColor(theme3, color5);
  return transparentize(raw, 1 - opacity);
};
function generateStripe(size4 = "1rem", color5 = "rgba(255, 255, 255, 0.15)") {
  return {
    backgroundImage: `linear-gradient(
    45deg,
    ${color5} 25%,
    transparent 25%,
    transparent 50%,
    ${color5} 50%,
    ${color5} 75%,
    transparent 75%,
    transparent
  )`,
    backgroundSize: `${size4} ${size4}`
  };
}
var randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
function randomColor(opts) {
  const fallback = randomHex();
  if (!opts || isEmptyObject(opts)) {
    return fallback;
  }
  if (opts.string && opts.colors) {
    return randomColorFromList(opts.string, opts.colors);
  }
  if (opts.string && !opts.colors) {
    return randomColorFromString(opts.string);
  }
  if (opts.colors && !opts.string) {
    return randomFromList(opts.colors);
  }
  return fallback;
}
function randomColorFromString(str) {
  let hash5 = 0;
  if (str.length === 0)
    return hash5.toString();
  for (let i2 = 0; i2 < str.length; i2 += 1) {
    hash5 = str.charCodeAt(i2) + ((hash5 << 5) - hash5);
    hash5 = hash5 & hash5;
  }
  let color5 = "#";
  for (let j = 0; j < 3; j += 1) {
    const value = hash5 >> j * 8 & 255;
    color5 += `00${value.toString(16)}`.substr(-2);
  }
  return color5;
}
function randomColorFromList(str, list2) {
  let index5 = 0;
  if (str.length === 0)
    return list2[0];
  for (let i2 = 0; i2 < str.length; i2 += 1) {
    index5 = str.charCodeAt(i2) + ((index5 << 5) - index5);
    index5 = index5 & index5;
  }
  index5 = (index5 % list2.length + list2.length) % list2.length;
  return list2[index5];
}
function randomFromList(list2) {
  return list2[Math.floor(Math.random() * list2.length)];
}

// node_modules/@chakra-ui/theme-tools/dist/chunk-FNB7ZWWX.mjs
function mode(light, dark) {
  return (props) => props.colorMode === "dark" ? dark : light;
}
function orient(options2) {
  const { orientation, vertical, horizontal } = options2;
  if (!orientation)
    return {};
  return orientation === "vertical" ? vertical : horizontal;
}

// node_modules/@chakra-ui/theme-tools/dist/chunk-XMZHFSTS.mjs
function toRef(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
var add2 = (...operands) => `calc(${toExpr("+", ...operands)})`;
var subtract3 = (...operands) => `calc(${toExpr("-", ...operands)})`;
var multiply2 = (...operands) => `calc(${toExpr("*", ...operands)})`;
var divide2 = (...operands) => `calc(${toExpr("/", ...operands)})`;
var negate2 = (x) => {
  const value = toRef(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply2(value, -1);
};
var calc2 = Object.assign(
  (x) => ({
    add: (...operands) => calc2(add2(x, ...operands)),
    subtract: (...operands) => calc2(subtract3(x, ...operands)),
    multiply: (...operands) => calc2(multiply2(x, ...operands)),
    divide: (...operands) => calc2(divide2(x, ...operands)),
    negate: () => calc2(negate2(x)),
    toString: () => x.toString()
  }),
  {
    add: add2,
    subtract: subtract3,
    multiply: multiply2,
    divide: divide2,
    negate: negate2
  }
);

// node_modules/@chakra-ui/theme-tools/dist/chunk-WSAJBJJ4.mjs
function isDecimal(value) {
  return !Number.isInteger(parseFloat(value.toString()));
}
function replaceWhiteSpace2(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape2(value) {
  const valueStr = replaceWhiteSpace2(value.toString());
  if (valueStr.includes("\\."))
    return value;
  return isDecimal(value) ? valueStr.replace(".", `\\.`) : value;
}
function addPrefix2(value, prefix4 = "") {
  return [prefix4, escape2(value)].filter(Boolean).join("-");
}
function toVarRef(name, fallback) {
  return `var(${escape2(name)}${fallback ? `, ${fallback}` : ""})`;
}
function toVar(value, prefix4 = "") {
  return `--${addPrefix2(value, prefix4)}`;
}
function cssVar2(name, options2) {
  const cssVariable = toVar(name, options2 == null ? void 0 : options2.prefix);
  return {
    variable: cssVariable,
    reference: toVarRef(cssVariable, getFallback(options2 == null ? void 0 : options2.fallback))
  };
}
function getFallback(fallback) {
  if (typeof fallback === "string")
    return fallback;
  return fallback == null ? void 0 : fallback.reference;
}

// node_modules/@chakra-ui/theme/dist/chunk-SG67NFYS.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig2, definePartsStyle: definePartsStyle2 } = createMultiStyleConfigHelpers(switchAnatomy.keys);
var $width = cssVar2("switch-track-width");
var $height = cssVar2("switch-track-height");
var $diff = cssVar2("switch-track-diff");
var diffValue = calc2.subtract($width, $height);
var $translateX = cssVar2("switch-thumb-x");
var $bg = cssVar2("switch-bg");
var baseStyleTrack = defineStyle((props) => {
  const { colorScheme: c2 } = props;
  return {
    borderRadius: "full",
    p: "0.5",
    width: [$width.reference],
    height: [$height.reference],
    transitionProperty: "common",
    transitionDuration: "fast",
    [$bg.variable]: "colors.gray.300",
    _dark: {
      [$bg.variable]: "colors.whiteAlpha.400"
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      [$bg.variable]: `colors.${c2}.500`,
      _dark: {
        [$bg.variable]: `colors.${c2}.200`
      }
    },
    bg: $bg.reference
  };
});
var baseStyleThumb = defineStyle({
  bg: "white",
  transitionProperty: "transform",
  transitionDuration: "normal",
  borderRadius: "inherit",
  width: [$height.reference],
  height: [$height.reference],
  _checked: {
    transform: `translateX(${$translateX.reference})`
  }
});
var baseStyle2 = definePartsStyle2((props) => ({
  container: {
    [$diff.variable]: diffValue,
    [$translateX.variable]: $diff.reference,
    _rtl: {
      [$translateX.variable]: calc2($diff).negate().toString()
    }
  },
  track: baseStyleTrack(props),
  thumb: baseStyleThumb
}));
var sizes2 = {
  sm: definePartsStyle2({
    container: {
      [$width.variable]: "1.375rem",
      [$height.variable]: "sizes.3"
    }
  }),
  md: definePartsStyle2({
    container: {
      [$width.variable]: "1.875rem",
      [$height.variable]: "sizes.4"
    }
  }),
  lg: definePartsStyle2({
    container: {
      [$width.variable]: "2.875rem",
      [$height.variable]: "sizes.6"
    }
  })
};
var switchTheme = defineMultiStyleConfig2({
  baseStyle: baseStyle2,
  sizes: sizes2,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-QWN3S45W.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig3, definePartsStyle: definePartsStyle3 } = createMultiStyleConfigHelpers(tableAnatomy.keys);
var baseStyle3 = definePartsStyle3({
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
});
var numericStyles = defineStyle({
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
});
var variantSimple = definePartsStyle3((props) => {
  const { colorScheme: c2 } = props;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(`${c2}.100`, `${c2}.700`)(props),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c2}.100`, `${c2}.700`)(props),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variantStripe = definePartsStyle3((props) => {
  const { colorScheme: c2 } = props;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(`${c2}.100`, `${c2}.700`)(props),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c2}.100`, `${c2}.700`)(props),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode(`${c2}.100`, `${c2}.700`)(props)
          },
          td: {
            background: mode(`${c2}.100`, `${c2}.700`)(props)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variants = {
  simple: variantSimple,
  striped: variantStripe,
  unstyled: defineStyle({})
};
var sizes3 = {
  sm: definePartsStyle3({
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  }),
  md: definePartsStyle3({
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  }),
  lg: definePartsStyle3({
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  })
};
var tableTheme = defineMultiStyleConfig3({
  baseStyle: baseStyle3,
  variants,
  sizes: sizes3,
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-GYISOX2E.mjs
var $fg = cssVar("tabs-color");
var $bg2 = cssVar("tabs-bg");
var $border = cssVar("tabs-border-color");
var { defineMultiStyleConfig: defineMultiStyleConfig4, definePartsStyle: definePartsStyle4 } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
var baseStyleRoot = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
});
var baseStyleTab = defineStyle((props) => {
  const { isFitted } = props;
  return {
    flex: isFitted ? 1 : void 0,
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      zIndex: 1,
      boxShadow: "outline"
    },
    _disabled: {
      cursor: "not-allowed",
      opacity: 0.4
    }
  };
});
var baseStyleTablist = defineStyle((props) => {
  const { align = "start", orientation } = props;
  const alignments2 = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments2[align],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
});
var baseStyleTabpanel = defineStyle({
  p: 4
});
var baseStyle4 = definePartsStyle4((props) => ({
  root: baseStyleRoot(props),
  tab: baseStyleTab(props),
  tablist: baseStyleTablist(props),
  tabpanel: baseStyleTabpanel
}));
var sizes4 = {
  sm: definePartsStyle4({
    tab: {
      py: 1,
      px: 4,
      fontSize: "sm"
    }
  }),
  md: definePartsStyle4({
    tab: {
      fontSize: "md",
      py: 2,
      px: 4
    }
  }),
  lg: definePartsStyle4({
    tab: {
      fontSize: "lg",
      py: 3,
      px: 4
    }
  })
};
var variantLine = definePartsStyle4((props) => {
  const { colorScheme: c2, orientation } = props;
  const isVertical = orientation === "vertical";
  const borderProp = isVertical ? "borderStart" : "borderBottom";
  const marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: {
      [borderProp]: "2px solid",
      borderColor: "inherit"
    },
    tab: {
      [borderProp]: "2px solid",
      borderColor: "transparent",
      [marginProp]: "-2px",
      _selected: {
        [$fg.variable]: `colors.${c2}.600`,
        _dark: {
          [$fg.variable]: `colors.${c2}.300`
        },
        borderColor: "currentColor"
      },
      _active: {
        [$bg2.variable]: "colors.gray.200",
        _dark: {
          [$bg2.variable]: "colors.whiteAlpha.300"
        }
      },
      _disabled: {
        _active: { bg: "none" }
      },
      color: $fg.reference,
      bg: $bg2.reference
    }
  };
});
var variantEnclosed = definePartsStyle4((props) => {
  const { colorScheme: c2 } = props;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      [$border.variable]: "transparent",
      _selected: {
        [$fg.variable]: `colors.${c2}.600`,
        [$border.variable]: `colors.white`,
        _dark: {
          [$fg.variable]: `colors.${c2}.300`,
          [$border.variable]: `colors.gray.800`
        },
        borderColor: "inherit",
        borderBottomColor: $border.reference
      },
      color: $fg.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantEnclosedColored = definePartsStyle4((props) => {
  const { colorScheme: c2 } = props;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      [$bg2.variable]: "colors.gray.50",
      _dark: {
        [$bg2.variable]: "colors.whiteAlpha.50"
      },
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        [$bg2.variable]: "colors.white",
        [$fg.variable]: `colors.${c2}.600`,
        _dark: {
          [$bg2.variable]: "colors.gray.800",
          [$fg.variable]: `colors.${c2}.300`
        },
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      },
      color: $fg.reference,
      bg: $bg2.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantSoftRounded = definePartsStyle4((props) => {
  const { colorScheme: c2, theme: theme3 } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor(theme3, `${c2}.700`),
        bg: getColor(theme3, `${c2}.100`)
      }
    }
  };
});
var variantSolidRounded = definePartsStyle4((props) => {
  const { colorScheme: c2 } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      [$fg.variable]: "colors.gray.600",
      _dark: {
        [$fg.variable]: "inherit"
      },
      _selected: {
        [$fg.variable]: "colors.white",
        [$bg2.variable]: `colors.${c2}.600`,
        _dark: {
          [$fg.variable]: "colors.gray.800",
          [$bg2.variable]: `colors.${c2}.300`
        }
      },
      color: $fg.reference,
      bg: $bg2.reference
    }
  };
});
var variantUnstyled = definePartsStyle4({});
var variants2 = {
  line: variantLine,
  enclosed: variantEnclosed,
  "enclosed-colored": variantEnclosedColored,
  "soft-rounded": variantSoftRounded,
  "solid-rounded": variantSolidRounded,
  unstyled: variantUnstyled
};
var tabsTheme = defineMultiStyleConfig4({
  baseStyle: baseStyle4,
  sizes: sizes4,
  variants: variants2,
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-ZQMLTFF3.mjs
var vars = defineCssVars("badge", ["bg", "color", "shadow"]);
var baseStyle5 = defineStyle({
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var variantSolid = defineStyle((props) => {
  const { colorScheme: c2, theme: theme3 } = props;
  const dark = transparentize2(`${c2}.500`, 0.6)(theme3);
  return {
    [vars.bg.variable]: `colors.${c2}.500`,
    [vars.color.variable]: `colors.white`,
    _dark: {
      [vars.bg.variable]: dark,
      [vars.color.variable]: `colors.whiteAlpha.800`
    }
  };
});
var variantSubtle = defineStyle((props) => {
  const { colorScheme: c2, theme: theme3 } = props;
  const darkBg = transparentize2(`${c2}.200`, 0.16)(theme3);
  return {
    [vars.bg.variable]: `colors.${c2}.100`,
    [vars.color.variable]: `colors.${c2}.800`,
    _dark: {
      [vars.bg.variable]: darkBg,
      [vars.color.variable]: `colors.${c2}.200`
    }
  };
});
var variantOutline = defineStyle((props) => {
  const { colorScheme: c2, theme: theme3 } = props;
  const darkColor = transparentize2(`${c2}.200`, 0.8)(theme3);
  return {
    [vars.color.variable]: `colors.${c2}.500`,
    _dark: {
      [vars.color.variable]: darkColor
    },
    [vars.shadow.variable]: `inset 0 0 0px 1px ${vars.color.reference}`
  };
});
var variants3 = {
  solid: variantSolid,
  subtle: variantSubtle,
  outline: variantOutline
};
var badgeTheme = defineStyleConfig({
  baseStyle: baseStyle5,
  variants: variants3,
  defaultProps: {
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-7RVLYCMR.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig5, definePartsStyle: definePartsStyle5 } = createMultiStyleConfigHelpers(tagAnatomy.keys);
var $bg3 = cssVar("tag-bg");
var $color = cssVar("tag-color");
var $shadow = cssVar("tag-shadow");
var $minH = cssVar("tag-min-height");
var $minW = cssVar("tag-min-width");
var $fontSize = cssVar("tag-font-size");
var $paddingX = cssVar("tag-padding-inline");
var baseStyleContainer = defineStyle({
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  [$color.variable]: vars.color.reference,
  [$bg3.variable]: vars.bg.reference,
  [$shadow.variable]: vars.shadow.reference,
  color: $color.reference,
  bg: $bg3.reference,
  boxShadow: $shadow.reference,
  borderRadius: "md",
  minH: $minH.reference,
  minW: $minW.reference,
  fontSize: $fontSize.reference,
  px: $paddingX.reference,
  _focusVisible: {
    [$shadow.variable]: "shadows.outline"
  }
});
var baseStyleLabel = defineStyle({
  lineHeight: 1.2,
  overflow: "visible"
});
var baseStyleCloseButton = defineStyle({
  fontSize: "lg",
  w: "5",
  h: "5",
  transitionProperty: "common",
  transitionDuration: "normal",
  borderRadius: "full",
  marginStart: "1.5",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focusVisible: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
});
var baseStyle6 = definePartsStyle5({
  container: baseStyleContainer,
  label: baseStyleLabel,
  closeButton: baseStyleCloseButton
});
var sizes5 = {
  sm: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.5",
      [$minW.variable]: "sizes.5",
      [$fontSize.variable]: "fontSizes.xs",
      [$paddingX.variable]: "space.2"
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  }),
  md: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.6",
      [$minW.variable]: "sizes.6",
      [$fontSize.variable]: "fontSizes.sm",
      [$paddingX.variable]: "space.2"
    }
  }),
  lg: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.8",
      [$minW.variable]: "sizes.8",
      [$fontSize.variable]: "fontSizes.md",
      [$paddingX.variable]: "space.3"
    }
  })
};
var variants4 = {
  subtle: definePartsStyle5((props) => {
    var _a9;
    return {
      container: (_a9 = badgeTheme.variants) == null ? void 0 : _a9.subtle(props)
    };
  }),
  solid: definePartsStyle5((props) => {
    var _a9;
    return {
      container: (_a9 = badgeTheme.variants) == null ? void 0 : _a9.solid(props)
    };
  }),
  outline: definePartsStyle5((props) => {
    var _a9;
    return {
      container: (_a9 = badgeTheme.variants) == null ? void 0 : _a9.outline(props)
    };
  })
};
var tagTheme = defineMultiStyleConfig5({
  variants: variants4,
  baseStyle: baseStyle6,
  sizes: sizes5,
  defaultProps: {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-ICL3HPTT.mjs
var { definePartsStyle: definePartsStyle6, defineMultiStyleConfig: defineMultiStyleConfig6 } = createMultiStyleConfigHelpers(inputAnatomy.keys);
var $height2 = cssVar("input-height");
var $fontSize2 = cssVar("input-font-size");
var $padding = cssVar("input-padding");
var $borderRadius = cssVar("input-border-radius");
var baseStyle7 = definePartsStyle6({
  addon: {
    height: $height2.reference,
    fontSize: $fontSize2.reference,
    px: $padding.reference,
    borderRadius: $borderRadius.reference
  },
  field: {
    width: "100%",
    height: $height2.reference,
    fontSize: $fontSize2.reference,
    px: $padding.reference,
    borderRadius: $borderRadius.reference,
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  }
});
var size = {
  lg: defineStyle({
    [$fontSize2.variable]: "fontSizes.lg",
    [$padding.variable]: "space.4",
    [$borderRadius.variable]: "radii.md",
    [$height2.variable]: "sizes.12"
  }),
  md: defineStyle({
    [$fontSize2.variable]: "fontSizes.md",
    [$padding.variable]: "space.4",
    [$borderRadius.variable]: "radii.md",
    [$height2.variable]: "sizes.10"
  }),
  sm: defineStyle({
    [$fontSize2.variable]: "fontSizes.sm",
    [$padding.variable]: "space.3",
    [$borderRadius.variable]: "radii.sm",
    [$height2.variable]: "sizes.8"
  }),
  xs: defineStyle({
    [$fontSize2.variable]: "fontSizes.xs",
    [$padding.variable]: "space.2",
    [$borderRadius.variable]: "radii.sm",
    [$height2.variable]: "sizes.6"
  })
};
var sizes6 = {
  lg: definePartsStyle6({
    field: size.lg,
    group: size.lg
  }),
  md: definePartsStyle6({
    field: size.md,
    group: size.md
  }),
  sm: definePartsStyle6({
    field: size.sm,
    group: size.sm
  }),
  xs: definePartsStyle6({
    field: size.xs,
    group: size.xs
  })
};
function getDefaults(props) {
  const { focusBorderColor: fc, errorBorderColor: ec } = props;
  return {
    focusBorderColor: fc || mode("blue.500", "blue.300")(props),
    errorBorderColor: ec || mode("red.500", "red.300")(props)
  };
}
var variantOutline2 = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode("gray.300", "whiteAlpha.400")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec),
        boxShadow: `0 0 0 1px ${getColor(theme3, ec)}`
      },
      _focusVisible: {
        zIndex: 1,
        borderColor: getColor(theme3, fc),
        boxShadow: `0 0 0 1px ${getColor(theme3, fc)}`
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode("inherit", "whiteAlpha.50")(props),
      bg: mode("gray.100", "whiteAlpha.300")(props)
    }
  };
});
var variantFilled = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props),
      _hover: {
        bg: mode("gray.200", "whiteAlpha.100")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec)
      },
      _focusVisible: {
        bg: "transparent",
        borderColor: getColor(theme3, fc)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props)
    }
  };
});
var variantFlushed = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec),
        boxShadow: `0px 1px 0px 0px ${getColor(theme3, ec)}`
      },
      _focusVisible: {
        borderColor: getColor(theme3, fc),
        boxShadow: `0px 1px 0px 0px ${getColor(theme3, fc)}`
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent"
    }
  };
});
var variantUnstyled2 = definePartsStyle6({
  field: {
    bg: "transparent",
    px: "0",
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: "0",
    height: "auto"
  }
});
var variants5 = {
  outline: variantOutline2,
  filled: variantFilled,
  flushed: variantFlushed,
  unstyled: variantUnstyled2
};
var inputTheme = defineMultiStyleConfig6({
  baseStyle: baseStyle7,
  sizes: sizes6,
  variants: variants5,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-KJ26FGJD.mjs
var _a;
var baseStyle8 = defineStyle({
  ...(_a = inputTheme.baseStyle) == null ? void 0 : _a.field,
  paddingY: "2",
  minHeight: "20",
  lineHeight: "short",
  verticalAlign: "top"
});
var _a2;
var _b;
var variants6 = {
  outline: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.outline(props).field) != null ? _b32 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.flushed(props).field) != null ? _b32 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.filled(props).field) != null ? _b32 : {};
    }
  ),
  unstyled: (_b = (_a2 = inputTheme.variants) == null ? void 0 : _a2.unstyled.field) != null ? _b : {}
};
var _a3;
var _b2;
var _c;
var _d;
var _e;
var _f;
var _g;
var _h;
var sizes7 = {
  xs: (_b2 = (_a3 = inputTheme.sizes) == null ? void 0 : _a3.xs.field) != null ? _b2 : {},
  sm: (_d = (_c = inputTheme.sizes) == null ? void 0 : _c.sm.field) != null ? _d : {},
  md: (_f = (_e = inputTheme.sizes) == null ? void 0 : _e.md.field) != null ? _f : {},
  lg: (_h = (_g = inputTheme.sizes) == null ? void 0 : _g.lg.field) != null ? _h : {}
};
var textareaTheme = defineStyleConfig({
  baseStyle: baseStyle8,
  sizes: sizes7,
  variants: variants6,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-R7ZISUMV.mjs
var $bg4 = cssVar2("tooltip-bg");
var $fg2 = cssVar2("tooltip-fg");
var $arrowBg = cssVar2("popper-arrow-bg");
var baseStyle9 = defineStyle({
  bg: $bg4.reference,
  color: $fg2.reference,
  [$bg4.variable]: "colors.gray.700",
  [$fg2.variable]: "colors.whiteAlpha.900",
  _dark: {
    [$bg4.variable]: "colors.gray.300",
    [$fg2.variable]: "colors.gray.900"
  },
  [$arrowBg.variable]: $bg4.reference,
  px: "2",
  py: "0.5",
  borderRadius: "sm",
  fontWeight: "medium",
  fontSize: "sm",
  boxShadow: "md",
  maxW: "xs",
  zIndex: "tooltip"
});
var tooltipTheme = defineStyleConfig({
  baseStyle: baseStyle9
});

// node_modules/@chakra-ui/theme/dist/chunk-37MNRBP2.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig7, definePartsStyle: definePartsStyle7 } = createMultiStyleConfigHelpers(progressAnatomy.keys);
var filledStyle = defineStyle((props) => {
  const { colorScheme: c2, theme: t3, isIndeterminate, hasStripe } = props;
  const stripeStyle = mode(
    generateStripe(),
    generateStripe("1rem", "rgba(0,0,0,0.1)")
  )(props);
  const bgColor = mode(`${c2}.500`, `${c2}.200`)(props);
  const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor(t3, bgColor)} 50%,
    transparent 100%
  )`;
  const addStripe = !isIndeterminate && hasStripe;
  return {
    ...addStripe && stripeStyle,
    ...isIndeterminate ? { bgImage: gradient } : { bgColor }
  };
});
var baseStyleLabel2 = defineStyle({
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
});
var baseStyleTrack2 = defineStyle((props) => {
  return {
    bg: mode("gray.100", "whiteAlpha.300")(props)
  };
});
var baseStyleFilledTrack = defineStyle((props) => {
  return {
    transitionProperty: "common",
    transitionDuration: "slow",
    ...filledStyle(props)
  };
});
var baseStyle10 = definePartsStyle7((props) => ({
  label: baseStyleLabel2,
  filledTrack: baseStyleFilledTrack(props),
  track: baseStyleTrack2(props)
}));
var sizes8 = {
  xs: definePartsStyle7({
    track: { h: "1" }
  }),
  sm: definePartsStyle7({
    track: { h: "2" }
  }),
  md: definePartsStyle7({
    track: { h: "3" }
  }),
  lg: definePartsStyle7({
    track: { h: "4" }
  })
};
var progressTheme = defineMultiStyleConfig7({
  sizes: sizes8,
  baseStyle: baseStyle10,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-UV3F75RF.mjs
var isFunction2 = (value) => typeof value === "function";
function runIfFn2(valueOrFn, ...args) {
  return isFunction2(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}

// node_modules/@chakra-ui/theme/dist/chunk-XHYVH6UO.mjs
var { definePartsStyle: definePartsStyle8, defineMultiStyleConfig: defineMultiStyleConfig8 } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
var $size2 = cssVar("checkbox-size");
var baseStyleControl = defineStyle((props) => {
  const { colorScheme: c2 } = props;
  return {
    w: $size2.reference,
    h: $size2.reference,
    transitionProperty: "box-shadow",
    transitionDuration: "normal",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode(`${c2}.500`, `${c2}.200`)(props),
      borderColor: mode(`${c2}.500`, `${c2}.200`)(props),
      color: mode("white", "gray.900")(props),
      _hover: {
        bg: mode(`${c2}.600`, `${c2}.300`)(props),
        borderColor: mode(`${c2}.600`, `${c2}.300`)(props)
      },
      _disabled: {
        borderColor: mode("gray.200", "transparent")(props),
        bg: mode("gray.200", "whiteAlpha.300")(props),
        color: mode("gray.500", "whiteAlpha.500")(props)
      }
    },
    _indeterminate: {
      bg: mode(`${c2}.500`, `${c2}.200`)(props),
      borderColor: mode(`${c2}.500`, `${c2}.200`)(props),
      color: mode("white", "gray.900")(props)
    },
    _disabled: {
      bg: mode("gray.100", "whiteAlpha.100")(props),
      borderColor: mode("gray.100", "transparent")(props)
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode("red.500", "red.300")(props)
    }
  };
});
var baseStyleContainer2 = defineStyle({
  _disabled: { cursor: "not-allowed" }
});
var baseStyleLabel3 = defineStyle({
  userSelect: "none",
  _disabled: { opacity: 0.4 }
});
var baseStyleIcon = defineStyle({
  transitionProperty: "transform",
  transitionDuration: "normal"
});
var baseStyle11 = definePartsStyle8((props) => ({
  icon: baseStyleIcon,
  container: baseStyleContainer2,
  control: runIfFn2(baseStyleControl, props),
  label: baseStyleLabel3
}));
var sizes9 = {
  sm: definePartsStyle8({
    control: { [$size2.variable]: "sizes.3" },
    label: { fontSize: "sm" },
    icon: { fontSize: "3xs" }
  }),
  md: definePartsStyle8({
    control: { [$size2.variable]: "sizes.4" },
    label: { fontSize: "md" },
    icon: { fontSize: "2xs" }
  }),
  lg: definePartsStyle8({
    control: { [$size2.variable]: "sizes.5" },
    label: { fontSize: "lg" },
    icon: { fontSize: "2xs" }
  })
};
var checkboxTheme = defineMultiStyleConfig8({
  baseStyle: baseStyle11,
  sizes: sizes9,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-VZUATZ4E.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig9, definePartsStyle: definePartsStyle9 } = createMultiStyleConfigHelpers(radioAnatomy.keys);
var baseStyleControl2 = defineStyle((props) => {
  var _a9;
  const controlStyle = (_a9 = runIfFn2(checkboxTheme.baseStyle, props)) == null ? void 0 : _a9.control;
  return {
    ...controlStyle,
    borderRadius: "full",
    _checked: {
      ...controlStyle == null ? void 0 : controlStyle["_checked"],
      _before: {
        content: `""`,
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    }
  };
});
var baseStyle12 = definePartsStyle9((props) => {
  var _a9, _b5, _c3, _d3;
  return {
    label: (_b5 = (_a9 = checkboxTheme).baseStyle) == null ? void 0 : _b5.call(_a9, props).label,
    container: (_d3 = (_c3 = checkboxTheme).baseStyle) == null ? void 0 : _d3.call(_c3, props).container,
    control: baseStyleControl2(props)
  };
});
var sizes10 = {
  md: definePartsStyle9({
    control: { w: "4", h: "4" },
    label: { fontSize: "md" }
  }),
  lg: definePartsStyle9({
    control: { w: "5", h: "5" },
    label: { fontSize: "lg" }
  }),
  sm: definePartsStyle9({
    control: { width: "3", height: "3" },
    label: { fontSize: "sm" }
  })
};
var radioTheme = defineMultiStyleConfig9({
  baseStyle: baseStyle12,
  sizes: sizes10,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-NNA4E64A.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig10, definePartsStyle: definePartsStyle10 } = createMultiStyleConfigHelpers(selectAnatomy.keys);
var $bg5 = cssVar("select-bg");
var _a4;
var baseStyleField = defineStyle({
  ...(_a4 = inputTheme.baseStyle) == null ? void 0 : _a4.field,
  appearance: "none",
  paddingBottom: "1px",
  lineHeight: "normal",
  bg: $bg5.reference,
  [$bg5.variable]: "colors.white",
  _dark: {
    [$bg5.variable]: "colors.gray.700"
  },
  "> option, > optgroup": {
    bg: $bg5.reference
  }
});
var baseStyleIcon2 = defineStyle({
  width: "6",
  height: "100%",
  insetEnd: "2",
  position: "relative",
  color: "currentColor",
  fontSize: "xl",
  _disabled: {
    opacity: 0.5
  }
});
var baseStyle13 = definePartsStyle10({
  field: baseStyleField,
  icon: baseStyleIcon2
});
var iconSpacing = defineStyle({
  paddingInlineEnd: "8"
});
var _a22;
var _b3;
var _c2;
var _d2;
var _e2;
var _f2;
var _g2;
var _h2;
var sizes11 = {
  lg: {
    ...(_a22 = inputTheme.sizes) == null ? void 0 : _a22.lg,
    field: {
      ...(_b3 = inputTheme.sizes) == null ? void 0 : _b3.lg.field,
      ...iconSpacing
    }
  },
  md: {
    ...(_c2 = inputTheme.sizes) == null ? void 0 : _c2.md,
    field: {
      ...(_d2 = inputTheme.sizes) == null ? void 0 : _d2.md.field,
      ...iconSpacing
    }
  },
  sm: {
    ...(_e2 = inputTheme.sizes) == null ? void 0 : _e2.sm,
    field: {
      ...(_f2 = inputTheme.sizes) == null ? void 0 : _f2.sm.field,
      ...iconSpacing
    }
  },
  xs: {
    ...(_g2 = inputTheme.sizes) == null ? void 0 : _g2.xs,
    field: {
      ...(_h2 = inputTheme.sizes) == null ? void 0 : _h2.xs.field,
      ...iconSpacing
    },
    icon: {
      insetEnd: "1"
    }
  }
};
var selectTheme = defineMultiStyleConfig10({
  baseStyle: baseStyle13,
  sizes: sizes11,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme/dist/chunk-X6XFE4TF.mjs
var $startColor = cssVar("skeleton-start-color");
var $endColor = cssVar("skeleton-end-color");
var baseStyle14 = defineStyle({
  [$startColor.variable]: "colors.gray.100",
  [$endColor.variable]: "colors.gray.400",
  _dark: {
    [$startColor.variable]: "colors.gray.800",
    [$endColor.variable]: "colors.gray.600"
  },
  background: $startColor.reference,
  borderColor: $endColor.reference,
  opacity: 0.7,
  borderRadius: "sm"
});
var skeletonTheme = defineStyleConfig({
  baseStyle: baseStyle14
});

// node_modules/@chakra-ui/theme/dist/chunk-ZREGO6US.mjs
var $bg6 = cssVar("skip-link-bg");
var baseStyle15 = defineStyle({
  borderRadius: "md",
  fontWeight: "semibold",
  _focusVisible: {
    boxShadow: "outline",
    padding: "4",
    position: "fixed",
    top: "6",
    insetStart: "6",
    [$bg6.variable]: "colors.white",
    _dark: {
      [$bg6.variable]: "colors.gray.700"
    },
    bg: $bg6.reference
  }
});
var skipLinkTheme = defineStyleConfig({
  baseStyle: baseStyle15
});

// node_modules/@chakra-ui/theme/dist/chunk-5FA7Y3RP.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig11, definePartsStyle: definePartsStyle11 } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
var $thumbSize = cssVar("slider-thumb-size");
var $trackSize = cssVar("slider-track-size");
var $bg7 = cssVar("slider-bg");
var baseStyleContainer3 = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    },
    ...orient({
      orientation,
      vertical: { h: "100%" },
      horizontal: { w: "100%" }
    })
  };
});
var baseStyleTrack3 = defineStyle((props) => {
  const orientationStyles = orient({
    orientation: props.orientation,
    horizontal: { h: $trackSize.reference },
    vertical: { w: $trackSize.reference }
  });
  return {
    ...orientationStyles,
    overflow: "hidden",
    borderRadius: "sm",
    [$bg7.variable]: "colors.gray.200",
    _dark: {
      [$bg7.variable]: "colors.whiteAlpha.200"
    },
    _disabled: {
      [$bg7.variable]: "colors.gray.300",
      _dark: {
        [$bg7.variable]: "colors.whiteAlpha.300"
      }
    },
    bg: $bg7.reference
  };
});
var baseStyleThumb2 = defineStyle((props) => {
  const { orientation } = props;
  const orientationStyle = orient({
    orientation,
    vertical: {
      left: "50%",
      transform: `translateX(-50%)`,
      _active: {
        transform: `translateX(-50%) scale(1.15)`
      }
    },
    horizontal: {
      top: "50%",
      transform: `translateY(-50%)`,
      _active: {
        transform: `translateY(-50%) scale(1.15)`
      }
    }
  });
  return {
    ...orientationStyle,
    w: $thumbSize.reference,
    h: $thumbSize.reference,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0,
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transitionProperty: "transform",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  };
});
var baseStyleFilledTrack2 = defineStyle((props) => {
  const { colorScheme: c2 } = props;
  return {
    width: "inherit",
    height: "inherit",
    [$bg7.variable]: `colors.${c2}.500`,
    _dark: {
      [$bg7.variable]: `colors.${c2}.200`
    },
    bg: $bg7.reference
  };
});
var baseStyle16 = definePartsStyle11((props) => ({
  container: baseStyleContainer3(props),
  track: baseStyleTrack3(props),
  thumb: baseStyleThumb2(props),
  filledTrack: baseStyleFilledTrack2(props)
}));
var sizeLg = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.4`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeMd = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.3.5`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeSm = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.2.5`,
    [$trackSize.variable]: `sizes.0.5`
  }
});
var sizes12 = {
  lg: sizeLg,
  md: sizeMd,
  sm: sizeSm
};
var sliderTheme = defineMultiStyleConfig11({
  baseStyle: baseStyle16,
  sizes: sizes12,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-L3YAB6CV.mjs
var $size3 = cssVar2("spinner-size");
var baseStyle17 = defineStyle({
  width: [$size3.reference],
  height: [$size3.reference]
});
var sizes13 = {
  xs: defineStyle({
    [$size3.variable]: "sizes.3"
  }),
  sm: defineStyle({
    [$size3.variable]: "sizes.4"
  }),
  md: defineStyle({
    [$size3.variable]: "sizes.6"
  }),
  lg: defineStyle({
    [$size3.variable]: "sizes.8"
  }),
  xl: defineStyle({
    [$size3.variable]: "sizes.12"
  })
};
var spinnerTheme = defineStyleConfig({
  baseStyle: baseStyle17,
  sizes: sizes13,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-2KWJXISX.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig12, definePartsStyle: definePartsStyle12 } = createMultiStyleConfigHelpers(statAnatomy.keys);
var baseStyleLabel4 = defineStyle({
  fontWeight: "medium"
});
var baseStyleHelpText = defineStyle({
  opacity: 0.8,
  marginBottom: "2"
});
var baseStyleNumber = defineStyle({
  verticalAlign: "baseline",
  fontWeight: "semibold"
});
var baseStyleIcon3 = defineStyle({
  marginEnd: 1,
  w: "3.5",
  h: "3.5",
  verticalAlign: "middle"
});
var baseStyle18 = definePartsStyle12({
  container: {},
  label: baseStyleLabel4,
  helpText: baseStyleHelpText,
  number: baseStyleNumber,
  icon: baseStyleIcon3
});
var sizes14 = {
  md: definePartsStyle12({
    label: { fontSize: "sm" },
    helpText: { fontSize: "sm" },
    number: { fontSize: "2xl" }
  })
};
var statTheme = defineMultiStyleConfig12({
  baseStyle: baseStyle18,
  sizes: sizes14,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-AFCBUAM5.mjs
var $bg8 = cssVar("kbd-bg");
var baseStyle19 = defineStyle({
  [$bg8.variable]: "colors.gray.100",
  _dark: {
    [$bg8.variable]: "colors.whiteAlpha.100"
  },
  bg: $bg8.reference,
  borderRadius: "md",
  borderWidth: "1px",
  borderBottomWidth: "3px",
  fontSize: "0.8em",
  fontWeight: "bold",
  lineHeight: "normal",
  px: "0.4em",
  whiteSpace: "nowrap"
});
var kbdTheme = defineStyleConfig({
  baseStyle: baseStyle19
});

// node_modules/@chakra-ui/theme/dist/chunk-V5KSHSOQ.mjs
var baseStyle20 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var linkTheme = defineStyleConfig({
  baseStyle: baseStyle20
});

// node_modules/@chakra-ui/theme/dist/chunk-MGNM2WZQ.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig13, definePartsStyle: definePartsStyle13 } = createMultiStyleConfigHelpers(listAnatomy.keys);
var baseStyleIcon4 = defineStyle({
  marginEnd: "2",
  display: "inline",
  verticalAlign: "text-bottom"
});
var baseStyle21 = definePartsStyle13({
  icon: baseStyleIcon4
});
var listTheme = defineMultiStyleConfig13({
  baseStyle: baseStyle21
});

// node_modules/@chakra-ui/theme/dist/chunk-N2GP2AF7.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig14, definePartsStyle: definePartsStyle14 } = createMultiStyleConfigHelpers(menuAnatomy.keys);
var $bg9 = cssVar("menu-bg");
var $shadow2 = cssVar("menu-shadow");
var baseStyleList = defineStyle({
  [$bg9.variable]: "#fff",
  [$shadow2.variable]: "shadows.sm",
  _dark: {
    [$bg9.variable]: "colors.gray.700",
    [$shadow2.variable]: "shadows.dark-lg"
  },
  color: "inherit",
  minW: "3xs",
  py: "2",
  zIndex: 1,
  borderRadius: "md",
  borderWidth: "1px",
  bg: $bg9.reference,
  boxShadow: $shadow2.reference
});
var baseStyleItem = defineStyle({
  py: "1.5",
  px: "3",
  transitionProperty: "background",
  transitionDuration: "ultra-fast",
  transitionTimingFunction: "ease-in",
  _focus: {
    [$bg9.variable]: "colors.gray.100",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg9.variable]: "colors.gray.200",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.200"
    }
  },
  _expanded: {
    [$bg9.variable]: "colors.gray.100",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.100"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  bg: $bg9.reference
});
var baseStyleGroupTitle = defineStyle({
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
});
var baseStyleIcon5 = defineStyle({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0
});
var baseStyleCommand = defineStyle({
  opacity: 0.6
});
var baseStyleDivider = defineStyle({
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "2",
  opacity: 0.6
});
var baseStyleButton = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyle22 = definePartsStyle14({
  button: baseStyleButton,
  list: baseStyleList,
  item: baseStyleItem,
  groupTitle: baseStyleGroupTitle,
  icon: baseStyleIcon5,
  command: baseStyleCommand,
  divider: baseStyleDivider
});
var menuTheme = defineMultiStyleConfig14({
  baseStyle: baseStyle22
});

// node_modules/@chakra-ui/theme/dist/chunk-JN6QBAR6.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig15, definePartsStyle: definePartsStyle15 } = createMultiStyleConfigHelpers(modalAnatomy.keys);
var $bg10 = cssVar("modal-bg");
var $shadow3 = cssVar("modal-shadow");
var baseStyleOverlay = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer = defineStyle((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto",
    overscrollBehaviorY: "none"
  };
});
var baseStyleDialog = defineStyle((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    borderRadius: "md",
    color: "inherit",
    my: isCentered ? "auto" : "16",
    mx: isCentered ? "auto" : void 0,
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    [$bg10.variable]: "colors.white",
    [$shadow3.variable]: "shadows.lg",
    _dark: {
      [$bg10.variable]: "colors.gray.700",
      [$shadow3.variable]: "shadows.dark-lg"
    },
    bg: $bg10.reference,
    boxShadow: $shadow3.reference
  };
});
var baseStyleHeader = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton2 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody = defineStyle((props) => {
  const { scrollBehavior } = props;
  return {
    px: "6",
    py: "2",
    flex: "1",
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
});
var baseStyleFooter = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle23 = definePartsStyle15((props) => ({
  overlay: baseStyleOverlay,
  dialogContainer: runIfFn2(baseStyleDialogContainer, props),
  dialog: runIfFn2(baseStyleDialog, props),
  header: baseStyleHeader,
  closeButton: baseStyleCloseButton2,
  body: runIfFn2(baseStyleBody, props),
  footer: baseStyleFooter
}));
function getSize(value) {
  if (value === "full") {
    return definePartsStyle15({
      dialog: {
        maxW: "100vw",
        minH: "$100vh",
        my: "0",
        borderRadius: "0"
      }
    });
  }
  return definePartsStyle15({
    dialog: { maxW: value }
  });
}
var sizes15 = {
  xs: getSize("xs"),
  sm: getSize("sm"),
  md: getSize("md"),
  lg: getSize("lg"),
  xl: getSize("xl"),
  "2xl": getSize("2xl"),
  "3xl": getSize("3xl"),
  "4xl": getSize("4xl"),
  "5xl": getSize("5xl"),
  "6xl": getSize("6xl"),
  full: getSize("full")
};
var modalTheme = defineMultiStyleConfig15({
  baseStyle: baseStyle23,
  sizes: sizes15,
  defaultProps: { size: "md" }
});

// node_modules/@chakra-ui/theme/dist/chunk-57T4IAPW.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig16, definePartsStyle: definePartsStyle16 } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
var $stepperWidth = cssVar2("number-input-stepper-width");
var $inputPadding = cssVar2("number-input-input-padding");
var inputPaddingValue = calc2($stepperWidth).add("0.5rem").toString();
var $bg11 = cssVar2("number-input-bg");
var $fg3 = cssVar2("number-input-color");
var $border2 = cssVar2("number-input-border-color");
var baseStyleRoot2 = defineStyle({
  [$stepperWidth.variable]: "sizes.6",
  [$inputPadding.variable]: inputPaddingValue
});
var baseStyleField2 = defineStyle(
  (props) => {
    var _a9, _b5;
    return (_b5 = (_a9 = runIfFn2(inputTheme.baseStyle, props)) == null ? void 0 : _a9.field) != null ? _b5 : {};
  }
);
var baseStyleStepperGroup = defineStyle({
  width: $stepperWidth.reference
});
var baseStyleStepper = defineStyle({
  borderStart: "1px solid",
  borderStartColor: $border2.reference,
  color: $fg3.reference,
  bg: $bg11.reference,
  [$fg3.variable]: "colors.chakra-body-text",
  [$border2.variable]: "colors.chakra-border-color",
  _dark: {
    [$fg3.variable]: "colors.whiteAlpha.800",
    [$border2.variable]: "colors.whiteAlpha.300"
  },
  _active: {
    [$bg11.variable]: "colors.gray.200",
    _dark: {
      [$bg11.variable]: "colors.whiteAlpha.300"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  }
});
var baseStyle24 = definePartsStyle16((props) => {
  var _a9;
  return {
    root: baseStyleRoot2,
    field: (_a9 = runIfFn2(baseStyleField2, props)) != null ? _a9 : {},
    stepperGroup: baseStyleStepperGroup,
    stepper: baseStyleStepper
  };
});
function getSize2(size4) {
  var _a9, _b5, _c3;
  const sizeStyle = (_a9 = inputTheme.sizes) == null ? void 0 : _a9[size4];
  const radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  const _fontSize = (_c3 = (_b5 = sizeStyle.field) == null ? void 0 : _b5.fontSize) != null ? _c3 : "md";
  const fontSize2 = typography_default.fontSizes[_fontSize];
  return definePartsStyle16({
    field: {
      ...sizeStyle.field,
      paddingInlineEnd: $inputPadding.reference,
      verticalAlign: "top"
    },
    stepper: {
      fontSize: calc2(fontSize2).multiply(0.75).toString(),
      _first: {
        borderTopEndRadius: radius[size4]
      },
      _last: {
        borderBottomEndRadius: radius[size4],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  });
}
var sizes16 = {
  xs: getSize2("xs"),
  sm: getSize2("sm"),
  md: getSize2("md"),
  lg: getSize2("lg")
};
var numberInputTheme = defineMultiStyleConfig16({
  baseStyle: baseStyle24,
  sizes: sizes16,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme/dist/chunk-OEFJDLVS.mjs
var _a5;
var baseStyle25 = defineStyle({
  ...(_a5 = inputTheme.baseStyle) == null ? void 0 : _a5.field,
  textAlign: "center"
});
var sizes17 = {
  lg: defineStyle({
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  }),
  md: defineStyle({
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  }),
  sm: defineStyle({
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  }),
  xs: defineStyle({
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  })
};
var _a23;
var _b4;
var variants7 = {
  outline: defineStyle(
    (props) => {
      var _a32, _b22, _c3;
      return (_c3 = (_b22 = runIfFn2((_a32 = inputTheme.variants) == null ? void 0 : _a32.outline, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a32, _b22, _c3;
      return (_c3 = (_b22 = runIfFn2((_a32 = inputTheme.variants) == null ? void 0 : _a32.flushed, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a32, _b22, _c3;
      return (_c3 = (_b22 = runIfFn2((_a32 = inputTheme.variants) == null ? void 0 : _a32.filled, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
    }
  ),
  unstyled: (_b4 = (_a23 = inputTheme.variants) == null ? void 0 : _a23.unstyled.field) != null ? _b4 : {}
};
var pinInputTheme = defineStyleConfig({
  baseStyle: baseStyle25,
  sizes: sizes17,
  variants: variants7,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme/dist/chunk-U3INMHUO.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig17, definePartsStyle: definePartsStyle17 } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
var $popperBg = cssVar2("popper-bg");
var $arrowBg2 = cssVar2("popper-arrow-bg");
var $arrowShadowColor = cssVar2("popper-arrow-shadow-color");
var baseStylePopper = defineStyle({ zIndex: 10 });
var baseStyleContent = defineStyle({
  [$popperBg.variable]: `colors.white`,
  bg: $popperBg.reference,
  [$arrowBg2.variable]: $popperBg.reference,
  [$arrowShadowColor.variable]: `colors.gray.200`,
  _dark: {
    [$popperBg.variable]: `colors.gray.700`,
    [$arrowShadowColor.variable]: `colors.whiteAlpha.300`
  },
  width: "xs",
  border: "1px solid",
  borderColor: "inherit",
  borderRadius: "md",
  boxShadow: "sm",
  zIndex: "inherit",
  _focusVisible: {
    outline: 0,
    boxShadow: "outline"
  }
});
var baseStyleHeader2 = defineStyle({
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
});
var baseStyleBody2 = defineStyle({
  px: 3,
  py: 2
});
var baseStyleFooter2 = defineStyle({
  px: 3,
  py: 2,
  borderTopWidth: "1px"
});
var baseStyleCloseButton3 = defineStyle({
  position: "absolute",
  borderRadius: "md",
  top: 1,
  insetEnd: 2,
  padding: 2
});
var baseStyle26 = definePartsStyle17({
  popper: baseStylePopper,
  content: baseStyleContent,
  header: baseStyleHeader2,
  body: baseStyleBody2,
  footer: baseStyleFooter2,
  closeButton: baseStyleCloseButton3
});
var popoverTheme = defineMultiStyleConfig17({
  baseStyle: baseStyle26
});

// node_modules/@chakra-ui/theme/dist/chunk-VWP3ZVQT.mjs
var { definePartsStyle: definePartsStyle18, defineMultiStyleConfig: defineMultiStyleConfig18 } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
var $bg12 = cssVar("drawer-bg");
var $bs = cssVar("drawer-box-shadow");
function getSize3(value) {
  if (value === "full") {
    return definePartsStyle18({
      dialog: { maxW: "100vw", h: "100vh" }
    });
  }
  return definePartsStyle18({
    dialog: { maxW: value }
  });
}
var baseStyleOverlay2 = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer2 = defineStyle({
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
});
var baseStyleDialog2 = defineStyle((props) => {
  const { isFullHeight } = props;
  return {
    ...isFullHeight && { height: "100vh" },
    zIndex: "modal",
    maxH: "100vh",
    color: "inherit",
    [$bg12.variable]: "colors.white",
    [$bs.variable]: "shadows.lg",
    _dark: {
      [$bg12.variable]: "colors.gray.700",
      [$bs.variable]: "shadows.dark-lg"
    },
    bg: $bg12.reference,
    boxShadow: $bs.reference
  };
});
var baseStyleHeader3 = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton4 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody3 = defineStyle({
  px: "6",
  py: "2",
  flex: "1",
  overflow: "auto"
});
var baseStyleFooter3 = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle27 = definePartsStyle18((props) => ({
  overlay: baseStyleOverlay2,
  dialogContainer: baseStyleDialogContainer2,
  dialog: runIfFn2(baseStyleDialog2, props),
  header: baseStyleHeader3,
  closeButton: baseStyleCloseButton4,
  body: baseStyleBody3,
  footer: baseStyleFooter3
}));
var sizes18 = {
  xs: getSize3("xs"),
  sm: getSize3("md"),
  md: getSize3("lg"),
  lg: getSize3("2xl"),
  xl: getSize3("4xl"),
  full: getSize3("full")
};
var drawerTheme = defineMultiStyleConfig18({
  baseStyle: baseStyle27,
  sizes: sizes18,
  defaultProps: {
    size: "xs"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-D6DZ26HA.mjs
var { definePartsStyle: definePartsStyle19, defineMultiStyleConfig: defineMultiStyleConfig19 } = createMultiStyleConfigHelpers(editableAnatomy.keys);
var baseStylePreview = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyleInput = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyleTextarea = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyle28 = definePartsStyle19({
  preview: baseStylePreview,
  input: baseStyleInput,
  textarea: baseStyleTextarea
});
var editableTheme = defineMultiStyleConfig19({
  baseStyle: baseStyle28
});

// node_modules/@chakra-ui/theme/dist/chunk-O6GGGS4Y.mjs
var { definePartsStyle: definePartsStyle20, defineMultiStyleConfig: defineMultiStyleConfig20 } = createMultiStyleConfigHelpers(formAnatomy.keys);
var $fg4 = cssVar("form-control-color");
var baseStyleRequiredIndicator = defineStyle({
  marginStart: "1",
  [$fg4.variable]: "colors.red.500",
  _dark: {
    [$fg4.variable]: "colors.red.300"
  },
  color: $fg4.reference
});
var baseStyleHelperText = defineStyle({
  mt: "2",
  [$fg4.variable]: "colors.gray.600",
  _dark: {
    [$fg4.variable]: "colors.whiteAlpha.600"
  },
  color: $fg4.reference,
  lineHeight: "normal",
  fontSize: "sm"
});
var baseStyle29 = definePartsStyle20({
  container: {
    width: "100%",
    position: "relative"
  },
  requiredIndicator: baseStyleRequiredIndicator,
  helperText: baseStyleHelperText
});
var formTheme = defineMultiStyleConfig20({
  baseStyle: baseStyle29
});

// node_modules/@chakra-ui/theme/dist/chunk-SRBDDT7F.mjs
var { definePartsStyle: definePartsStyle21, defineMultiStyleConfig: defineMultiStyleConfig21 } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
var $fg5 = cssVar("form-error-color");
var baseStyleText = defineStyle({
  [$fg5.variable]: `colors.red.500`,
  _dark: {
    [$fg5.variable]: `colors.red.300`
  },
  color: $fg5.reference,
  mt: "2",
  fontSize: "sm",
  lineHeight: "normal"
});
var baseStyleIcon6 = defineStyle({
  marginEnd: "0.5em",
  [$fg5.variable]: `colors.red.500`,
  _dark: {
    [$fg5.variable]: `colors.red.300`
  },
  color: $fg5.reference
});
var baseStyle30 = definePartsStyle21({
  text: baseStyleText,
  icon: baseStyleIcon6
});
var formErrorTheme = defineMultiStyleConfig21({
  baseStyle: baseStyle30
});

// node_modules/@chakra-ui/theme/dist/chunk-VHM7WLW6.mjs
var baseStyle31 = defineStyle({
  fontSize: "md",
  marginEnd: "3",
  mb: "2",
  fontWeight: "medium",
  transitionProperty: "common",
  transitionDuration: "normal",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
});
var formLabelTheme = defineStyleConfig({
  baseStyle: baseStyle31
});

// node_modules/@chakra-ui/theme/dist/chunk-WXARPSDQ.mjs
var baseStyle32 = defineStyle({
  fontFamily: "heading",
  fontWeight: "bold"
});
var sizes19 = {
  "4xl": defineStyle({
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  }),
  "3xl": defineStyle({
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  }),
  "2xl": defineStyle({
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  }),
  xl: defineStyle({
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  lg: defineStyle({
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  md: defineStyle({
    fontSize: "xl",
    lineHeight: 1.2
  }),
  sm: defineStyle({
    fontSize: "md",
    lineHeight: 1.2
  }),
  xs: defineStyle({
    fontSize: "sm",
    lineHeight: 1.2
  })
};
var headingTheme = defineStyleConfig({
  baseStyle: baseStyle32,
  sizes: sizes19,
  defaultProps: {
    size: "xl"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-FU5DDBRC.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig22, definePartsStyle: definePartsStyle22 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
var $decor = cssVar("breadcrumb-link-decor");
var baseStyleLink = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  outline: "none",
  color: "inherit",
  textDecoration: $decor.reference,
  [$decor.variable]: "none",
  "&:not([aria-current=page])": {
    cursor: "pointer",
    _hover: {
      [$decor.variable]: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  }
});
var baseStyle33 = definePartsStyle22({
  link: baseStyleLink
});
var breadcrumbTheme = defineMultiStyleConfig22({
  baseStyle: baseStyle33
});

// node_modules/@chakra-ui/theme/dist/chunk-MBVM6PEK.mjs
var baseStyle34 = defineStyle({
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  transitionProperty: "common",
  transitionDuration: "normal",
  _focusVisible: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
});
var variantGhost = defineStyle((props) => {
  const { colorScheme: c2, theme: theme3 } = props;
  if (c2 === "gray") {
    return {
      color: mode(`gray.800`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode(`gray.100`, `whiteAlpha.200`)(props)
      },
      _active: { bg: mode(`gray.200`, `whiteAlpha.300`)(props) }
    };
  }
  const darkHoverBg = transparentize2(`${c2}.200`, 0.12)(theme3);
  const darkActiveBg = transparentize2(`${c2}.200`, 0.24)(theme3);
  return {
    color: mode(`${c2}.600`, `${c2}.200`)(props),
    bg: "transparent",
    _hover: {
      bg: mode(`${c2}.50`, darkHoverBg)(props)
    },
    _active: {
      bg: mode(`${c2}.100`, darkActiveBg)(props)
    }
  };
});
var variantOutline3 = defineStyle((props) => {
  const { colorScheme: c2 } = props;
  const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);
  return {
    border: "1px solid",
    borderColor: c2 === "gray" ? borderColor : "currentColor",
    ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
    ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" },
    ...runIfFn2(variantGhost, props)
  };
});
var accessibleColorMap = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
var variantSolid2 = defineStyle((props) => {
  var _a9;
  const { colorScheme: c2 } = props;
  if (c2 === "gray") {
    const bg2 = mode(`gray.100`, `whiteAlpha.200`)(props);
    return {
      bg: bg2,
      color: mode(`gray.800`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode(`gray.200`, `whiteAlpha.300`)(props),
        _disabled: {
          bg: bg2
        }
      },
      _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) }
    };
  }
  const {
    bg = `${c2}.500`,
    color: color5 = "white",
    hoverBg = `${c2}.600`,
    activeBg = `${c2}.700`
  } = (_a9 = accessibleColorMap[c2]) != null ? _a9 : {};
  const background2 = mode(bg, `${c2}.200`)(props);
  return {
    bg: background2,
    color: mode(color5, `gray.800`)(props),
    _hover: {
      bg: mode(hoverBg, `${c2}.300`)(props),
      _disabled: {
        bg: background2
      }
    },
    _active: { bg: mode(activeBg, `${c2}.400`)(props) }
  };
});
var variantLink = defineStyle((props) => {
  const { colorScheme: c2 } = props;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode(`${c2}.500`, `${c2}.200`)(props),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode(`${c2}.700`, `${c2}.500`)(props)
    }
  };
});
var variantUnstyled3 = defineStyle({
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: "0",
  p: "0"
});
var variants8 = {
  ghost: variantGhost,
  outline: variantOutline3,
  solid: variantSolid2,
  link: variantLink,
  unstyled: variantUnstyled3
};
var sizes20 = {
  lg: defineStyle({
    h: "12",
    minW: "12",
    fontSize: "lg",
    px: "6"
  }),
  md: defineStyle({
    h: "10",
    minW: "10",
    fontSize: "md",
    px: "4"
  }),
  sm: defineStyle({
    h: "8",
    minW: "8",
    fontSize: "sm",
    px: "3"
  }),
  xs: defineStyle({
    h: "6",
    minW: "6",
    fontSize: "xs",
    px: "2"
  })
};
var buttonTheme = defineStyleConfig({
  baseStyle: baseStyle34,
  variants: variants8,
  sizes: sizes20,
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-F7CKIHPM.mjs
var { definePartsStyle: definePartsStyle23, defineMultiStyleConfig: defineMultiStyleConfig23 } = createMultiStyleConfigHelpers(cardAnatomy.keys);
var $bg13 = cssVar("card-bg");
var $padding2 = cssVar("card-padding");
var $shadow4 = cssVar("card-shadow");
var $radius = cssVar("card-radius");
var $border3 = cssVar("card-border-width", "0");
var $borderColor = cssVar("card-border-color");
var baseStyle35 = definePartsStyle23({
  container: {
    [$bg13.variable]: "colors.chakra-body-bg",
    backgroundColor: $bg13.reference,
    boxShadow: $shadow4.reference,
    borderRadius: $radius.reference,
    color: "chakra-body-text",
    borderWidth: $border3.reference,
    borderColor: $borderColor.reference
  },
  body: {
    padding: $padding2.reference,
    flex: "1 1 0%"
  },
  header: {
    padding: $padding2.reference
  },
  footer: {
    padding: $padding2.reference
  }
});
var sizes21 = {
  sm: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.base",
      [$padding2.variable]: "space.3"
    }
  }),
  md: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.md",
      [$padding2.variable]: "space.5"
    }
  }),
  lg: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.xl",
      [$padding2.variable]: "space.7"
    }
  })
};
var variants9 = {
  elevated: definePartsStyle23({
    container: {
      [$shadow4.variable]: "shadows.base",
      _dark: {
        [$bg13.variable]: "colors.gray.700"
      }
    }
  }),
  outline: definePartsStyle23({
    container: {
      [$border3.variable]: "1px",
      [$borderColor.variable]: "colors.chakra-border-color"
    }
  }),
  filled: definePartsStyle23({
    container: {
      [$bg13.variable]: "colors.chakra-subtle-bg"
    }
  }),
  unstyled: {
    body: {
      [$padding2.variable]: 0
    },
    header: {
      [$padding2.variable]: 0
    },
    footer: {
      [$padding2.variable]: 0
    }
  }
};
var cardTheme = defineMultiStyleConfig23({
  baseStyle: baseStyle35,
  variants: variants9,
  sizes: sizes21,
  defaultProps: {
    variant: "elevated",
    size: "md"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-OB7MMEC3.mjs
var $size4 = cssVar2("close-button-size");
var $bg14 = cssVar2("close-button-bg");
var baseStyle36 = defineStyle({
  w: [$size4.reference],
  h: [$size4.reference],
  borderRadius: "md",
  transitionProperty: "common",
  transitionDuration: "normal",
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    [$bg14.variable]: "colors.blackAlpha.100",
    _dark: {
      [$bg14.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg14.variable]: "colors.blackAlpha.200",
    _dark: {
      [$bg14.variable]: "colors.whiteAlpha.200"
    }
  },
  _focusVisible: {
    boxShadow: "outline"
  },
  bg: $bg14.reference
});
var sizes22 = {
  lg: defineStyle({
    [$size4.variable]: "sizes.10",
    fontSize: "md"
  }),
  md: defineStyle({
    [$size4.variable]: "sizes.8",
    fontSize: "xs"
  }),
  sm: defineStyle({
    [$size4.variable]: "sizes.6",
    fontSize: "2xs"
  })
};
var closeButtonTheme = defineStyleConfig({
  baseStyle: baseStyle36,
  sizes: sizes22,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-K3RH7Y2L.mjs
var { variants: variants10, defaultProps } = badgeTheme;
var baseStyle37 = defineStyle({
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var codeTheme = defineStyleConfig({
  baseStyle: baseStyle37,
  variants: variants10,
  defaultProps
});

// node_modules/@chakra-ui/theme/dist/chunk-TECE6HDR.mjs
var baseStyle38 = defineStyle({
  w: "100%",
  mx: "auto",
  maxW: "prose",
  px: "4"
});
var containerTheme = defineStyleConfig({
  baseStyle: baseStyle38
});

// node_modules/@chakra-ui/theme/dist/chunk-5S44M2O4.mjs
var baseStyle39 = defineStyle({
  opacity: 0.6,
  borderColor: "inherit"
});
var variantSolid3 = defineStyle({
  borderStyle: "solid"
});
var variantDashed = defineStyle({
  borderStyle: "dashed"
});
var variants11 = {
  solid: variantSolid3,
  dashed: variantDashed
};
var dividerTheme = defineStyleConfig({
  baseStyle: baseStyle39,
  variants: variants11,
  defaultProps: {
    variant: "solid"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-J7AGDWFO.mjs
var { definePartsStyle: definePartsStyle24, defineMultiStyleConfig: defineMultiStyleConfig24 } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
var baseStyleContainer4 = defineStyle({
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
});
var baseStyleButton2 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal",
  fontSize: "md",
  _focusVisible: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: "4",
  py: "2"
});
var baseStylePanel = defineStyle({
  pt: "2",
  px: "4",
  pb: "5"
});
var baseStyleIcon7 = defineStyle({
  fontSize: "1.25em"
});
var baseStyle40 = definePartsStyle24({
  container: baseStyleContainer4,
  button: baseStyleButton2,
  panel: baseStylePanel,
  icon: baseStyleIcon7
});
var accordionTheme = defineMultiStyleConfig24({ baseStyle: baseStyle40 });

// node_modules/@chakra-ui/theme/dist/chunk-BNQWYFTH.mjs
var { definePartsStyle: definePartsStyle25, defineMultiStyleConfig: defineMultiStyleConfig25 } = createMultiStyleConfigHelpers(alertAnatomy.keys);
var $fg6 = cssVar("alert-fg");
var $bg15 = cssVar("alert-bg");
var baseStyle41 = definePartsStyle25({
  container: {
    bg: $bg15.reference,
    px: "4",
    py: "3"
  },
  title: {
    fontWeight: "bold",
    lineHeight: "6",
    marginEnd: "2"
  },
  description: {
    lineHeight: "6"
  },
  icon: {
    color: $fg6.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "6"
  },
  spinner: {
    color: $fg6.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "5"
  }
});
function getBg(props) {
  const { theme: theme3, colorScheme: c2 } = props;
  const darkBg = transparentize2(`${c2}.200`, 0.16)(theme3);
  return {
    light: `colors.${c2}.100`,
    dark: darkBg
  };
}
var variantSubtle2 = definePartsStyle25((props) => {
  const { colorScheme: c2 } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c2}.600`,
      [$bg15.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c2}.200`,
        [$bg15.variable]: bg.dark
      }
    }
  };
});
var variantLeftAccent = definePartsStyle25((props) => {
  const { colorScheme: c2 } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c2}.600`,
      [$bg15.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c2}.200`,
        [$bg15.variable]: bg.dark
      },
      paddingStart: "3",
      borderStartWidth: "4px",
      borderStartColor: $fg6.reference
    }
  };
});
var variantTopAccent = definePartsStyle25((props) => {
  const { colorScheme: c2 } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c2}.600`,
      [$bg15.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c2}.200`,
        [$bg15.variable]: bg.dark
      },
      pt: "2",
      borderTopWidth: "4px",
      borderTopColor: $fg6.reference
    }
  };
});
var variantSolid4 = definePartsStyle25((props) => {
  const { colorScheme: c2 } = props;
  return {
    container: {
      [$fg6.variable]: `colors.white`,
      [$bg15.variable]: `colors.${c2}.600`,
      _dark: {
        [$fg6.variable]: `colors.gray.900`,
        [$bg15.variable]: `colors.${c2}.200`
      },
      color: $fg6.reference
    }
  };
});
var variants12 = {
  subtle: variantSubtle2,
  "left-accent": variantLeftAccent,
  "top-accent": variantTopAccent,
  solid: variantSolid4
};
var alertTheme = defineMultiStyleConfig25({
  baseStyle: baseStyle41,
  variants: variants12,
  defaultProps: {
    variant: "subtle",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-Q5ZQE4MD.mjs
var { definePartsStyle: definePartsStyle26, defineMultiStyleConfig: defineMultiStyleConfig26 } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
var $border4 = cssVar("avatar-border-color");
var $bg16 = cssVar("avatar-bg");
var $fs = cssVar("avatar-font-size");
var $size5 = cssVar("avatar-size");
var baseStyleBadge = defineStyle({
  borderRadius: "full",
  border: "0.2em solid",
  borderColor: $border4.reference,
  [$border4.variable]: "white",
  _dark: {
    [$border4.variable]: "colors.gray.800"
  }
});
var baseStyleExcessLabel = defineStyle({
  bg: $bg16.reference,
  fontSize: $fs.reference,
  width: $size5.reference,
  height: $size5.reference,
  lineHeight: "1",
  [$bg16.variable]: "colors.gray.200",
  _dark: {
    [$bg16.variable]: "colors.whiteAlpha.400"
  }
});
var baseStyleContainer5 = defineStyle((props) => {
  const { name, theme: theme3 } = props;
  const bg = name ? randomColor({ string: name }) : "colors.gray.400";
  const isBgDark = isDark(bg)(theme3);
  let color5 = "white";
  if (!isBgDark)
    color5 = "gray.800";
  return {
    bg: $bg16.reference,
    fontSize: $fs.reference,
    color: color5,
    borderColor: $border4.reference,
    verticalAlign: "top",
    width: $size5.reference,
    height: $size5.reference,
    "&:not([data-loaded])": {
      [$bg16.variable]: bg
    },
    [$border4.variable]: "colors.white",
    _dark: {
      [$border4.variable]: "colors.gray.800"
    }
  };
});
var baseStyleLabel5 = defineStyle({
  fontSize: $fs.reference,
  lineHeight: "1"
});
var baseStyle42 = definePartsStyle26((props) => ({
  badge: runIfFn2(baseStyleBadge, props),
  excessLabel: runIfFn2(baseStyleExcessLabel, props),
  container: runIfFn2(baseStyleContainer5, props),
  label: baseStyleLabel5
}));
function getSize4(size4) {
  const themeSize = size4 !== "100%" ? sizes_default[size4] : void 0;
  return definePartsStyle26({
    container: {
      [$size5.variable]: themeSize != null ? themeSize : size4,
      [$fs.variable]: `calc(${themeSize != null ? themeSize : size4} / 2.5)`
    },
    excessLabel: {
      [$size5.variable]: themeSize != null ? themeSize : size4,
      [$fs.variable]: `calc(${themeSize != null ? themeSize : size4} / 2.5)`
    }
  });
}
var sizes23 = {
  "2xs": getSize4(4),
  xs: getSize4(6),
  sm: getSize4(8),
  md: getSize4(12),
  lg: getSize4(16),
  xl: getSize4(24),
  "2xl": getSize4(32),
  full: getSize4("100%")
};
var avatarTheme = defineMultiStyleConfig26({
  baseStyle: baseStyle42,
  sizes: sizes23,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme/dist/chunk-P7SDT22G.mjs
var components = {
  Accordion: accordionTheme,
  Alert: alertTheme,
  Avatar: avatarTheme,
  Badge: badgeTheme,
  Breadcrumb: breadcrumbTheme,
  Button: buttonTheme,
  Checkbox: checkboxTheme,
  CloseButton: closeButtonTheme,
  Code: codeTheme,
  Container: containerTheme,
  Divider: dividerTheme,
  Drawer: drawerTheme,
  Editable: editableTheme,
  Form: formTheme,
  FormError: formErrorTheme,
  FormLabel: formLabelTheme,
  Heading: headingTheme,
  Input: inputTheme,
  Kbd: kbdTheme,
  Link: linkTheme,
  List: listTheme,
  Menu: menuTheme,
  Modal: modalTheme,
  NumberInput: numberInputTheme,
  PinInput: pinInputTheme,
  Popover: popoverTheme,
  Progress: progressTheme,
  Radio: radioTheme,
  Select: selectTheme,
  Skeleton: skeletonTheme,
  SkipLink: skipLinkTheme,
  Slider: sliderTheme,
  Spinner: spinnerTheme,
  Stat: statTheme,
  Switch: switchTheme,
  Table: tableTheme,
  Tabs: tabsTheme,
  Tag: tagTheme,
  Textarea: textareaTheme,
  Tooltip: tooltipTheme,
  Card: cardTheme,
  Stepper: stepperTheme
};

// node_modules/@chakra-ui/theme/dist/chunk-5GOSZLB7.mjs
var semanticTokens = {
  colors: {
    "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
    "chakra-body-bg": { _light: "white", _dark: "gray.800" },
    "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
    "chakra-inverse-text": { _light: "white", _dark: "gray.800" },
    "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
    "chakra-subtle-text": { _light: "gray.600", _dark: "gray.400" },
    "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
  }
};

// node_modules/@chakra-ui/theme/dist/chunk-3F7U33P5.mjs
var styles = {
  global: {
    body: {
      fontFamily: "body",
      color: "chakra-body-text",
      bg: "chakra-body-bg",
      transitionProperty: "background-color",
      transitionDuration: "normal",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: "chakra-placeholder-color"
    },
    "*, *::before, &::after": {
      borderColor: "chakra-border-color"
    }
  }
};

// node_modules/@chakra-ui/theme/dist/index.mjs
var direction = "ltr";
var config = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme = {
  semanticTokens,
  direction,
  ...foundations,
  components,
  styles,
  config
};
var baseTheme = {
  semanticTokens,
  direction,
  components: {},
  ...foundations,
  styles,
  config
};

// node_modules/@chakra-ui/theme-utils/dist/chunk-LIR5QAZY.mjs
var import_lodash5 = __toESM(require_lodash(), 1);
function isFunction3(value) {
  return typeof value === "function";
}
function pipe2(...fns) {
  return (v) => fns.reduce((a2, b2) => b2(a2), v);
}
var createExtendTheme = (theme22) => {
  return function extendTheme2(...extensions) {
    let overrides2 = [...extensions];
    let activeTheme = extensions[extensions.length - 1];
    if (isChakraTheme(activeTheme) && // this ensures backward compatibility
    // previously only `extendTheme(override, activeTheme?)` was allowed
    overrides2.length > 1) {
      overrides2 = overrides2.slice(0, overrides2.length - 1);
    } else {
      activeTheme = theme22;
    }
    return pipe2(
      ...overrides2.map(
        (extension) => (prevTheme) => isFunction3(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)
      )
    )(activeTheme);
  };
};
var extendTheme = createExtendTheme(theme);
var extendBaseTheme = createExtendTheme(baseTheme);
function mergeThemeOverride(...overrides2) {
  return (0, import_lodash5.default)({}, ...overrides2, mergeThemeCustomizer);
}
function mergeThemeCustomizer(source, override, key2, object2) {
  if ((isFunction3(source) || isFunction3(override)) && Object.prototype.hasOwnProperty.call(object2, key2)) {
    return (...args) => {
      const sourceValue = isFunction3(source) ? source(...args) : source;
      const overrideValue = isFunction3(override) ? override(...args) : override;
      return (0, import_lodash5.default)({}, sourceValue, overrideValue, mergeThemeCustomizer);
    };
  }
  return void 0;
}

// node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
function isElement(el) {
  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function getOwnerDocument(node3) {
  var _a9;
  return isElement(node3) ? (_a9 = node3.ownerDocument) != null ? _a9 : document : document;
}
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser3 = canUseDOM();

// node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
var import_lodash6 = __toESM(require_lodash(), 1);
function omit2(object2, keys3) {
  const result = {};
  Object.keys(object2).forEach((key2) => {
    if (keys3.includes(key2))
      return;
    result[key2] = object2[key2];
  });
  return result;
}
function get2(obj, path2, fallback, index5) {
  const key2 = typeof path2 === "string" ? path2.split(".") : [path2];
  for (index5 = 0; index5 < key2.length; index5 += 1) {
    if (!obj)
      break;
    obj = obj[key2[index5]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize3 = (fn2) => {
  const cache2 = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path2, fallback, index5) => {
    if (typeof obj === "undefined") {
      return fn2(obj, path2, fallback);
    }
    if (!cache2.has(obj)) {
      cache2.set(obj, /* @__PURE__ */ new Map());
    }
    const map2 = cache2.get(obj);
    if (map2.has(path2)) {
      return map2.get(path2);
    }
    const value = fn2(obj, path2, fallback, index5);
    map2.set(path2, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet2 = memoize3(get2);
function objectFilter(object2, fn2) {
  const result = {};
  Object.keys(object2).forEach((key2) => {
    const value = object2[key2];
    const shouldPass = fn2(value, key2, object2);
    if (shouldPass) {
      result[key2] = value;
    }
  });
  return result;
}
var filterUndefined = (object2) => objectFilter(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
function isFunction4(value) {
  return typeof value === "function";
}
var __DEV__ = true;

// node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
function runIfFn3(valueOrFn, ...args) {
  return isFunction4(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function callAllHandlers2(...fns) {
  return function func2(event) {
    fns.some((fn2) => {
      fn2 == null ? void 0 : fn2(event);
      return event == null ? void 0 : event.defaultPrevented;
    });
  };
}
function once(fn2) {
  let result;
  return function func2(...args) {
    if (fn2) {
      result = fn2.apply(this, args);
      fn2 = null;
    }
    return result;
  };
}
var warn2 = once((options2) => () => {
  const { condition, message } = options2;
  if (condition && __DEV__) {
    console.warn(message);
  }
});
var error = once((options2) => () => {
  const { condition, message } = options2;
  if (condition && __DEV__) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/framesync/dist/es/on-next-frame.mjs
var defaultTimestep = 1 / 60 * 1e3;
var getCurrentTime = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);

// node_modules/framesync/dist/es/create-render-step.mjs
function createRenderStep(runNextFrame4) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing4 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing4;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing4)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index5 = toRunNextFrame.indexOf(callback);
      if (index5 !== -1)
        toRunNextFrame.splice(index5, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing4) {
        flushNextFrame = true;
        return;
      }
      isProcessing4 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i2 = 0; i2 < numToRun; i2++) {
          const callback = toRun[i2];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame4();
          }
        }
      }
      isProcessing4 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/framesync/dist/es/index.mjs
var maxElapsed = 40;
var useDefaultElapsed = true;
var runNextFrame = false;
var isProcessing = false;
var frame = {
  delta: 0,
  timestamp: 0
};
var stepsOrder = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps = stepsOrder.reduce((acc, key2) => {
  acc[key2] = createRenderStep(() => runNextFrame = true);
  return acc;
}, {});
var sync = stepsOrder.reduce((acc, key2) => {
  const step = steps[key2];
  acc[key2] = (process2, keepAlive = false, immediate = false) => {
    if (!runNextFrame)
      startLoop();
    return step.schedule(process2, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync = stepsOrder.reduce((acc, key2) => {
  acc[key2] = steps[key2].cancel;
  return acc;
}, {});
var flushSync = stepsOrder.reduce((acc, key2) => {
  acc[key2] = () => steps[key2].process(frame);
  return acc;
}, {});
var processStep = (stepId) => steps[stepId].process(frame);
var processFrame = (timestamp) => {
  runNextFrame = false;
  frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
  frame.timestamp = timestamp;
  isProcessing = true;
  stepsOrder.forEach(processStep);
  isProcessing = false;
  if (runNextFrame) {
    useDefaultElapsed = false;
    onNextFrame(processFrame);
  }
};
var startLoop = () => {
  runNextFrame = true;
  useDefaultElapsed = true;
  if (!isProcessing)
    onNextFrame(processFrame);
};
var getFrameData = () => frame;
var es_default = sync;

// node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints2 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();

// node_modules/tiny-invariant/dist/esm/tiny-invariant.js
var isProduction = false;
var prefix3 = "Invariant failed";
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction) {
    throw new Error(prefix3);
  }
  var provided = typeof message === "function" ? message() : message;
  var value = provided ? "".concat(prefix3, ": ").concat(provided) : prefix3;
  throw new Error(value);
}

// node_modules/@chakra-ui/system/dist/chunk-DMO4EI7P.mjs
var import_react10 = __toESM(require_react(), 1);
var import_react_fast_compare = __toESM(require_react_fast_compare(), 1);
function useStyleConfigImpl(themeKey, props = {}) {
  var _a9;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra();
  const themeStyleConfig = themeKey ? memoizedGet2(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash6.default)(
    { theme: theme3, colorMode },
    (_a9 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a9 : {},
    filterUndefined(omit2(rest, ["children"]))
  );
  const stylesRef = (0, import_react10.useRef)({});
  if (styleConfig) {
    const getStyles4 = resolveStyleConfig(styleConfig);
    const styles2 = getStyles4(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare.default)(stylesRef.current, styles2);
    if (!isStyleEqual) {
      stylesRef.current = styles2;
    }
  }
  return stylesRef.current;
}
function useStyleConfig(themeKey, props = {}) {
  return useStyleConfigImpl(themeKey, props);
}
function useMultiStyleConfig(themeKey, props = {}) {
  return useStyleConfigImpl(themeKey, props);
}

// node_modules/@chakra-ui/system/dist/chunk-FDQH4LQI.mjs
var allPropNames = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp(prop2) {
  return validHTMLProps.has(prop2) || !allPropNames.has(prop2);
}

// node_modules/@chakra-ui/object-utils/dist/chunk-OLTBUDV5.mjs
function assignAfter(target, ...sources) {
  if (target == null) {
    throw new TypeError("Cannot convert undefined or null to object");
  }
  const result = { ...target };
  for (const nextSource of sources) {
    if (nextSource == null)
      continue;
    for (const nextKey in nextSource) {
      if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey))
        continue;
      if (nextKey in result)
        delete result[nextKey];
      result[nextKey] = nextSource[nextKey];
    }
  }
  return result;
}

// node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs
function compact(object2) {
  const clone = Object.assign({}, object2);
  for (let key2 in clone) {
    if (clone[key2] === void 0)
      delete clone[key2];
  }
  return clone;
}

// node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
var React4 = __toESM(require_react());

// node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = memoize(
  function(prop2) {
    return reactPropsRegex.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
  }
  /* Z+1 */
);

// node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
var testOmitPropsOnStringTag = isPropValid;
var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key2) {
  return key2 !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps2(tag, options2, isReal) {
  var shouldForwardProp2;
  if (options2) {
    var optionsShouldForwardProp = options2.shouldForwardProp;
    shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }
  if (typeof shouldForwardProp2 !== "function" && isReal) {
    shouldForwardProp2 = tag.__emotion_forwardProp;
  }
  return shouldForwardProp2;
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var Insertion5 = function Insertion6(_ref4) {
  var cache2 = _ref4.cache, serialized = _ref4.serialized, isStringTag = _ref4.isStringTag;
  registerStyles(cache2, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache2, serialized, isStringTag);
  });
  return null;
};
var createStyled = function createStyled2(tag, options2) {
  if (true) {
    if (tag === void 0) {
      throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
    }
  }
  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;
  if (options2 !== void 0) {
    identifierName = options2.label;
    targetClassName = options2.target;
  }
  var shouldForwardProp2 = composeShouldForwardProps(tag, options2, isReal);
  var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp("as");
  return function() {
    var args = arguments;
    var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
    if (identifierName !== void 0) {
      styles2.push("label:" + identifierName + ";");
    }
    if (args[0] == null || args[0].raw === void 0) {
      styles2.push.apply(styles2, args);
    } else {
      if (args[0][0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
      }
      styles2.push(args[0][0]);
      var len = args.length;
      var i2 = 1;
      for (; i2 < len; i2++) {
        if (args[0][i2] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
        }
        styles2.push(args[i2], args[0][i2]);
      }
    }
    var Styled = withEmotionCache(function(props, cache2, ref) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = "";
      var classInterpolations = [];
      var mergedProps = props;
      if (props.theme == null) {
        mergedProps = {};
        for (var key2 in props) {
          mergedProps[key2] = props[key2];
        }
        mergedProps.theme = React4.useContext(ThemeContext);
      }
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache2.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(styles2.concat(classInterpolations), cache2.registered, mergedProps);
      className += cache2.key + "-" + serialized.name;
      if (targetClassName !== void 0) {
        className += " " + targetClassName;
      }
      var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};
      for (var _key in props) {
        if (shouldUseAs && _key === "as")
          continue;
        if (
          // $FlowFixMe
          finalShouldForwardProp(_key)
        ) {
          newProps[_key] = props[_key];
        }
      }
      newProps.className = className;
      newProps.ref = ref;
      return React4.createElement(React4.Fragment, null, React4.createElement(Insertion5, {
        cache: cache2,
        serialized,
        isStringTag: typeof FinalTag === "string"
      }), React4.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles2;
    Styled.__emotion_forwardProp = shouldForwardProp2;
    Object.defineProperty(Styled, "toString", {
      value: function value() {
        if (targetClassName === void 0 && true) {
          return "NO_COMPONENT_SELECTOR";
        }
        return "." + targetClassName;
      }
    });
    Styled.withComponent = function(nextTag, nextOptions) {
      return createStyled2(nextTag, _extends({}, options2, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      })).apply(void 0, styles2);
    };
    return Styled;
  };
};

// node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
var import_react12 = __toESM(require_react());
var tags = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var newStyled = createStyled.bind();
tags.forEach(function(tagName) {
  newStyled[tagName] = newStyled(tagName);
});

// node_modules/@chakra-ui/system/dist/chunk-5PL47M24.mjs
var import_react14 = __toESM(require_react(), 1);
var _a6;
var emotion_styled = (_a6 = newStyled.default) != null ? _a6 : newStyled;
var toCSSObject = ({ baseStyle: baseStyle44 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter(rest, (_, prop2) => isStyleProp(prop2));
  const finalBaseStyle = runIfFn3(baseStyle44, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined(styleProps2),
    sx
  );
  const computedCSS = css3(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled(component, options2) {
  const { baseStyle: baseStyle44, ...styledOptions } = options2 != null ? options2 : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp;
  }
  const styleObject = toCSSObject({ baseStyle: baseStyle44 });
  const Component7 = emotion_styled(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react14.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react14.default.createElement(Component7, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/system/dist/chunk-ZHQNHOQS.mjs
function factory() {
  const cache2 = /* @__PURE__ */ new Map();
  return new Proxy(styled, {
    /**
     * @example
     * const Div = chakra("div")
     * const WithChakra = chakra(AnotherComponent)
     */
    apply(target, thisArg, argArray) {
      return styled(...argArray);
    },
    /**
     * @example
     * <chakra.div />
     */
    get(_, element) {
      if (!cache2.has(element)) {
        cache2.set(element, styled(element));
      }
      return cache2.get(element);
    }
  });
}
var chakra = factory();

// node_modules/@chakra-ui/system/dist/chunk-ZJJGQIVY.mjs
var import_react15 = __toESM(require_react(), 1);
function forwardRef3(component) {
  return (0, import_react15.forwardRef)(component);
}

// node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
var import_react16 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
var import_react17 = __toESM(require_react(), 1);
function createContext4(options2 = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options2;
  const Context2 = (0, import_react17.createContext)(void 0);
  Context2.displayName = name;
  function useContext44() {
    var _a9;
    const context2 = (0, import_react17.useContext)(Context2);
    if (!context2 && strict) {
      const error2 = new Error(errorMessage);
      error2.name = "ContextError";
      (_a9 = Error.captureStackTrace) == null ? void 0 : _a9.call(Error, error2, useContext44);
      throw error2;
    }
    return context2;
  }
  return [
    Context2.Provider,
    useContext44,
    Context2
  ];
}

// node_modules/@chakra-ui/system/dist/chunk-MFVQSVQB.mjs
var import_react19 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
function ThemeProvider3(props) {
  const { cssVarsRoot, theme: theme3, children } = props;
  const computedTheme = (0, import_react19.useMemo)(() => toCSSVar(theme3), [theme3]);
  return (0, import_jsx_runtime6.jsxs)(ThemeProvider, { theme: computedTheme, children: [
    (0, import_jsx_runtime6.jsx)(CSSVars, { root: cssVarsRoot }),
    children
  ] });
}
function CSSVars({ root = ":host, :root" }) {
  const selector = [root, `[data-theme]`].join(",");
  return (0, import_jsx_runtime6.jsx)(Global, { styles: (theme3) => ({ [selector]: theme3.__cssVars }) });
}
var [StylesProvider, useStyles] = createContext4({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});
function createStylesContext(componentName) {
  return createContext4({
    name: `${componentName}StylesContext`,
    errorMessage: `useStyles: "styles" is undefined. Seems you forgot to wrap the components in "<${componentName} />" `
  });
}
function GlobalStyle() {
  const { colorMode } = useColorMode();
  return (0, import_jsx_runtime6.jsx)(
    Global,
    {
      styles: (theme3) => {
        const styleObjectOrFn = memoizedGet2(theme3, "styles.global");
        const globalStyles = runIfFn3(styleObjectOrFn, { theme: theme3, colorMode });
        if (!globalStyles)
          return void 0;
        const styles2 = css3(globalStyles)(theme3);
        return styles2;
      }
    }
  );
}

// node_modules/@chakra-ui/react-env/dist/chunk-VMD3UMGK.mjs
var import_react21 = __toESM(require_react(), 1);
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var EnvironmentContext = (0, import_react21.createContext)({
  getDocument() {
    return document;
  },
  getWindow() {
    return window;
  }
});
EnvironmentContext.displayName = "EnvironmentContext";
function useEnvironment({ defer } = {}) {
  const [, forceUpdate] = (0, import_react21.useReducer)((c2) => c2 + 1, 0);
  useSafeLayoutEffect(() => {
    if (!defer)
      return;
    forceUpdate();
  }, [defer]);
  return (0, import_react21.useContext)(EnvironmentContext);
}
function EnvironmentProvider(props) {
  const { children, environment: environmentProp, disabled } = props;
  const ref = (0, import_react21.useRef)(null);
  const context2 = (0, import_react21.useMemo)(() => {
    if (environmentProp)
      return environmentProp;
    return {
      getDocument: () => {
        var _a9, _b5;
        return (_b5 = (_a9 = ref.current) == null ? void 0 : _a9.ownerDocument) != null ? _b5 : document;
      },
      getWindow: () => {
        var _a9, _b5;
        return (_b5 = (_a9 = ref.current) == null ? void 0 : _a9.ownerDocument.defaultView) != null ? _b5 : window;
      }
    };
  }, [environmentProp]);
  const showSpan = !disabled || !environmentProp;
  return (0, import_jsx_runtime7.jsxs)(EnvironmentContext.Provider, { value: context2, children: [
    children,
    showSpan && (0, import_jsx_runtime7.jsx)("span", { id: "__chakra_env", hidden: true, ref })
  ] });
}
EnvironmentProvider.displayName = "EnvironmentProvider";

// node_modules/@chakra-ui/provider/dist/chunk-3DDHO3UN.mjs
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var ChakraProvider = (props) => {
  const {
    children,
    colorModeManager,
    portalZIndex,
    resetScope,
    resetCSS = true,
    theme: theme3 = {},
    environment,
    cssVarsRoot,
    disableEnvironment,
    disableGlobalStyle
  } = props;
  const _children = (0, import_jsx_runtime8.jsx)(
    EnvironmentProvider,
    {
      environment,
      disabled: disableEnvironment,
      children
    }
  );
  return (0, import_jsx_runtime8.jsx)(ThemeProvider3, { theme: theme3, cssVarsRoot, children: (0, import_jsx_runtime8.jsxs)(
    ColorModeProvider,
    {
      colorModeManager,
      options: theme3.config,
      children: [
        resetCSS ? (0, import_jsx_runtime8.jsx)(CSSReset, { scope: resetScope }) : (0, import_jsx_runtime8.jsx)(CSSPolyfill, {}),
        !disableGlobalStyle && (0, import_jsx_runtime8.jsx)(GlobalStyle, {}),
        portalZIndex ? (0, import_jsx_runtime8.jsx)(PortalManager, { zIndex: portalZIndex, children: _children }) : _children
      ]
    }
  ) });
};

// node_modules/@chakra-ui/toast/dist/chunk-LDADOVIM.mjs
var findById = (arr, id3) => arr.find((toast) => toast.id === id3);
function findToast(toasts, id3) {
  const position3 = getToastPosition(toasts, id3);
  const index5 = position3 ? toasts[position3].findIndex((toast) => toast.id === id3) : -1;
  return {
    position: position3,
    index: index5
  };
}
function getToastPosition(toasts, id3) {
  for (const [position3, values2] of Object.entries(toasts)) {
    if (findById(values2, id3)) {
      return position3;
    }
  }
}
function getToastStyle(position3) {
  const isRighty = position3.includes("right");
  const isLefty = position3.includes("left");
  let alignItems = "center";
  if (isRighty)
    alignItems = "flex-end";
  if (isLefty)
    alignItems = "flex-start";
  return {
    display: "flex",
    flexDirection: "column",
    alignItems
  };
}
function getToastListStyle(position3) {
  const isTopOrBottom = position3 === "top" || position3 === "bottom";
  const margin = isTopOrBottom ? "0 auto" : void 0;
  const top2 = position3.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
  const bottom2 = position3.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
  const right2 = !position3.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
  const left2 = !position3.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
  return {
    position: "fixed",
    zIndex: "var(--toast-z-index, 5500)",
    pointerEvents: "none",
    display: "flex",
    flexDirection: "column",
    margin,
    top: top2,
    bottom: bottom2,
    right: right2,
    left: left2
  };
}

// node_modules/@chakra-ui/react-use-timeout/dist/index.mjs
var import_react23 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/react-use-callback-ref/dist/index.mjs
var import_react22 = __toESM(require_react(), 1);
function useCallbackRef(callback, deps = []) {
  const callbackRef = (0, import_react22.useRef)(callback);
  (0, import_react22.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react22.useCallback)((...args) => {
    var _a9;
    return (_a9 = callbackRef.current) == null ? void 0 : _a9.call(callbackRef, ...args);
  }, deps);
}

// node_modules/@chakra-ui/react-use-timeout/dist/index.mjs
function useTimeout(callback, delay2) {
  const fn2 = useCallbackRef(callback);
  (0, import_react23.useEffect)(() => {
    if (delay2 == null)
      return void 0;
    let timeoutId = null;
    timeoutId = window.setTimeout(() => {
      fn2();
    }, delay2);
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [delay2, fn2]);
}

// node_modules/@chakra-ui/react-use-update-effect/dist/index.mjs
var import_react24 = __toESM(require_react(), 1);
function useUpdateEffect(callback, deps) {
  const renderCycleRef = (0, import_react24.useRef)(false);
  const effectCycleRef = (0, import_react24.useRef)(false);
  (0, import_react24.useEffect)(() => {
    const mounted = renderCycleRef.current;
    const run = mounted && effectCycleRef.current;
    if (run) {
      return callback();
    }
    effectCycleRef.current = true;
  }, deps);
  (0, import_react24.useEffect)(() => {
    renderCycleRef.current = true;
    return () => {
      renderCycleRef.current = false;
    };
  }, []);
}

// node_modules/framer-motion/dist/es/motion/index.mjs
var React6 = __toESM(require_react(), 1);
var import_react35 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
var import_react25 = __toESM(require_react(), 1);
var MotionConfigContext = (0, import_react25.createContext)({
  transformPagePoint: (p) => p,
  isStatic: false,
  reducedMotion: "never"
});

// node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
var import_react26 = __toESM(require_react(), 1);
var MotionContext = (0, import_react26.createContext)({});

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
var import_react30 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/PresenceContext.mjs
var import_react27 = __toESM(require_react(), 1);
var PresenceContext = (0, import_react27.createContext)(null);

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var import_react28 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-browser.mjs
var isBrowser4 = typeof document !== "undefined";

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var useIsomorphicLayoutEffect = isBrowser4 ? import_react28.useLayoutEffect : import_react28.useEffect;

// node_modules/framer-motion/dist/es/context/LazyContext.mjs
var import_react29 = __toESM(require_react(), 1);
var LazyContext = (0, import_react29.createContext)({ strict: false });

// node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
var camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

// node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
var optimizedAppearDataId = "framerAppearId";
var optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

// node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs
var MotionGlobalConfig = {
  skipAnimations: false,
  useManualTiming: false
};

// node_modules/framer-motion/dist/es/frameloop/render-step.mjs
var Queue = class {
  constructor() {
    this.order = [];
    this.scheduled = /* @__PURE__ */ new Set();
  }
  add(process2) {
    if (!this.scheduled.has(process2)) {
      this.scheduled.add(process2);
      this.order.push(process2);
      return true;
    }
  }
  remove(process2) {
    const index5 = this.order.indexOf(process2);
    if (index5 !== -1) {
      this.order.splice(index5, 1);
      this.scheduled.delete(process2);
    }
  }
  clear() {
    this.order.length = 0;
    this.scheduled.clear();
  }
};
function createRenderStep2(runNextFrame4) {
  let thisFrame = new Queue();
  let nextFrame = new Queue();
  let numToRun = 0;
  let isProcessing4 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing4;
      const queue = addToCurrentFrame ? thisFrame : nextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (queue.add(callback) && addToCurrentFrame && isProcessing4) {
        numToRun = thisFrame.order.length;
      }
      return callback;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (callback) => {
      nextFrame.remove(callback);
      toKeepAlive.delete(callback);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (frameData2) => {
      if (isProcessing4) {
        flushNextFrame = true;
        return;
      }
      isProcessing4 = true;
      [thisFrame, nextFrame] = [nextFrame, thisFrame];
      nextFrame.clear();
      numToRun = thisFrame.order.length;
      if (numToRun) {
        for (let i2 = 0; i2 < numToRun; i2++) {
          const callback = thisFrame.order[i2];
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame4();
          }
          callback(frameData2);
        }
      }
      isProcessing4 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/framer-motion/dist/es/frameloop/batcher.mjs
var stepsOrder2 = [
  "prepare",
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var maxElapsed2 = 40;
function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
  let runNextFrame4 = false;
  let useDefaultElapsed4 = true;
  const state2 = {
    delta: 0,
    timestamp: 0,
    isProcessing: false
  };
  const steps6 = stepsOrder2.reduce((acc, key2) => {
    acc[key2] = createRenderStep2(() => runNextFrame4 = true);
    return acc;
  }, {});
  const processStep4 = (stepId) => {
    steps6[stepId].process(state2);
  };
  const processBatch = () => {
    const timestamp = MotionGlobalConfig.useManualTiming ? state2.timestamp : performance.now();
    runNextFrame4 = false;
    state2.delta = useDefaultElapsed4 ? 1e3 / 60 : Math.max(Math.min(timestamp - state2.timestamp, maxElapsed2), 1);
    state2.timestamp = timestamp;
    state2.isProcessing = true;
    stepsOrder2.forEach(processStep4);
    state2.isProcessing = false;
    if (runNextFrame4 && allowKeepAlive) {
      useDefaultElapsed4 = false;
      scheduleNextBatch(processBatch);
    }
  };
  const wake = () => {
    runNextFrame4 = true;
    useDefaultElapsed4 = true;
    if (!state2.isProcessing) {
      scheduleNextBatch(processBatch);
    }
  };
  const schedule = stepsOrder2.reduce((acc, key2) => {
    const step = steps6[key2];
    acc[key2] = (process2, keepAlive = false, immediate = false) => {
      if (!runNextFrame4)
        wake();
      return step.schedule(process2, keepAlive, immediate);
    };
    return acc;
  }, {});
  const cancel = (process2) => stepsOrder2.forEach((key2) => steps6[key2].cancel(process2));
  return { schedule, cancel, state: state2, steps: steps6 };
}

// node_modules/framer-motion/dist/es/frameloop/microtask.mjs
var { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
function useVisualElement(Component7, visualState, props, createVisualElement2) {
  const { visualElement: parent } = (0, import_react30.useContext)(MotionContext);
  const lazyContext = (0, import_react30.useContext)(LazyContext);
  const presenceContext = (0, import_react30.useContext)(PresenceContext);
  const reducedMotionConfig = (0, import_react30.useContext)(MotionConfigContext).reducedMotion;
  const visualElementRef = (0, import_react30.useRef)();
  createVisualElement2 = createVisualElement2 || lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement2) {
    visualElementRef.current = createVisualElement2(Component7, {
      visualState,
      parent,
      props,
      presenceContext,
      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
      reducedMotionConfig
    });
  }
  const visualElement2 = visualElementRef.current;
  (0, import_react30.useInsertionEffect)(() => {
    visualElement2 && visualElement2.update(props, presenceContext);
  });
  const wantsHandoff = (0, import_react30.useRef)(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));
  useIsomorphicLayoutEffect(() => {
    if (!visualElement2)
      return;
    microtask.postRender(visualElement2.render);
    if (wantsHandoff.current && visualElement2.animationState) {
      visualElement2.animationState.animateChanges();
    }
  });
  (0, import_react30.useEffect)(() => {
    if (!visualElement2)
      return;
    visualElement2.updateFeatures();
    if (!wantsHandoff.current && visualElement2.animationState) {
      visualElement2.animationState.animateChanges();
    }
    if (wantsHandoff.current) {
      wantsHandoff.current = false;
      window.HandoffComplete = true;
    }
  });
  return visualElement2;
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
var import_react31 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
function isRefObject2(ref) {
  return ref && typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
function useMotionRef(visualState, visualElement2, externalRef) {
  return (0, import_react31.useCallback)(
    (instance) => {
      instance && visualState.mount && visualState.mount(instance);
      if (visualElement2) {
        instance ? visualElement2.mount(instance) : visualElement2.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject2(externalRef)) {
          externalRef.current = instance;
        }
      }
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [visualElement2]
  );
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
var import_react32 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
function isVariantLabel(v) {
  return typeof v === "string" || Array.isArray(v);
}

// node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
function isAnimationControls(v) {
  return v !== null && typeof v === "object" && typeof v.start === "function";
}

// node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
var variantPriorityOrder = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
];
var variantProps = ["initial", ...variantPriorityOrder];

// node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
function isControllingVariants(props) {
  return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
}
function isVariantNode(props) {
  return Boolean(isControllingVariants(props) || props.variants);
}

// node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
function getCurrentTreeVariants(props, context2) {
  if (isControllingVariants(props)) {
    const { initial, animate: animate4 } = props;
    return {
      initial: initial === false || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate4) ? animate4 : void 0
    };
  }
  return props.inherit !== false ? context2 : {};
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
function useCreateMotionContext(props) {
  const { initial, animate: animate4 } = getCurrentTreeVariants(props, (0, import_react32.useContext)(MotionContext));
  return (0, import_react32.useMemo)(() => ({ initial, animate: animate4 }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate4)]);
}
function variantLabelsAsDependency(prop2) {
  return Array.isArray(prop2) ? prop2.join(" ") : prop2;
}

// node_modules/framer-motion/dist/es/motion/features/definitions.mjs
var featureProps = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
};
var featureDefinitions = {};
for (const key2 in featureProps) {
  featureDefinitions[key2] = {
    isEnabled: (props) => featureProps[key2].some((name) => !!props[name])
  };
}

// node_modules/framer-motion/dist/es/motion/features/load-features.mjs
function loadFeatures(features) {
  for (const key2 in features) {
    featureDefinitions[key2] = {
      ...featureDefinitions[key2],
      ...features[key2]
    };
  }
}

// node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
var import_react33 = __toESM(require_react(), 1);
var LayoutGroupContext = (0, import_react33.createContext)({});

// node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
var import_react34 = __toESM(require_react(), 1);
var SwitchLayoutGroupContext = (0, import_react34.createContext)({});

// node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
var motionComponentSymbol = Symbol.for("motionComponentSymbol");

// node_modules/framer-motion/dist/es/motion/index.mjs
function createMotionComponent({ preloadedFeatures: preloadedFeatures2, createVisualElement: createVisualElement2, useRender, useVisualState: useVisualState3, Component: Component7 }) {
  preloadedFeatures2 && loadFeatures(preloadedFeatures2);
  function MotionComponent(props, externalRef) {
    let MeasureLayout2;
    const configAndProps = {
      ...(0, import_react35.useContext)(MotionConfigContext),
      ...props,
      layoutId: useLayoutId(props)
    };
    const { isStatic } = configAndProps;
    const context2 = useCreateMotionContext(props);
    const visualState = useVisualState3(props, isStatic);
    if (!isStatic && isBrowser4) {
      context2.visualElement = useVisualElement(Component7, visualState, configAndProps, createVisualElement2);
      const initialLayoutGroupConfig = (0, import_react35.useContext)(SwitchLayoutGroupContext);
      const isStrict = (0, import_react35.useContext)(LazyContext).strict;
      if (context2.visualElement) {
        MeasureLayout2 = context2.visualElement.loadFeatures(
          // Note: Pass the full new combined props to correctly re-render dynamic feature components.
          configAndProps,
          isStrict,
          preloadedFeatures2,
          initialLayoutGroupConfig
        );
      }
    }
    return React6.createElement(
      MotionContext.Provider,
      { value: context2 },
      MeasureLayout2 && context2.visualElement ? React6.createElement(MeasureLayout2, { visualElement: context2.visualElement, ...configAndProps }) : null,
      useRender(Component7, props, useMotionRef(visualState, context2.visualElement, externalRef), visualState, isStatic, context2.visualElement)
    );
  }
  const ForwardRefComponent = (0, import_react35.forwardRef)(MotionComponent);
  ForwardRefComponent[motionComponentSymbol] = Component7;
  return ForwardRefComponent;
}
function useLayoutId({ layoutId }) {
  const layoutGroupId = (0, import_react35.useContext)(LayoutGroupContext).id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}

// node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
function createMotionProxy(createConfig) {
  function custom(Component7, customMotionComponentConfig = {}) {
    return createMotionComponent(createConfig(Component7, customMotionComponentConfig));
  }
  if (typeof Proxy === "undefined") {
    return custom;
  }
  const componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (_target, key2) => {
      if (!componentCache.has(key2)) {
        componentCache.set(key2, custom(key2));
      }
      return componentCache.get(key2);
    }
  });
}

// node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
var lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
function isSVGComponent(Component7) {
  if (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component7 !== "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component7.includes("-")
  ) {
    return false;
  } else if (
    /**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */
    lowercaseSVGElements.indexOf(Component7) > -1 || /**
     * If it contains a capital letter, it's an SVG component
     */
    /[A-Z]/.test(Component7)
  ) {
    return true;
  }
  return false;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
var import_react38 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
var import_react36 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
var scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}

// node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
var transformPropOrder = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
];
var transformProps = new Set(transformPropOrder);

// node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
function isForcedMotionValue(key2, { layout: layout3, layoutId }) {
  return transformProps.has(key2) || key2.startsWith("origin") || (layout3 || layoutId !== void 0) && (!!scaleCorrectors[key2] || key2 === "opacity");
}

// node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
var isMotionValue = (value) => Boolean(value && value.getVelocity);

// node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
var translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
var numTransforms = transformPropOrder.length;
function buildTransform(transform4, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate2) {
  let transformString = "";
  for (let i2 = 0; i2 < numTransforms; i2++) {
    const key2 = transformPropOrder[i2];
    if (transform4[key2] !== void 0) {
      const transformName = translateAlias[key2] || key2;
      transformString += `${transformName}(${transform4[key2]}) `;
    }
  }
  if (enableHardwareAcceleration && !transform4.z) {
    transformString += "translateZ(0)";
  }
  transformString = transformString.trim();
  if (transformTemplate2) {
    transformString = transformTemplate2(transform4, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
var checkStringStartsWith = (token2) => (key2) => typeof key2 === "string" && key2.startsWith(token2);
var isCSSVariableName = checkStringStartsWith("--");
var startsAsVariableToken = checkStringStartsWith("var(--");
var isCSSVariableToken = (key2) => startsAsVariableToken(key2) && singleCssVariableRegex.test(key2);
var singleCssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)$/i;

// node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
var getValueAsType = (value, type) => {
  return type && typeof value === "number" ? type.transform(value) : value;
};

// node_modules/framer-motion/dist/es/utils/clamp.mjs
var clamp = (min3, max3, v) => {
  if (v > max3)
    return max3;
  if (v < min3)
    return min3;
  return v;
};

// node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
var number = {
  test: (v) => typeof v === "number",
  parse: parseFloat,
  transform: (v) => v
};
var alpha = {
  ...number,
  transform: (v) => clamp(0, 1, v)
};
var scale = {
  ...number,
  default: 1
};

// node_modules/framer-motion/dist/es/value/types/utils.mjs
var sanitize = (v) => Math.round(v * 1e5) / 1e5;
var floatRegex = /(-)?([\d]*\.?[\d])+/g;
var colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function isString2(v) {
  return typeof v === "string";
}

// node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
var createUnitType = (unit) => ({
  test: (v) => isString2(v) && v.endsWith(unit) && v.split(" ").length === 1,
  parse: parseFloat,
  transform: (v) => `${v}${unit}`
});
var degrees = createUnitType("deg");
var percent = createUnitType("%");
var px3 = createUnitType("px");
var vh = createUnitType("vh");
var vw = createUnitType("vw");
var progressPercentage = {
  ...percent,
  parse: (v) => percent.parse(v) / 100,
  transform: (v) => percent.transform(v * 100)
};

// node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
var int = {
  ...number,
  transform: Math.round
};

// node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
var numberValueTypes = {
  // Border props
  borderWidth: px3,
  borderTopWidth: px3,
  borderRightWidth: px3,
  borderBottomWidth: px3,
  borderLeftWidth: px3,
  borderRadius: px3,
  radius: px3,
  borderTopLeftRadius: px3,
  borderTopRightRadius: px3,
  borderBottomRightRadius: px3,
  borderBottomLeftRadius: px3,
  // Positioning props
  width: px3,
  maxWidth: px3,
  height: px3,
  maxHeight: px3,
  size: px3,
  top: px3,
  right: px3,
  bottom: px3,
  left: px3,
  // Spacing props
  padding: px3,
  paddingTop: px3,
  paddingRight: px3,
  paddingBottom: px3,
  paddingLeft: px3,
  margin: px3,
  marginTop: px3,
  marginRight: px3,
  marginBottom: px3,
  marginLeft: px3,
  // Transform props
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px3,
  translateX: px3,
  translateY: px3,
  translateZ: px3,
  x: px3,
  y: px3,
  z: px3,
  perspective: px3,
  transformPerspective: px3,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px3,
  // Misc
  zIndex: int,
  // SVG
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int
};

// node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
function buildHTMLStyles(state2, latestValues, options2, transformTemplate2) {
  const { style, vars: vars2, transform: transform4, transformOrigin: transformOrigin2 } = state2;
  let hasTransform2 = false;
  let hasTransformOrigin = false;
  let transformIsNone = true;
  for (const key2 in latestValues) {
    const value = latestValues[key2];
    if (isCSSVariableName(key2)) {
      vars2[key2] = value;
      continue;
    }
    const valueType = numberValueTypes[key2];
    const valueAsType = getValueAsType(value, valueType);
    if (transformProps.has(key2)) {
      hasTransform2 = true;
      transform4[key2] = valueAsType;
      if (!transformIsNone)
        continue;
      if (value !== (valueType.default || 0))
        transformIsNone = false;
    } else if (key2.startsWith("origin")) {
      hasTransformOrigin = true;
      transformOrigin2[key2] = valueAsType;
    } else {
      style[key2] = valueAsType;
    }
  }
  if (!latestValues.transform) {
    if (hasTransform2 || transformTemplate2) {
      style.transform = buildTransform(state2.transform, options2, transformIsNone, transformTemplate2);
    } else if (style.transform) {
      style.transform = "none";
    }
  }
  if (hasTransformOrigin) {
    const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin2;
    style.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
var createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
function copyRawValuesOnly(target, source, props) {
  for (const key2 in source) {
    if (!isMotionValue(source[key2]) && !isForcedMotionValue(key2, props)) {
      target[key2] = source[key2];
    }
  }
}
function useInitialMotionValues({ transformTemplate: transformTemplate2 }, visualState, isStatic) {
  return (0, import_react36.useMemo)(() => {
    const state2 = createHtmlRenderState();
    buildHTMLStyles(state2, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate2);
    return Object.assign({}, state2.vars, state2.style);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  const styleProp = props.style || {};
  const style = {};
  copyRawValuesOnly(style, styleProp, props);
  Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
  return style;
}
function useHTMLProps(props, visualState, isStatic) {
  const htmlProps = {};
  const style = useStyle(props, visualState, isStatic);
  if (props.drag && props.dragListener !== false) {
    htmlProps.draggable = false;
    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
    style.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
  }
  if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
    htmlProps.tabIndex = 0;
  }
  htmlProps.style = style;
  return htmlProps;
}

// node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
var validMotionProps = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "custom",
  "inherit",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "globalTapTarget",
  "ignoreStrict",
  "viewport"
]);
function isValidMotionProp(key2) {
  return key2.startsWith("while") || key2.startsWith("drag") && key2 !== "draggable" || key2.startsWith("layout") || key2.startsWith("onTap") || key2.startsWith("onPan") || key2.startsWith("onLayout") || validMotionProps.has(key2);
}

// node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
var shouldForward = (key2) => !isValidMotionProp(key2);
function loadExternalIsValidProp(isValidProp) {
  if (!isValidProp)
    return;
  shouldForward = (key2) => key2.startsWith("on") ? !isValidMotionProp(key2) : isValidProp(key2);
}
try {
  loadExternalIsValidProp((init_is_prop_valid_browser_esm(), __toCommonJS(is_prop_valid_browser_esm_exports)).default);
} catch (_a9) {
}
function filterProps(props, isDom3, forwardMotionProps) {
  const filteredProps = {};
  for (const key2 in props) {
    if (key2 === "values" && typeof props.values === "object")
      continue;
    if (shouldForward(key2) || forwardMotionProps === true && isValidMotionProp(key2) || !isDom3 && !isValidMotionProp(key2) || // If trying to use native HTML drag events, forward drag listeners
    props["draggable"] && key2.startsWith("onDrag")) {
      filteredProps[key2] = props[key2];
    }
  }
  return filteredProps;
}

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
var import_react37 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
function calcOrigin(origin, offset3, size4) {
  return typeof origin === "string" ? origin : px3.transform(offset3 + size4 * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
  const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return `${pxOriginX} ${pxOriginY}`;
}

// node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
var dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
var camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length3, spacing4 = 1, offset3 = 0, useDashCase = true) {
  attrs.pathLength = 1;
  const keys3 = useDashCase ? dashKeys : camelKeys;
  attrs[keys3.offset] = px3.transform(-offset3);
  const pathLength = px3.transform(length3);
  const pathSpacing = px3.transform(spacing4);
  attrs[keys3.array] = `${pathLength} ${pathSpacing}`;
}

// node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
function buildSVGAttrs(state2, {
  attrX,
  attrY,
  attrScale,
  originX,
  originY,
  pathLength,
  pathSpacing = 1,
  pathOffset = 0,
  // This is object creation, which we try to avoid per-frame.
  ...latest
}, options2, isSVGTag2, transformTemplate2) {
  buildHTMLStyles(state2, latest, options2, transformTemplate2);
  if (isSVGTag2) {
    if (state2.style.viewBox) {
      state2.attrs.viewBox = state2.style.viewBox;
    }
    return;
  }
  state2.attrs = state2.style;
  state2.style = {};
  const { attrs, style, dimensions } = state2;
  if (attrs.transform) {
    if (dimensions)
      style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (attrScale !== void 0)
    attrs.scale = attrScale;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
var createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {}
});

// node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
var isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
function useSVGProps(props, visualState, _isStatic, Component7) {
  const visualProps = (0, import_react37.useMemo)(() => {
    const state2 = createSvgRenderState();
    buildSVGAttrs(state2, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component7), props.transformTemplate);
    return {
      ...state2.attrs,
      style: { ...state2.style }
    };
  }, [visualState]);
  if (props.style) {
    const rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = { ...rawStyles, ...visualProps.style };
  }
  return visualProps;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
function createUseRender(forwardMotionProps = false) {
  const useRender = (Component7, props, ref, { latestValues }, isStatic) => {
    const useVisualProps = isSVGComponent(Component7) ? useSVGProps : useHTMLProps;
    const visualProps = useVisualProps(props, latestValues, isStatic, Component7);
    const filteredProps = filterProps(props, typeof Component7 === "string", forwardMotionProps);
    const elementProps = Component7 !== import_react38.Fragment ? { ...filteredProps, ...visualProps, ref } : {};
    const { children } = props;
    const renderedChildren = (0, import_react38.useMemo)(() => isMotionValue(children) ? children.get() : children, [children]);
    return (0, import_react38.createElement)(Component7, {
      ...elementProps,
      children: renderedChildren
    });
  };
  return useRender;
}

// node_modules/framer-motion/dist/es/render/html/utils/render.mjs
function renderHTML(element, { style, vars: vars2 }, styleProp, projection) {
  Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
  for (const key2 in vars2) {
    element.style.setProperty(key2, vars2[key2]);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
var camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);

// node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, void 0, projection);
  for (const key2 in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key2) ? camelToDash(key2) : key2, renderState.attrs[key2]);
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps(props, prevProps) {
  const { style } = props;
  const newValues = {};
  for (const key2 in style) {
    if (isMotionValue(style[key2]) || prevProps.style && isMotionValue(prevProps.style[key2]) || isForcedMotionValue(key2, props)) {
      newValues[key2] = style[key2];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps2(props, prevProps) {
  const newValues = scrapeMotionValuesFromProps(props, prevProps);
  for (const key2 in props) {
    if (isMotionValue(props[key2]) || isMotionValue(prevProps[key2])) {
      const targetKey = transformPropOrder.indexOf(key2) !== -1 ? "attr" + key2.charAt(0).toUpperCase() + key2.substring(1) : key2;
      newValues[targetKey] = props[key2];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
var import_react40 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
function resolveVariantFromProps(props, definition, custom, currentValues2 = {}, currentVelocity = {}) {
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props.custom, currentValues2, currentVelocity);
  }
  if (typeof definition === "string") {
    definition = props.variants && props.variants[definition];
  }
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props.custom, currentValues2, currentVelocity);
  }
  return definition;
}

// node_modules/framer-motion/dist/es/utils/use-constant.mjs
var import_react39 = __toESM(require_react(), 1);
function useConstant(init2) {
  const ref = (0, import_react39.useRef)(null);
  if (ref.current === null) {
    ref.current = init2();
  }
  return ref.current;
}

// node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
var isKeyframesTarget = (v) => {
  return Array.isArray(v);
};

// node_modules/framer-motion/dist/es/utils/resolve-value.mjs
var isCustomValue = (v) => {
  return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
var resolveFinalValueInKeyframes = (v) => {
  return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
};

// node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
function resolveMotionValue(value) {
  const unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps5, createRenderState, onMount }, props, context2, presenceContext) {
  const state2 = {
    latestValues: makeLatestValues(props, context2, presenceContext, scrapeMotionValuesFromProps5),
    renderState: createRenderState()
  };
  if (onMount) {
    state2.mount = (instance) => onMount(props, instance, state2);
  }
  return state2;
}
var makeUseVisualState = (config2) => (props, isStatic) => {
  const context2 = (0, import_react40.useContext)(MotionContext);
  const presenceContext = (0, import_react40.useContext)(PresenceContext);
  const make = () => makeState(config2, props, context2, presenceContext);
  return isStatic ? make() : useConstant(make);
};
function makeLatestValues(props, context2, presenceContext, scrapeMotionValues) {
  const values2 = {};
  const motionValues = scrapeMotionValues(props, {});
  for (const key2 in motionValues) {
    values2[key2] = resolveMotionValue(motionValues[key2]);
  }
  let { initial, animate: animate4 } = props;
  const isControllingVariants$1 = isControllingVariants(props);
  const isVariantNode$1 = isVariantNode(props);
  if (context2 && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
    if (initial === void 0)
      initial = context2.initial;
    if (animate4 === void 0)
      animate4 = context2.animate;
  }
  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
  const variantToSet = isInitialAnimationBlocked ? animate4 : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    const list2 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list2.forEach((definition) => {
      const resolved = resolveVariantFromProps(props, definition);
      if (!resolved)
        return;
      const { transitionEnd, transition: transition3, ...target } = resolved;
      for (const key2 in target) {
        let valueTarget = target[key2];
        if (Array.isArray(valueTarget)) {
          const index5 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
          valueTarget = valueTarget[index5];
        }
        if (valueTarget !== null) {
          values2[key2] = valueTarget;
        }
      }
      for (const key2 in transitionEnd)
        values2[key2] = transitionEnd[key2];
    });
  }
  return values2;
}

// node_modules/framer-motion/dist/es/utils/noop.mjs
var noop3 = (any3) => any3;

// node_modules/framer-motion/dist/es/frameloop/frame.mjs
var { schedule: frame2, cancel: cancelFrame, state: frameData, steps: steps2 } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop3, true);

// node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
    onMount: (props, instance, { renderState, latestValues }) => {
      frame2.read(() => {
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
      });
      frame2.render(() => {
        buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);
        renderSVG(instance, renderState);
      });
    }
  })
};

// node_modules/framer-motion/dist/es/render/html/config-motion.mjs
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState
  })
};

// node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
function createDomMotionConfig(Component7, { forwardMotionProps = false }, preloadedFeatures2, createVisualElement2) {
  const baseConfig = isSVGComponent(Component7) ? svgMotionConfig : htmlMotionConfig;
  return {
    ...baseConfig,
    preloadedFeatures: preloadedFeatures2,
    useRender: createUseRender(forwardMotionProps),
    createVisualElement: createVisualElement2,
    Component: Component7
  };
}

// node_modules/framer-motion/dist/es/events/add-dom-event.mjs
function addDomEvent2(target, eventName, handler, options2 = { passive: true }) {
  target.addEventListener(eventName, handler, options2);
  return () => target.removeEventListener(eventName, handler);
}

// node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs
var isPrimaryPointer = (event) => {
  if (event.pointerType === "mouse") {
    return typeof event.button !== "number" || event.button <= 0;
  } else {
    return event.isPrimary !== false;
  }
};

// node_modules/framer-motion/dist/es/events/event-info.mjs
function extractEventInfo2(event, pointType = "page") {
  return {
    point: {
      x: event[pointType + "X"],
      y: event[pointType + "Y"]
    }
  };
}
var addPointerInfo = (handler) => {
  return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo2(event));
};

// node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
function addPointerEvent2(target, eventName, handler, options2) {
  return addDomEvent2(target, eventName, addPointerInfo(handler), options2);
}

// node_modules/framer-motion/dist/es/utils/pipe.mjs
var combineFunctions = (a2, b2) => (v) => b2(a2(v));
var pipe4 = (...transformers) => transformers.reduce(combineFunctions);

// node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
function createLock(name) {
  let lock = null;
  return () => {
    const openLock = () => {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
var globalHorizontalLock = createLock("dragHorizontal");
var globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag3) {
  let lock = false;
  if (drag3 === "y") {
    lock = globalVerticalLock();
  } else if (drag3 === "x") {
    lock = globalHorizontalLock();
  } else {
    const openHorizontal = globalHorizontalLock();
    const openVertical = globalVerticalLock();
    if (openHorizontal && openVertical) {
      lock = () => {
        openHorizontal();
        openVertical();
      };
    } else {
      if (openHorizontal)
        openHorizontal();
      if (openVertical)
        openVertical();
    }
  }
  return lock;
}
function isDragActive() {
  const openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}

// node_modules/framer-motion/dist/es/motion/features/Feature.mjs
var Feature = class {
  constructor(node3) {
    this.isMounted = false;
    this.node = node3;
  }
  update() {
  }
};

// node_modules/framer-motion/dist/es/gestures/hover.mjs
function addHoverEvent(node3, isActive) {
  const eventName = "pointer" + (isActive ? "enter" : "leave");
  const callbackName = "onHover" + (isActive ? "Start" : "End");
  const handleEvent = (event, info) => {
    if (event.pointerType === "touch" || isDragActive())
      return;
    const props = node3.getProps();
    if (node3.animationState && props.whileHover) {
      node3.animationState.setActive("whileHover", isActive);
    }
    if (props[callbackName]) {
      frame2.update(() => props[callbackName](event, info));
    }
  };
  return addPointerEvent2(node3.current, eventName, handleEvent, {
    passive: !node3.getProps()[callbackName]
  });
}
var HoverGesture = class extends Feature {
  mount() {
    this.unmount = pipe4(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/gestures/focus.mjs
var FocusGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.isActive = false;
  }
  onFocus() {
    let isFocusVisible2 = false;
    try {
      isFocusVisible2 = this.node.current.matches(":focus-visible");
    } catch (e) {
      isFocusVisible2 = true;
    }
    if (!isFocusVisible2 || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", true);
    this.isActive = true;
  }
  onBlur() {
    if (!this.isActive || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", false);
    this.isActive = false;
  }
  mount() {
    this.unmount = pipe4(addDomEvent2(this.node.current, "focus", () => this.onFocus()), addDomEvent2(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
var isNodeOrChild = (parent, child) => {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};

// node_modules/framer-motion/dist/es/gestures/press.mjs
function fireSyntheticPointerEvent(name, handler) {
  if (!handler)
    return;
  const syntheticPointerEvent = new PointerEvent("pointer" + name);
  handler(syntheticPointerEvent, extractEventInfo2(syntheticPointerEvent));
}
var PressGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.removeStartListeners = noop3;
    this.removeEndListeners = noop3;
    this.removeAccessibleListeners = noop3;
    this.startPointerPress = (startEvent, startInfo) => {
      if (this.isPressing)
        return;
      this.removeEndListeners();
      const props = this.node.getProps();
      const endPointerPress = (endEvent, endInfo) => {
        if (!this.checkPressEnd())
          return;
        const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();
        frame2.update(() => {
          !globalTapTarget && !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
        });
      };
      const removePointerUpListener = addPointerEvent2(window, "pointerup", endPointerPress, { passive: !(props.onTap || props["onPointerUp"]) });
      const removePointerCancelListener = addPointerEvent2(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props["onPointerCancel"]) });
      this.removeEndListeners = pipe4(removePointerUpListener, removePointerCancelListener);
      this.startPress(startEvent, startInfo);
    };
    this.startAccessiblePress = () => {
      const handleKeydown = (keydownEvent) => {
        if (keydownEvent.key !== "Enter" || this.isPressing)
          return;
        const handleKeyup = (keyupEvent) => {
          if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
            return;
          fireSyntheticPointerEvent("up", (event, info) => {
            const { onTap } = this.node.getProps();
            if (onTap) {
              frame2.update(() => onTap(event, info));
            }
          });
        };
        this.removeEndListeners();
        this.removeEndListeners = addDomEvent2(this.node.current, "keyup", handleKeyup);
        fireSyntheticPointerEvent("down", (event, info) => {
          this.startPress(event, info);
        });
      };
      const removeKeydownListener = addDomEvent2(this.node.current, "keydown", handleKeydown);
      const handleBlur = () => {
        if (!this.isPressing)
          return;
        fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
      };
      const removeBlurListener = addDomEvent2(this.node.current, "blur", handleBlur);
      this.removeAccessibleListeners = pipe4(removeKeydownListener, removeBlurListener);
    };
  }
  startPress(event, info) {
    this.isPressing = true;
    const { onTapStart, whileTap } = this.node.getProps();
    if (whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", true);
    }
    if (onTapStart) {
      frame2.update(() => onTapStart(event, info));
    }
  }
  checkPressEnd() {
    this.removeEndListeners();
    this.isPressing = false;
    const props = this.node.getProps();
    if (props.whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", false);
    }
    return !isDragActive();
  }
  cancelPress(event, info) {
    if (!this.checkPressEnd())
      return;
    const { onTapCancel } = this.node.getProps();
    if (onTapCancel) {
      frame2.update(() => onTapCancel(event, info));
    }
  }
  mount() {
    const props = this.node.getProps();
    const removePointerListener = addPointerEvent2(props.globalTapTarget ? window : this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props["onPointerStart"]) });
    const removeFocusListener = addDomEvent2(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = pipe4(removePointerListener, removeFocusListener);
  }
  unmount() {
    this.removeStartListeners();
    this.removeEndListeners();
    this.removeAccessibleListeners();
  }
};

// node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
var observerCallbacks = /* @__PURE__ */ new WeakMap();
var observers = /* @__PURE__ */ new WeakMap();
var fireObserverCallback = (entry) => {
  const callback = observerCallbacks.get(entry.target);
  callback && callback(entry);
};
var fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options2 }) {
  const lookupRoot = root || document;
  if (!observers.has(lookupRoot)) {
    observers.set(lookupRoot, {});
  }
  const rootObservers = observers.get(lookupRoot);
  const key2 = JSON.stringify(options2);
  if (!rootObservers[key2]) {
    rootObservers[key2] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options2 });
  }
  return rootObservers[key2];
}
function observeIntersection(element, options2, callback) {
  const rootInteresectionObserver = initIntersectionObserver(options2);
  observerCallbacks.set(element, callback);
  rootInteresectionObserver.observe(element);
  return () => {
    observerCallbacks.delete(element);
    rootInteresectionObserver.unobserve(element);
  };
}

// node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
var thresholdNames = {
  some: 0,
  all: 1
};
var InViewFeature = class extends Feature {
  constructor() {
    super(...arguments);
    this.hasEnteredView = false;
    this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport: viewport2 = {} } = this.node.getProps();
    const { root, margin: rootMargin, amount = "some", once: once2 } = viewport2;
    const options2 = {
      root: root ? root.current : void 0,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount]
    };
    const onIntersectionUpdate = (entry) => {
      const { isIntersecting } = entry;
      if (this.isInView === isIntersecting)
        return;
      this.isInView = isIntersecting;
      if (once2 && !isIntersecting && this.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        this.hasEnteredView = true;
      }
      if (this.node.animationState) {
        this.node.animationState.setActive("whileInView", isIntersecting);
      }
      const { onViewportEnter, onViewportLeave } = this.node.getProps();
      const callback = isIntersecting ? onViewportEnter : onViewportLeave;
      callback && callback(entry);
    };
    return observeIntersection(this.node.current, options2, onIntersectionUpdate);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver === "undefined")
      return;
    const { props, prevProps } = this.node;
    const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
    if (hasOptionsChanged) {
      this.startObserver();
    }
  }
  unmount() {
  }
};
function hasViewportOptionChanged({ viewport: viewport2 = {} }, { viewport: prevViewport = {} } = {}) {
  return (name) => viewport2[name] !== prevViewport[name];
}

// node_modules/framer-motion/dist/es/motion/features/gestures.mjs
var gestureAnimations = {
  inView: {
    Feature: InViewFeature
  },
  tap: {
    Feature: PressGesture
  },
  focus: {
    Feature: FocusGesture
  },
  hover: {
    Feature: HoverGesture
  }
};

// node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
function shallowCompare(next2, prev2) {
  if (!Array.isArray(prev2))
    return false;
  const prevLength = prev2.length;
  if (prevLength !== next2.length)
    return false;
  for (let i2 = 0; i2 < prevLength; i2++) {
    if (prev2[i2] !== next2[i2])
      return false;
  }
  return true;
}

// node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
function getCurrent(visualElement2) {
  const current = {};
  visualElement2.values.forEach((value, key2) => current[key2] = value.get());
  return current;
}
function getVelocity(visualElement2) {
  const velocity = {};
  visualElement2.values.forEach((value, key2) => velocity[key2] = value.getVelocity());
  return velocity;
}
function resolveVariant(visualElement2, definition, custom) {
  const props = visualElement2.getProps();
  return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, getCurrent(visualElement2), getVelocity(visualElement2));
}

// node_modules/framer-motion/dist/es/utils/errors.mjs
var warning = noop3;
var invariant2 = noop3;
if (true) {
  warning = (check, message) => {
    if (!check && typeof console !== "undefined") {
      console.warn(message);
    }
  };
  invariant2 = (check, message) => {
    if (!check) {
      throw new Error(message);
    }
  };
}

// node_modules/framer-motion/dist/es/utils/time-conversion.mjs
var secondsToMilliseconds = (seconds) => seconds * 1e3;
var millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;

// node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
var instantAnimationState = {
  current: false
};

// node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs
var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

// node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
function isWaapiSupportedEasing(easing) {
  return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
}
var cubicBezierAsString = ([a2, b2, c2, d]) => `cubic-bezier(${a2}, ${b2}, ${c2}, ${d})`;
var supportedWaapiEasing = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
  circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
  backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
  backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
};
function mapEasingToNativeEasing(easing) {
  if (!easing)
    return void 0;
  return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
function animateStyle(element, valueName, keyframes6, { delay: delay2 = 0, duration, repeat: repeat2 = 0, repeatType = "loop", ease: ease2, times: times2 } = {}) {
  const keyframeOptions = { [valueName]: keyframes6 };
  if (times2)
    keyframeOptions.offset = times2;
  const easing = mapEasingToNativeEasing(ease2);
  if (Array.isArray(easing))
    keyframeOptions.easing = easing;
  return element.animate(keyframeOptions, {
    delay: delay2,
    duration,
    easing: !Array.isArray(easing) ? easing : "linear",
    fill: "both",
    iterations: repeat2 + 1,
    direction: repeatType === "reverse" ? "alternate" : "normal"
  });
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
function getFinalKeyframe(keyframes6, { repeat: repeat2, repeatType = "loop" }) {
  const index5 = repeat2 && repeatType !== "loop" && repeat2 % 2 === 1 ? 0 : keyframes6.length - 1;
  return keyframes6[index5];
}

// node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
var calcBezier = (t3, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t3 + (3 * a2 - 6 * a1)) * t3 + 3 * a1) * t3;
var subdivisionPrecision = 1e-7;
var subdivisionMaxIterations = 12;
function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
  let currentX;
  let currentT;
  let i2 = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - x;
    if (currentX > 0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i2 < subdivisionMaxIterations);
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return noop3;
  const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
  return (t3) => t3 === 0 || t3 === 1 ? t3 : calcBezier(getTForX(t3), mY1, mY2);
}

// node_modules/framer-motion/dist/es/easing/ease.mjs
var easeIn = cubicBezier(0.42, 0, 1, 1);
var easeOut = cubicBezier(0, 0, 0.58, 1);
var easeInOut = cubicBezier(0.42, 0, 0.58, 1);

// node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
var isEasingArray = (ease2) => {
  return Array.isArray(ease2) && typeof ease2[0] !== "number";
};

// node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

// node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
var reverseEasing = (easing) => (p) => 1 - easing(1 - p);

// node_modules/framer-motion/dist/es/easing/circ.mjs
var circIn = (p) => 1 - Math.sin(Math.acos(p));
var circOut = reverseEasing(circIn);
var circInOut = mirrorEasing(circIn);

// node_modules/framer-motion/dist/es/easing/back.mjs
var backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
var backIn = reverseEasing(backOut);
var backInOut = mirrorEasing(backIn);

// node_modules/framer-motion/dist/es/easing/anticipate.mjs
var anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

// node_modules/framer-motion/dist/es/easing/utils/map.mjs
var easingLookup = {
  linear: noop3,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate
};
var easingDefinitionToFunction = (definition) => {
  if (Array.isArray(definition)) {
    invariant2(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
    const [x1, y1, x2, y2] = definition;
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    invariant2(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`);
    return easingLookup[definition];
  }
  return definition;
};

// node_modules/framer-motion/dist/es/utils/progress.mjs
var progress = (from2, to, value) => {
  const toFromDifference = to - from2;
  return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
};

// node_modules/framer-motion/dist/es/utils/mix/number.mjs
var mixNumber = (from2, to, progress4) => {
  return from2 + (to - from2) * progress4;
};

// node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
function hueToRgb(p, q, t3) {
  if (t3 < 0)
    t3 += 1;
  if (t3 > 1)
    t3 -= 1;
  if (t3 < 1 / 6)
    return p + (q - p) * 6 * t3;
  if (t3 < 1 / 2)
    return q;
  if (t3 < 2 / 3)
    return p + (q - p) * (2 / 3 - t3) * 6;
  return p;
}
function hslaToRgba({ hue, saturation, lightness, alpha: alpha3 }) {
  hue /= 360;
  saturation /= 100;
  lightness /= 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (!saturation) {
    red = green = blue = lightness;
  } else {
    const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    const p = 2 * lightness - q;
    red = hueToRgb(p, q, hue + 1 / 3);
    green = hueToRgb(p, q, hue);
    blue = hueToRgb(p, q, hue - 1 / 3);
  }
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha: alpha3
  };
}

// node_modules/framer-motion/dist/es/value/types/color/utils.mjs
var isColorString = (type, testProp) => (v) => {
  return Boolean(isString2(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
};
var splitColor = (aName, bName, cName) => (v) => {
  if (!isString2(v))
    return v;
  const [a2, b2, c2, alpha3] = v.match(floatRegex);
  return {
    [aName]: parseFloat(a2),
    [bName]: parseFloat(b2),
    [cName]: parseFloat(c2),
    alpha: alpha3 !== void 0 ? parseFloat(alpha3) : 1
  };
};

// node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
var clampRgbUnit = (v) => clamp(0, 255, v);
var rgbUnit = {
  ...number,
  transform: (v) => Math.round(clampRgbUnit(v))
};
var rgba2 = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
};

// node_modules/framer-motion/dist/es/value/types/color/hex.mjs
function parseHex(v) {
  let r3 = "";
  let g = "";
  let b2 = "";
  let a2 = "";
  if (v.length > 5) {
    r3 = v.substring(1, 3);
    g = v.substring(3, 5);
    b2 = v.substring(5, 7);
    a2 = v.substring(7, 9);
  } else {
    r3 = v.substring(1, 2);
    g = v.substring(2, 3);
    b2 = v.substring(3, 4);
    a2 = v.substring(4, 5);
    r3 += r3;
    g += g;
    b2 += b2;
    a2 += a2;
  }
  return {
    red: parseInt(r3, 16),
    green: parseInt(g, 16),
    blue: parseInt(b2, 16),
    alpha: a2 ? parseInt(a2, 16) / 255 : 1
  };
}
var hex = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba2.transform
};

// node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
var hsla2 = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
    return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
  }
};

// node_modules/framer-motion/dist/es/utils/mix/color.mjs
var mixLinearColor = (from2, to, v) => {
  const fromExpo = from2 * from2;
  const expo = v * (to * to - fromExpo) + fromExpo;
  return expo < 0 ? 0 : Math.sqrt(expo);
};
var colorTypes = [hex, rgba2, hsla2];
var getColorType = (v) => colorTypes.find((type) => type.test(v));
function asRGBA(color5) {
  const type = getColorType(color5);
  invariant2(Boolean(type), `'${color5}' is not an animatable color. Use the equivalent color code instead.`);
  let model = type.parse(color5);
  if (type === hsla2) {
    model = hslaToRgba(model);
  }
  return model;
}
var mixColor = (from2, to) => {
  const fromRGBA = asRGBA(from2);
  const toRGBA = asRGBA(to);
  const blended = { ...fromRGBA };
  return (v) => {
    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
    blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);
    return rgba2.transform(blended);
  };
};

// node_modules/framer-motion/dist/es/value/types/color/index.mjs
var color3 = {
  test: (v) => rgba2.test(v) || hex.test(v) || hsla2.test(v),
  parse: (v) => {
    if (rgba2.test(v)) {
      return rgba2.parse(v);
    } else if (hsla2.test(v)) {
      return hsla2.parse(v);
    } else {
      return hex.parse(v);
    }
  },
  transform: (v) => {
    return isString2(v) ? v : v.hasOwnProperty("red") ? rgba2.transform(v) : hsla2.transform(v);
  }
};

// node_modules/framer-motion/dist/es/value/types/complex/index.mjs
function test(v) {
  var _a9, _b5;
  return isNaN(v) && isString2(v) && (((_a9 = v.match(floatRegex)) === null || _a9 === void 0 ? void 0 : _a9.length) || 0) + (((_b5 = v.match(colorRegex)) === null || _b5 === void 0 ? void 0 : _b5.length) || 0) > 0;
}
var NUMBER_TOKEN = "number";
var COLOR_TOKEN = "color";
var VAR_TOKEN = "var";
var VAR_FUNCTION_TOKEN = "var(";
var SPLIT_TOKEN = "${}";
var complexRegex = /(var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\))|(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))|((-)?([\d]*\.?[\d])+)/gi;
function analyseComplexValue(value) {
  const originalValue = value.toString();
  const matchedValues = originalValue.match(complexRegex) || [];
  const values2 = [];
  const indexes = {
    color: [],
    number: [],
    var: []
  };
  const types3 = [];
  for (let i2 = 0; i2 < matchedValues.length; i2++) {
    const parsedValue = matchedValues[i2];
    if (color3.test(parsedValue)) {
      indexes.color.push(i2);
      types3.push(COLOR_TOKEN);
      values2.push(color3.parse(parsedValue));
    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {
      indexes.var.push(i2);
      types3.push(VAR_TOKEN);
      values2.push(parsedValue);
    } else {
      indexes.number.push(i2);
      types3.push(NUMBER_TOKEN);
      values2.push(parseFloat(parsedValue));
    }
  }
  const tokenised = originalValue.replace(complexRegex, SPLIT_TOKEN);
  const split6 = tokenised.split(SPLIT_TOKEN);
  return { values: values2, split: split6, indexes, types: types3 };
}
function parseComplexValue(v) {
  return analyseComplexValue(v).values;
}
function createTransformer(source) {
  const { split: split6, types: types3 } = analyseComplexValue(source);
  const numSections = split6.length;
  return (v) => {
    let output = "";
    for (let i2 = 0; i2 < numSections; i2++) {
      output += split6[i2];
      if (v[i2] !== void 0) {
        const type = types3[i2];
        if (type === NUMBER_TOKEN) {
          output += sanitize(v[i2]);
        } else if (type === COLOR_TOKEN) {
          output += color3.transform(v[i2]);
        } else {
          output += v[i2];
        }
      }
    }
    return output;
  };
}
var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
function getAnimatableNone(v) {
  const parsed = parseComplexValue(v);
  const transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}
var complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone
};

// node_modules/framer-motion/dist/es/utils/mix/complex.mjs
function mixImmediate(a2, b2) {
  return (p) => p > 0 ? b2 : a2;
}
function mixNumber2(a2, b2) {
  return (p) => mixNumber(a2, b2, p);
}
function getMixer(a2) {
  if (typeof a2 === "number") {
    return mixNumber2;
  } else if (typeof a2 === "string") {
    return isCSSVariableToken(a2) ? mixImmediate : color3.test(a2) ? mixColor : mixComplex;
  } else if (Array.isArray(a2)) {
    return mixArray;
  } else if (typeof a2 === "object") {
    return color3.test(a2) ? mixColor : mixObject;
  }
  return mixImmediate;
}
function mixArray(a2, b2) {
  const output = [...a2];
  const numValues = output.length;
  const blendValue = a2.map((v, i2) => getMixer(v)(v, b2[i2]));
  return (p) => {
    for (let i2 = 0; i2 < numValues; i2++) {
      output[i2] = blendValue[i2](p);
    }
    return output;
  };
}
function mixObject(a2, b2) {
  const output = { ...a2, ...b2 };
  const blendValue = {};
  for (const key2 in output) {
    if (a2[key2] !== void 0 && b2[key2] !== void 0) {
      blendValue[key2] = getMixer(a2[key2])(a2[key2], b2[key2]);
    }
  }
  return (v) => {
    for (const key2 in blendValue) {
      output[key2] = blendValue[key2](v);
    }
    return output;
  };
}
function matchOrder(origin, target) {
  var _a9;
  const orderedOrigin = [];
  const pointers = { color: 0, var: 0, number: 0 };
  for (let i2 = 0; i2 < target.values.length; i2++) {
    const type = target.types[i2];
    const originIndex = origin.indexes[type][pointers[type]];
    const originValue = (_a9 = origin.values[originIndex]) !== null && _a9 !== void 0 ? _a9 : 0;
    orderedOrigin[i2] = originValue;
    pointers[type]++;
  }
  return orderedOrigin;
}
var mixComplex = (origin, target) => {
  const template = complex.createTransformer(target);
  const originStats = analyseComplexValue(origin);
  const targetStats = analyseComplexValue(target);
  const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length && originStats.indexes.color.length === targetStats.indexes.color.length && originStats.indexes.number.length >= targetStats.indexes.number.length;
  if (canInterpolate) {
    return pipe4(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);
  } else {
    warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
    return mixImmediate(origin, target);
  }
};

// node_modules/framer-motion/dist/es/utils/mix/index.mjs
function mix2(from2, to, p) {
  if (typeof from2 === "number" && typeof to === "number" && typeof p === "number") {
    return mixNumber(from2, to, p);
  }
  const mixer = getMixer(from2);
  return mixer(from2, to);
}

// node_modules/framer-motion/dist/es/utils/interpolate.mjs
function createMixers(output, ease2, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || mix2;
  const numMixers = output.length - 1;
  for (let i2 = 0; i2 < numMixers; i2++) {
    let mixer = mixerFactory(output[i2], output[i2 + 1]);
    if (ease2) {
      const easingFunction = Array.isArray(ease2) ? ease2[i2] || noop3 : ease2;
      mixer = pipe4(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function interpolate(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
  const inputLength = input.length;
  invariant2(inputLength === output.length, "Both input and output ranges must be the same length");
  if (inputLength === 1)
    return () => output[0];
  if (input[0] > input[inputLength - 1]) {
    input = [...input].reverse();
    output = [...output].reverse();
  }
  const mixers = createMixers(output, ease2, mixer);
  const numMixers = mixers.length;
  const interpolator = (v) => {
    let i2 = 0;
    if (numMixers > 1) {
      for (; i2 < input.length - 2; i2++) {
        if (v < input[i2 + 1])
          break;
      }
    }
    const progressInRange = progress(input[i2], input[i2 + 1], v);
    return mixers[i2](progressInRange);
  };
  return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;
}

// node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
function fillOffset(offset3, remaining) {
  const min3 = offset3[offset3.length - 1];
  for (let i2 = 1; i2 <= remaining; i2++) {
    const offsetProgress = progress(0, remaining, i2);
    offset3.push(mixNumber(min3, 1, offsetProgress));
  }
}

// node_modules/framer-motion/dist/es/utils/offsets/default.mjs
function defaultOffset(arr) {
  const offset3 = [0];
  fillOffset(offset3, arr.length - 1);
  return offset3;
}

// node_modules/framer-motion/dist/es/utils/offsets/time.mjs
function convertOffsetToTimes(offset3, duration) {
  return offset3.map((o2) => o2 * duration);
}

// node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
function defaultEasing(values2, easing) {
  return values2.map(() => easing || easeInOut).splice(0, values2.length - 1);
}
function keyframes3({ duration = 300, keyframes: keyframeValues, times: times2, ease: ease2 = "easeInOut" }) {
  const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
  const state2 = {
    done: false,
    value: keyframeValues[0]
  };
  const absoluteTimes = convertOffsetToTimes(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times2 && times2.length === keyframeValues.length ? times2 : defaultOffset(keyframeValues),
    duration
  );
  const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
  });
  return {
    calculatedDuration: duration,
    next: (t3) => {
      state2.value = mapTimeToKeyframe(t3);
      state2.done = t3 >= duration;
      return state2;
    }
  };
}

// node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
var velocitySampleDuration = 5;
function calcGeneratorVelocity(resolveValue, t3, current) {
  const prevT = Math.max(t3 - velocitySampleDuration, 0);
  return velocityPerSecond(current - resolveValue(prevT), t3 - prevT);
}

// node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
var safeMin = 1e-3;
var minDuration = 0.01;
var maxDuration = 10;
var minDamping = 0.05;
var maxDamping = 1;
function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
  let envelope;
  let derivative;
  warning(duration <= secondsToMilliseconds(maxDuration), "Spring duration must be 10 seconds or less");
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp(minDamping, maxDamping, dampingRatio);
  duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta2 = exponentialDecay * duration;
      const a2 = exponentialDecay - velocity;
      const b2 = calcAngularFreq(undampedFreq2, dampingRatio);
      const c2 = Math.exp(-delta2);
      return safeMin - a2 / b2 * c2;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta2 = exponentialDecay * duration;
      const d = delta2 * velocity + velocity;
      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      const f = Math.exp(-delta2);
      const g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a2 = Math.exp(-undampedFreq2 * duration);
      const b2 = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin + a2 * b2;
    };
    derivative = (undampedFreq2) => {
      const a2 = Math.exp(-undampedFreq2 * duration);
      const b2 = (velocity - undampedFreq2) * (duration * duration);
      return a2 * b2;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = secondsToMilliseconds(duration);
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i2 = 1; i2 < rootIterations; i2++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
var durationKeys = ["duration", "bounce"];
var physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options2, keys3) {
  return keys3.some((key2) => options2[key2] !== void 0);
}
function getSpringOptions(options2) {
  let springOptions = {
    velocity: 0,
    stiffness: 100,
    damping: 10,
    mass: 1,
    isResolvedFromDuration: false,
    ...options2
  };
  if (!isSpringType(options2, physicsKeys) && isSpringType(options2, durationKeys)) {
    const derived = findSpring(options2);
    springOptions = {
      ...springOptions,
      ...derived,
      mass: 1
    };
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring({ keyframes: keyframes6, restDelta, restSpeed, ...options2 }) {
  const origin = keyframes6[0];
  const target = keyframes6[keyframes6.length - 1];
  const state2 = { done: false, value: origin };
  const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration } = getSpringOptions({
    ...options2,
    velocity: -millisecondsToSeconds(options2.velocity || 0)
  });
  const initialVelocity = velocity || 0;
  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
  const initialDelta = target - origin;
  const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
  const isGranularScale = Math.abs(initialDelta) < 5;
  restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
  restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
    resolveSpring = (t3) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t3);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t3) + initialDelta * Math.cos(angularFreq * t3));
    };
  } else if (dampingRatio === 1) {
    resolveSpring = (t3) => target - Math.exp(-undampedAngularFreq * t3) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t3);
  } else {
    const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
    resolveSpring = (t3) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t3);
      const freqForT = Math.min(dampedAngularFreq * t3, 300);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
    };
  }
  return {
    calculatedDuration: isResolvedFromDuration ? duration || null : null,
    next: (t3) => {
      const current = resolveSpring(t3);
      if (!isResolvedFromDuration) {
        let currentVelocity = initialVelocity;
        if (t3 !== 0) {
          if (dampingRatio < 1) {
            currentVelocity = calcGeneratorVelocity(resolveSpring, t3, current);
          } else {
            currentVelocity = 0;
          }
        }
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
        state2.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state2.done = t3 >= duration;
      }
      state2.value = state2.done ? target : current;
      return state2;
    }
  };
}

// node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
function inertia({ keyframes: keyframes6, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min: min3, max: max3, restDelta = 0.5, restSpeed }) {
  const origin = keyframes6[0];
  const state2 = {
    done: false,
    value: origin
  };
  const isOutOfBounds = (v) => min3 !== void 0 && v < min3 || max3 !== void 0 && v > max3;
  const nearestBoundary = (v) => {
    if (min3 === void 0)
      return max3;
    if (max3 === void 0)
      return min3;
    return Math.abs(min3 - v) < Math.abs(max3 - v) ? min3 : max3;
  };
  let amplitude = power * velocity;
  const ideal = origin + amplitude;
  const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - origin;
  const calcDelta = (t3) => -amplitude * Math.exp(-t3 / timeConstant);
  const calcLatest = (t3) => target + calcDelta(t3);
  const applyFriction = (t3) => {
    const delta2 = calcDelta(t3);
    const latest = calcLatest(t3);
    state2.done = Math.abs(delta2) <= restDelta;
    state2.value = state2.done ? target : latest;
  };
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t3) => {
    if (!isOutOfBounds(state2.value))
      return;
    timeReachedBoundary = t3;
    spring$1 = spring({
      keyframes: [state2.value, nearestBoundary(state2.value)],
      velocity: calcGeneratorVelocity(calcLatest, t3, state2.value),
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed
    });
  };
  checkCatchBoundary(0);
  return {
    calculatedDuration: null,
    next: (t3) => {
      let hasUpdatedFrame = false;
      if (!spring$1 && timeReachedBoundary === void 0) {
        hasUpdatedFrame = true;
        applyFriction(t3);
        checkCatchBoundary(t3);
      }
      if (timeReachedBoundary !== void 0 && t3 > timeReachedBoundary) {
        return spring$1.next(t3 - timeReachedBoundary);
      } else {
        !hasUpdatedFrame && applyFriction(t3);
        return state2;
      }
    }
  };
}

// node_modules/framer-motion/dist/es/frameloop/sync-time.mjs
var now;
function clearTime() {
  now = void 0;
}
var time = {
  now: () => {
    if (now === void 0) {
      time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now());
    }
    return now;
  },
  set: (newTime) => {
    now = newTime;
    queueMicrotask(clearTime);
  }
};

// node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs
var frameloopDriver = (update) => {
  const passTimestamp = ({ timestamp }) => update(timestamp);
  return {
    start: () => frame2.update(passTimestamp, true),
    stop: () => cancelFrame(passTimestamp),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => frameData.isProcessing ? frameData.timestamp : time.now()
  };
};

// node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs
var maxGeneratorDuration = 2e4;
function calcGeneratorDuration(generator) {
  let duration = 0;
  const timeStep = 50;
  let state2 = generator.next(duration);
  while (!state2.done && duration < maxGeneratorDuration) {
    duration += timeStep;
    state2 = generator.next(duration);
  }
  return duration >= maxGeneratorDuration ? Infinity : duration;
}

// node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
var types = {
  decay: inertia,
  inertia,
  tween: keyframes3,
  keyframes: keyframes3,
  spring
};
var percentToProgress = (percent3) => percent3 / 100;
function animateValue({ autoplay = true, delay: delay2 = 0, driver = frameloopDriver, keyframes: keyframes$1, type = "keyframes", repeat: repeat2 = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate, ...options2 }) {
  let speed = 1;
  let hasStopped = false;
  let resolveFinishedPromise;
  let currentFinishedPromise;
  const updateFinishedPromise = () => {
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let animationDriver;
  const generatorFactory = types[type] || keyframes3;
  let mapNumbersToKeyframes;
  if (generatorFactory !== keyframes3 && typeof keyframes$1[0] !== "number") {
    if (true) {
      invariant2(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);
    }
    mapNumbersToKeyframes = pipe4(percentToProgress, mix2(keyframes$1[0], keyframes$1[1]));
    keyframes$1 = [0, 100];
  }
  const generator = generatorFactory({ ...options2, keyframes: keyframes$1 });
  let mirroredGenerator;
  if (repeatType === "mirror") {
    mirroredGenerator = generatorFactory({
      ...options2,
      keyframes: [...keyframes$1].reverse(),
      velocity: -(options2.velocity || 0)
    });
  }
  let playState = "idle";
  let holdTime = null;
  let startTime = null;
  let cancelTime = null;
  if (generator.calculatedDuration === null && repeat2) {
    generator.calculatedDuration = calcGeneratorDuration(generator);
  }
  const { calculatedDuration } = generator;
  let resolvedDuration = Infinity;
  let totalDuration = Infinity;
  if (calculatedDuration !== null) {
    resolvedDuration = calculatedDuration + repeatDelay;
    totalDuration = resolvedDuration * (repeat2 + 1) - repeatDelay;
  }
  let currentTime = 0;
  const tick = (timestamp) => {
    if (startTime === null)
      return;
    if (speed > 0)
      startTime = Math.min(startTime, timestamp);
    if (speed < 0)
      startTime = Math.min(timestamp - totalDuration / speed, startTime);
    if (holdTime !== null) {
      currentTime = holdTime;
    } else {
      currentTime = Math.round(timestamp - startTime) * speed;
    }
    const timeWithoutDelay = currentTime - delay2 * (speed >= 0 ? 1 : -1);
    const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
    currentTime = Math.max(timeWithoutDelay, 0);
    if (playState === "finished" && holdTime === null) {
      currentTime = totalDuration;
    }
    let elapsed = currentTime;
    let frameGenerator = generator;
    if (repeat2) {
      const progress4 = Math.min(currentTime, totalDuration) / resolvedDuration;
      let currentIteration = Math.floor(progress4);
      let iterationProgress = progress4 % 1;
      if (!iterationProgress && progress4 >= 1) {
        iterationProgress = 1;
      }
      iterationProgress === 1 && currentIteration--;
      currentIteration = Math.min(currentIteration, repeat2 + 1);
      const isOddIteration = Boolean(currentIteration % 2);
      if (isOddIteration) {
        if (repeatType === "reverse") {
          iterationProgress = 1 - iterationProgress;
          if (repeatDelay) {
            iterationProgress -= repeatDelay / resolvedDuration;
          }
        } else if (repeatType === "mirror") {
          frameGenerator = mirroredGenerator;
        }
      }
      elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;
    }
    const state2 = isInDelayPhase ? { done: false, value: keyframes$1[0] } : frameGenerator.next(elapsed);
    if (mapNumbersToKeyframes) {
      state2.value = mapNumbersToKeyframes(state2.value);
    }
    let { done } = state2;
    if (!isInDelayPhase && calculatedDuration !== null) {
      done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;
    }
    const isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done);
    if (onUpdate) {
      onUpdate(state2.value);
    }
    if (isAnimationFinished) {
      finish();
    }
    return state2;
  };
  const stopAnimationDriver = () => {
    animationDriver && animationDriver.stop();
    animationDriver = void 0;
  };
  const cancel = () => {
    playState = "idle";
    stopAnimationDriver();
    resolveFinishedPromise();
    updateFinishedPromise();
    startTime = cancelTime = null;
  };
  const finish = () => {
    playState = "finished";
    onComplete && onComplete();
    stopAnimationDriver();
    resolveFinishedPromise();
  };
  const play = () => {
    if (hasStopped)
      return;
    if (!animationDriver)
      animationDriver = driver(tick);
    const now3 = animationDriver.now();
    onPlay && onPlay();
    if (holdTime !== null) {
      startTime = now3 - holdTime;
    } else if (!startTime || playState === "finished") {
      startTime = now3;
    }
    if (playState === "finished") {
      updateFinishedPromise();
    }
    cancelTime = startTime;
    holdTime = null;
    playState = "running";
    animationDriver.start();
  };
  if (autoplay) {
    play();
  }
  const controls = {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    get time() {
      return millisecondsToSeconds(currentTime);
    },
    set time(newTime) {
      newTime = secondsToMilliseconds(newTime);
      currentTime = newTime;
      if (holdTime !== null || !animationDriver || speed === 0) {
        holdTime = newTime;
      } else {
        startTime = animationDriver.now() - newTime / speed;
      }
    },
    get duration() {
      const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;
      return millisecondsToSeconds(duration);
    },
    get speed() {
      return speed;
    },
    set speed(newSpeed) {
      if (newSpeed === speed || !animationDriver)
        return;
      speed = newSpeed;
      controls.time = millisecondsToSeconds(currentTime);
    },
    get state() {
      return playState;
    },
    play,
    pause: () => {
      playState = "paused";
      holdTime = currentTime;
    },
    stop: () => {
      hasStopped = true;
      if (playState === "idle")
        return;
      playState = "idle";
      onStop && onStop();
      cancel();
    },
    cancel: () => {
      if (cancelTime !== null)
        tick(cancelTime);
      cancel();
    },
    complete: () => {
      playState = "finished";
    },
    sample: (elapsed) => {
      startTime = 0;
      return tick(elapsed);
    }
  };
  return controls;
}

// node_modules/framer-motion/dist/es/utils/memo.mjs
function memo(callback) {
  let result;
  return () => {
    if (result === void 0)
      result = callback();
    return result;
  };
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
var supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
var acceleratedValues = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform"
]);
var sampleDelta = 10;
var maxDuration2 = 2e4;
var requiresPregeneratedKeyframes = (valueName, options2) => options2.type === "spring" || valueName === "backgroundColor" || !isWaapiSupportedEasing(options2.ease);
function createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options2 }) {
  const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options2.repeatDelay && options2.repeatType !== "mirror" && options2.damping !== 0 && options2.type !== "inertia";
  if (!canAccelerateAnimation)
    return false;
  let hasStopped = false;
  let resolveFinishedPromise;
  let currentFinishedPromise;
  let pendingCancel = false;
  const updateFinishedPromise = () => {
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let { keyframes: keyframes6, duration = 300, ease: ease2, times: times2 } = options2;
  if (requiresPregeneratedKeyframes(valueName, options2)) {
    const sampleAnimation = animateValue({
      ...options2,
      repeat: 0,
      delay: 0
    });
    let state2 = { done: false, value: keyframes6[0] };
    const pregeneratedKeyframes = [];
    let t3 = 0;
    while (!state2.done && t3 < maxDuration2) {
      state2 = sampleAnimation.sample(t3);
      pregeneratedKeyframes.push(state2.value);
      t3 += sampleDelta;
    }
    times2 = void 0;
    keyframes6 = pregeneratedKeyframes;
    duration = t3 - sampleDelta;
    ease2 = "linear";
  }
  const animation = animateStyle(value.owner.current, valueName, keyframes6, {
    ...options2,
    duration,
    /**
     * This function is currently not called if ease is provided
     * as a function so the cast is safe.
     *
     * However it would be possible for a future refinement to port
     * in easing pregeneration from Motion One for browsers that
     * support the upcoming `linear()` easing function.
     */
    ease: ease2,
    times: times2
  });
  const cancelAnimation = () => {
    pendingCancel = false;
    animation.cancel();
  };
  const safeCancel = () => {
    pendingCancel = true;
    frame2.update(cancelAnimation);
    resolveFinishedPromise();
    updateFinishedPromise();
  };
  animation.onfinish = () => {
    if (pendingCancel)
      return;
    value.set(getFinalKeyframe(keyframes6, options2));
    onComplete && onComplete();
    safeCancel();
  };
  const controls = {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    attachTimeline(timeline) {
      animation.timeline = timeline;
      animation.onfinish = null;
      return noop3;
    },
    get time() {
      return millisecondsToSeconds(animation.currentTime || 0);
    },
    set time(newTime) {
      animation.currentTime = secondsToMilliseconds(newTime);
    },
    get speed() {
      return animation.playbackRate;
    },
    set speed(newSpeed) {
      animation.playbackRate = newSpeed;
    },
    get duration() {
      return millisecondsToSeconds(duration);
    },
    play: () => {
      if (hasStopped)
        return;
      animation.play();
      cancelFrame(cancelAnimation);
    },
    pause: () => animation.pause(),
    stop: () => {
      hasStopped = true;
      if (animation.playState === "idle")
        return;
      const { currentTime } = animation;
      if (currentTime) {
        const sampleAnimation = animateValue({
          ...options2,
          autoplay: false
        });
        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
      }
      safeCancel();
    },
    complete: () => {
      if (pendingCancel)
        return;
      animation.finish();
    },
    cancel: safeCancel
  };
  return controls;
}

// node_modules/framer-motion/dist/es/animation/animators/instant.mjs
function createInstantAnimation({ keyframes: keyframes6, delay: delay2, onUpdate, onComplete }) {
  const setValue = () => {
    onUpdate && onUpdate(keyframes6[keyframes6.length - 1]);
    onComplete && onComplete();
    return {
      time: 0,
      speed: 1,
      duration: 0,
      play: noop3,
      pause: noop3,
      stop: noop3,
      then: (resolve) => {
        resolve();
        return Promise.resolve();
      },
      cancel: noop3,
      complete: noop3
    };
  };
  return delay2 ? animateValue({
    keyframes: [0, 1],
    duration: 0,
    delay: delay2,
    onComplete: setValue
  }) : setValue();
}

// node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
var underDampedSpring = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
};
var criticallyDampedSpring = (target) => ({
  type: "spring",
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
});
var keyframesTransition = {
  type: "keyframes",
  duration: 0.8
};
var ease = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
};
var getDefaultTransition = (valueKey, { keyframes: keyframes6 }) => {
  if (keyframes6.length > 2) {
    return keyframesTransition;
  } else if (transformProps.has(valueKey)) {
    return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes6[1]) : underDampedSpring;
  }
  return ease;
};

// node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
var isAnimatable = (key2, value) => {
  if (key2 === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && // It's animatable if we have a string
  (complex.test(value) || value === "0") && // And it contains numbers and/or colors
  !value.startsWith("url(")) {
    return true;
  }
  return false;
};

// node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v) {
  const [name, value] = v.slice(0, -1).split("(");
  if (name === "drop-shadow")
    return v;
  const [number3] = value.match(floatRegex) || [];
  if (!number3)
    return v;
  const unit = value.replace(number3, "");
  let defaultValue2 = maxDefaults.has(name) ? 1 : 0;
  if (number3 !== value)
    defaultValue2 *= 100;
  return name + "(" + defaultValue2 + unit + ")";
}
var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter2 = {
  ...complex,
  getAnimatableNone: (v) => {
    const functions = v.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v;
  }
};

// node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
var defaultValueTypes = {
  ...numberValueTypes,
  // Color props
  color: color3,
  backgroundColor: color3,
  outlineColor: color3,
  fill: color3,
  stroke: color3,
  // Border props
  borderColor: color3,
  borderTopColor: color3,
  borderRightColor: color3,
  borderBottomColor: color3,
  borderLeftColor: color3,
  filter: filter2,
  WebkitFilter: filter2
};
var getDefaultValueType = (key2) => defaultValueTypes[key2];

// node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
function getAnimatableNone2(key2, value) {
  let defaultValueType = getDefaultValueType(key2);
  if (defaultValueType !== filter2)
    defaultValueType = complex;
  return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
}

// node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
var isZeroValueString = (v) => /^0[^.\s]+$/.test(v);

// node_modules/framer-motion/dist/es/animation/utils/is-none.mjs
function isNone(value) {
  if (typeof value === "number") {
    return value === 0;
  } else if (value !== null) {
    return value === "none" || value === "0" || isZeroValueString(value);
  }
}

// node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
function getKeyframes(value, valueName, target, transition3) {
  const isTargetAnimatable = isAnimatable(valueName, target);
  let keyframes6;
  if (Array.isArray(target)) {
    keyframes6 = [...target];
  } else {
    keyframes6 = [null, target];
  }
  const defaultOrigin2 = transition3.from !== void 0 ? transition3.from : value.get();
  let animatableTemplateValue = void 0;
  const noneKeyframeIndexes = [];
  for (let i2 = 0; i2 < keyframes6.length; i2++) {
    if (keyframes6[i2] === null) {
      keyframes6[i2] = i2 === 0 ? defaultOrigin2 : keyframes6[i2 - 1];
    }
    if (isNone(keyframes6[i2])) {
      noneKeyframeIndexes.push(i2);
    }
    if (typeof keyframes6[i2] === "string" && keyframes6[i2] !== "none" && keyframes6[i2] !== "0") {
      animatableTemplateValue = keyframes6[i2];
    }
  }
  if (isTargetAnimatable && noneKeyframeIndexes.length && animatableTemplateValue) {
    for (let i2 = 0; i2 < noneKeyframeIndexes.length; i2++) {
      const index5 = noneKeyframeIndexes[i2];
      keyframes6[index5] = getAnimatableNone2(valueName, animatableTemplateValue);
    }
  }
  return keyframes6;
}

// node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat: repeat2, repeatType, repeatDelay, from: from2, elapsed, ...transition3 }) {
  return !!Object.keys(transition3).length;
}
function getValueTransition(transition3, key2) {
  return transition3[key2] || transition3["default"] || transition3;
}

// node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
var animateMotionValue = (valueName, value, target, transition3 = {}) => {
  return (onComplete) => {
    const valueTransition = getValueTransition(transition3, valueName) || {};
    const delay2 = valueTransition.delay || transition3.delay || 0;
    let { elapsed = 0 } = transition3;
    elapsed = elapsed - secondsToMilliseconds(delay2);
    const keyframes6 = getKeyframes(value, valueName, target, valueTransition);
    const originKeyframe = keyframes6[0];
    const targetKeyframe = keyframes6[keyframes6.length - 1];
    const isOriginAnimatable = isAnimatable(valueName, originKeyframe);
    const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
    let options2 = {
      keyframes: keyframes6,
      velocity: value.getVelocity(),
      ease: "easeOut",
      ...valueTransition,
      delay: -elapsed,
      onUpdate: (v) => {
        value.set(v);
        valueTransition.onUpdate && valueTransition.onUpdate(v);
      },
      onComplete: () => {
        onComplete();
        valueTransition.onComplete && valueTransition.onComplete();
      }
    };
    if (!isTransitionDefined(valueTransition)) {
      options2 = {
        ...options2,
        ...getDefaultTransition(valueName, options2)
      };
    }
    if (options2.duration) {
      options2.duration = secondsToMilliseconds(options2.duration);
    }
    if (options2.repeatDelay) {
      options2.repeatDelay = secondsToMilliseconds(options2.repeatDelay);
    }
    if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false || MotionGlobalConfig.skipAnimations) {
      return createInstantAnimation(instantAnimationState.current ? { ...options2, delay: 0 } : options2);
    }
    if (
      /**
       * If this is a handoff animation, the optimised animation will be running via
       * WAAPI. Therefore, this animation must be JS to ensure it runs "under" the
       * optimised animation.
       */
      !transition3.isHandoff && value.owner && value.owner.current instanceof HTMLElement && /**
       * If we're outputting values to onUpdate then we can't use WAAPI as there's
       * no way to read the value from WAAPI every frame.
       */
      !value.owner.getProps().onUpdate
    ) {
      const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options2);
      if (acceleratedAnimation)
        return acceleratedAnimation;
    }
    return animateValue(options2);
  };
};

// node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
function isWillChangeMotionValue(value) {
  return Boolean(isMotionValue(value) && value.add);
}

// node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
var isNumericalString = (v) => /^\-?\d*\.?\d+$/.test(v);

// node_modules/framer-motion/dist/es/utils/array.mjs
function addUniqueItem(arr, item) {
  if (arr.indexOf(item) === -1)
    arr.push(item);
}
function removeItem2(arr, item) {
  const index5 = arr.indexOf(item);
  if (index5 > -1)
    arr.splice(index5, 1);
}
function moveItem([...arr], fromIndex, toIndex) {
  const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
  if (startIndex >= 0 && startIndex < arr.length) {
    const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
    const [item] = arr.splice(fromIndex, 1);
    arr.splice(endIndex, 0, item);
  }
  return arr;
}

// node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
var SubscriptionManager = class {
  constructor() {
    this.subscriptions = [];
  }
  add(handler) {
    addUniqueItem(this.subscriptions, handler);
    return () => removeItem2(this.subscriptions, handler);
  }
  notify(a2, b2, c2) {
    const numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a2, b2, c2);
    } else {
      for (let i2 = 0; i2 < numSubscriptions; i2++) {
        const handler = this.subscriptions[i2];
        handler && handler(a2, b2, c2);
      }
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
};

// node_modules/framer-motion/dist/es/utils/warn-once.mjs
var warned = /* @__PURE__ */ new Set();
function warnOnce(condition, message, element) {
  if (condition || warned.has(message))
    return;
  console.warn(message);
  if (element)
    console.warn(element);
  warned.add(message);
}

// node_modules/framer-motion/dist/es/value/index.mjs
var MAX_VELOCITY_DELTA = 30;
var isFloat = (value) => {
  return !isNaN(parseFloat(value));
};
var collectMotionValues = {
  current: void 0
};
var MotionValue = class {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   *
   * @internal
   */
  constructor(init2, options2 = {}) {
    this.version = "11.0.6";
    this.canTrackVelocity = false;
    this.events = {};
    this.updateAndNotify = (v, render = true) => {
      const currentTime = time.now();
      if (this.updatedAt !== currentTime) {
        this.setPrevFrameValue();
      }
      this.prev = this.current;
      this.setCurrent(v);
      if (this.current !== this.prev && this.events.change) {
        this.events.change.notify(this.current);
      }
      if (render && this.events.renderRequest) {
        this.events.renderRequest.notify(this.current);
      }
    };
    this.hasAnimated = false;
    this.setCurrent(init2);
    this.canTrackVelocity = isFloat(this.current);
    this.owner = options2.owner;
  }
  setCurrent(current) {
    this.current = current;
    this.updatedAt = time.now();
  }
  setPrevFrameValue(prevFrameValue = this.current) {
    this.prevFrameValue = prevFrameValue;
    this.prevUpdatedAt = this.updatedAt;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(subscription) {
    if (true) {
      warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
    }
    return this.on("change", subscription);
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    const unsubscribe = this.events[eventName].add(callback);
    if (eventName === "change") {
      return () => {
        unsubscribe();
        frame2.read(() => {
          if (!this.events.change.getSize()) {
            this.stop();
          }
        });
      };
    }
    return unsubscribe;
  }
  clearListeners() {
    for (const eventManagers in this.events) {
      this.events[eventManagers].clear();
    }
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   *
   * @internal
   */
  attach(passiveEffect, stopPassiveEffect) {
    this.passiveEffect = passiveEffect;
    this.stopPassiveEffect = stopPassiveEffect;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(v, render = true) {
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v, render);
    } else {
      this.passiveEffect(v, this.updateAndNotify);
    }
  }
  setWithVelocity(prev2, current, delta2) {
    this.set(current);
    this.prev = void 0;
    this.prevFrameValue = prev2;
    this.prevUpdatedAt = this.updatedAt - delta2;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(v) {
    this.updateAndNotify(v);
    this.prev = v;
    this.prevUpdatedAt = this.prevFrameValue = void 0;
    this.stop();
    if (this.stopPassiveEffect)
      this.stopPassiveEffect();
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    if (collectMotionValues.current) {
      collectMotionValues.current.push(this);
    }
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    const currentTime = time.now();
    if (!this.canTrackVelocity || this.prevFrameValue === void 0 || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {
      return 0;
    }
    const delta2 = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);
    return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta2);
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   *
   * @internal
   */
  start(startAnimation2) {
    this.stop();
    return new Promise((resolve) => {
      this.hasAnimated = true;
      this.animation = startAnimation2(resolve);
      if (this.events.animationStart) {
        this.events.animationStart.notify();
      }
    }).then(() => {
      if (this.events.animationComplete) {
        this.events.animationComplete.notify();
      }
      this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    if (this.animation) {
      this.animation.stop();
      if (this.events.animationCancel) {
        this.events.animationCancel.notify();
      }
    }
    this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.clearListeners();
    this.stop();
    if (this.stopPassiveEffect) {
      this.stopPassiveEffect();
    }
  }
};
function motionValue(init2, options2) {
  return new MotionValue(init2, options2);
}

// node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
var testValueType = (v) => (type) => type.test(v);

// node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
var auto = {
  test: (v) => v === "auto",
  parse: (v) => v
};

// node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
var dimensionValueTypes = [number, px3, percent, degrees, vw, vh, auto];
var findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));

// node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
var valueTypes = [...dimensionValueTypes, color3, complex];
var findValueType = (v) => valueTypes.find(testValueType(v));

// node_modules/framer-motion/dist/es/render/utils/setters.mjs
function setMotionValue(visualElement2, key2, value) {
  if (visualElement2.hasValue(key2)) {
    visualElement2.getValue(key2).set(value);
  } else {
    visualElement2.addValue(key2, motionValue(value));
  }
}
function setTarget(visualElement2, definition) {
  const resolved = resolveVariant(visualElement2, definition);
  let { transitionEnd = {}, transition: transition3 = {}, ...target } = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {};
  target = { ...target, ...transitionEnd };
  for (const key2 in target) {
    const value = resolveFinalValueInKeyframes(target[key2]);
    setMotionValue(visualElement2, key2, value);
  }
}
function checkTargetForNewValues(visualElement2, target, origin) {
  var _a9, _b5;
  const newValueKeys = Object.keys(target).filter((key2) => !visualElement2.hasValue(key2));
  const numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (let i2 = 0; i2 < numNewValues; i2++) {
    const key2 = newValueKeys[i2];
    const targetValue = target[key2];
    let value = null;
    if (Array.isArray(targetValue)) {
      value = targetValue[0];
    }
    if (value === null) {
      value = (_b5 = (_a9 = origin[key2]) !== null && _a9 !== void 0 ? _a9 : visualElement2.readValue(key2)) !== null && _b5 !== void 0 ? _b5 : target[key2];
    }
    if (value === void 0 || value === null)
      continue;
    if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
      value = parseFloat(value);
    } else if (!findValueType(value) && complex.test(targetValue)) {
      value = getAnimatableNone2(key2, targetValue);
    }
    visualElement2.addValue(key2, motionValue(value, { owner: visualElement2 }));
    if (origin[key2] === void 0) {
      origin[key2] = value;
    }
    if (value !== null)
      visualElement2.setBaseTarget(key2, value);
  }
}
function getOriginFromTransition(key2, transition3) {
  if (!transition3)
    return;
  const valueTransition = transition3[key2] || transition3["default"] || transition3;
  return valueTransition.from;
}
function getOrigin(target, transition3, visualElement2) {
  const origin = {};
  for (const key2 in target) {
    const transitionOrigin = getOriginFromTransition(key2, transition3);
    if (transitionOrigin !== void 0) {
      origin[key2] = transitionOrigin;
    } else {
      const value = visualElement2.getValue(key2);
      if (value) {
        origin[key2] = value.get();
      }
    }
  }
  return origin;
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
function shouldBlockAnimation({ protectedKeys, needsAnimating }, key2) {
  const shouldBlock = protectedKeys.hasOwnProperty(key2) && needsAnimating[key2] !== true;
  needsAnimating[key2] = false;
  return shouldBlock;
}
function hasKeyframesChanged(value, target) {
  const current = value.get();
  if (Array.isArray(target)) {
    for (let i2 = 0; i2 < target.length; i2++) {
      if (target[i2] !== current)
        return true;
    }
  } else {
    return current !== target;
  }
}
function animateTarget(visualElement2, definition, { delay: delay2 = 0, transitionOverride, type } = {}) {
  let { transition: transition3 = visualElement2.getDefaultTransition(), transitionEnd, ...target } = visualElement2.makeTargetAnimatable(definition);
  const willChange = visualElement2.getValue("willChange");
  if (transitionOverride)
    transition3 = transitionOverride;
  const animations3 = [];
  const animationTypeState = type && visualElement2.animationState && visualElement2.animationState.getState()[type];
  for (const key2 in target) {
    const value = visualElement2.getValue(key2);
    const valueTarget = target[key2];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key2)) {
      continue;
    }
    const valueTransition = {
      delay: delay2,
      elapsed: 0,
      ...getValueTransition(transition3 || {}, key2)
    };
    if (window.HandoffAppearAnimations) {
      const appearId = visualElement2.getProps()[optimizedAppearDataAttribute];
      if (appearId) {
        const elapsed = window.HandoffAppearAnimations(appearId, key2, value, frame2);
        if (elapsed !== null) {
          valueTransition.elapsed = elapsed;
          valueTransition.isHandoff = true;
        }
      }
    }
    let canSkip = !valueTransition.isHandoff && !hasKeyframesChanged(value, valueTarget);
    if (valueTransition.type === "spring" && (value.getVelocity() || valueTransition.velocity)) {
      canSkip = false;
    }
    if (value.animation) {
      canSkip = false;
    }
    if (canSkip)
      continue;
    value.start(animateMotionValue(key2, value, valueTarget, visualElement2.shouldReduceMotion && transformProps.has(key2) ? { type: false } : valueTransition));
    const animation = value.animation;
    if (isWillChangeMotionValue(willChange)) {
      willChange.add(key2);
      animation.then(() => willChange.remove(key2));
    }
    animations3.push(animation);
  }
  if (transitionEnd) {
    Promise.all(animations3).then(() => {
      transitionEnd && setTarget(visualElement2, transitionEnd);
    });
  }
  return animations3;
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
function animateVariant(visualElement2, variant, options2 = {}) {
  const resolved = resolveVariant(visualElement2, variant, options2.custom);
  let { transition: transition3 = visualElement2.getDefaultTransition() || {} } = resolved || {};
  if (options2.transitionOverride) {
    transition3 = options2.transitionOverride;
  }
  const getAnimation2 = resolved ? () => Promise.all(animateTarget(visualElement2, resolved, options2)) : () => Promise.resolve();
  const getChildAnimations = visualElement2.variantChildren && visualElement2.variantChildren.size ? (forwardDelay = 0) => {
    const { delayChildren = 0, staggerChildren, staggerDirection } = transition3;
    return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options2);
  } : () => Promise.resolve();
  const { when } = transition3;
  if (when) {
    const [first, last2] = when === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2];
    return first().then(() => last2());
  } else {
    return Promise.all([getAnimation2(), getChildAnimations(options2.delay)]);
  }
}
function animateChildren(visualElement2, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options2) {
  const animations3 = [];
  const maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
  const generateStaggerDuration = staggerDirection === 1 ? (i2 = 0) => i2 * staggerChildren : (i2 = 0) => maxStaggerDuration - i2 * staggerChildren;
  Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach((child, i2) => {
    child.notify("AnimationStart", variant);
    animations3.push(animateVariant(child, variant, {
      ...options2,
      delay: delayChildren + generateStaggerDuration(i2)
    }).then(() => child.notify("AnimationComplete", variant)));
  });
  return Promise.all(animations3);
}
function sortByTreeOrder(a2, b2) {
  return a2.sortNodePosition(b2);
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
function animateVisualElement(visualElement2, definition, options2 = {}) {
  visualElement2.notify("AnimationStart", definition);
  let animation;
  if (Array.isArray(definition)) {
    const animations3 = definition.map((variant) => animateVariant(visualElement2, variant, options2));
    animation = Promise.all(animations3);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement2, definition, options2);
  } else {
    const resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options2.custom) : definition;
    animation = Promise.all(animateTarget(visualElement2, resolvedDefinition, options2));
  }
  return animation.then(() => visualElement2.notify("AnimationComplete", definition));
}

// node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
var reversePriorityOrder = [...variantPriorityOrder].reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement2) {
  return (animations3) => Promise.all(animations3.map(({ animation, options: options2 }) => animateVisualElement(visualElement2, animation, options2)));
}
function createAnimationState(visualElement2) {
  let animate4 = animateList(visualElement2);
  const state2 = createState();
  let isInitialRender = true;
  const buildResolvedTypeValues = (acc, definition) => {
    const resolved = resolveVariant(visualElement2, definition);
    if (resolved) {
      const { transition: transition3, transitionEnd, ...target } = resolved;
      acc = { ...acc, ...target, ...transitionEnd };
    }
    return acc;
  };
  function setAnimateFunction(makeAnimator) {
    animate4 = makeAnimator(visualElement2);
  }
  function animateChanges(options2, changedActiveType) {
    const props = visualElement2.getProps();
    const context2 = visualElement2.getVariantContext(true) || {};
    const animations3 = [];
    const removedKeys = /* @__PURE__ */ new Set();
    let encounteredKeys = {};
    let removedVariantIndex = Infinity;
    for (let i2 = 0; i2 < numAnimationTypes; i2++) {
      const type = reversePriorityOrder[i2];
      const typeState = state2[type];
      const prop2 = props[type] !== void 0 ? props[type] : context2[type];
      const propIsVariant = isVariantLabel(prop2);
      const activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i2;
      let isInherited = prop2 === context2[type] && prop2 !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = { ...encounteredKeys };
      if (
        // If it isn't active and hasn't *just* been set as inactive
        !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
        !prop2 && !typeState.prevProp || // Or if the prop doesn't define an animation
        isAnimationControls(prop2) || typeof prop2 === "boolean"
      ) {
        continue;
      }
      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop2);
      let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
      i2 > removedVariantIndex && propIsVariant;
      let handledRemovedValues = false;
      const definitionList = Array.isArray(prop2) ? prop2 : [prop2];
      let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      const { prevResolvedValues = {} } = typeState;
      const allKeys = {
        ...prevResolvedValues,
        ...resolvedValues
      };
      const markToAnimate = (key2) => {
        shouldAnimateType = true;
        if (removedKeys.has(key2)) {
          handledRemovedValues = true;
          removedKeys.delete(key2);
        }
        typeState.needsAnimating[key2] = true;
      };
      for (const key2 in allKeys) {
        const next2 = resolvedValues[key2];
        const prev2 = prevResolvedValues[key2];
        if (encounteredKeys.hasOwnProperty(key2))
          continue;
        let valueHasChanged = false;
        if (isKeyframesTarget(next2) && isKeyframesTarget(prev2)) {
          valueHasChanged = !shallowCompare(next2, prev2);
        } else {
          valueHasChanged = next2 !== prev2;
        }
        if (valueHasChanged) {
          if (next2 !== void 0) {
            markToAnimate(key2);
          } else {
            removedKeys.add(key2);
          }
        } else if (next2 !== void 0 && removedKeys.has(key2)) {
          markToAnimate(key2);
        } else {
          typeState.protectedKeys[key2] = true;
        }
      }
      typeState.prevProp = prop2;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = { ...encounteredKeys, ...resolvedValues };
      }
      if (isInitialRender && visualElement2.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && (!isInherited || handledRemovedValues)) {
        animations3.push(...definitionList.map((animation) => ({
          animation,
          options: { type, ...options2 }
        })));
      }
    }
    if (removedKeys.size) {
      const fallbackAnimation = {};
      removedKeys.forEach((key2) => {
        const fallbackTarget = visualElement2.getBaseTarget(key2);
        if (fallbackTarget !== void 0) {
          fallbackAnimation[key2] = fallbackTarget;
        }
      });
      animations3.push({ animation: fallbackAnimation });
    }
    let shouldAnimate = Boolean(animations3.length);
    if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement2.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate4(animations3) : Promise.resolve();
  }
  function setActive(type, isActive, options2) {
    var _a9;
    if (state2[type].isActive === isActive)
      return Promise.resolve();
    (_a9 = visualElement2.variantChildren) === null || _a9 === void 0 ? void 0 : _a9.forEach((child) => {
      var _a10;
      return (_a10 = child.animationState) === null || _a10 === void 0 ? void 0 : _a10.setActive(type, isActive);
    });
    state2[type].isActive = isActive;
    const animations3 = animateChanges(options2, type);
    for (const key2 in state2) {
      state2[key2].protectedKeys = {};
    }
    return animations3;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state2
  };
}
function checkVariantsDidChange(prev2, next2) {
  if (typeof next2 === "string") {
    return next2 !== prev2;
  } else if (Array.isArray(next2)) {
    return !shallowCompare(next2, prev2);
  }
  return false;
}
function createTypeState(isActive = false) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  return {
    animate: createTypeState(true),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState()
  };
}

// node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
var AnimationFeature = class extends Feature {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(node3) {
    super(node3);
    node3.animationState || (node3.animationState = createAnimationState(node3));
  }
  updateAnimationControlsSubscription() {
    const { animate: animate4 } = this.node.getProps();
    this.unmount();
    if (isAnimationControls(animate4)) {
      this.unmount = animate4.subscribe(this.node);
    }
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: animate4 } = this.node.getProps();
    const { animate: prevAnimate } = this.node.prevProps || {};
    if (animate4 !== prevAnimate) {
      this.updateAnimationControlsSubscription();
    }
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
var id = 0;
var ExitAnimationFeature = class extends Feature {
  constructor() {
    super(...arguments);
    this.id = id++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent: isPresent3, onExitComplete, custom } = this.node.presenceContext;
    const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent3 === prevIsPresent) {
      return;
    }
    const exitAnimation = this.node.animationState.setActive("exit", !isPresent3, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });
    if (onExitComplete && !isPresent3) {
      exitAnimation.then(() => onExitComplete(this.id));
    }
  }
  mount() {
    const { register } = this.node.presenceContext || {};
    if (register) {
      this.unmount = register(this.id);
    }
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/motion/features/animations.mjs
var animations = {
  animation: {
    Feature: AnimationFeature
  },
  exit: {
    Feature: ExitAnimationFeature
  }
};

// node_modules/framer-motion/dist/es/utils/distance.mjs
var distance2 = (a2, b2) => Math.abs(a2 - b2);
function distance2D(a2, b2) {
  const xDelta = distance2(a2.x, b2.x);
  const yDelta = distance2(a2.y, b2.y);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}

// node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
var PanSession2 = class {
  constructor(event, handlers2, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.contextWindow = window;
    this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { point: point2 } = info2;
      const { timestamp: timestamp2 } = frameData;
      this.history.push({ ...point2, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart && onStart(this.lastMoveEvent, info2);
        this.startEvent = this.lastMoveEvent;
      }
      onMove && onMove(this.lastMoveEvent, info2);
    };
    this.handlePointerMove = (event2, info2) => {
      this.lastMoveEvent = event2;
      this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
      frame2.update(this.updatePoint, true);
    };
    this.handlePointerUp = (event2, info2) => {
      this.end();
      const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
      if (this.dragSnapToOrigin)
        resumeAnimation && resumeAnimation();
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
      if (this.startEvent && onEnd) {
        onEnd(event2, panInfo);
      }
      onSessionEnd && onSessionEnd(event2, panInfo);
    };
    if (!isPrimaryPointer(event))
      return;
    this.dragSnapToOrigin = dragSnapToOrigin;
    this.handlers = handlers2;
    this.transformPagePoint = transformPagePoint;
    this.contextWindow = contextWindow || window;
    const info = extractEventInfo2(event);
    const initialInfo = transformPoint(info, this.transformPagePoint);
    const { point } = initialInfo;
    const { timestamp } = frameData;
    this.history = [{ ...point, timestamp }];
    const { onSessionStart } = handlers2;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe4(addPointerEvent2(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent2(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent2(this.contextWindow, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(handlers2) {
    this.handlers = handlers2;
  }
  end() {
    this.removeListeners && this.removeListeners();
    cancelFrame(this.updatePoint);
  }
};
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a2, b2) {
  return { x: a2.x - b2.x, y: a2.y - b2.y };
}
function getPanInfo({ point }, history) {
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity2(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity2(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i2 = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint(history);
  while (i2 >= 0) {
    timestampedPoint = history[i2];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i2--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time2 = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
  if (time2 === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time2,
    y: (lastPoint.y - timestampedPoint.y) / time2
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target = 0, maxDistance = 0.01) {
  return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta2, source, target, origin = 0.5) {
  delta2.origin = origin;
  delta2.originPoint = mixNumber(source.min, source.max, delta2.origin);
  delta2.scale = calcLength(target) / calcLength(source);
  if (isNear(delta2.scale, 1, 1e-4) || isNaN(delta2.scale))
    delta2.scale = 1;
  delta2.translate = mixNumber(target.min, target.max, delta2.origin) - delta2.originPoint;
  if (isNear(delta2.translate) || isNaN(delta2.translate))
    delta2.translate = 0;
}
function calcBoxDelta(delta2, source, target, origin) {
  calcAxisDelta(delta2.x, source.x, target.x, origin ? origin.originX : void 0);
  calcAxisDelta(delta2.y, source.y, target.y, origin ? origin.originY : void 0);
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x);
  calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout3, parent) {
  target.min = layout3.min - parent.min;
  target.max = target.min + calcLength(layout3);
}
function calcRelativePosition(target, layout3, parent) {
  calcRelativeAxisPosition(target.x, layout3.x, parent.x);
  calcRelativeAxisPosition(target.y, layout3.y, parent.y);
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
function applyConstraints(point, { min: min3, max: max3 }, elastic) {
  if (min3 !== void 0 && point < min3) {
    point = elastic ? mixNumber(min3, point, elastic.min) : Math.max(point, min3);
  } else if (max3 !== void 0 && point > max3) {
    point = elastic ? mixNumber(max3, point, elastic.max) : Math.min(point, max3);
  }
  return point;
}
function calcRelativeAxisConstraints(axis, min3, max3) {
  return {
    min: min3 !== void 0 ? axis.min + min3 : void 0,
    max: max3 !== void 0 ? axis.max + max3 - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, { top: top2, left: left2, bottom: bottom2, right: right2 }) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left2, right2),
    y: calcRelativeAxisConstraints(layoutBox.y, top2, bottom2)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  let min3 = constraintsAxis.min - layoutAxis.min;
  let max3 = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    [min3, max3] = [max3, min3];
  }
  return { min: min3, max: max3 };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin2(source, target) {
  let origin = 0.5;
  const sourceLength = calcLength(source);
  const targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min);
  }
  return clamp(0, 1, origin);
}
function rebaseAxisConstraints(layout3, constraints) {
  const relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout3.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout3.min;
  }
  return relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic = defaultElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
}

// node_modules/framer-motion/dist/es/projection/geometry/models.mjs
var createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
});
var createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta()
});
var createAxis = () => ({ min: 0, max: 0 });
var createBox = () => ({
  x: createAxis(),
  y: createAxis()
});

// node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
function eachAxis(callback) {
  return [callback("x"), callback("y")];
}

// node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
function convertBoundingBoxToBox({ top: top2, left: left2, right: right2, bottom: bottom2 }) {
  return {
    x: { min: left2, max: right2 },
    y: { min: top2, max: bottom2 }
  };
}
function convertBoxToBoundingBox({ x, y }) {
  return { top: y.min, right: x.max, bottom: y.max, left: x.min };
}
function transformBoxPoints(point, transformPoint3) {
  if (!transformPoint3)
    return point;
  const topLeft = transformPoint3({ x: point.left, y: point.top });
  const bottomRight = transformPoint3({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}

// node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
function isIdentityScale(scale4) {
  return scale4 === void 0 || scale4 === 1;
}
function hasScale({ scale: scale4, scaleX, scaleY }) {
  return !isIdentityScale(scale4) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values2) {
  return hasScale(values2) || has2DTranslate(values2) || values2.z || values2.rotate || values2.rotateX || values2.rotateY;
}
function has2DTranslate(values2) {
  return is2DTranslate(values2.x) || is2DTranslate(values2.y);
}
function is2DTranslate(value) {
  return value && value !== "0%";
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
function scalePoint(point, scale4, originPoint) {
  const distanceFromOrigin = point - originPoint;
  const scaled = scale4 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale4, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale4, originPoint) + translate;
}
function applyAxisDelta(axis, translate = 0, scale4 = 1, originPoint, boxScale) {
  axis.min = applyPointDelta(axis.min, translate, scale4, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale4, originPoint, boxScale);
}
function applyBoxDelta(box, { x, y }) {
  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
  const treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  let node3;
  let delta2;
  for (let i2 = 0; i2 < treeLength; i2++) {
    node3 = treePath[i2];
    delta2 = node3.projectionDelta;
    const instance = node3.instance;
    if (instance && instance.style && instance.style.display === "contents") {
      continue;
    }
    if (isSharedTransition && node3.options.layoutScroll && node3.scroll && node3 !== node3.root) {
      transformBox(box, {
        x: -node3.scroll.offset.x,
        y: -node3.scroll.offset.y
      });
    }
    if (delta2) {
      treeScale.x *= delta2.x.scale;
      treeScale.y *= delta2.y.scale;
      applyBoxDelta(box, delta2);
    }
    if (isSharedTransition && hasTransform(node3.latestValues)) {
      transformBox(box, node3.latestValues);
    }
  }
  treeScale.x = snapToDefault(treeScale.x);
  treeScale.y = snapToDefault(treeScale.y);
}
function snapToDefault(scale4) {
  if (Number.isInteger(scale4))
    return scale4;
  return scale4 > 1.0000000000001 || scale4 < 0.999999999999 ? scale4 : 1;
}
function translateAxis(axis, distance5) {
  axis.min = axis.min + distance5;
  axis.max = axis.max + distance5;
}
function transformAxis(axis, transforms2, [key2, scaleKey, originKey]) {
  const axisOrigin = transforms2[originKey] !== void 0 ? transforms2[originKey] : 0.5;
  const originPoint = mixNumber(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, transforms2[key2], transforms2[scaleKey], originPoint, transforms2.scale);
}
var xKeys = ["x", "scaleX", "originX"];
var yKeys = ["y", "scaleY", "originY"];
function transformBox(box, transform4) {
  transformAxis(box.x, transform4, xKeys);
  transformAxis(box.y, transform4, yKeys);
}

// node_modules/framer-motion/dist/es/projection/utils/measure.mjs
function measureViewportBox(instance, transformPoint3) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint3));
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
  const viewportBox = measureViewportBox(element, transformPagePoint);
  const { scroll: scroll3 } = rootProjectionNode2;
  if (scroll3) {
    translateAxis(viewportBox.x, scroll3.offset.x);
    translateAxis(viewportBox.y, scroll3.offset.y);
  }
  return viewportBox;
}

// node_modules/framer-motion/dist/es/utils/get-context-window.mjs
var getContextWindow = ({ current }) => {
  return current ? current.ownerDocument.defaultView : null;
};

// node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
var elementDragControls = /* @__PURE__ */ new WeakMap();
var VisualElementDragControls = class {
  constructor(visualElement2) {
    this.openGlobalLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement2;
  }
  start(originEvent, { snapToCursor = false } = {}) {
    const { presenceContext } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === false)
      return;
    const onSessionStart = (event) => {
      const { dragSnapToOrigin: dragSnapToOrigin2 } = this.getProps();
      dragSnapToOrigin2 ? this.pauseAnimation() : this.stopAnimation();
      if (snapToCursor) {
        this.snapToCursor(extractEventInfo2(event, "page").point);
      }
    };
    const onStart = (event, info) => {
      const { drag: drag3, dragPropagation, onDragStart } = this.getProps();
      if (drag3 && !dragPropagation) {
        if (this.openGlobalLock)
          this.openGlobalLock();
        this.openGlobalLock = getGlobalLock(drag3);
        if (!this.openGlobalLock)
          return;
      }
      this.isDragging = true;
      this.currentDirection = null;
      this.resolveConstraints();
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = true;
        this.visualElement.projection.target = void 0;
      }
      eachAxis((axis) => {
        let current = this.getAxisMotionValue(axis).get() || 0;
        if (percent.test(current)) {
          const { projection } = this.visualElement;
          if (projection && projection.layout) {
            const measuredAxis = projection.layout.layoutBox[axis];
            if (measuredAxis) {
              const length3 = calcLength(measuredAxis);
              current = length3 * (parseFloat(current) / 100);
            }
          }
        }
        this.originPoint[axis] = current;
      });
      if (onDragStart) {
        frame2.update(() => onDragStart(event, info), false, true);
      }
      const { animationState } = this.visualElement;
      animationState && animationState.setActive("whileDrag", true);
    };
    const onMove = (event, info) => {
      const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
      if (!dragPropagation && !this.openGlobalLock)
        return;
      const { offset: offset3 } = info;
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset3);
        if (this.currentDirection !== null) {
          onDirectionLock && onDirectionLock(this.currentDirection);
        }
        return;
      }
      this.updateAxis("x", info.point, offset3);
      this.updateAxis("y", info.point, offset3);
      this.visualElement.render();
      onDrag && onDrag(event, info);
    };
    const onSessionEnd = (event, info) => this.stop(event, info);
    const resumeAnimation = () => eachAxis((axis) => {
      var _a9;
      return this.getAnimationState(axis) === "paused" && ((_a9 = this.getAxisMotionValue(axis).animation) === null || _a9 === void 0 ? void 0 : _a9.play());
    });
    const { dragSnapToOrigin } = this.getProps();
    this.panSession = new PanSession2(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd,
      resumeAnimation
    }, {
      transformPagePoint: this.visualElement.getTransformPagePoint(),
      dragSnapToOrigin,
      contextWindow: getContextWindow(this.visualElement)
    });
  }
  stop(event, info) {
    const isDragging = this.isDragging;
    this.cancel();
    if (!isDragging)
      return;
    const { velocity } = info;
    this.startAnimation(velocity);
    const { onDragEnd } = this.getProps();
    if (onDragEnd) {
      frame2.update(() => onDragEnd(event, info));
    }
  }
  cancel() {
    this.isDragging = false;
    const { projection, animationState } = this.visualElement;
    if (projection) {
      projection.isAnimationBlocked = false;
    }
    this.panSession && this.panSession.end();
    this.panSession = void 0;
    const { dragPropagation } = this.getProps();
    if (!dragPropagation && this.openGlobalLock) {
      this.openGlobalLock();
      this.openGlobalLock = null;
    }
    animationState && animationState.setActive("whileDrag", false);
  }
  updateAxis(axis, _point, offset3) {
    const { drag: drag3 } = this.getProps();
    if (!offset3 || !shouldDrag(axis, drag3, this.currentDirection))
      return;
    const axisValue = this.getAxisMotionValue(axis);
    let next2 = this.originPoint[axis] + offset3[axis];
    if (this.constraints && this.constraints[axis]) {
      next2 = applyConstraints(next2, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next2);
  }
  resolveConstraints() {
    var _a9;
    const { dragConstraints, dragElastic } = this.getProps();
    const layout3 = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a9 = this.visualElement.projection) === null || _a9 === void 0 ? void 0 : _a9.layout;
    const prevConstraints = this.constraints;
    if (dragConstraints && isRefObject2(dragConstraints)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout3) {
        this.constraints = calcRelativeConstraints(layout3.layoutBox, dragConstraints);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic);
    if (prevConstraints !== this.constraints && layout3 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis((axis) => {
        if (this.getAxisMotionValue(axis)) {
          this.constraints[axis] = rebaseAxisConstraints(layout3.layoutBox[axis], this.constraints[axis]);
        }
      });
    }
  }
  resolveRefConstraints() {
    const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
    if (!constraints || !isRefObject2(constraints))
      return false;
    const constraintsElement = constraints.current;
    invariant2(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    const { projection } = this.visualElement;
    if (!projection || !projection.layout)
      return false;
    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
    if (onMeasureDragConstraints) {
      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  }
  startAnimation(velocity) {
    const { drag: drag3, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
    const constraints = this.constraints || {};
    const momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag3, this.currentDirection)) {
        return;
      }
      let transition3 = constraints && constraints[axis] || {};
      if (dragSnapToOrigin)
        transition3 = { min: 0, max: 0 };
      const bounceStiffness = dragElastic ? 200 : 1e6;
      const bounceDamping = dragElastic ? 40 : 1e7;
      const inertia3 = {
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition3
      };
      return this.startAxisValueAnimation(axis, inertia3);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  }
  startAxisValueAnimation(axis, transition3) {
    const axisValue = this.getAxisMotionValue(axis);
    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition3));
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).stop());
  }
  pauseAnimation() {
    eachAxis((axis) => {
      var _a9;
      return (_a9 = this.getAxisMotionValue(axis).animation) === null || _a9 === void 0 ? void 0 : _a9.pause();
    });
  }
  getAnimationState(axis) {
    var _a9;
    return (_a9 = this.getAxisMotionValue(axis).animation) === null || _a9 === void 0 ? void 0 : _a9.state;
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(axis) {
    const dragKey = "_drag" + axis.toUpperCase();
    const props = this.visualElement.getProps();
    const externalMotionValue = props[dragKey];
    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
  }
  snapToCursor(point) {
    eachAxis((axis) => {
      const { drag: drag3 } = this.getProps();
      if (!shouldDrag(axis, drag3, this.currentDirection))
        return;
      const { projection } = this.visualElement;
      const axisValue = this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        const { min: min3, max: max3 } = projection.layout.layoutBox[axis];
        axisValue.set(point[axis] - mixNumber(min3, max3, 0.5));
      }
    });
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    const { drag: drag3, dragConstraints } = this.getProps();
    const { projection } = this.visualElement;
    if (!isRefObject2(dragConstraints) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    const boxProgress = { x: 0, y: 0 };
    eachAxis((axis) => {
      const axisValue = this.getAxisMotionValue(axis);
      if (axisValue) {
        const latest = axisValue.get();
        boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, this.constraints[axis]);
      }
    });
    const { transformTemplate: transformTemplate2 } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
    projection.root && projection.root.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis((axis) => {
      if (!shouldDrag(axis, drag3, null))
        return;
      const axisValue = this.getAxisMotionValue(axis);
      const { min: min3, max: max3 } = this.constraints[axis];
      axisValue.set(mixNumber(min3, max3, boxProgress[axis]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    elementDragControls.set(this.visualElement, this);
    const element = this.visualElement.current;
    const stopPointerListener = addPointerEvent2(element, "pointerdown", (event) => {
      const { drag: drag3, dragListener = true } = this.getProps();
      drag3 && dragListener && this.start(event);
    });
    const measureDragConstraints = () => {
      const { dragConstraints } = this.getProps();
      if (isRefObject2(dragConstraints)) {
        this.constraints = this.resolveRefConstraints();
      }
    };
    const { projection } = this.visualElement;
    const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    if (projection && !projection.layout) {
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
    }
    measureDragConstraints();
    const stopResizeListener = addDomEvent2(window, "resize", () => this.scalePositionWithinConstraints());
    const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta: delta2, hasLayoutChanged }) => {
      if (this.isDragging && hasLayoutChanged) {
        eachAxis((axis) => {
          const motionValue3 = this.getAxisMotionValue(axis);
          if (!motionValue3)
            return;
          this.originPoint[axis] += delta2[axis].translate;
          motionValue3.set(motionValue3.get() + delta2[axis].translate);
        });
        this.visualElement.render();
      }
    });
    return () => {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
      stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    const props = this.visualElement.getProps();
    const { drag: drag3 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;
    return {
      ...props,
      drag: drag3,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum
    };
  }
};
function shouldDrag(direction2, drag3, currentDirection) {
  return (drag3 === true || drag3 === direction2) && (currentDirection === null || currentDirection === direction2);
}
function getCurrentDirection(offset3, lockThreshold = 10) {
  let direction2 = null;
  if (Math.abs(offset3.y) > lockThreshold) {
    direction2 = "y";
  } else if (Math.abs(offset3.x) > lockThreshold) {
    direction2 = "x";
  }
  return direction2;
}

// node_modules/framer-motion/dist/es/gestures/drag/index.mjs
var DragGesture = class extends Feature {
  constructor(node3) {
    super(node3);
    this.removeGroupControls = noop3;
    this.removeListeners = noop3;
    this.controls = new VisualElementDragControls(node3);
  }
  mount() {
    const { dragControls } = this.node.getProps();
    if (dragControls) {
      this.removeGroupControls = dragControls.subscribe(this.controls);
    }
    this.removeListeners = this.controls.addListeners() || noop3;
  }
  unmount() {
    this.removeGroupControls();
    this.removeListeners();
  }
};

// node_modules/framer-motion/dist/es/gestures/pan/index.mjs
var asyncHandler = (handler) => (event, info) => {
  if (handler) {
    frame2.update(() => handler(event, info));
  }
};
var PanGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.removePointerDownListener = noop3;
  }
  onPointerDown(pointerDownEvent) {
    this.session = new PanSession2(pointerDownEvent, this.createPanHandlers(), {
      transformPagePoint: this.node.getTransformPagePoint(),
      contextWindow: getContextWindow(this.node)
    });
  }
  createPanHandlers() {
    const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart),
      onStart: asyncHandler(onPanStart),
      onMove: onPan,
      onEnd: (event, info) => {
        delete this.session;
        if (onPanEnd) {
          frame2.update(() => onPanEnd(event, info));
        }
      }
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent2(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener();
    this.session && this.session.end();
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var import_react42 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
var import_react41 = __toESM(require_react(), 1);
function usePresence() {
  const context2 = (0, import_react41.useContext)(PresenceContext);
  if (context2 === null)
    return [true, null];
  const { isPresent: isPresent3, onExitComplete, register } = context2;
  const id3 = (0, import_react41.useId)();
  (0, import_react41.useEffect)(() => register(id3), []);
  const safeToRemove = () => onExitComplete && onExitComplete(id3);
  return !isPresent3 && onExitComplete ? [false, safeToRemove] : [true];
}
function useIsPresent() {
  return isPresent((0, import_react41.useContext)(PresenceContext));
}
function isPresent(context2) {
  return context2 === null ? true : context2.isPresent;
}

// node_modules/framer-motion/dist/es/projection/node/state.mjs
var globalProjectionState = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: true,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: false
};

// node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min)
    return 0;
  return pixels / (axis.max - axis.min) * 100;
}
var correctBorderRadius = {
  correct: (latest, node3) => {
    if (!node3.target)
      return latest;
    if (typeof latest === "string") {
      if (px3.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    const x = pixelsToPercent(latest, node3.target.x);
    const y = pixelsToPercent(latest, node3.target.y);
    return `${x}% ${y}%`;
  }
};

// node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
var correctBoxShadow = {
  correct: (latest, { treeScale, projectionDelta }) => {
    const original = latest;
    const shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    const template = complex.createTransformer(latest);
    const offset3 = typeof shadow[0] !== "number" ? 1 : 0;
    const xScale = projectionDelta.x.scale * treeScale.x;
    const yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset3] /= xScale;
    shadow[1 + offset3] /= yScale;
    const averageScale = mixNumber(xScale, yScale, 0.5);
    if (typeof shadow[2 + offset3] === "number")
      shadow[2 + offset3] /= averageScale;
    if (typeof shadow[3 + offset3] === "number")
      shadow[3 + offset3] /= averageScale;
    return template(shadow);
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var MeasureLayoutWithContext = class extends import_react42.default.Component {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    const { visualElement: visualElement2, layoutGroup, switchLayoutGroup, layoutId } = this.props;
    const { projection } = visualElement2;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup.group)
        layoutGroup.group.add(projection);
      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
        switchLayoutGroup.register(projection);
      }
      projection.root.didUpdate();
      projection.addEventListener("animationComplete", () => {
        this.safeToRemove();
      });
      projection.setOptions({
        ...projection.options,
        onExitComplete: () => this.safeToRemove()
      });
    }
    globalProjectionState.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(prevProps) {
    const { layoutDependency, visualElement: visualElement2, drag: drag3, isPresent: isPresent3 } = this.props;
    const projection = visualElement2.projection;
    if (!projection)
      return null;
    projection.isPresent = isPresent3;
    if (drag3 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent3) {
      if (isPresent3) {
        projection.promote();
      } else if (!projection.relegate()) {
        frame2.postRender(() => {
          const stack = projection.getStack();
          if (!stack || !stack.members.length) {
            this.safeToRemove();
          }
        });
      }
    }
    return null;
  }
  componentDidUpdate() {
    const { projection } = this.props.visualElement;
    if (projection) {
      projection.root.didUpdate();
      microtask.postRender(() => {
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      });
    }
  }
  componentWillUnmount() {
    const { visualElement: visualElement2, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
    const { projection } = visualElement2;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup && layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext && promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  }
  safeToRemove() {
    const { safeToRemove } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
};
function MeasureLayout(props) {
  const [isPresent3, safeToRemove] = usePresence();
  const layoutGroup = (0, import_react42.useContext)(LayoutGroupContext);
  return import_react42.default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup, switchLayoutGroup: (0, import_react42.useContext)(SwitchLayoutGroupContext), isPresent: isPresent3, safeToRemove });
}
var defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};

// node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
var borders2 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var numBorders = borders2.length;
var asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
var isPx = (value) => typeof value === "number" || px3.test(value);
function mixValues(target, follow, lead, progress4, shouldCrossfadeOpacity, isOnlyMember) {
  if (shouldCrossfadeOpacity) {
    target.opacity = mixNumber(
      0,
      // TODO Reinstate this if only child
      lead.opacity !== void 0 ? lead.opacity : 1,
      easeCrossfadeIn(progress4)
    );
    target.opacityExit = mixNumber(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress4));
  } else if (isOnlyMember) {
    target.opacity = mixNumber(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress4);
  }
  for (let i2 = 0; i2 < numBorders; i2++) {
    const borderLabel = `border${borders2[i2]}Radius`;
    let followRadius = getRadius(follow, borderLabel);
    let leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress4), 0);
      if (percent.test(leadRadius) || percent.test(followRadius)) {
        target[borderLabel] += "%";
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress4);
  }
}
function getRadius(values2, radiusName) {
  return values2[radiusName] !== void 0 ? values2[radiusName] : values2.borderRadius;
}
var easeCrossfadeIn = compress(0, 0.5, circOut);
var easeCrossfadeOut = compress(0.5, 0.95, noop3);
function compress(min3, max3, easing) {
  return (p) => {
    if (p < min3)
      return 0;
    if (p > max3)
      return 1;
    return easing(progress(min3, max3, p));
  };
}

// node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x);
  copyAxisInto(box.y, originBox.y);
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
function removePointDelta(point, translate, scale4, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale4, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate = 0, scale4 = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
  if (percent.test(translate)) {
    translate = parseFloat(translate);
    const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== "number")
    return;
  let originPoint = mixNumber(originAxis.min, originAxis.max, origin);
  if (axis === originAxis)
    originPoint -= translate;
  axis.min = removePointDelta(axis.min, translate, scale4, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale4, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms2, [key2, scaleKey, originKey], origin, sourceAxis) {
  removeAxisDelta(axis, transforms2[key2], transforms2[scaleKey], transforms2[originKey], transforms2.scale, origin, sourceAxis);
}
var xKeys2 = ["x", "scaleX", "originX"];
var yKeys2 = ["y", "scaleY", "originY"];
function removeBoxTransforms(box, transforms2, originBox, sourceBox) {
  removeAxisTransforms(box.x, transforms2, xKeys2, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
  removeAxisTransforms(box.y, transforms2, yKeys2, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
}

// node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
function isAxisDeltaZero(delta2) {
  return delta2.translate === 0 && delta2.scale === 1;
}
function isDeltaZero(delta2) {
  return isAxisDeltaZero(delta2.x) && isAxisDeltaZero(delta2.y);
}
function boxEquals(a2, b2) {
  return a2.x.min === b2.x.min && a2.x.max === b2.x.max && a2.y.min === b2.y.min && a2.y.max === b2.y.max;
}
function boxEqualsRounded(a2, b2) {
  return Math.round(a2.x.min) === Math.round(b2.x.min) && Math.round(a2.x.max) === Math.round(b2.x.max) && Math.round(a2.y.min) === Math.round(b2.y.min) && Math.round(a2.y.max) === Math.round(b2.y.max);
}
function aspectRatio(box) {
  return calcLength(box.x) / calcLength(box.y);
}

// node_modules/framer-motion/dist/es/projection/shared/stack.mjs
var NodeStack = class {
  constructor() {
    this.members = [];
  }
  add(node3) {
    addUniqueItem(this.members, node3);
    node3.scheduleRender();
  }
  remove(node3) {
    removeItem2(this.members, node3);
    if (node3 === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node3 === this.lead) {
      const prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  }
  relegate(node3) {
    const indexOfNode = this.members.findIndex((member) => node3 === member);
    if (indexOfNode === 0)
      return false;
    let prevLead;
    for (let i2 = indexOfNode; i2 >= 0; i2--) {
      const member = this.members[i2];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  }
  promote(node3, preserveFollowOpacity) {
    const prevLead = this.lead;
    if (node3 === prevLead)
      return;
    this.prevLead = prevLead;
    this.lead = node3;
    node3.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node3.scheduleRender();
      node3.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node3.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node3.snapshot = prevLead.snapshot;
        node3.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
      }
      if (node3.root && node3.root.isUpdating) {
        node3.isLayoutDirty = true;
      }
      const { crossfade } = node3.options;
      if (crossfade === false) {
        prevLead.hide();
      }
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node3) => {
      const { options: options2, resumingFrom } = node3;
      options2.onExitComplete && options2.onExitComplete();
      if (resumingFrom) {
        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
      }
    });
  }
  scheduleRender() {
    this.members.forEach((node3) => {
      node3.instance && node3.scheduleRender(false);
    });
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  }
};

// node_modules/framer-motion/dist/es/projection/styles/transform.mjs
function buildProjectionTransform(delta2, treeScale, latestTransform) {
  let transform4 = "";
  const xTranslate = delta2.x.translate / treeScale.x;
  const yTranslate = delta2.y.translate / treeScale.y;
  if (xTranslate || yTranslate) {
    transform4 = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;
  }
  if (treeScale.x !== 1 || treeScale.y !== 1) {
    transform4 += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
  }
  if (latestTransform) {
    const { rotate: rotate2, rotateX, rotateY } = latestTransform;
    if (rotate2)
      transform4 += `rotate(${rotate2}deg) `;
    if (rotateX)
      transform4 += `rotateX(${rotateX}deg) `;
    if (rotateY)
      transform4 += `rotateY(${rotateY}deg) `;
  }
  const elementScaleX = delta2.x.scale * treeScale.x;
  const elementScaleY = delta2.y.scale * treeScale.y;
  if (elementScaleX !== 1 || elementScaleY !== 1) {
    transform4 += `scale(${elementScaleX}, ${elementScaleY})`;
  }
  return transform4 || "none";
}

// node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
var compareByDepth = (a2, b2) => a2.depth - b2.depth;

// node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
var FlatTree = class {
  constructor() {
    this.children = [];
    this.isDirty = false;
  }
  add(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  }
  remove(child) {
    removeItem2(this.children, child);
    this.isDirty = true;
  }
  forEach(callback) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback);
  }
};

// node_modules/framer-motion/dist/es/utils/delay.mjs
function delay(callback, timeout) {
  const start2 = time.now();
  const checkElapsed = ({ timestamp }) => {
    const elapsed = timestamp - start2;
    if (elapsed >= timeout) {
      cancelFrame(checkElapsed);
      callback(elapsed - timeout);
    }
  };
  frame2.read(checkElapsed, true);
  return () => cancelFrame(checkElapsed);
}

// node_modules/framer-motion/dist/es/debug/record.mjs
function record(data) {
  if (window.MotionDebug) {
    window.MotionDebug.record(data);
  }
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs
function isSVGElement(element) {
  return element instanceof SVGElement && element.tagName !== "svg";
}

// node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs
function animateSingleValue(value, keyframes6, options2) {
  const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
  motionValue$1.start(animateMotionValue("", motionValue$1, keyframes6, options2));
  return motionValue$1.animation;
}

// node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
var transformAxes = ["", "X", "Y", "Z"];
var hiddenVisibility = { visibility: "hidden" };
var animationTarget = 1e3;
var id2 = 0;
var projectionFrameData = {
  type: "projectionFrame",
  totalNodes: 0,
  resolvedTargetDeltas: 0,
  recalculatedProjection: 0
};
function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
  return class ProjectionNode {
    constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
      this.id = id2++;
      this.animationId = 0;
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.isProjectionDirty = false;
      this.isSharedProjectionDirty = false;
      this.isTransformDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.treeScale = { x: 1, y: 1 };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.hasTreeAnimated = false;
      this.updateScheduled = false;
      this.projectionUpdateScheduled = false;
      this.checkUpdateFailed = () => {
        if (this.isUpdating) {
          this.isUpdating = false;
          this.clearAllSnapshots();
        }
      };
      this.updateProjection = () => {
        this.projectionUpdateScheduled = false;
        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;
        this.nodes.forEach(propagateDirtyNodes);
        this.nodes.forEach(resolveTargetDelta);
        this.nodes.forEach(calcProjection);
        this.nodes.forEach(cleanDirtyNodes);
        record(projectionFrameData);
      };
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? [...parent.path, parent] : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      for (let i2 = 0; i2 < this.path.length; i2++) {
        this.path[i2].shouldResetTransform = true;
      }
      if (this.root === this)
        this.nodes = new FlatTree();
    }
    addEventListener(name, handler) {
      if (!this.eventHandlers.has(name)) {
        this.eventHandlers.set(name, new SubscriptionManager());
      }
      return this.eventHandlers.get(name).add(handler);
    }
    notifyListeners(name, ...args) {
      const subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager && subscriptionManager.notify(...args);
    }
    hasListeners(name) {
      return this.eventHandlers.has(name);
    }
    /**
     * Lifecycles
     */
    mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
      if (this.instance)
        return;
      this.isSVG = isSVGElement(instance);
      this.instance = instance;
      const { layoutId, layout: layout3, visualElement: visualElement2 } = this.options;
      if (visualElement2 && !visualElement2.current) {
        visualElement2.mount(instance);
      }
      this.root.nodes.add(this);
      this.parent && this.parent.children.add(this);
      if (isLayoutDirty && (layout3 || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        let cancelDelay;
        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
        attachResizeListener(instance, () => {
          this.root.updateBlockedByResize = true;
          cancelDelay && cancelDelay();
          cancelDelay = delay(resizeUnblockUpdate, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this);
      }
      if (this.options.animate !== false && visualElement2 && (layoutId || layout3)) {
        this.addEventListener("didUpdate", ({ delta: delta2, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
          if (this.isTreeAnimationBlocked()) {
            this.target = void 0;
            this.relativeTarget = void 0;
            return;
          }
          const layoutTransition = this.options.transition || visualElement2.getDefaultTransition() || defaultLayoutTransition;
          const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement2.getProps();
          const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;
          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
            if (this.resumeFrom) {
              this.resumingFrom = this.resumeFrom;
              this.resumingFrom.resumingFrom = void 0;
            }
            this.setAnimationOrigin(delta2, hasOnlyRelativeTargetChanged);
            const animationOptions = {
              ...getValueTransition(layoutTransition, "layout"),
              onPlay: onLayoutAnimationStart,
              onComplete: onLayoutAnimationComplete
            };
            if (visualElement2.shouldReduceMotion || this.options.layoutRoot) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            this.startAnimation(animationOptions);
          } else {
            if (!hasLayoutChanged) {
              finishAnimation(this);
            }
            if (this.isLead() && this.options.onExitComplete) {
              this.options.onExitComplete();
            }
          }
          this.targetLayout = newLayout;
        });
      }
    }
    unmount() {
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      const stack = this.getStack();
      stack && stack.remove(this);
      this.parent && this.parent.children.delete(this);
      this.instance = void 0;
      cancelFrame(this.updateProjection);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    // Note: currently only running on root node
    startUpdate() {
      if (this.isUpdateBlocked())
        return;
      this.isUpdating = true;
      this.nodes && this.nodes.forEach(resetRotation);
      this.animationId++;
    }
    getTransformTemplate() {
      const { visualElement: visualElement2 } = this.options;
      return visualElement2 && visualElement2.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = true) {
      this.root.hasTreeAnimated = true;
      if (this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (let i2 = 0; i2 < this.path.length; i2++) {
        const node3 = this.path[i2];
        node3.shouldResetTransform = true;
        node3.updateScroll("snapshot");
        if (node3.options.layoutRoot) {
          node3.willUpdate(false);
        }
      }
      const { layoutId, layout: layout3 } = this.options;
      if (layoutId === void 0 && !layout3)
        return;
      const transformTemplate2 = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, "") : void 0;
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    }
    update() {
      this.updateScheduled = false;
      const updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      if (!this.isUpdating) {
        this.nodes.forEach(clearIsLayoutDirty);
      }
      this.isUpdating = false;
      this.nodes.forEach(resetTransformStyle);
      this.nodes.forEach(updateLayout);
      this.nodes.forEach(notifyLayoutUpdate);
      this.clearAllSnapshots();
      const now3 = time.now();
      frameData.delta = clamp(0, 1e3 / 60, now3 - frameData.timestamp);
      frameData.timestamp = now3;
      frameData.isProcessing = true;
      steps2.update.process(frameData);
      steps2.preRender.process(frameData);
      steps2.render.process(frameData);
      frameData.isProcessing = false;
    }
    didUpdate() {
      if (!this.updateScheduled) {
        this.updateScheduled = true;
        microtask.read(() => this.update());
      }
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    }
    scheduleUpdateProjection() {
      if (!this.projectionUpdateScheduled) {
        this.projectionUpdateScheduled = true;
        frame2.preRender(this.updateProjection, false, true);
      }
    }
    scheduleCheckAfterUnmount() {
      frame2.postRender(() => {
        if (this.isLayoutDirty) {
          this.root.didUpdate();
        } else {
          this.root.checkUpdateFailed();
        }
      });
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      if (this.snapshot || !this.instance)
        return;
      this.snapshot = this.measure();
    }
    updateLayout() {
      if (!this.instance)
        return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (let i2 = 0; i2 < this.path.length; i2++) {
          const node3 = this.path[i2];
          node3.updateScroll();
        }
      }
      const prevLayout = this.layout;
      this.layout = this.measure(false);
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement: visualElement2 } = this.options;
      visualElement2 && visualElement2.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
    }
    updateScroll(phase = "measure") {
      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
        needsMeasurement = false;
      }
      if (needsMeasurement) {
        this.scroll = {
          animationId: this.root.animationId,
          phase,
          isRoot: checkIsScrollRoot(this.instance),
          offset: measureScroll(this.instance)
        };
      }
    }
    resetTransform() {
      if (!resetTransform)
        return;
      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
      const transformTemplate2 = this.getTransformTemplate();
      const transformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, "") : void 0;
      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    }
    measure(removeTransform = true) {
      const pageBox = this.measurePageBox();
      let layoutBox = this.removeElementScroll(pageBox);
      if (removeTransform) {
        layoutBox = this.removeTransform(layoutBox);
      }
      roundBox(layoutBox);
      return {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id
      };
    }
    measurePageBox() {
      const { visualElement: visualElement2 } = this.options;
      if (!visualElement2)
        return createBox();
      const box = visualElement2.measureViewportBox();
      const { scroll: scroll3 } = this.root;
      if (scroll3) {
        translateAxis(box.x, scroll3.offset.x);
        translateAxis(box.y, scroll3.offset.y);
      }
      return box;
    }
    removeElementScroll(box) {
      const boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      for (let i2 = 0; i2 < this.path.length; i2++) {
        const node3 = this.path[i2];
        const { scroll: scroll3, options: options2 } = node3;
        if (node3 !== this.root && scroll3 && options2.layoutScroll) {
          if (scroll3.isRoot) {
            copyBoxInto(boxWithoutScroll, box);
            const { scroll: rootScroll } = this.root;
            if (rootScroll) {
              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);
              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);
            }
          }
          translateAxis(boxWithoutScroll.x, scroll3.offset.x);
          translateAxis(boxWithoutScroll.y, scroll3.offset.y);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = false) {
      const withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (let i2 = 0; i2 < this.path.length; i2++) {
        const node3 = this.path[i2];
        if (!transformOnly && node3.options.layoutScroll && node3.scroll && node3 !== node3.root) {
          transformBox(withTransforms, {
            x: -node3.scroll.offset.x,
            y: -node3.scroll.offset.y
          });
        }
        if (!hasTransform(node3.latestValues))
          continue;
        transformBox(withTransforms, node3.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    }
    removeTransform(box) {
      const boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (let i2 = 0; i2 < this.path.length; i2++) {
        const node3 = this.path[i2];
        if (!node3.instance)
          continue;
        if (!hasTransform(node3.latestValues))
          continue;
        hasScale(node3.latestValues) && node3.updateSnapshot();
        const sourceBox = createBox();
        const nodeBox = node3.measurePageBox();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(boxWithoutTransform, node3.latestValues, node3.snapshot ? node3.snapshot.layoutBox : void 0, sourceBox);
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    }
    setTargetDelta(delta2) {
      this.targetDelta = delta2;
      this.root.scheduleUpdateProjection();
      this.isProjectionDirty = true;
    }
    setOptions(options2) {
      this.options = {
        ...this.options,
        ...options2,
        crossfade: options2.crossfade !== void 0 ? options2.crossfade : true
      };
    }
    clearMeasurements() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      if (!this.relativeParent)
        return;
      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
        this.relativeParent.resolveTargetDelta(true);
      }
    }
    resolveTargetDelta(forceRecalculation = false) {
      var _a9;
      const lead = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a9 = this.parent) === null || _a9 === void 0 ? void 0 : _a9.isProjectionDirty) || this.attemptToResolveRelativeTarget);
      if (canSkip)
        return;
      const { layout: layout3, layoutId } = this.options;
      if (!this.layout || !(layout3 || layoutId))
        return;
      this.resolvedRelativeTargetAt = frameData.timestamp;
      if (!this.targetDelta && !this.relativeTarget) {
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (!this.relativeTarget && !this.targetDelta)
        return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
        this.forceRelativeParentToResolveTarget();
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          this.target = this.applyTransform(this.layout.layoutBox);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        copyBoxInto(this.target, this.layout.layoutBox);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      projectionFrameData.resolvedTargetDeltas++;
    }
    getClosestProjectingParent() {
      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {
        return void 0;
      }
      if (this.parent.isProjecting()) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var _a9;
      const lead = this.getLead();
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      let canSkip = true;
      if (this.isProjectionDirty || ((_a9 = this.parent) === null || _a9 === void 0 ? void 0 : _a9.isProjectionDirty)) {
        canSkip = false;
      }
      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
        canSkip = false;
      }
      if (this.resolvedRelativeTargetAt === frameData.timestamp) {
        canSkip = false;
      }
      if (canSkip)
        return;
      const { layout: layout3, layoutId } = this.options;
      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout3 || layoutId))
        return;
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
      const prevTreeScaleX = this.treeScale.x;
      const prevTreeScaleY = this.treeScale.y;
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
        lead.target = lead.layout.layoutBox;
        lead.targetWithTransforms = createBox();
      }
      const { target } = lead;
      if (!target) {
        if (this.projectionTransform) {
          this.projectionDelta = createDelta();
          this.projectionTransform = "none";
          this.scheduleRender();
        }
        return;
      }
      if (!this.projectionDelta) {
        this.projectionDelta = createDelta();
        this.projectionDeltaWithTransform = createDelta();
      }
      const prevProjectionTransform = this.projectionTransform;
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target);
      }
      projectionFrameData.recalculatedProjection++;
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(notifyAll = true) {
      this.options.scheduleRender && this.options.scheduleRender();
      if (notifyAll) {
        const stack = this.getStack();
        stack && stack.scheduleRender();
      }
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    }
    setAnimationOrigin(delta2, hasOnlyRelativeTargetChanged = false) {
      const snapshot = this.snapshot;
      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
      const mixedValues = { ...this.latestValues };
      const targetDelta = createDelta();
      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
        this.relativeTarget = this.relativeTargetOrigin = void 0;
      }
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      const relativeLayout = createBox();
      const snapshotSource = snapshot ? snapshot.source : void 0;
      const layoutSource = this.layout ? this.layout.source : void 0;
      const isSharedLayoutAnimation = snapshotSource !== layoutSource;
      const stack = this.getStack();
      const isOnlyMember = !stack || stack.members.length <= 1;
      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        const progress4 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta2.x, progress4);
        mixAxisDelta(targetDelta.y, delta2.y, progress4);
        this.setTargetDelta(targetDelta);
        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress4);
          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
            this.isProjectionDirty = false;
          }
          if (!prevRelativeTarget)
            prevRelativeTarget = createBox();
          copyBoxInto(prevRelativeTarget, this.relativeTarget);
        }
        if (isSharedLayoutAnimation) {
          this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress4, shouldCrossfadeOpacity, isOnlyMember);
        }
        this.root.scheduleUpdateProjection();
        this.scheduleRender();
        this.animationProgress = progress4;
      };
      this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(options2) {
      this.notifyListeners("animationStart");
      this.currentAnimation && this.currentAnimation.stop();
      if (this.resumingFrom && this.resumingFrom.currentAnimation) {
        this.resumingFrom.currentAnimation.stop();
      }
      if (this.pendingAnimation) {
        cancelFrame(this.pendingAnimation);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = frame2.update(() => {
        globalProjectionState.hasAnimatedSinceResize = true;
        this.currentAnimation = animateSingleValue(0, animationTarget, {
          ...options2,
          onUpdate: (latest) => {
            this.mixTargetDelta(latest);
            options2.onUpdate && options2.onUpdate(latest);
          },
          onComplete: () => {
            options2.onComplete && options2.onComplete();
            this.completeAnimation();
          }
        });
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = this.currentAnimation;
        }
        this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      const stack = this.getStack();
      stack && stack.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      if (this.currentAnimation) {
        this.mixTargetDelta && this.mixTargetDelta(animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    }
    applyTransformsToTarget() {
      const lead = this.getLead();
      let { targetWithTransforms, target, layout: layout3, latestValues } = lead;
      if (!targetWithTransforms || !target || !layout3)
        return;
      if (this !== lead && this.layout && layout3 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout3.layoutBox)) {
        target = this.target || createBox();
        const xLength = calcLength(this.layout.layoutBox.x);
        target.x.min = lead.target.x.min;
        target.x.max = target.x.min + xLength;
        const yLength = calcLength(this.layout.layoutBox.y);
        target.y.min = lead.target.y.min;
        target.y.max = target.y.min + yLength;
      }
      copyBoxInto(targetWithTransforms, target);
      transformBox(targetWithTransforms, latestValues);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
    }
    registerSharedNode(layoutId, node3) {
      if (!this.sharedNodes.has(layoutId)) {
        this.sharedNodes.set(layoutId, new NodeStack());
      }
      const stack = this.sharedNodes.get(layoutId);
      stack.add(node3);
      const config2 = node3.options.initialPromotionConfig;
      node3.promote({
        transition: config2 ? config2.transition : void 0,
        preserveFollowOpacity: config2 && config2.shouldPreserveFollowOpacity ? config2.shouldPreserveFollowOpacity(node3) : void 0
      });
    }
    isLead() {
      const stack = this.getStack();
      return stack ? stack.lead === this : true;
    }
    getLead() {
      var _a9;
      const { layoutId } = this.options;
      return layoutId ? ((_a9 = this.getStack()) === null || _a9 === void 0 ? void 0 : _a9.lead) || this : this;
    }
    getPrevLead() {
      var _a9;
      const { layoutId } = this.options;
      return layoutId ? (_a9 = this.getStack()) === null || _a9 === void 0 ? void 0 : _a9.prevLead : void 0;
    }
    getStack() {
      const { layoutId } = this.options;
      if (layoutId)
        return this.root.sharedNodes.get(layoutId);
    }
    promote({ needsReset, transition: transition3, preserveFollowOpacity } = {}) {
      const stack = this.getStack();
      if (stack)
        stack.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition3)
        this.setOptions({ transition: transition3 });
    }
    relegate() {
      const stack = this.getStack();
      if (stack) {
        return stack.relegate(this);
      } else {
        return false;
      }
    }
    resetRotation() {
      const { visualElement: visualElement2 } = this.options;
      if (!visualElement2)
        return;
      let hasRotate = false;
      const { latestValues } = visualElement2;
      if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {
        hasRotate = true;
      }
      if (!hasRotate)
        return;
      const resetValues = {};
      for (let i2 = 0; i2 < transformAxes.length; i2++) {
        const key2 = "rotate" + transformAxes[i2];
        if (latestValues[key2]) {
          resetValues[key2] = latestValues[key2];
          visualElement2.setStaticValue(key2, 0);
        }
      }
      visualElement2.render();
      for (const key2 in resetValues) {
        visualElement2.setStaticValue(key2, resetValues[key2]);
      }
      visualElement2.scheduleRender();
    }
    getProjectionStyles(styleProp) {
      var _a9, _b5;
      if (!this.instance || this.isSVG)
        return void 0;
      if (!this.isVisible) {
        return hiddenVisibility;
      }
      const styles2 = {
        visibility: ""
      };
      const transformTemplate2 = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = false;
        styles2.opacity = "";
        styles2.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        styles2.transform = transformTemplate2 ? transformTemplate2(this.latestValues, "") : "none";
        return styles2;
      }
      const lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        const emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          emptyStyles.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      const valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles2.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
      if (transformTemplate2) {
        styles2.transform = transformTemplate2(valuesToRender, styles2.transform);
      }
      const { x, y } = this.projectionDelta;
      styles2.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
      if (lead.animationValues) {
        styles2.opacity = lead === this ? (_b5 = (_a9 = valuesToRender.opacity) !== null && _a9 !== void 0 ? _a9 : this.latestValues.opacity) !== null && _b5 !== void 0 ? _b5 : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
      } else {
        styles2.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
      }
      for (const key2 in scaleCorrectors) {
        if (valuesToRender[key2] === void 0)
          continue;
        const { correct, applyTo } = scaleCorrectors[key2];
        const corrected = styles2.transform === "none" ? valuesToRender[key2] : correct(valuesToRender[key2], lead);
        if (applyTo) {
          const num = applyTo.length;
          for (let i2 = 0; i2 < num; i2++) {
            styles2[applyTo[i2]] = corrected;
          }
        } else {
          styles2[key2] = corrected;
        }
      }
      if (this.options.layoutId) {
        styles2.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "" : "none";
      }
      return styles2;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((node3) => {
        var _a9;
        return (_a9 = node3.currentAnimation) === null || _a9 === void 0 ? void 0 : _a9.stop();
      });
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node3) {
  node3.updateLayout();
}
function notifyLayoutUpdate(node3) {
  var _a9;
  const snapshot = ((_a9 = node3.resumeFrom) === null || _a9 === void 0 ? void 0 : _a9.snapshot) || node3.snapshot;
  if (node3.isLead() && node3.layout && snapshot && node3.hasListeners("didUpdate")) {
    const { layoutBox: layout3, measuredBox: measuredLayout } = node3.layout;
    const { animationType } = node3.options;
    const isShared = snapshot.source !== node3.layout.source;
    if (animationType === "size") {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length3 = calcLength(axisSnapshot);
        axisSnapshot.min = layout3[axis].min;
        axisSnapshot.max = axisSnapshot.min + length3;
      });
    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout3)) {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length3 = calcLength(layout3[axis]);
        axisSnapshot.max = axisSnapshot.min + length3;
        if (node3.relativeTarget && !node3.currentAnimation) {
          node3.isProjectionDirty = true;
          node3.relativeTarget[axis].max = node3.relativeTarget[axis].min + length3;
        }
      });
    }
    const layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout3, snapshot.layoutBox);
    const visualDelta = createDelta();
    if (isShared) {
      calcBoxDelta(visualDelta, node3.applyTransform(measuredLayout, true), snapshot.measuredBox);
    } else {
      calcBoxDelta(visualDelta, layout3, snapshot.layoutBox);
    }
    const hasLayoutChanged = !isDeltaZero(layoutDelta);
    let hasRelativeTargetChanged = false;
    if (!node3.resumeFrom) {
      const relativeParent = node3.getClosestProjectingParent();
      if (relativeParent && !relativeParent.resumeFrom) {
        const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
        if (parentSnapshot && parentLayout) {
          const relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
          const relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout3, parentLayout.layoutBox);
          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
            hasRelativeTargetChanged = true;
          }
          if (relativeParent.options.layoutRoot) {
            node3.relativeTarget = relativeLayout;
            node3.relativeTargetOrigin = relativeSnapshot;
            node3.relativeParent = relativeParent;
          }
        }
      }
    }
    node3.notifyListeners("didUpdate", {
      layout: layout3,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node3.isLead()) {
    const { onExitComplete } = node3.options;
    onExitComplete && onExitComplete();
  }
  node3.options.transition = void 0;
}
function propagateDirtyNodes(node3) {
  projectionFrameData.totalNodes++;
  if (!node3.parent)
    return;
  if (!node3.isProjecting()) {
    node3.isProjectionDirty = node3.parent.isProjectionDirty;
  }
  node3.isSharedProjectionDirty || (node3.isSharedProjectionDirty = Boolean(node3.isProjectionDirty || node3.parent.isProjectionDirty || node3.parent.isSharedProjectionDirty));
  node3.isTransformDirty || (node3.isTransformDirty = node3.parent.isTransformDirty);
}
function cleanDirtyNodes(node3) {
  node3.isProjectionDirty = node3.isSharedProjectionDirty = node3.isTransformDirty = false;
}
function clearSnapshot(node3) {
  node3.clearSnapshot();
}
function clearMeasurements(node3) {
  node3.clearMeasurements();
}
function clearIsLayoutDirty(node3) {
  node3.isLayoutDirty = false;
}
function resetTransformStyle(node3) {
  const { visualElement: visualElement2 } = node3.options;
  if (visualElement2 && visualElement2.getProps().onBeforeLayoutMeasure) {
    visualElement2.notify("BeforeLayoutMeasure");
  }
  node3.resetTransform();
}
function finishAnimation(node3) {
  node3.finishAnimation();
  node3.targetDelta = node3.relativeTarget = node3.target = void 0;
  node3.isProjectionDirty = true;
}
function resolveTargetDelta(node3) {
  node3.resolveTargetDelta();
}
function calcProjection(node3) {
  node3.calcProjection();
}
function resetRotation(node3) {
  node3.resetRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta2, p) {
  output.translate = mixNumber(delta2.translate, 0, p);
  output.scale = mixNumber(delta2.scale, 1, p);
  output.origin = delta2.origin;
  output.originPoint = delta2.originPoint;
}
function mixAxis(output, from2, to, p) {
  output.min = mixNumber(from2.min, to.min, p);
  output.max = mixNumber(from2.max, to.max, p);
}
function mixBox(output, from2, to, p) {
  mixAxis(output.x, from2.x, to.x, p);
  mixAxis(output.y, from2.y, to.y, p);
}
function hasOpacityCrossfade(node3) {
  return node3.animationValues && node3.animationValues.opacityExit !== void 0;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
var userAgentContains = (string2) => typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string2);
var roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : noop3;
function roundAxis(axis) {
  axis.min = roundPoint(axis.min);
  axis.max = roundPoint(axis.max);
}
function roundBox(box) {
  roundAxis(box.x);
  roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout3) {
  return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout3), 0.2);
}

// node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
var DocumentProjectionNode = createProjectionNode({
  attachResizeListener: (ref, notify) => addDomEvent2(ref, "resize", notify),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop
  }),
  checkIsScrollRoot: () => true
});

// node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
var rootProjectionNode = {
  current: void 0
};
var HTMLProjectionNode = createProjectionNode({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      const documentNode = new DocumentProjectionNode({});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value) => {
    instance.style.transform = value !== void 0 ? value : "none";
  },
  checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
});

// node_modules/framer-motion/dist/es/motion/features/drag.mjs
var drag = {
  pan: {
    Feature: PanGesture
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
var splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
  const match4 = splitCSSVariableRegex.exec(current);
  if (!match4)
    return [,];
  const [, token2, fallback] = match4;
  return [token2, fallback];
}
var maxDepth = 4;
function getVariableValue(current, element, depth = 1) {
  invariant2(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
  const [token2, fallback] = parseCSSVariable(current);
  if (!token2)
    return;
  const resolved = window.getComputedStyle(element).getPropertyValue(token2);
  if (resolved) {
    const trimmed = resolved.trim();
    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
  } else if (isCSSVariableToken(fallback)) {
    return getVariableValue(fallback, element, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables(visualElement2, { ...target }, transitionEnd) {
  const element = visualElement2.current;
  if (!(element instanceof Element))
    return { target, transitionEnd };
  if (transitionEnd) {
    transitionEnd = { ...transitionEnd };
  }
  visualElement2.values.forEach((value) => {
    const current = value.get();
    if (!isCSSVariableToken(current))
      return;
    const resolved = getVariableValue(current, element);
    if (resolved)
      value.set(resolved);
  });
  for (const key2 in target) {
    const current = target[key2];
    if (!isCSSVariableToken(current))
      continue;
    const resolved = getVariableValue(current, element);
    if (!resolved)
      continue;
    target[key2] = resolved;
    if (!transitionEnd)
      transitionEnd = {};
    if (transitionEnd[key2] === void 0) {
      transitionEnd[key2] = current;
    }
  }
  return { target, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
var positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y",
  "translateX",
  "translateY"
]);
var isPositionalKey = (key2) => positionalKeys.has(key2);
var hasPositionalKey = (target) => {
  return Object.keys(target).some(isPositionalKey);
};
var isNumOrPxType = (v) => v === number || v === px3;
var getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
var getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform: transform4 }) => {
  if (transform4 === "none" || !transform4)
    return 0;
  const matrix3d = transform4.match(/^matrix3d\((.+)\)$/);
  if (matrix3d) {
    return getPosFromMatrix(matrix3d[1], pos3);
  } else {
    const matrix = transform4.match(/^matrix\((.+)\)$/);
    if (matrix) {
      return getPosFromMatrix(matrix[1], pos2);
    } else {
      return 0;
    }
  }
};
var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
var nonTranslationalTransformKeys = transformPropOrder.filter((key2) => !transformKeys.has(key2));
function removeNonTranslationalTransform(visualElement2) {
  const removedTransforms = [];
  nonTranslationalTransformKeys.forEach((key2) => {
    const value = visualElement2.getValue(key2);
    if (value !== void 0) {
      removedTransforms.push([key2, value.get()]);
      value.set(key2.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement2.render();
  return removedTransforms;
}
var positionalValues = {
  // Dimensions
  width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
  height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
  top: (_bbox, { top: top2 }) => parseFloat(top2),
  left: (_bbox, { left: left2 }) => parseFloat(left2),
  bottom: ({ y }, { top: top2 }) => parseFloat(top2) + (y.max - y.min),
  right: ({ x }, { left: left2 }) => parseFloat(left2) + (x.max - x.min),
  // Transform
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;
var convertChangedValueTypes = (target, visualElement2, changedKeys) => {
  const originBbox = visualElement2.measureViewportBox();
  const element = visualElement2.current;
  const elementComputedStyle = getComputedStyle(element);
  const { display } = elementComputedStyle;
  const origin = {};
  if (display === "none") {
    visualElement2.setStaticValue("display", target.display || "block");
  }
  changedKeys.forEach((key2) => {
    origin[key2] = positionalValues[key2](originBbox, elementComputedStyle);
  });
  visualElement2.render();
  const targetBbox = visualElement2.measureViewportBox();
  changedKeys.forEach((key2) => {
    const value = visualElement2.getValue(key2);
    value && value.jump(origin[key2]);
    target[key2] = positionalValues[key2](targetBbox, elementComputedStyle);
  });
  return target;
};
var checkAndConvertChangedValueTypes = (visualElement2, target, origin = {}, transitionEnd = {}) => {
  target = { ...target };
  transitionEnd = { ...transitionEnd };
  const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
  let removedTransformValues = [];
  let hasAttemptedToRemoveTransformValues = false;
  const changedValueTypeKeys = [];
  targetPositionalKeys.forEach((key2) => {
    const value = visualElement2.getValue(key2);
    if (!visualElement2.hasValue(key2))
      return;
    let from2 = origin[key2];
    let fromType = findDimensionValueType(from2);
    const to = target[key2];
    let toType;
    if (isKeyframesTarget(to)) {
      const numKeyframes = to.length;
      const fromIndex = to[0] === null ? 1 : 0;
      from2 = to[fromIndex];
      fromType = findDimensionValueType(from2);
      for (let i2 = fromIndex; i2 < numKeyframes; i2++) {
        if (to[i2] === null)
          break;
        if (!toType) {
          toType = findDimensionValueType(to[i2]);
          invariant2(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
        } else {
          invariant2(findDimensionValueType(to[i2]) === toType, "All keyframes must be of the same type");
        }
      }
    } else {
      toType = findDimensionValueType(to);
    }
    if (fromType !== toType) {
      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
        const current = value.get();
        if (typeof current === "string") {
          value.set(parseFloat(current));
        }
        if (typeof to === "string") {
          target[key2] = parseFloat(to);
        } else if (Array.isArray(to) && toType === px3) {
          target[key2] = to.map(parseFloat);
        }
      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from2 === 0 || to === 0)) {
        if (from2 === 0) {
          value.set(toType.transform(from2));
        } else {
          target[key2] = fromType.transform(to);
        }
      } else {
        if (!hasAttemptedToRemoveTransformValues) {
          removedTransformValues = removeNonTranslationalTransform(visualElement2);
          hasAttemptedToRemoveTransformValues = true;
        }
        changedValueTypeKeys.push(key2);
        transitionEnd[key2] = transitionEnd[key2] !== void 0 ? transitionEnd[key2] : target[key2];
        value.jump(to);
      }
    }
  });
  if (changedValueTypeKeys.length) {
    const scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
    const convertedTarget = convertChangedValueTypes(target, visualElement2, changedValueTypeKeys);
    if (removedTransformValues.length) {
      removedTransformValues.forEach(([key2, value]) => {
        visualElement2.getValue(key2).set(value);
      });
    }
    visualElement2.render();
    if (isBrowser4 && scrollY !== null) {
      window.scrollTo({ top: scrollY });
    }
    return { target: convertedTarget, transitionEnd };
  } else {
    return { target, transitionEnd };
  }
};
function unitConversion(visualElement2, target, origin, transitionEnd) {
  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement2, target, origin, transitionEnd) : { target, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
var parseDomVariant = (visualElement2, target, origin, transitionEnd) => {
  const resolved = resolveCSSVariables(visualElement2, target, transitionEnd);
  target = resolved.target;
  transitionEnd = resolved.transitionEnd;
  return unitConversion(visualElement2, target, origin, transitionEnd);
};

// node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
var prefersReducedMotion = { current: null };
var hasReducedMotionListener = { current: false };

// node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
function initPrefersReducedMotion() {
  hasReducedMotionListener.current = true;
  if (!isBrowser4)
    return;
  if (window.matchMedia) {
    const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
    motionMediaQuery.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}

// node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
function updateMotionValuesFromProps(element, next2, prev2) {
  const { willChange } = next2;
  for (const key2 in next2) {
    const nextValue = next2[key2];
    const prevValue = prev2[key2];
    if (isMotionValue(nextValue)) {
      element.addValue(key2, nextValue);
      if (isWillChangeMotionValue(willChange)) {
        willChange.add(key2);
      }
      if (true) {
        warnOnce(nextValue.version === "11.0.6", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.0.6 may not work as expected.`);
      }
    } else if (isMotionValue(prevValue)) {
      element.addValue(key2, motionValue(nextValue, { owner: element }));
      if (isWillChangeMotionValue(willChange)) {
        willChange.remove(key2);
      }
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key2)) {
        const existingValue = element.getValue(key2);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        const latestValue = element.getStaticValue(key2);
        element.addValue(key2, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
      }
    }
  }
  for (const key2 in prev2) {
    if (next2[key2] === void 0)
      element.removeValue(key2);
  }
  return next2;
}

// node_modules/framer-motion/dist/es/render/store.mjs
var visualElementStore = /* @__PURE__ */ new WeakMap();

// node_modules/framer-motion/dist/es/render/VisualElement.mjs
var featureNames = Object.keys(featureDefinitions);
var numFeatures = featureNames.length;
var propEventHandlers = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
];
var numVariantProps = variantProps.length;
var VisualElement = class {
  constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options2 = {}) {
    this.current = null;
    this.children = /* @__PURE__ */ new Set();
    this.isVariantNode = false;
    this.isControllingVariants = false;
    this.shouldReduceMotion = null;
    this.values = /* @__PURE__ */ new Map();
    this.features = {};
    this.valueSubscriptions = /* @__PURE__ */ new Map();
    this.prevMotionValues = {};
    this.events = {};
    this.propEventSubscriptions = {};
    this.notifyUpdate = () => this.notify("Update", this.latestValues);
    this.render = () => {
      if (!this.current)
        return;
      this.triggerBuild();
      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
    };
    this.scheduleRender = () => frame2.render(this.render, false, true);
    const { latestValues, renderState } = visualState;
    this.latestValues = latestValues;
    this.baseTarget = { ...latestValues };
    this.initialValues = props.initial ? { ...latestValues } : {};
    this.renderState = renderState;
    this.parent = parent;
    this.props = props;
    this.presenceContext = presenceContext;
    this.depth = parent ? parent.depth + 1 : 0;
    this.reducedMotionConfig = reducedMotionConfig;
    this.options = options2;
    this.isControllingVariants = isControllingVariants(props);
    this.isVariantNode = isVariantNode(props);
    if (this.isVariantNode) {
      this.variantChildren = /* @__PURE__ */ new Set();
    }
    this.manuallyAnimateOnMount = Boolean(parent && parent.current);
    const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});
    for (const key2 in initialMotionValues) {
      const value = initialMotionValues[key2];
      if (latestValues[key2] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key2], false);
        if (isWillChangeMotionValue(willChange)) {
          willChange.add(key2);
        }
      }
    }
  }
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(_props, _prevProps) {
    return {};
  }
  mount(instance) {
    this.current = instance;
    visualElementStore.set(instance, this);
    if (this.projection && !this.projection.instance) {
      this.projection.mount(instance);
    }
    if (this.parent && this.isVariantNode && !this.isControllingVariants) {
      this.removeFromVariantTree = this.parent.addVariantChild(this);
    }
    this.values.forEach((value, key2) => this.bindToMotionValue(key2, value));
    if (!hasReducedMotionListener.current) {
      initPrefersReducedMotion();
    }
    this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
    if (true) {
      warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
    }
    if (this.parent)
      this.parent.children.add(this);
    this.update(this.props, this.presenceContext);
  }
  unmount() {
    visualElementStore.delete(this.current);
    this.projection && this.projection.unmount();
    cancelFrame(this.notifyUpdate);
    cancelFrame(this.render);
    this.valueSubscriptions.forEach((remove2) => remove2());
    this.removeFromVariantTree && this.removeFromVariantTree();
    this.parent && this.parent.children.delete(this);
    for (const key2 in this.events) {
      this.events[key2].clear();
    }
    for (const key2 in this.features) {
      this.features[key2].unmount();
    }
    this.current = null;
  }
  bindToMotionValue(key2, value) {
    const valueIsTransform = transformProps.has(key2);
    const removeOnChange = value.on("change", (latestValue) => {
      this.latestValues[key2] = latestValue;
      this.props.onUpdate && frame2.update(this.notifyUpdate, false, true);
      if (valueIsTransform && this.projection) {
        this.projection.isTransformDirty = true;
      }
    });
    const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(key2, () => {
      removeOnChange();
      removeOnRenderRequest();
    });
  }
  sortNodePosition(other) {
    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
      return 0;
    }
    return this.sortInstanceNodePosition(this.current, other.current);
  }
  loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures2, initialLayoutGroupConfig) {
    let ProjectionNodeConstructor;
    let MeasureLayout2;
    if (preloadedFeatures2 && isStrict) {
      const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
      renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant2(false, strictMessage);
    }
    for (let i2 = 0; i2 < numFeatures; i2++) {
      const name = featureNames[i2];
      const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
      if (ProjectionNode)
        ProjectionNodeConstructor = ProjectionNode;
      if (isEnabled(renderedProps)) {
        if (!this.features[name] && FeatureConstructor) {
          this.features[name] = new FeatureConstructor(this);
        }
        if (MeasureLayoutComponent) {
          MeasureLayout2 = MeasureLayoutComponent;
        }
      }
    }
    if ((this.type === "html" || this.type === "svg") && !this.projection && ProjectionNodeConstructor) {
      this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);
      const { layoutId, layout: layout3, drag: drag3, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
      this.projection.setOptions({
        layoutId,
        layout: layout3,
        alwaysMeasureLayout: Boolean(drag3) || dragConstraints && isRefObject2(dragConstraints),
        visualElement: this,
        scheduleRender: () => this.scheduleRender(),
        /**
         * TODO: Update options in an effect. This could be tricky as it'll be too late
         * to update by the time layout animations run.
         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
         * ensuring it gets called if there's no potential layout animations.
         *
         */
        animationType: typeof layout3 === "string" ? layout3 : "both",
        initialPromotionConfig: initialLayoutGroupConfig,
        layoutScroll,
        layoutRoot
      });
    }
    return MeasureLayout2;
  }
  updateFeatures() {
    for (const key2 in this.features) {
      const feature = this.features[key2];
      if (feature.isMounted) {
        feature.update();
      } else {
        feature.mount();
        feature.isMounted = true;
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
  }
  getStaticValue(key2) {
    return this.latestValues[key2];
  }
  setStaticValue(key2, value) {
    this.latestValues[key2] = value;
  }
  /**
   * Make a target animatable by Popmotion. For instance, if we're
   * trying to animate width from 100px to 100vw we need to measure 100vw
   * in pixels to determine what we really need to animate to. This is also
   * pluggable to support Framer's custom value types like Color,
   * and CSS variables.
   */
  makeTargetAnimatable(target, canMutate = true) {
    return this.makeTargetAnimatableFromInstance(target, canMutate);
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(props, presenceContext) {
    if (props.transformTemplate || this.props.transformTemplate) {
      this.scheduleRender();
    }
    this.prevProps = this.props;
    this.props = props;
    this.prevPresenceContext = this.presenceContext;
    this.presenceContext = presenceContext;
    for (let i2 = 0; i2 < propEventHandlers.length; i2++) {
      const key2 = propEventHandlers[i2];
      if (this.propEventSubscriptions[key2]) {
        this.propEventSubscriptions[key2]();
        delete this.propEventSubscriptions[key2];
      }
      const listener = props["on" + key2];
      if (listener) {
        this.propEventSubscriptions[key2] = this.on(key2, listener);
      }
    }
    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
    if (this.handleChildMotionValue) {
      this.handleChildMotionValue();
    }
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(name) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(startAtParent = false) {
    if (startAtParent) {
      return this.parent ? this.parent.getVariantContext() : void 0;
    }
    if (!this.isControllingVariants) {
      const context3 = this.parent ? this.parent.getVariantContext() || {} : {};
      if (this.props.initial !== void 0) {
        context3.initial = this.props.initial;
      }
      return context3;
    }
    const context2 = {};
    for (let i2 = 0; i2 < numVariantProps; i2++) {
      const name = variantProps[i2];
      const prop2 = this.props[name];
      if (isVariantLabel(prop2) || prop2 === false) {
        context2[name] = prop2;
      }
    }
    return context2;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(child) {
    const closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode) {
      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
      return () => closestVariantNode.variantChildren.delete(child);
    }
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(key2, value) {
    if (value !== this.values.get(key2)) {
      this.removeValue(key2);
      this.bindToMotionValue(key2, value);
    }
    this.values.set(key2, value);
    this.latestValues[key2] = value.get();
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(key2) {
    this.values.delete(key2);
    const unsubscribe = this.valueSubscriptions.get(key2);
    if (unsubscribe) {
      unsubscribe();
      this.valueSubscriptions.delete(key2);
    }
    delete this.latestValues[key2];
    this.removeValueFromRenderState(key2, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(key2) {
    return this.values.has(key2);
  }
  getValue(key2, defaultValue2) {
    if (this.props.values && this.props.values[key2]) {
      return this.props.values[key2];
    }
    let value = this.values.get(key2);
    if (value === void 0 && defaultValue2 !== void 0) {
      value = motionValue(defaultValue2, { owner: this });
      this.addValue(key2, value);
    }
    return value;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(key2) {
    var _a9;
    return this.latestValues[key2] !== void 0 || !this.current ? this.latestValues[key2] : (_a9 = this.getBaseTargetFromProps(this.props, key2)) !== null && _a9 !== void 0 ? _a9 : this.readValueFromInstance(this.current, key2, this.options);
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(key2, value) {
    this.baseTarget[key2] = value;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(key2) {
    var _a9;
    const { initial } = this.props;
    const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_a9 = resolveVariantFromProps(this.props, initial)) === null || _a9 === void 0 ? void 0 : _a9[key2] : void 0;
    if (initial && valueFromInitial !== void 0) {
      return valueFromInitial;
    }
    const target = this.getBaseTargetFromProps(this.props, key2);
    if (target !== void 0 && !isMotionValue(target))
      return target;
    return this.initialValues[key2] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key2];
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    return this.events[eventName].add(callback);
  }
  notify(eventName, ...args) {
    if (this.events[eventName]) {
      this.events[eventName].notify(...args);
    }
  }
};

// node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
var DOMVisualElement = class extends VisualElement {
  sortInstanceNodePosition(a2, b2) {
    return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props, key2) {
    return props.style ? props.style[key2] : void 0;
  }
  removeValueFromRenderState(key2, { vars: vars2, style }) {
    delete vars2[key2];
    delete style[key2];
  }
  makeTargetAnimatableFromInstance({ transition: transition3, transitionEnd, ...target }, isMounted) {
    const origin = getOrigin(target, transition3 || {}, this);
    if (isMounted) {
      checkTargetForNewValues(this, target, origin);
      const parsed = parseDomVariant(this, target, origin, transitionEnd);
      transitionEnd = parsed.transitionEnd;
      target = parsed.target;
    }
    return {
      transition: transition3,
      transitionEnd,
      ...target
    };
  }
};

// node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
function getComputedStyle2(element) {
  return window.getComputedStyle(element);
}
var HTMLVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "html";
  }
  readValueFromInstance(instance, key2) {
    if (transformProps.has(key2)) {
      const defaultType = getDefaultValueType(key2);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      const computedStyle = getComputedStyle2(instance);
      const value = (isCSSVariableName(key2) ? computedStyle.getPropertyValue(key2) : computedStyle[key2]) || 0;
      return typeof value === "string" ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, { transformPagePoint }) {
    return measureViewportBox(instance, transformPagePoint);
  }
  build(renderState, latestValues, options2, props) {
    buildHTMLStyles(renderState, latestValues, options2, props.transformTemplate);
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps(props, prevProps);
  }
  handleChildMotionValue() {
    if (this.childSubscription) {
      this.childSubscription();
      delete this.childSubscription;
    }
    const { children } = this.props;
    if (isMotionValue(children)) {
      this.childSubscription = children.on("change", (latest) => {
        if (this.current)
          this.current.textContent = `${latest}`;
      });
    }
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderHTML(instance, renderState, styleProp, projection);
  }
};

// node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
var SVGVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "svg";
    this.isSVGTag = false;
  }
  getBaseTargetFromProps(props, key2) {
    return props[key2];
  }
  readValueFromInstance(instance, key2) {
    if (transformProps.has(key2)) {
      const defaultType = getDefaultValueType(key2);
      return defaultType ? defaultType.default || 0 : 0;
    }
    key2 = !camelCaseAttributes.has(key2) ? camelToDash(key2) : key2;
    return instance.getAttribute(key2);
  }
  measureInstanceViewportBox() {
    return createBox();
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps2(props, prevProps);
  }
  build(renderState, latestValues, options2, props) {
    buildSVGAttrs(renderState, latestValues, options2, this.isSVGTag, props.transformTemplate);
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderSVG(instance, renderState, styleProp, projection);
  }
  mount(instance) {
    this.isSVGTag = isSVGTag(instance.tagName);
    super.mount(instance);
  }
};

// node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
var createDomVisualElement = (Component7, options2) => {
  return isSVGComponent(Component7) ? new SVGVisualElement(options2, { enableHardwareAcceleration: false }) : new HTMLVisualElement(options2, { enableHardwareAcceleration: true });
};

// node_modules/framer-motion/dist/es/motion/features/layout.mjs
var layout2 = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// node_modules/framer-motion/dist/es/render/dom/motion.mjs
var preloadedFeatures = {
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout2
};
var motion = createMotionProxy((Component7, config2) => createDomMotionConfig(Component7, config2, preloadedFeatures, createDomVisualElement));

// node_modules/framer-motion/dist/es/render/dom/motion-minimal.mjs
var m = createMotionProxy(createDomMotionConfig);

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var React9 = __toESM(require_react(), 1);
var import_react48 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
var import_react44 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
var import_react43 = __toESM(require_react(), 1);
function useIsMounted() {
  const isMounted = (0, import_react43.useRef)(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
function useForceUpdate() {
  const isMounted = useIsMounted();
  const [forcedRenderCount, setForcedRenderCount] = (0, import_react44.useState)(0);
  const forceRender = (0, import_react44.useCallback)(() => {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  const deferredForceRender = (0, import_react44.useCallback)(() => frame2.postRender(forceRender), [forceRender]);
  return [deferredForceRender, forcedRenderCount];
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var React8 = __toESM(require_react(), 1);
var import_react46 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs
var React7 = __toESM(require_react(), 1);
var import_react45 = __toESM(require_react(), 1);
var PopChildMeasure = class extends React7.Component {
  getSnapshotBeforeUpdate(prevProps) {
    const element = this.props.childRef.current;
    if (element && prevProps.isPresent && !this.props.isPresent) {
      const size4 = this.props.sizeRef.current;
      size4.height = element.offsetHeight || 0;
      size4.width = element.offsetWidth || 0;
      size4.top = element.offsetTop;
      size4.left = element.offsetLeft;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
};
function PopChild({ children, isPresent: isPresent3 }) {
  const id3 = (0, import_react45.useId)();
  const ref = (0, import_react45.useRef)(null);
  const size4 = (0, import_react45.useRef)({
    width: 0,
    height: 0,
    top: 0,
    left: 0
  });
  (0, import_react45.useInsertionEffect)(() => {
    const { width, height, top: top2, left: left2 } = size4.current;
    if (isPresent3 || !ref.current || !width || !height)
      return;
    ref.current.dataset.motionPopId = id3;
    const style = document.createElement("style");
    document.head.appendChild(style);
    if (style.sheet) {
      style.sheet.insertRule(`
          [data-motion-pop-id="${id3}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top2}px !important;
            left: ${left2}px !important;
          }
        `);
    }
    return () => {
      document.head.removeChild(style);
    };
  }, [isPresent3]);
  return React7.createElement(PopChildMeasure, { isPresent: isPresent3, childRef: ref, sizeRef: size4 }, React7.cloneElement(children, { ref }));
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var PresenceChild = ({ children, initial, isPresent: isPresent3, onExitComplete, custom, presenceAffectsLayout, mode: mode2 }) => {
  const presenceChildren = useConstant(newChildrenMap);
  const id3 = (0, import_react46.useId)();
  const context2 = (0, import_react46.useMemo)(
    () => ({
      id: id3,
      initial,
      isPresent: isPresent3,
      custom,
      onExitComplete: (childId) => {
        presenceChildren.set(childId, true);
        for (const isComplete of presenceChildren.values()) {
          if (!isComplete)
            return;
        }
        onExitComplete && onExitComplete();
      },
      register: (childId) => {
        presenceChildren.set(childId, false);
        return () => presenceChildren.delete(childId);
      }
    }),
    /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */
    presenceAffectsLayout ? void 0 : [isPresent3]
  );
  (0, import_react46.useMemo)(() => {
    presenceChildren.forEach((_, key2) => presenceChildren.set(key2, false));
  }, [isPresent3]);
  React8.useEffect(() => {
    !isPresent3 && !presenceChildren.size && onExitComplete && onExitComplete();
  }, [isPresent3]);
  if (mode2 === "popLayout") {
    children = React8.createElement(PopChild, { isPresent: isPresent3 }, children);
  }
  return React8.createElement(PresenceContext.Provider, { value: context2 }, children);
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}

// node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
var import_react47 = __toESM(require_react(), 1);
function useUnmountEffect(callback) {
  return (0, import_react47.useEffect)(() => () => callback(), []);
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var getChildKey = (child) => child.key || "";
function updateChildLookup(children, allChildren) {
  children.forEach((child) => {
    const key2 = getChildKey(child);
    allChildren.set(key2, child);
  });
}
function onlyElements(children) {
  const filtered = [];
  import_react48.Children.forEach(children, (child) => {
    if ((0, import_react48.isValidElement)(child))
      filtered.push(child);
  });
  return filtered;
}
var AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode: mode2 = "sync" }) => {
  invariant2(!exitBeforeEnter, "Replace exitBeforeEnter with mode='wait'");
  const forceRender = (0, import_react48.useContext)(LayoutGroupContext).forceRender || useForceUpdate()[0];
  const isMounted = useIsMounted();
  const filteredChildren = onlyElements(children);
  let childrenToRender = filteredChildren;
  const exitingChildren = (0, import_react48.useRef)(/* @__PURE__ */ new Map()).current;
  const presentChildren = (0, import_react48.useRef)(childrenToRender);
  const allChildren = (0, import_react48.useRef)(/* @__PURE__ */ new Map()).current;
  const isInitialRender = (0, import_react48.useRef)(true);
  useIsomorphicLayoutEffect(() => {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  useUnmountEffect(() => {
    isInitialRender.current = true;
    allChildren.clear();
    exitingChildren.clear();
  });
  if (isInitialRender.current) {
    return React9.createElement(React9.Fragment, null, childrenToRender.map((child) => React9.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout, mode: mode2 }, child)));
  }
  childrenToRender = [...childrenToRender];
  const presentKeys = presentChildren.current.map(getChildKey);
  const targetKeys = filteredChildren.map(getChildKey);
  const numPresent = presentKeys.length;
  for (let i2 = 0; i2 < numPresent; i2++) {
    const key2 = presentKeys[i2];
    if (targetKeys.indexOf(key2) === -1 && !exitingChildren.has(key2)) {
      exitingChildren.set(key2, void 0);
    }
  }
  if (mode2 === "wait" && exitingChildren.size) {
    childrenToRender = [];
  }
  exitingChildren.forEach((component, key2) => {
    if (targetKeys.indexOf(key2) !== -1)
      return;
    const child = allChildren.get(key2);
    if (!child)
      return;
    const insertionIndex = presentKeys.indexOf(key2);
    let exitingComponent = component;
    if (!exitingComponent) {
      const onExit = () => {
        exitingChildren.delete(key2);
        const leftOverKeys = Array.from(allChildren.keys()).filter((childKey) => !targetKeys.includes(childKey));
        leftOverKeys.forEach((leftOverKey) => allChildren.delete(leftOverKey));
        presentChildren.current = filteredChildren.filter((presentChild) => {
          const presentChildKey = getChildKey(presentChild);
          return (
            // filter out the node exiting
            presentChildKey === key2 || // filter out the leftover children
            leftOverKeys.includes(presentChildKey)
          );
        });
        if (!exitingChildren.size) {
          if (isMounted.current === false)
            return;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      exitingComponent = React9.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout, mode: mode2 }, child);
      exitingChildren.set(key2, exitingComponent);
    }
    childrenToRender.splice(insertionIndex, 0, exitingComponent);
  });
  childrenToRender = childrenToRender.map((child) => {
    const key2 = child.key;
    return exitingChildren.has(key2) ? child : React9.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout, mode: mode2 }, child);
  });
  if (mode2 === "wait" && childrenToRender.length > 1) {
    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
  }
  return React9.createElement(React9.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map((child) => (0, import_react48.cloneElement)(child)));
};

// node_modules/framer-motion/dist/es/components/MotionConfig/index.mjs
var React10 = __toESM(require_react(), 1);
var import_react49 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs
var React11 = __toESM(require_react(), 1);
var import_react50 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/LayoutGroup/index.mjs
var React12 = __toESM(require_react(), 1);
var import_react52 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/DeprecatedLayoutGroupContext.mjs
var import_react51 = __toESM(require_react(), 1);
var DeprecatedLayoutGroupContext = (0, import_react51.createContext)(null);

// node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
var React13 = __toESM(require_react(), 1);
var import_react54 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/ReorderContext.mjs
var import_react53 = __toESM(require_react(), 1);
var ReorderContext = (0, import_react53.createContext)(null);

// node_modules/framer-motion/dist/es/components/Reorder/utils/check-reorder.mjs
function checkReorder(order3, value, offset3, velocity) {
  if (!velocity)
    return order3;
  const index5 = order3.findIndex((item2) => item2.value === value);
  if (index5 === -1)
    return order3;
  const nextOffset = velocity > 0 ? 1 : -1;
  const nextItem = order3[index5 + nextOffset];
  if (!nextItem)
    return order3;
  const item = order3[index5];
  const nextLayout = nextItem.layout;
  const nextItemCenter = mixNumber(nextLayout.min, nextLayout.max, 0.5);
  if (nextOffset === 1 && item.layout.max + offset3 > nextItemCenter || nextOffset === -1 && item.layout.min + offset3 < nextItemCenter) {
    return moveItem(order3, index5, index5 + nextOffset);
  }
  return order3;
}

// node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
function ReorderGroup({ children, as = "ul", axis = "y", onReorder, values: values2, ...props }, externalRef) {
  const Component7 = useConstant(() => motion(as));
  const order3 = [];
  const isReordering = (0, import_react54.useRef)(false);
  invariant2(Boolean(values2), "Reorder.Group must be provided a values prop");
  const context2 = {
    axis,
    registerItem: (value, layout3) => {
      const idx = order3.findIndex((entry) => value === entry.value);
      if (idx !== -1) {
        order3[idx].layout = layout3[axis];
      } else {
        order3.push({ value, layout: layout3[axis] });
      }
      order3.sort(compareMin);
    },
    updateOrder: (item, offset3, velocity) => {
      if (isReordering.current)
        return;
      const newOrder = checkReorder(order3, item, offset3, velocity);
      if (order3 !== newOrder) {
        isReordering.current = true;
        onReorder(newOrder.map(getValue).filter((value) => values2.indexOf(value) !== -1));
      }
    }
  };
  (0, import_react54.useEffect)(() => {
    isReordering.current = false;
  });
  return React13.createElement(
    Component7,
    { ...props, ref: externalRef, ignoreStrict: true },
    React13.createElement(ReorderContext.Provider, { value: context2 }, children)
  );
}
var Group = (0, import_react54.forwardRef)(ReorderGroup);
function getValue(item) {
  return item.value;
}
function compareMin(a2, b2) {
  return a2.layout.min - b2.layout.min;
}

// node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
var React14 = __toESM(require_react(), 1);
var import_react56 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-motion-value.mjs
var import_react55 = __toESM(require_react(), 1);
function useMotionValue(initial) {
  const value = useConstant(() => motionValue(initial));
  const { isStatic } = (0, import_react55.useContext)(MotionConfigContext);
  if (isStatic) {
    const [, setLatest] = (0, import_react55.useState)(initial);
    (0, import_react55.useEffect)(() => value.on("change", setLatest), []);
  }
  return value;
}

// node_modules/framer-motion/dist/es/utils/transform.mjs
var isCustomValueType = (v) => {
  return v && typeof v === "object" && v.mix;
};
var getMixer2 = (v) => isCustomValueType(v) ? v.mix : void 0;
function transform2(...args) {
  const useImmediate = !Array.isArray(args[0]);
  const argOffset = useImmediate ? 0 : -1;
  const inputValue = args[0 + argOffset];
  const inputRange = args[1 + argOffset];
  const outputRange = args[2 + argOffset];
  const options2 = args[3 + argOffset];
  const interpolator = interpolate(inputRange, outputRange, {
    mixer: getMixer2(outputRange[0]),
    ...options2
  });
  return useImmediate ? interpolator(inputValue) : interpolator;
}

// node_modules/framer-motion/dist/es/value/use-combine-values.mjs
function useCombineMotionValues(values2, combineValues) {
  const value = useMotionValue(combineValues());
  const updateValue = () => value.set(combineValues());
  updateValue();
  useIsomorphicLayoutEffect(() => {
    const scheduleUpdate = () => frame2.update(updateValue, false, true);
    const subscriptions = values2.map((v) => v.on("change", scheduleUpdate));
    return () => {
      subscriptions.forEach((unsubscribe) => unsubscribe());
      cancelFrame(updateValue);
    };
  });
  return value;
}

// node_modules/framer-motion/dist/es/value/use-computed.mjs
function useComputed(compute) {
  collectMotionValues.current = [];
  compute();
  const value = useCombineMotionValues(collectMotionValues.current, compute);
  collectMotionValues.current = void 0;
  return value;
}

// node_modules/framer-motion/dist/es/value/use-transform.mjs
function useTransform(input, inputRangeOrTransformer, outputRange, options2) {
  if (typeof input === "function") {
    return useComputed(input);
  }
  const transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform2(inputRangeOrTransformer, outputRange, options2);
  return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], ([latest]) => transformer(latest));
}
function useListTransform(values2, transformer) {
  const latest = useConstant(() => []);
  return useCombineMotionValues(values2, () => {
    latest.length = 0;
    const numValues = values2.length;
    for (let i2 = 0; i2 < numValues; i2++) {
      latest[i2] = values2[i2].get();
    }
    return transformer(latest);
  });
}

// node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
function useDefaultMotionValue(value, defaultValue2 = 0) {
  return isMotionValue(value) ? value : useMotionValue(defaultValue2);
}
function ReorderItem({ children, style = {}, value, as = "li", onDrag, layout: layout3 = true, ...props }, externalRef) {
  const Component7 = useConstant(() => motion(as));
  const context2 = (0, import_react56.useContext)(ReorderContext);
  const point = {
    x: useDefaultMotionValue(style.x),
    y: useDefaultMotionValue(style.y)
  };
  const zIndex2 = useTransform([point.x, point.y], ([latestX, latestY]) => latestX || latestY ? 1 : "unset");
  invariant2(Boolean(context2), "Reorder.Item must be a child of Reorder.Group");
  const { axis, registerItem, updateOrder } = context2;
  return React14.createElement(Component7, { drag: axis, ...props, dragSnapToOrigin: true, style: { ...style, x: point.x, y: point.y, zIndex: zIndex2 }, layout: layout3, onDrag: (event, gesturePoint) => {
    const { velocity } = gesturePoint;
    velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);
    onDrag && onDrag(event, gesturePoint);
  }, onLayoutMeasure: (measured) => registerItem(value, measured), ref: externalRef, ignoreStrict: true }, children);
}
var Item = (0, import_react56.forwardRef)(ReorderItem);

// node_modules/framer-motion/dist/es/render/dom/features-animation.mjs
var domAnimation = {
  renderer: createDomVisualElement,
  ...animations,
  ...gestureAnimations
};

// node_modules/framer-motion/dist/es/render/dom/features-max.mjs
var domMax = {
  ...domAnimation,
  ...drag,
  ...layout2
};

// node_modules/framer-motion/dist/es/value/use-spring.mjs
var import_react57 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-motion-value-event.mjs
var import_react58 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-scroll.mjs
var import_react59 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs
function resolveElements(elements, scope, selectorCache) {
  var _a9;
  if (typeof elements === "string") {
    let root = document;
    if (scope) {
      invariant2(Boolean(scope.current), "Scope provided, but no element detected.");
      root = scope.current;
    }
    if (selectorCache) {
      (_a9 = selectorCache[elements]) !== null && _a9 !== void 0 ? _a9 : selectorCache[elements] = root.querySelectorAll(elements);
      elements = selectorCache[elements];
    } else {
      elements = root.querySelectorAll(elements);
    }
  } else if (elements instanceof Element) {
    elements = [elements];
  }
  return Array.from(elements || []);
}

// node_modules/framer-motion/dist/es/utils/use-animation-frame.mjs
var import_react60 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion.mjs
var import_react61 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion-config.mjs
var import_react62 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/dom/scroll/observe.mjs
function observeTimeline(update, timeline) {
  let prevProgress;
  const onFrame = () => {
    const { currentTime } = timeline;
    const percentage = currentTime === null ? 0 : currentTime.value;
    const progress4 = percentage / 100;
    if (prevProgress !== progress4) {
      update(progress4);
    }
    prevProgress = progress4;
  };
  frame2.update(onFrame, true);
  return () => cancelFrame(onFrame);
}

// node_modules/framer-motion/dist/es/render/dom/scroll/supports.mjs
var supportsScrollTimeline = memo(() => window.ScrollTimeline !== void 0);

// node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs
var GroupPlaybackControls = class {
  constructor(animations3) {
    this.animations = animations3.filter(Boolean);
  }
  then(onResolve, onReject) {
    return Promise.all(this.animations).then(onResolve).catch(onReject);
  }
  /**
   * TODO: Filter out cancelled or stopped animations before returning
   */
  getAll(propName) {
    return this.animations[0][propName];
  }
  setAll(propName, newValue) {
    for (let i2 = 0; i2 < this.animations.length; i2++) {
      this.animations[i2][propName] = newValue;
    }
  }
  attachTimeline(timeline) {
    const cancelAll = this.animations.map((animation) => {
      if (supportsScrollTimeline() && animation.attachTimeline) {
        animation.attachTimeline(timeline);
      } else {
        animation.pause();
        return observeTimeline((progress4) => {
          animation.time = animation.duration * progress4;
        }, timeline);
      }
    });
    return () => {
      cancelAll.forEach((cancelTimeline, i2) => {
        if (cancelTimeline)
          cancelTimeline();
        this.animations[i2].stop();
      });
    };
  }
  get time() {
    return this.getAll("time");
  }
  set time(time2) {
    this.setAll("time", time2);
  }
  get speed() {
    return this.getAll("speed");
  }
  set speed(speed) {
    this.setAll("speed", speed);
  }
  get duration() {
    let max3 = 0;
    for (let i2 = 0; i2 < this.animations.length; i2++) {
      max3 = Math.max(max3, this.animations[i2].duration);
    }
    return max3;
  }
  runAll(methodName) {
    this.animations.forEach((controls) => controls[methodName]());
  }
  play() {
    this.runAll("play");
  }
  pause() {
    this.runAll("pause");
  }
  stop() {
    this.runAll("stop");
  }
  cancel() {
    this.runAll("cancel");
  }
  complete() {
    this.runAll("complete");
  }
};

// node_modules/framer-motion/dist/es/animation/utils/is-dom-keyframes.mjs
function isDOMKeyframes(keyframes6) {
  return typeof keyframes6 === "object" && !Array.isArray(keyframes6);
}

// node_modules/framer-motion/dist/es/animation/utils/create-visual-element.mjs
function createVisualElement(element) {
  const options2 = {
    presenceContext: null,
    props: {},
    visualState: {
      renderState: {
        transform: {},
        transformOrigin: {},
        style: {},
        vars: {},
        attrs: {}
      },
      latestValues: {}
    }
  };
  const node3 = isSVGElement(element) ? new SVGVisualElement(options2, {
    enableHardwareAcceleration: false
  }) : new HTMLVisualElement(options2, {
    enableHardwareAcceleration: true
  });
  node3.mount(element);
  visualElementStore.set(element, node3);
}

// node_modules/framer-motion/dist/es/easing/utils/create-generator-easing.mjs
function createGeneratorEasing(options2, scale4 = 100) {
  const generator = spring({ keyframes: [0, scale4], ...options2 });
  const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
  return {
    type: "keyframes",
    ease: (progress4) => generator.next(duration * progress4).value / scale4,
    duration: millisecondsToSeconds(duration)
  };
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/calc-time.mjs
function calcNextTime(current, next2, prev2, labels) {
  var _a9;
  if (typeof next2 === "number") {
    return next2;
  } else if (next2.startsWith("-") || next2.startsWith("+")) {
    return Math.max(0, current + parseFloat(next2));
  } else if (next2 === "<") {
    return prev2;
  } else {
    return (_a9 = labels.get(next2)) !== null && _a9 !== void 0 ? _a9 : current;
  }
}

// node_modules/framer-motion/dist/es/utils/wrap.mjs
var wrap2 = (min3, max3, v) => {
  const rangeSize = max3 - min3;
  return ((v - min3) % rangeSize + rangeSize) % rangeSize + min3;
};

// node_modules/framer-motion/dist/es/easing/utils/get-easing-for-segment.mjs
function getEasingForSegment(easing, i2) {
  return isEasingArray(easing) ? easing[wrap2(0, easing.length, i2)] : easing;
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/edit.mjs
function eraseKeyframes(sequence, startTime, endTime) {
  for (let i2 = 0; i2 < sequence.length; i2++) {
    const keyframe = sequence[i2];
    if (keyframe.at > startTime && keyframe.at < endTime) {
      removeItem2(sequence, keyframe);
      i2--;
    }
  }
}
function addKeyframes(sequence, keyframes6, easing, offset3, startTime, endTime) {
  eraseKeyframes(sequence, startTime, endTime);
  for (let i2 = 0; i2 < keyframes6.length; i2++) {
    sequence.push({
      value: keyframes6[i2],
      at: mixNumber(startTime, endTime, offset3[i2]),
      easing: getEasingForSegment(easing, i2)
    });
  }
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/sort.mjs
function compareByTime(a2, b2) {
  if (a2.at === b2.at) {
    if (a2.value === null)
      return 1;
    if (b2.value === null)
      return -1;
    return 0;
  } else {
    return a2.at - b2.at;
  }
}

// node_modules/framer-motion/dist/es/animation/sequence/create.mjs
var defaultSegmentEasing = "easeInOut";
function createAnimationsFromSequence(sequence, { defaultTransition: defaultTransition4 = {}, ...sequenceTransition } = {}, scope) {
  const defaultDuration = defaultTransition4.duration || 0.3;
  const animationDefinitions = /* @__PURE__ */ new Map();
  const sequences = /* @__PURE__ */ new Map();
  const elementCache = {};
  const timeLabels = /* @__PURE__ */ new Map();
  let prevTime = 0;
  let currentTime = 0;
  let totalDuration = 0;
  for (let i2 = 0; i2 < sequence.length; i2++) {
    const segment = sequence[i2];
    if (typeof segment === "string") {
      timeLabels.set(segment, currentTime);
      continue;
    } else if (!Array.isArray(segment)) {
      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));
      continue;
    }
    let [subject, keyframes6, transition3 = {}] = segment;
    if (transition3.at !== void 0) {
      currentTime = calcNextTime(currentTime, transition3.at, prevTime, timeLabels);
    }
    let maxDuration4 = 0;
    const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {
      const valueKeyframesAsList = keyframesAsList(valueKeyframes);
      const { delay: delay2 = 0, times: times2 = defaultOffset(valueKeyframesAsList), type = "keyframes", ...remainingTransition } = valueTransition;
      let { ease: ease2 = defaultTransition4.ease || "easeOut", duration } = valueTransition;
      const calculatedDelay = typeof delay2 === "function" ? delay2(elementIndex, numElements) : delay2;
      const numKeyframes = valueKeyframesAsList.length;
      if (numKeyframes <= 2 && type === "spring") {
        let absoluteDelta = 100;
        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {
          const delta2 = valueKeyframesAsList[1] - valueKeyframesAsList[0];
          absoluteDelta = Math.abs(delta2);
        }
        const springTransition = { ...remainingTransition };
        if (duration !== void 0) {
          springTransition.duration = secondsToMilliseconds(duration);
        }
        const springEasing = createGeneratorEasing(springTransition, absoluteDelta);
        ease2 = springEasing.ease;
        duration = springEasing.duration;
      }
      duration !== null && duration !== void 0 ? duration : duration = defaultDuration;
      const startTime = currentTime + calculatedDelay;
      const targetTime = startTime + duration;
      if (times2.length === 1 && times2[0] === 0) {
        times2[1] = 1;
      }
      const remainder = times2.length - valueKeyframesAsList.length;
      remainder > 0 && fillOffset(times2, remainder);
      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);
      addKeyframes(valueSequence, valueKeyframesAsList, ease2, times2, startTime, targetTime);
      maxDuration4 = Math.max(calculatedDelay + duration, maxDuration4);
      totalDuration = Math.max(targetTime, totalDuration);
    };
    if (isMotionValue(subject)) {
      const subjectSequence = getSubjectSequence(subject, sequences);
      resolveValueSequence(keyframes6, transition3, getValueSequence("default", subjectSequence));
    } else {
      const elements = resolveElements(subject, scope, elementCache);
      const numElements = elements.length;
      for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {
        keyframes6 = keyframes6;
        transition3 = transition3;
        const element = elements[elementIndex];
        const subjectSequence = getSubjectSequence(element, sequences);
        for (const key2 in keyframes6) {
          resolveValueSequence(keyframes6[key2], getValueTransition2(transition3, key2), getValueSequence(key2, subjectSequence), elementIndex, numElements);
        }
      }
    }
    prevTime = currentTime;
    currentTime += maxDuration4;
  }
  sequences.forEach((valueSequences, element) => {
    for (const key2 in valueSequences) {
      const valueSequence = valueSequences[key2];
      valueSequence.sort(compareByTime);
      const keyframes6 = [];
      const valueOffset = [];
      const valueEasing = [];
      for (let i2 = 0; i2 < valueSequence.length; i2++) {
        const { at, value, easing } = valueSequence[i2];
        keyframes6.push(value);
        valueOffset.push(progress(0, totalDuration, at));
        valueEasing.push(easing || "easeOut");
      }
      if (valueOffset[0] !== 0) {
        valueOffset.unshift(0);
        keyframes6.unshift(keyframes6[0]);
        valueEasing.unshift(defaultSegmentEasing);
      }
      if (valueOffset[valueOffset.length - 1] !== 1) {
        valueOffset.push(1);
        keyframes6.push(null);
      }
      if (!animationDefinitions.has(element)) {
        animationDefinitions.set(element, {
          keyframes: {},
          transition: {}
        });
      }
      const definition = animationDefinitions.get(element);
      definition.keyframes[key2] = keyframes6;
      definition.transition[key2] = {
        ...defaultTransition4,
        duration: totalDuration,
        ease: valueEasing,
        times: valueOffset,
        ...sequenceTransition
      };
    }
  });
  return animationDefinitions;
}
function getSubjectSequence(subject, sequences) {
  !sequences.has(subject) && sequences.set(subject, {});
  return sequences.get(subject);
}
function getValueSequence(name, sequences) {
  if (!sequences[name])
    sequences[name] = [];
  return sequences[name];
}
function keyframesAsList(keyframes6) {
  return Array.isArray(keyframes6) ? keyframes6 : [keyframes6];
}
function getValueTransition2(transition3, key2) {
  return transition3[key2] ? { ...transition3, ...transition3[key2] } : { ...transition3 };
}
var isNumber2 = (keyframe) => typeof keyframe === "number";
var isNumberKeyframesArray = (keyframes6) => keyframes6.every(isNumber2);

// node_modules/framer-motion/dist/es/animation/animate.mjs
function animateElements(elementOrSelector, keyframes6, options2, scope) {
  const elements = resolveElements(elementOrSelector, scope);
  const numElements = elements.length;
  invariant2(Boolean(numElements), "No valid element provided.");
  const animations3 = [];
  for (let i2 = 0; i2 < numElements; i2++) {
    const element = elements[i2];
    if (!visualElementStore.has(element)) {
      createVisualElement(element);
    }
    const visualElement2 = visualElementStore.get(element);
    const transition3 = { ...options2 };
    if (typeof transition3.delay === "function") {
      transition3.delay = transition3.delay(i2, numElements);
    }
    animations3.push(...animateTarget(visualElement2, { ...keyframes6, transition: transition3 }, {}));
  }
  return new GroupPlaybackControls(animations3);
}
var isSequence = (value) => Array.isArray(value) && Array.isArray(value[0]);
function animateSequence(sequence, options2, scope) {
  const animations3 = [];
  const animationDefinitions = createAnimationsFromSequence(sequence, options2, scope);
  animationDefinitions.forEach(({ keyframes: keyframes6, transition: transition3 }, subject) => {
    let animation;
    if (isMotionValue(subject)) {
      animation = animateSingleValue(subject, keyframes6.default, transition3.default);
    } else {
      animation = animateElements(subject, keyframes6, transition3);
    }
    animations3.push(animation);
  });
  return new GroupPlaybackControls(animations3);
}
var createScopedAnimate = (scope) => {
  function scopedAnimate(valueOrElementOrSequence, keyframes6, options2) {
    let animation;
    if (isSequence(valueOrElementOrSequence)) {
      animation = animateSequence(valueOrElementOrSequence, keyframes6, scope);
    } else if (isDOMKeyframes(keyframes6)) {
      animation = animateElements(valueOrElementOrSequence, keyframes6, options2, scope);
    } else {
      animation = animateSingleValue(valueOrElementOrSequence, keyframes6, options2);
    }
    if (scope) {
      scope.animations.push(animation);
    }
    return animation;
  }
  return scopedAnimate;
};
var animate = createScopedAnimate();

// node_modules/framer-motion/dist/es/utils/use-cycle.mjs
var import_react63 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-in-view.mjs
var import_react64 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/events/use-dom-event.mjs
var import_react65 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-instant-transition.mjs
var import_react66 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/use-reset-projection.mjs
var React15 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/hooks/use-animated-state.mjs
var import_react67 = __toESM(require_react(), 1);
var createObject = () => ({});
var useVisualState = makeUseVisualState({
  scrapeMotionValuesFromProps: createObject,
  createRenderState: createObject
});

// node_modules/framer-motion/dist/es/value/use-inverted-scale.mjs
var import_react68 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout.mjs
var React16 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/frameloop/index-legacy.mjs
var cancelSync2 = stepsOrder2.reduce((acc, key2) => {
  acc[key2] = (process2) => cancelFrame(process2);
  return acc;
}, {});

// node_modules/@chakra-ui/toast/dist/chunk-VXESY33O.mjs
var import_react69 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var toastMotionVariants = {
  initial: (props) => {
    const { position: position3 } = props;
    const dir = ["top", "bottom"].includes(position3) ? "y" : "x";
    let factor = ["top-right", "bottom-right"].includes(position3) ? 1 : -1;
    if (position3 === "bottom")
      factor = 1;
    return {
      opacity: 0,
      [dir]: factor * 24
    };
  },
  animate: {
    opacity: 1,
    y: 0,
    x: 0,
    scale: 1,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.85,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 1, 1]
    }
  }
};
var ToastComponent = (0, import_react69.memo)((props) => {
  const {
    id: id3,
    message,
    onCloseComplete,
    onRequestRemove,
    requestClose = false,
    position: position3 = "bottom",
    duration = 5e3,
    containerStyle: containerStyle2,
    motionVariants: motionVariants2 = toastMotionVariants,
    toastSpacing = "0.5rem"
  } = props;
  const [delay2, setDelay] = (0, import_react69.useState)(duration);
  const isPresent3 = useIsPresent();
  useUpdateEffect(() => {
    if (!isPresent3) {
      onCloseComplete == null ? void 0 : onCloseComplete();
    }
  }, [isPresent3]);
  useUpdateEffect(() => {
    setDelay(duration);
  }, [duration]);
  const onMouseEnter = () => setDelay(null);
  const onMouseLeave = () => setDelay(duration);
  const close = () => {
    if (isPresent3)
      onRequestRemove();
  };
  (0, import_react69.useEffect)(() => {
    if (isPresent3 && requestClose) {
      onRequestRemove();
    }
  }, [isPresent3, requestClose, onRequestRemove]);
  useTimeout(close, delay2);
  const containerStyles = (0, import_react69.useMemo)(
    () => ({
      pointerEvents: "auto",
      maxWidth: 560,
      minWidth: 300,
      margin: toastSpacing,
      ...containerStyle2
    }),
    [containerStyle2, toastSpacing]
  );
  const toastStyle = (0, import_react69.useMemo)(() => getToastStyle(position3), [position3]);
  return (0, import_jsx_runtime9.jsx)(
    motion.div,
    {
      layout: true,
      className: "chakra-toast",
      variants: motionVariants2,
      initial: "initial",
      animate: "animate",
      exit: "exit",
      onHoverStart: onMouseEnter,
      onHoverEnd: onMouseLeave,
      custom: { position: position3 },
      style: toastStyle,
      children: (0, import_jsx_runtime9.jsx)(
        chakra.div,
        {
          role: "status",
          "aria-atomic": "true",
          className: "chakra-toast__inner",
          __css: containerStyles,
          children: runIfFn(message, { id: id3, onClose: close })
        }
      )
    }
  );
});
ToastComponent.displayName = "ToastComponent";

// node_modules/@chakra-ui/toast/dist/chunk-LHPMGMGT.mjs
function getToastPlacement(position3, dir) {
  var _a9;
  const computedPosition = position3 != null ? position3 : "bottom";
  const logicals2 = {
    "top-start": { ltr: "top-left", rtl: "top-right" },
    "top-end": { ltr: "top-right", rtl: "top-left" },
    "bottom-start": { ltr: "bottom-left", rtl: "bottom-right" },
    "bottom-end": { ltr: "bottom-right", rtl: "bottom-left" }
  };
  const logical2 = logicals2[computedPosition];
  return (_a9 = logical2 == null ? void 0 : logical2[dir]) != null ? _a9 : computedPosition;
}

// node_modules/@chakra-ui/icon/dist/chunk-2GBDXOMA.mjs
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var fallbackIcon = {
  path: (0, import_jsx_runtime10.jsxs)("g", { stroke: "currentColor", strokeWidth: "1.5", children: [
    (0, import_jsx_runtime10.jsx)(
      "path",
      {
        strokeLinecap: "round",
        fill: "none",
        d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
      }
    ),
    (0, import_jsx_runtime10.jsx)(
      "path",
      {
        fill: "currentColor",
        strokeLinecap: "round",
        d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
      }
    ),
    (0, import_jsx_runtime10.jsx)("circle", { fill: "none", strokeMiterlimit: "10", cx: "12", cy: "12", r: "11.25" })
  ] }),
  viewBox: "0 0 24 24"
};
var Icon = forwardRef3((props, ref) => {
  const {
    as: element,
    viewBox,
    color: color5 = "currentColor",
    focusable = false,
    children,
    className,
    __css,
    ...rest
  } = props;
  const _className = cx("chakra-icon", className);
  const customStyles = useStyleConfig("Icon", props);
  const styles2 = {
    w: "1em",
    h: "1em",
    display: "inline-block",
    lineHeight: "1em",
    flexShrink: 0,
    color: color5,
    ...__css,
    ...customStyles
  };
  const shared = {
    ref,
    focusable,
    className: _className,
    __css: styles2
  };
  const _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
  if (element && typeof element !== "string") {
    return (0, import_jsx_runtime10.jsx)(chakra.svg, { as: element, ...shared, ...rest });
  }
  const _path = children != null ? children : fallbackIcon.path;
  return (0, import_jsx_runtime10.jsx)(chakra.svg, { verticalAlign: "middle", viewBox: _viewBox, ...shared, ...rest, children: _path });
});
Icon.displayName = "Icon";

// node_modules/@chakra-ui/icon/dist/chunk-DEQZ7DVA.mjs
var import_react70 = __toESM(require_react(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/alert/dist/chunk-NEDBTDT2.mjs
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
function CheckIcon(props) {
  return (0, import_jsx_runtime12.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime12.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
    }
  ) });
}
function InfoIcon(props) {
  return (0, import_jsx_runtime12.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime12.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
    }
  ) });
}
function WarningIcon(props) {
  return (0, import_jsx_runtime12.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime12.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
    }
  ) });
}

// node_modules/@chakra-ui/spinner/dist/chunk-5PH6ULNP.mjs
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var spin = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var Spinner = forwardRef3((props, ref) => {
  const styles2 = useStyleConfig("Spinner", props);
  const {
    label = "Loading...",
    thickness = "2px",
    speed = "0.45s",
    emptyColor = "transparent",
    className,
    ...rest
  } = omitThemingProps(props);
  const _className = cx("chakra-spinner", className);
  const spinnerStyles = {
    display: "inline-block",
    borderColor: "currentColor",
    borderStyle: "solid",
    borderRadius: "99999px",
    borderWidth: thickness,
    borderBottomColor: emptyColor,
    borderLeftColor: emptyColor,
    animation: `${spin} ${speed} linear infinite`,
    ...styles2
  };
  return (0, import_jsx_runtime13.jsx)(
    chakra.div,
    {
      ref,
      __css: spinnerStyles,
      className: _className,
      ...rest,
      children: label && (0, import_jsx_runtime13.jsx)(chakra.span, { srOnly: true, children: label })
    }
  );
});
Spinner.displayName = "Spinner";

// node_modules/@chakra-ui/alert/dist/chunk-XCES3W5V.mjs
var [AlertProvider, useAlertContext] = createContext2({
  name: "AlertContext",
  hookName: "useAlertContext",
  providerName: "<Alert />"
});
var [AlertStylesProvider, useAlertStyles] = createContext2({
  name: `AlertStylesContext`,
  hookName: `useAlertStyles`,
  providerName: "<Alert />"
});
var STATUSES = {
  info: { icon: InfoIcon, colorScheme: "blue" },
  warning: { icon: WarningIcon, colorScheme: "orange" },
  success: { icon: CheckIcon, colorScheme: "green" },
  error: { icon: WarningIcon, colorScheme: "red" },
  loading: { icon: Spinner, colorScheme: "blue" }
};
function getStatusColorScheme(status) {
  return STATUSES[status].colorScheme;
}
function getStatusIcon(status) {
  return STATUSES[status].icon;
}

// node_modules/@chakra-ui/alert/dist/chunk-CUKBNH6U.mjs
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var AlertDescription = forwardRef3(
  function AlertDescription2(props, ref) {
    const styles2 = useAlertStyles();
    const { status } = useAlertContext();
    const descriptionStyles = {
      display: "inline",
      ...styles2.description
    };
    return (0, import_jsx_runtime14.jsx)(
      chakra.div,
      {
        ref,
        "data-status": status,
        ...props,
        className: cx("chakra-alert__desc", props.className),
        __css: descriptionStyles
      }
    );
  }
);
AlertDescription.displayName = "AlertDescription";

// node_modules/@chakra-ui/alert/dist/chunk-ALC6QPCI.mjs
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
function AlertIcon(props) {
  const { status } = useAlertContext();
  const BaseIcon = getStatusIcon(status);
  const styles2 = useAlertStyles();
  const css7 = status === "loading" ? styles2.spinner : styles2.icon;
  return (0, import_jsx_runtime15.jsx)(
    chakra.span,
    {
      display: "inherit",
      "data-status": status,
      ...props,
      className: cx("chakra-alert__icon", props.className),
      __css: css7,
      children: props.children || (0, import_jsx_runtime15.jsx)(BaseIcon, { h: "100%", w: "100%" })
    }
  );
}
AlertIcon.displayName = "AlertIcon";

// node_modules/@chakra-ui/alert/dist/chunk-QURMB2UJ.mjs
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var AlertTitle = forwardRef3(
  function AlertTitle2(props, ref) {
    const styles2 = useAlertStyles();
    const { status } = useAlertContext();
    return (0, import_jsx_runtime16.jsx)(
      chakra.div,
      {
        ref,
        "data-status": status,
        ...props,
        className: cx("chakra-alert__title", props.className),
        __css: styles2.title
      }
    );
  }
);
AlertTitle.displayName = "AlertTitle";

// node_modules/@chakra-ui/alert/dist/chunk-3KCBMPN5.mjs
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var Alert = forwardRef3(function Alert2(props, ref) {
  var _a9;
  const { status = "info", addRole = true, ...rest } = omitThemingProps(props);
  const colorScheme = (_a9 = props.colorScheme) != null ? _a9 : getStatusColorScheme(status);
  const styles2 = useMultiStyleConfig("Alert", { ...props, colorScheme });
  const alertStyles = {
    width: "100%",
    display: "flex",
    alignItems: "center",
    position: "relative",
    overflow: "hidden",
    ...styles2.container
  };
  return (0, import_jsx_runtime17.jsx)(AlertProvider, { value: { status }, children: (0, import_jsx_runtime17.jsx)(AlertStylesProvider, { value: styles2, children: (0, import_jsx_runtime17.jsx)(
    chakra.div,
    {
      "data-status": status,
      role: addRole ? "alert" : void 0,
      ref,
      ...rest,
      className: cx("chakra-alert", props.className),
      __css: alertStyles
    }
  ) }) });
});
Alert.displayName = "Alert";

// node_modules/@chakra-ui/close-button/dist/chunk-37N6GCLA.mjs
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
function CloseIcon(props) {
  return (0, import_jsx_runtime18.jsx)(Icon, { focusable: "false", "aria-hidden": true, ...props, children: (0, import_jsx_runtime18.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    }
  ) });
}
var CloseButton = forwardRef3(
  function CloseButton2(props, ref) {
    const styles2 = useStyleConfig("CloseButton", props);
    const { children, isDisabled: isDisabled3, __css, ...rest } = omitThemingProps(props);
    const baseStyle44 = {
      outline: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0
    };
    return (0, import_jsx_runtime18.jsx)(
      chakra.button,
      {
        type: "button",
        "aria-label": "Close",
        ref,
        disabled: isDisabled3,
        __css: {
          ...baseStyle44,
          ...styles2,
          ...__css
        },
        ...rest,
        children: children || (0, import_jsx_runtime18.jsx)(CloseIcon, { width: "1em", height: "1em" })
      }
    );
  }
);
CloseButton.displayName = "CloseButton";

// node_modules/@chakra-ui/toast/dist/chunk-HYCJNCPE.mjs
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var initialState = {
  top: [],
  "top-left": [],
  "top-right": [],
  "bottom-left": [],
  bottom: [],
  "bottom-right": []
};
var toastStore = createStore(initialState);
function createStore(initialState2) {
  let state2 = initialState2;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (setStateFn) => {
    state2 = setStateFn(state2);
    listeners.forEach((l) => l());
  };
  return {
    getState: () => state2,
    subscribe: (listener) => {
      listeners.add(listener);
      return () => {
        setState(() => initialState2);
        listeners.delete(listener);
      };
    },
    /**
     * Delete a toast record at its position
     */
    removeToast: (id3, position3) => {
      setState((prevState) => ({
        ...prevState,
        // id may be string or number
        // eslint-disable-next-line eqeqeq
        [position3]: prevState[position3].filter((toast) => toast.id != id3)
      }));
    },
    notify: (message, options2) => {
      const toast = createToast(message, options2);
      const { position: position3, id: id3 } = toast;
      setState((prevToasts) => {
        var _a9, _b5;
        const isTop = position3.includes("top");
        const toasts = isTop ? [toast, ...(_a9 = prevToasts[position3]) != null ? _a9 : []] : [...(_b5 = prevToasts[position3]) != null ? _b5 : [], toast];
        return {
          ...prevToasts,
          [position3]: toasts
        };
      });
      return id3;
    },
    update: (id3, options2) => {
      if (!id3)
        return;
      setState((prevState) => {
        const nextState = { ...prevState };
        const { position: position3, index: index5 } = findToast(nextState, id3);
        if (position3 && index5 !== -1) {
          nextState[position3][index5] = {
            ...nextState[position3][index5],
            ...options2,
            message: createRenderToast(options2)
          };
        }
        return nextState;
      });
    },
    closeAll: ({ positions } = {}) => {
      setState((prev2) => {
        const allPositions = [
          "bottom",
          "bottom-right",
          "bottom-left",
          "top",
          "top-left",
          "top-right"
        ];
        const positionsToClose = positions != null ? positions : allPositions;
        return positionsToClose.reduce(
          (acc, position3) => {
            acc[position3] = prev2[position3].map((toast) => ({
              ...toast,
              requestClose: true
            }));
            return acc;
          },
          { ...prev2 }
        );
      });
    },
    close: (id3) => {
      setState((prevState) => {
        const position3 = getToastPosition(prevState, id3);
        if (!position3)
          return prevState;
        return {
          ...prevState,
          [position3]: prevState[position3].map((toast) => {
            if (toast.id == id3) {
              return {
                ...toast,
                requestClose: true
              };
            }
            return toast;
          })
        };
      });
    },
    isActive: (id3) => Boolean(findToast(toastStore.getState(), id3).position)
  };
}
var counter = 0;
function createToast(message, options2 = {}) {
  var _a9, _b5;
  counter += 1;
  const id3 = (_a9 = options2.id) != null ? _a9 : counter;
  const position3 = (_b5 = options2.position) != null ? _b5 : "bottom";
  return {
    id: id3,
    message,
    position: position3,
    duration: options2.duration,
    onCloseComplete: options2.onCloseComplete,
    onRequestRemove: () => toastStore.removeToast(String(id3), position3),
    status: options2.status,
    requestClose: false,
    containerStyle: options2.containerStyle
  };
}
var Toast = (props) => {
  const {
    status,
    variant = "solid",
    id: id3,
    title,
    isClosable,
    onClose,
    description,
    colorScheme,
    icon
  } = props;
  const ids2 = id3 ? {
    root: `toast-${id3}`,
    title: `toast-${id3}-title`,
    description: `toast-${id3}-description`
  } : void 0;
  return (0, import_jsx_runtime19.jsxs)(
    Alert,
    {
      addRole: false,
      status,
      variant,
      id: ids2 == null ? void 0 : ids2.root,
      alignItems: "start",
      borderRadius: "md",
      boxShadow: "lg",
      paddingEnd: 8,
      textAlign: "start",
      width: "auto",
      colorScheme,
      children: [
        (0, import_jsx_runtime19.jsx)(AlertIcon, { children: icon }),
        (0, import_jsx_runtime19.jsxs)(chakra.div, { flex: "1", maxWidth: "100%", children: [
          title && (0, import_jsx_runtime19.jsx)(AlertTitle, { id: ids2 == null ? void 0 : ids2.title, children: title }),
          description && (0, import_jsx_runtime19.jsx)(AlertDescription, { id: ids2 == null ? void 0 : ids2.description, display: "block", children: description })
        ] }),
        isClosable && (0, import_jsx_runtime19.jsx)(
          CloseButton,
          {
            size: "sm",
            onClick: onClose,
            position: "absolute",
            insetEnd: 1,
            top: 1
          }
        )
      ]
    }
  );
};
function createRenderToast(options2 = {}) {
  const { render, toastComponent: ToastComponent2 = Toast } = options2;
  const renderToast = (props) => {
    if (typeof render === "function") {
      return render({ ...props, ...options2 });
    }
    return (0, import_jsx_runtime19.jsx)(ToastComponent2, { ...props, ...options2 });
  };
  return renderToast;
}
function createToastFn(dir, defaultOptions5) {
  const normalizeToastOptions = (options2) => {
    var _a9;
    return {
      ...defaultOptions5,
      ...options2,
      position: getToastPlacement(
        (_a9 = options2 == null ? void 0 : options2.position) != null ? _a9 : defaultOptions5 == null ? void 0 : defaultOptions5.position,
        dir
      )
    };
  };
  const toast = (options2) => {
    const normalizedToastOptions = normalizeToastOptions(options2);
    const Message = createRenderToast(normalizedToastOptions);
    return toastStore.notify(Message, normalizedToastOptions);
  };
  toast.update = (id3, options2) => {
    toastStore.update(id3, normalizeToastOptions(options2));
  };
  toast.promise = (promise, options2) => {
    const id3 = toast({
      ...options2.loading,
      status: "loading",
      duration: null
    });
    promise.then(
      (data) => toast.update(id3, {
        status: "success",
        duration: 5e3,
        ...runIfFn(options2.success, data)
      })
    ).catch(
      (error2) => toast.update(id3, {
        status: "error",
        duration: 5e3,
        ...runIfFn(options2.error, error2)
      })
    );
  };
  toast.closeAll = toastStore.closeAll;
  toast.close = toastStore.close;
  toast.isActive = toastStore.isActive;
  return toast;
}

// node_modules/@chakra-ui/toast/dist/chunk-3Y4YXCR2.mjs
var import_react71 = __toESM(require_react(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var [ToastOptionProvider, useToastOptionContext] = createContext2({
  name: `ToastOptionsContext`,
  strict: false
});
var ToastProvider = (props) => {
  const state2 = (0, import_react71.useSyncExternalStore)(
    toastStore.subscribe,
    toastStore.getState,
    toastStore.getState
  );
  const {
    motionVariants: motionVariants2,
    component: Component7 = ToastComponent,
    portalProps
  } = props;
  const stateKeys = Object.keys(state2);
  const toastList = stateKeys.map((position3) => {
    const toasts = state2[position3];
    return (0, import_jsx_runtime20.jsx)(
      "div",
      {
        role: "region",
        "aria-live": "polite",
        "aria-label": `Notifications-${position3}`,
        id: `chakra-toast-manager-${position3}`,
        style: getToastListStyle(position3),
        children: (0, import_jsx_runtime20.jsx)(AnimatePresence, { initial: false, children: toasts.map((toast) => (0, import_jsx_runtime20.jsx)(
          Component7,
          {
            motionVariants: motionVariants2,
            ...toast
          },
          toast.id
        )) })
      },
      position3
    );
  });
  return (0, import_jsx_runtime20.jsx)(Portal, { ...portalProps, children: toastList });
};

// node_modules/@chakra-ui/toast/dist/chunk-6RSEZNRH.mjs
var import_react72 = __toESM(require_react(), 1);
function useToast(options2) {
  const { theme: theme3 } = useChakra();
  const defaultOptions5 = useToastOptionContext();
  return (0, import_react72.useMemo)(
    () => createToastFn(theme3.direction, {
      ...defaultOptions5,
      ...options2
    }),
    [options2, theme3.direction, defaultOptions5]
  );
}

// node_modules/@chakra-ui/toast/dist/chunk-FOFDA6UD.mjs
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/react/dist/chunk-QAITB7GG.mjs
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var createChakraProvider = (providerTheme) => {
  return function ChakraProvider22({
    children,
    theme: theme3 = providerTheme,
    toastOptions,
    ...restProps
  }) {
    return (0, import_jsx_runtime22.jsxs)(ChakraProvider, { theme: theme3, ...restProps, children: [
      (0, import_jsx_runtime22.jsx)(ToastOptionProvider, { value: toastOptions == null ? void 0 : toastOptions.defaultOptions, children }),
      (0, import_jsx_runtime22.jsx)(ToastProvider, { ...toastOptions })
    ] });
  };
};
var ChakraProvider2 = createChakraProvider(theme);
var ChakraBaseProvider = createChakraProvider(baseTheme);

// node_modules/@chakra-ui/descendant/dist/chunk-3A5YOZDU.mjs
var import_react73 = __toESM(require_react(), 1);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __publicField2 = (obj, key2, value) => {
  __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);
  return value;
};
function sortNodes(nodes) {
  return nodes.sort((a2, b2) => {
    const compare = a2.compareDocumentPosition(b2);
    if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) {
      return -1;
    }
    if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) {
      return 1;
    }
    if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {
      throw Error("Cannot sort the given nodes.");
    } else {
      return 0;
    }
  });
}
var isElement2 = (el) => typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
function getNextIndex3(current, max3, loop) {
  let next2 = current + 1;
  if (loop && next2 >= max3)
    next2 = 0;
  return next2;
}
function getPrevIndex2(current, max3, loop) {
  let next2 = current - 1;
  if (loop && next2 < 0)
    next2 = max3;
  return next2;
}
var useSafeLayoutEffect2 = typeof window !== "undefined" ? import_react73.useLayoutEffect : import_react73.useEffect;
var cast = (value) => value;

// node_modules/@chakra-ui/descendant/dist/chunk-FT3H4P66.mjs
var DescendantsManager = class {
  constructor() {
    __publicField2(this, "descendants", /* @__PURE__ */ new Map());
    __publicField2(this, "register", (nodeOrOptions) => {
      if (nodeOrOptions == null)
        return;
      if (isElement2(nodeOrOptions)) {
        return this.registerNode(nodeOrOptions);
      }
      return (node3) => {
        this.registerNode(node3, nodeOrOptions);
      };
    });
    __publicField2(this, "unregister", (node3) => {
      this.descendants.delete(node3);
      const sorted = sortNodes(Array.from(this.descendants.keys()));
      this.assignIndex(sorted);
    });
    __publicField2(this, "destroy", () => {
      this.descendants.clear();
    });
    __publicField2(this, "assignIndex", (descendants) => {
      this.descendants.forEach((descendant) => {
        const index5 = descendants.indexOf(descendant.node);
        descendant.index = index5;
        descendant.node.dataset["index"] = descendant.index.toString();
      });
    });
    __publicField2(this, "count", () => this.descendants.size);
    __publicField2(this, "enabledCount", () => this.enabledValues().length);
    __publicField2(this, "values", () => {
      const values2 = Array.from(this.descendants.values());
      return values2.sort((a2, b2) => a2.index - b2.index);
    });
    __publicField2(this, "enabledValues", () => {
      return this.values().filter((descendant) => !descendant.disabled);
    });
    __publicField2(this, "item", (index5) => {
      if (this.count() === 0)
        return void 0;
      return this.values()[index5];
    });
    __publicField2(this, "enabledItem", (index5) => {
      if (this.enabledCount() === 0)
        return void 0;
      return this.enabledValues()[index5];
    });
    __publicField2(this, "first", () => this.item(0));
    __publicField2(this, "firstEnabled", () => this.enabledItem(0));
    __publicField2(this, "last", () => this.item(this.descendants.size - 1));
    __publicField2(this, "lastEnabled", () => {
      const lastIndex = this.enabledValues().length - 1;
      return this.enabledItem(lastIndex);
    });
    __publicField2(this, "indexOf", (node3) => {
      var _a9, _b5;
      if (!node3)
        return -1;
      return (_b5 = (_a9 = this.descendants.get(node3)) == null ? void 0 : _a9.index) != null ? _b5 : -1;
    });
    __publicField2(this, "enabledIndexOf", (node3) => {
      if (node3 == null)
        return -1;
      return this.enabledValues().findIndex((i2) => i2.node.isSameNode(node3));
    });
    __publicField2(this, "next", (index5, loop = true) => {
      const next2 = getNextIndex3(index5, this.count(), loop);
      return this.item(next2);
    });
    __publicField2(this, "nextEnabled", (index5, loop = true) => {
      const item = this.item(index5);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const nextEnabledIndex = getNextIndex3(
        enabledIndex,
        this.enabledCount(),
        loop
      );
      return this.enabledItem(nextEnabledIndex);
    });
    __publicField2(this, "prev", (index5, loop = true) => {
      const prev2 = getPrevIndex2(index5, this.count() - 1, loop);
      return this.item(prev2);
    });
    __publicField2(this, "prevEnabled", (index5, loop = true) => {
      const item = this.item(index5);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const prevEnabledIndex = getPrevIndex2(
        enabledIndex,
        this.enabledCount() - 1,
        loop
      );
      return this.enabledItem(prevEnabledIndex);
    });
    __publicField2(this, "registerNode", (node3, options2) => {
      if (!node3 || this.descendants.has(node3))
        return;
      const keys3 = Array.from(this.descendants.keys()).concat(node3);
      const sorted = sortNodes(keys3);
      if (options2 == null ? void 0 : options2.disabled) {
        options2.disabled = !!options2.disabled;
      }
      const descendant = { node: node3, index: -1, ...options2 };
      this.descendants.set(node3, descendant);
      this.assignIndex(sorted);
    });
  }
};

// node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs
var import_react74 = __toESM(require_react(), 1);
function assignRef2(ref, value) {
  if (ref == null)
    return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error2) {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}
function mergeRefs2(...refs) {
  return (node3) => {
    refs.forEach((ref) => {
      assignRef2(ref, node3);
    });
  };
}
function useMergeRefs(...refs) {
  return (0, import_react74.useMemo)(() => mergeRefs2(...refs), refs);
}

// node_modules/@chakra-ui/descendant/dist/chunk-OCNORRQU.mjs
var import_react75 = __toESM(require_react(), 1);
function useDescendants() {
  const descendants = (0, import_react75.useRef)(new DescendantsManager());
  useSafeLayoutEffect2(() => {
    return () => descendants.current.destroy();
  });
  return descendants.current;
}
var [DescendantsContextProvider, useDescendantsContext] = createContext2({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
function useDescendant(options2) {
  const descendants = useDescendantsContext();
  const [index5, setIndex] = (0, import_react75.useState)(-1);
  const ref = (0, import_react75.useRef)(null);
  useSafeLayoutEffect2(() => {
    return () => {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  useSafeLayoutEffect2(() => {
    if (!ref.current)
      return;
    const dataIndex = Number(ref.current.dataset["index"]);
    if (index5 != dataIndex && !Number.isNaN(dataIndex)) {
      setIndex(dataIndex);
    }
  });
  const refCallback = options2 ? cast(descendants.register(options2)) : cast(descendants.register);
  return {
    descendants,
    index: index5,
    enabledIndex: descendants.enabledIndexOf(ref.current),
    register: mergeRefs2(refCallback, ref)
  };
}
function createDescendantContext() {
  const ContextProvider = cast(DescendantsContextProvider);
  const _useDescendantsContext = () => cast(useDescendantsContext());
  const _useDescendant = (options2) => useDescendant(options2);
  const _useDescendants = () => useDescendants();
  return [
    // context provider
    ContextProvider,
    // call this when you need to read from context
    _useDescendantsContext,
    // descendants state information, to be called and passed to `ContextProvider`
    _useDescendants,
    // descendant index information
    _useDescendant
  ];
}

// node_modules/@chakra-ui/accordion/dist/chunk-RUEU7BLR.mjs
var [AccordionStylesProvider, useAccordionStyles] = createContext2({
  name: "AccordionStylesContext",
  hookName: "useAccordionStyles",
  providerName: "<Accordion />"
});
var [AccordionItemProvider, useAccordionItemContext] = createContext2({
  name: "AccordionItemContext",
  hookName: "useAccordionItemContext",
  providerName: "<AccordionItem />"
});
var [
  AccordionDescendantsProvider,
  useAccordionDescendantsContext,
  useAccordionDescendants,
  useAccordionDescendant
] = createDescendantContext();

// node_modules/@chakra-ui/accordion/dist/chunk-QCAXGLVH.mjs
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var AccordionButton = forwardRef3(
  function AccordionButton2(props, ref) {
    const { getButtonProps } = useAccordionItemContext();
    const buttonProps = getButtonProps(props, ref);
    const styles2 = useAccordionStyles();
    const buttonStyles = {
      display: "flex",
      alignItems: "center",
      width: "100%",
      outline: 0,
      ...styles2.button
    };
    return (0, import_jsx_runtime23.jsx)(
      chakra.button,
      {
        ...buttonProps,
        className: cx("chakra-accordion__button", props.className),
        __css: buttonStyles
      }
    );
  }
);
AccordionButton.displayName = "AccordionButton";

// node_modules/@chakra-ui/react-use-controllable-state/dist/index.mjs
var import_react76 = __toESM(require_react(), 1);
function useControllableState(props) {
  const {
    value: valueProp,
    defaultValue: defaultValue2,
    onChange: onChange2,
    shouldUpdate = (prev2, next2) => prev2 !== next2
  } = props;
  const onChangeProp = useCallbackRef(onChange2);
  const shouldUpdateProp = useCallbackRef(shouldUpdate);
  const [uncontrolledState, setUncontrolledState] = (0, import_react76.useState)(defaultValue2);
  const controlled = valueProp !== void 0;
  const value = controlled ? valueProp : uncontrolledState;
  const setValue = useCallbackRef(
    (next2) => {
      const setter = next2;
      const nextValue = typeof next2 === "function" ? setter(value) : next2;
      if (!shouldUpdateProp(value, nextValue)) {
        return;
      }
      if (!controlled) {
        setUncontrolledState(nextValue);
      }
      onChangeProp(nextValue);
    },
    [controlled, onChangeProp, value, shouldUpdateProp]
  );
  return [value, setValue];
}

// node_modules/@chakra-ui/accordion/dist/chunk-74QY6M57.mjs
var import_react77 = __toESM(require_react(), 1);
function useAccordion(props) {
  const {
    onChange: onChange2,
    defaultIndex,
    index: indexProp,
    allowMultiple,
    allowToggle,
    ...htmlProps
  } = props;
  allowMultipleWarning(props);
  allowMultipleAndAllowToggleWarning(props);
  const descendants = useAccordionDescendants();
  const [focusedIndex, setFocusedIndex] = (0, import_react77.useState)(-1);
  (0, import_react77.useEffect)(() => {
    return () => {
      setFocusedIndex(-1);
    };
  }, []);
  const [index5, setIndex] = useControllableState({
    value: indexProp,
    defaultValue() {
      if (allowMultiple)
        return defaultIndex != null ? defaultIndex : [];
      return defaultIndex != null ? defaultIndex : -1;
    },
    onChange: onChange2
  });
  const getAccordionItemProps = (idx) => {
    let isOpen = false;
    if (idx !== null) {
      isOpen = Array.isArray(index5) ? index5.includes(idx) : index5 === idx;
    }
    const onChange22 = (isOpen2) => {
      if (idx === null)
        return;
      if (allowMultiple && Array.isArray(index5)) {
        const nextState = isOpen2 ? index5.concat(idx) : index5.filter((i2) => i2 !== idx);
        setIndex(nextState);
      } else if (isOpen2) {
        setIndex(idx);
      } else if (allowToggle) {
        setIndex(-1);
      }
    };
    return { isOpen, onChange: onChange22 };
  };
  return {
    index: index5,
    setIndex,
    htmlProps,
    getAccordionItemProps,
    focusedIndex,
    setFocusedIndex,
    descendants
  };
}
var [AccordionProvider, useAccordionContext] = createContext2({
  name: "AccordionContext",
  hookName: "useAccordionContext",
  providerName: "Accordion"
});
function useAccordionItem(props) {
  const { isDisabled: isDisabled3, isFocusable: isFocusable4, id: id3, ...htmlProps } = props;
  const { getAccordionItemProps, setFocusedIndex } = useAccordionContext();
  const buttonRef = (0, import_react77.useRef)(null);
  const reactId = (0, import_react77.useId)();
  const uid = id3 != null ? id3 : reactId;
  const buttonId = `accordion-button-${uid}`;
  const panelId = `accordion-panel-${uid}`;
  focusableNotDisabledWarning(props);
  const { register, index: index5, descendants } = useAccordionDescendant({
    disabled: isDisabled3 && !isFocusable4
  });
  const { isOpen, onChange: onChange2 } = getAccordionItemProps(
    index5 === -1 ? null : index5
  );
  warnIfOpenAndDisabled({ isOpen, isDisabled: isDisabled3 });
  const onOpen = () => {
    onChange2 == null ? void 0 : onChange2(true);
  };
  const onClose = () => {
    onChange2 == null ? void 0 : onChange2(false);
  };
  const onClick = (0, import_react77.useCallback)(() => {
    onChange2 == null ? void 0 : onChange2(!isOpen);
    setFocusedIndex(index5);
  }, [index5, setFocusedIndex, isOpen, onChange2]);
  const onKeyDown = (0, import_react77.useCallback)(
    (event) => {
      const keyMap = {
        ArrowDown: () => {
          const next2 = descendants.nextEnabled(index5);
          next2 == null ? void 0 : next2.node.focus();
        },
        ArrowUp: () => {
          const prev2 = descendants.prevEnabled(index5);
          prev2 == null ? void 0 : prev2.node.focus();
        },
        Home: () => {
          const first = descendants.firstEnabled();
          first == null ? void 0 : first.node.focus();
        },
        End: () => {
          const last2 = descendants.lastEnabled();
          last2 == null ? void 0 : last2.node.focus();
        }
      };
      const action = keyMap[event.key];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [descendants, index5]
  );
  const onFocus4 = (0, import_react77.useCallback)(() => {
    setFocusedIndex(index5);
  }, [setFocusedIndex, index5]);
  const getButtonProps = (0, import_react77.useCallback)(
    function getButtonProps2(props2 = {}, ref = null) {
      return {
        ...props2,
        type: "button",
        ref: mergeRefs2(register, buttonRef, ref),
        id: buttonId,
        disabled: !!isDisabled3,
        "aria-expanded": !!isOpen,
        "aria-controls": panelId,
        onClick: callAllHandlers(props2.onClick, onClick),
        onFocus: callAllHandlers(props2.onFocus, onFocus4),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown)
      };
    },
    [
      buttonId,
      isDisabled3,
      isOpen,
      onClick,
      onFocus4,
      onKeyDown,
      panelId,
      register
    ]
  );
  const getPanelProps = (0, import_react77.useCallback)(
    function getPanelProps2(props2 = {}, ref = null) {
      return {
        ...props2,
        ref,
        role: "region",
        id: panelId,
        "aria-labelledby": buttonId,
        hidden: !isOpen
      };
    },
    [buttonId, isOpen, panelId]
  );
  return {
    isOpen,
    isDisabled: isDisabled3,
    isFocusable: isFocusable4,
    onOpen,
    onClose,
    getButtonProps,
    getPanelProps,
    htmlProps
  };
}
function allowMultipleWarning(props) {
  const index5 = props.index || props.defaultIndex;
  const condition = index5 != null && !Array.isArray(index5) && props.allowMultiple;
  warn({
    condition: !!condition,
    message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index5},`
  });
}
function allowMultipleAndAllowToggleWarning(props) {
  warn({
    condition: !!(props.allowMultiple && props.allowToggle),
    message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`
  });
}
function focusableNotDisabledWarning(props) {
  warn({
    condition: !!(props.isFocusable && !props.isDisabled),
    message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.
    `
  });
}
function warnIfOpenAndDisabled(props) {
  warn({
    condition: props.isOpen && !!props.isDisabled,
    message: "Cannot open a disabled accordion item"
  });
}

// node_modules/@chakra-ui/accordion/dist/chunk-YI3ICT2T.mjs
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
function AccordionIcon(props) {
  const { isOpen, isDisabled: isDisabled3 } = useAccordionItemContext();
  const { reduceMotion } = useAccordionContext();
  const _className = cx("chakra-accordion__icon", props.className);
  const styles2 = useAccordionStyles();
  const iconStyles = {
    opacity: isDisabled3 ? 0.4 : 1,
    transform: isOpen ? "rotate(-180deg)" : void 0,
    transition: reduceMotion ? void 0 : "transform 0.2s",
    transformOrigin: "center",
    ...styles2.icon
  };
  return (0, import_jsx_runtime24.jsx)(
    Icon,
    {
      viewBox: "0 0 24 24",
      "aria-hidden": true,
      className: _className,
      __css: iconStyles,
      ...props,
      children: (0, import_jsx_runtime24.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
        }
      )
    }
  );
}
AccordionIcon.displayName = "AccordionIcon";

// node_modules/@chakra-ui/accordion/dist/chunk-JQ2DNXQ3.mjs
var import_react78 = __toESM(require_react(), 1);
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var AccordionItem = forwardRef3(
  function AccordionItem2(props, ref) {
    const { children, className } = props;
    const { htmlProps, ...context2 } = useAccordionItem(props);
    const styles2 = useAccordionStyles();
    const containerStyles = {
      ...styles2.container,
      overflowAnchor: "none"
    };
    const ctx = (0, import_react78.useMemo)(() => context2, [context2]);
    return (0, import_jsx_runtime25.jsx)(AccordionItemProvider, { value: ctx, children: (0, import_jsx_runtime25.jsx)(
      chakra.div,
      {
        ref,
        ...htmlProps,
        className: cx("chakra-accordion__item", className),
        __css: containerStyles,
        children: typeof children === "function" ? children({
          isExpanded: !!context2.isOpen,
          isDisabled: !!context2.isDisabled
        }) : children
      }
    ) });
  }
);
AccordionItem.displayName = "AccordionItem";

// node_modules/@chakra-ui/transition/dist/chunk-6NHXDBFO.mjs
var TRANSITION_EASINGS = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TRANSITION_VARIANTS = {
  scale: {
    enter: { scale: 1 },
    exit: { scale: 0.95 }
  },
  fade: {
    enter: { opacity: 1 },
    exit: { opacity: 0 }
  },
  pushLeft: {
    enter: { x: "100%" },
    exit: { x: "-30%" }
  },
  pushRight: {
    enter: { x: "-100%" },
    exit: { x: "30%" }
  },
  pushUp: {
    enter: { y: "100%" },
    exit: { y: "-30%" }
  },
  pushDown: {
    enter: { y: "-100%" },
    exit: { y: "30%" }
  },
  slideLeft: {
    position: { left: 0, top: 0, bottom: 0, width: "100%" },
    enter: { x: 0, y: 0 },
    exit: { x: "-100%", y: 0 }
  },
  slideRight: {
    position: { right: 0, top: 0, bottom: 0, width: "100%" },
    enter: { x: 0, y: 0 },
    exit: { x: "100%", y: 0 }
  },
  slideUp: {
    position: { top: 0, left: 0, right: 0, maxWidth: "100vw" },
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "-100%" }
  },
  slideDown: {
    position: { bottom: 0, left: 0, right: 0, maxWidth: "100vw" },
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "100%" }
  }
};
function getSlideTransition(options2) {
  var _a9;
  const side = (_a9 = options2 == null ? void 0 : options2.direction) != null ? _a9 : "right";
  switch (side) {
    case "right":
      return TRANSITION_VARIANTS.slideRight;
    case "left":
      return TRANSITION_VARIANTS.slideLeft;
    case "bottom":
      return TRANSITION_VARIANTS.slideDown;
    case "top":
      return TRANSITION_VARIANTS.slideUp;
    default:
      return TRANSITION_VARIANTS.slideRight;
  }
}
var TRANSITION_DEFAULTS = {
  enter: {
    duration: 0.2,
    ease: TRANSITION_EASINGS.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TRANSITION_EASINGS.easeIn
  }
};
var withDelay = {
  enter: (transition3, delay2) => ({
    ...transition3,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["enter"]
  }),
  exit: (transition3, delay2) => ({
    ...transition3,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["exit"]
  })
};

// node_modules/@chakra-ui/transition/dist/chunk-RKXMPHPI.mjs
var import_react79 = __toESM(require_react(), 1);
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
var isNumeric2 = (value) => value != null && parseInt(value.toString(), 10) > 0;
var defaultTransitions = {
  exit: {
    height: { duration: 0.2, ease: TRANSITION_EASINGS.ease },
    opacity: { duration: 0.3, ease: TRANSITION_EASINGS.ease }
  },
  enter: {
    height: { duration: 0.3, ease: TRANSITION_EASINGS.ease },
    opacity: { duration: 0.4, ease: TRANSITION_EASINGS.ease }
  }
};
var variants13 = {
  exit: ({
    animateOpacity,
    startingHeight,
    transition: transition3,
    transitionEnd,
    delay: delay2
  }) => {
    var _a9;
    return {
      ...animateOpacity && { opacity: isNumeric2(startingHeight) ? 1 : 0 },
      height: startingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
      transition: (_a9 = transition3 == null ? void 0 : transition3.exit) != null ? _a9 : withDelay.exit(defaultTransitions.exit, delay2)
    };
  },
  enter: ({
    animateOpacity,
    endingHeight,
    transition: transition3,
    transitionEnd,
    delay: delay2
  }) => {
    var _a9;
    return {
      ...animateOpacity && { opacity: 1 },
      height: endingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
      transition: (_a9 = transition3 == null ? void 0 : transition3.enter) != null ? _a9 : withDelay.enter(defaultTransitions.enter, delay2)
    };
  }
};
var Collapse = (0, import_react79.forwardRef)(
  (props, ref) => {
    const {
      in: isOpen,
      unmountOnExit,
      animateOpacity = true,
      startingHeight = 0,
      endingHeight = "auto",
      style,
      className,
      transition: transition3,
      transitionEnd,
      ...rest
    } = props;
    const [mounted, setMounted] = (0, import_react79.useState)(false);
    (0, import_react79.useEffect)(() => {
      const timeout = setTimeout(() => {
        setMounted(true);
      });
      return () => clearTimeout(timeout);
    }, []);
    warn({
      condition: Number(startingHeight) > 0 && !!unmountOnExit,
      message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`
    });
    const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    const custom = {
      startingHeight,
      endingHeight,
      animateOpacity,
      transition: !mounted ? { enter: { duration: 0 } } : transition3,
      transitionEnd: {
        enter: transitionEnd == null ? void 0 : transitionEnd.enter,
        exit: unmountOnExit ? transitionEnd == null ? void 0 : transitionEnd.exit : {
          ...transitionEnd == null ? void 0 : transitionEnd.exit,
          display: hasStartingHeight ? "block" : "none"
        }
      }
    };
    const show = unmountOnExit ? isOpen : true;
    const animate4 = isOpen || unmountOnExit ? "enter" : "exit";
    return (0, import_jsx_runtime26.jsx)(AnimatePresence, { initial: false, custom, children: show && (0, import_jsx_runtime26.jsx)(
      motion.div,
      {
        ref,
        ...rest,
        className: cx("chakra-collapse", className),
        style: {
          overflow: "hidden",
          display: "block",
          ...style
        },
        custom,
        variants: variants13,
        initial: unmountOnExit ? "exit" : false,
        animate: animate4,
        exit: "exit"
      }
    ) });
  }
);
Collapse.displayName = "Collapse";

// node_modules/@chakra-ui/transition/dist/chunk-TR226DUX.mjs
var import_react80 = __toESM(require_react(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var variants14 = {
  enter: ({ transition: transition3, transitionEnd, delay: delay2 } = {}) => {
    var _a9;
    return {
      opacity: 1,
      transition: (_a9 = transition3 == null ? void 0 : transition3.enter) != null ? _a9 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ transition: transition3, transitionEnd, delay: delay2 } = {}) => {
    var _a9;
    return {
      opacity: 0,
      transition: (_a9 = transition3 == null ? void 0 : transition3.exit) != null ? _a9 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  }
};
var fadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants14
};
var Fade = (0, import_react80.forwardRef)(function Fade2(props, ref) {
  const {
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition3,
    transitionEnd,
    delay: delay2,
    ...rest
  } = props;
  const animate4 = isOpen || unmountOnExit ? "enter" : "exit";
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const custom = { transition: transition3, transitionEnd, delay: delay2 };
  return (0, import_jsx_runtime27.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime27.jsx)(
    motion.div,
    {
      ref,
      className: cx("chakra-fade", className),
      custom,
      ...fadeConfig,
      animate: animate4,
      ...rest
    }
  ) });
});
Fade.displayName = "Fade";

// node_modules/@chakra-ui/transition/dist/chunk-SR4VX3RF.mjs
var import_react81 = __toESM(require_react(), 1);
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var variants15 = {
  exit: ({ reverse, initialScale, transition: transition3, transitionEnd, delay: delay2 }) => {
    var _a9;
    return {
      opacity: 0,
      ...reverse ? { scale: initialScale, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { scale: initialScale, ...transitionEnd == null ? void 0 : transitionEnd.exit } },
      transition: (_a9 = transition3 == null ? void 0 : transition3.exit) != null ? _a9 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2)
    };
  },
  enter: ({ transitionEnd, transition: transition3, delay: delay2 }) => {
    var _a9;
    return {
      opacity: 1,
      scale: 1,
      transition: (_a9 = transition3 == null ? void 0 : transition3.enter) != null ? _a9 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var scaleFadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants15
};
var ScaleFade = (0, import_react81.forwardRef)(
  function ScaleFade2(props, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      initialScale = 0.95,
      className,
      transition: transition3,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate4 = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = { initialScale, reverse, transition: transition3, transitionEnd, delay: delay2 };
    return (0, import_jsx_runtime28.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime28.jsx)(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        ...scaleFadeConfig,
        animate: animate4,
        custom,
        ...rest
      }
    ) });
  }
);
ScaleFade.displayName = "ScaleFade";

// node_modules/@chakra-ui/transition/dist/chunk-7254PCTD.mjs
var import_react82 = __toESM(require_react(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var variants16 = {
  initial: ({ offsetX, offsetY, transition: transition3, transitionEnd, delay: delay2 }) => {
    var _a9;
    return {
      opacity: 0,
      x: offsetX,
      y: offsetY,
      transition: (_a9 = transition3 == null ? void 0 : transition3.exit) != null ? _a9 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ transition: transition3, transitionEnd, delay: delay2 }) => {
    var _a9;
    return {
      opacity: 1,
      x: 0,
      y: 0,
      transition: (_a9 = transition3 == null ? void 0 : transition3.enter) != null ? _a9 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ offsetY, offsetX, transition: transition3, transitionEnd, reverse, delay: delay2 }) => {
    var _a9;
    const offset3 = { x: offsetX, y: offsetY };
    return {
      opacity: 0,
      transition: (_a9 = transition3 == null ? void 0 : transition3.exit) != null ? _a9 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      ...reverse ? { ...offset3, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { ...offset3, ...transitionEnd == null ? void 0 : transitionEnd.exit } }
    };
  }
};
var slideFadeConfig = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants: variants16
};
var SlideFade = (0, import_react82.forwardRef)(
  function SlideFade2(props, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      className,
      offsetX = 0,
      offsetY = 8,
      transition: transition3,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate4 = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
      offsetX,
      offsetY,
      reverse,
      transition: transition3,
      transitionEnd,
      delay: delay2
    };
    return (0, import_jsx_runtime29.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime29.jsx)(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        custom,
        ...slideFadeConfig,
        animate: animate4,
        ...rest
      }
    ) });
  }
);
SlideFade.displayName = "SlideFade";

// node_modules/@chakra-ui/transition/dist/chunk-CYUETFQE.mjs
var import_react83 = __toESM(require_react(), 1);
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var defaultTransition = {
  exit: {
    duration: 0.15,
    ease: TRANSITION_EASINGS.easeInOut
  },
  enter: {
    type: "spring",
    damping: 25,
    stiffness: 180
  }
};
var variants17 = {
  exit: ({ direction: direction2, transition: transition3, transitionEnd, delay: delay2 }) => {
    var _a9;
    const { exit: exitStyles } = getSlideTransition({ direction: direction2 });
    return {
      ...exitStyles,
      transition: (_a9 = transition3 == null ? void 0 : transition3.exit) != null ? _a9 : withDelay.exit(defaultTransition.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ direction: direction2, transitionEnd, transition: transition3, delay: delay2 }) => {
    var _a9;
    const { enter: enterStyles } = getSlideTransition({ direction: direction2 });
    return {
      ...enterStyles,
      transition: (_a9 = transition3 == null ? void 0 : transition3.enter) != null ? _a9 : withDelay.enter(defaultTransition.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var Slide = (0, import_react83.forwardRef)(function Slide2(props, ref) {
  const {
    direction: direction2 = "right",
    style,
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition3,
    transitionEnd,
    delay: delay2,
    motionProps,
    ...rest
  } = props;
  const transitionStyles = getSlideTransition({ direction: direction2 });
  const computedStyle = Object.assign(
    { position: "fixed" },
    transitionStyles.position,
    style
  );
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const animate4 = isOpen || unmountOnExit ? "enter" : "exit";
  const custom = { transitionEnd, transition: transition3, direction: direction2, delay: delay2 };
  return (0, import_jsx_runtime30.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime30.jsx)(
    motion.div,
    {
      ...rest,
      ref,
      initial: "exit",
      className: cx("chakra-slide", className),
      animate: animate4,
      exit: "exit",
      custom,
      variants: variants17,
      style: computedStyle,
      ...motionProps
    }
  ) });
});
Slide.displayName = "Slide";

// node_modules/@chakra-ui/accordion/dist/chunk-5VAIMVHT.mjs
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var AccordionPanel = forwardRef3(
  function AccordionPanel2(props, ref) {
    const { className, motionProps, ...rest } = props;
    const { reduceMotion } = useAccordionContext();
    const { getPanelProps, isOpen } = useAccordionItemContext();
    const panelProps = getPanelProps(rest, ref);
    const _className = cx("chakra-accordion__panel", className);
    const styles2 = useAccordionStyles();
    if (!reduceMotion) {
      delete panelProps.hidden;
    }
    const child = (0, import_jsx_runtime31.jsx)(chakra.div, { ...panelProps, __css: styles2.panel, className: _className });
    if (!reduceMotion) {
      return (0, import_jsx_runtime31.jsx)(Collapse, { in: isOpen, ...motionProps, children: child });
    }
    return child;
  }
);
AccordionPanel.displayName = "AccordionPanel";

// node_modules/@chakra-ui/accordion/dist/chunk-CRBMUVJA.mjs
var import_react84 = __toESM(require_react(), 1);
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var Accordion = forwardRef3(function Accordion2({ children, reduceMotion, ...props }, ref) {
  const styles2 = useMultiStyleConfig("Accordion", props);
  const ownProps = omitThemingProps(props);
  const { htmlProps, descendants, ...context2 } = useAccordion(ownProps);
  const ctx = (0, import_react84.useMemo)(
    () => ({ ...context2, reduceMotion: !!reduceMotion }),
    [context2, reduceMotion]
  );
  return (0, import_jsx_runtime32.jsx)(AccordionDescendantsProvider, { value: descendants, children: (0, import_jsx_runtime32.jsx)(AccordionProvider, { value: ctx, children: (0, import_jsx_runtime32.jsx)(AccordionStylesProvider, { value: styles2, children: (0, import_jsx_runtime32.jsx)(
    chakra.div,
    {
      ref,
      ...htmlProps,
      className: cx("chakra-accordion", props.className),
      __css: styles2.root,
      children
    }
  ) }) }) });
});
Accordion.displayName = "Accordion";

// node_modules/@chakra-ui/avatar/dist/chunk-RD3LQCU3.mjs
var [AvatarStylesProvider, useAvatarStyles] = createContext2({
  name: `AvatarStylesContext`,
  hookName: `useAvatarStyles`,
  providerName: "<Avatar/>"
});

// node_modules/@chakra-ui/avatar/dist/chunk-BVSSY3BL.mjs
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
var placementMap = {
  "top-start": {
    top: "0",
    insetStart: "0",
    transform: "translate(-25%, -25%)"
  },
  "top-end": {
    top: "0",
    insetEnd: "0",
    transform: "translate(25%, -25%)"
  },
  "bottom-start": {
    bottom: "0",
    insetStart: "0",
    transform: "translate(-25%, 25%)"
  },
  "bottom-end": {
    bottom: "0",
    insetEnd: "0",
    transform: "translate(25%, 25%)"
  }
};
var AvatarBadge = forwardRef3(
  function AvatarBadge2(props, ref) {
    const { placement = "bottom-end", className, ...rest } = props;
    const styles2 = useAvatarStyles();
    const placementStyles = placementMap[placement];
    const badgeStyles = {
      position: "absolute",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      ...placementStyles,
      ...styles2.badge
    };
    return (0, import_jsx_runtime33.jsx)(
      chakra.div,
      {
        ref,
        ...rest,
        className: cx("chakra-avatar__badge", className),
        __css: badgeStyles
      }
    );
  }
);
AvatarBadge.displayName = "AvatarBadge";

// node_modules/@chakra-ui/avatar/dist/chunk-O25PJXSD.mjs
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
function initials(name) {
  var _a9;
  const names2 = name.split(" ");
  const firstName = (_a9 = names2[0]) != null ? _a9 : "";
  const lastName = names2.length > 1 ? names2[names2.length - 1] : "";
  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);
}
function AvatarName(props) {
  const { name, getInitials: getInitials2, ...rest } = props;
  const styles2 = useAvatarStyles();
  return (0, import_jsx_runtime34.jsx)(chakra.div, { role: "img", "aria-label": name, ...rest, __css: styles2.label, children: name ? getInitials2 == null ? void 0 : getInitials2(name) : null });
}
AvatarName.displayName = "AvatarName";

// node_modules/@chakra-ui/avatar/dist/chunk-CXYPMOCL.mjs
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var GenericAvatarIcon = (props) => (0, import_jsx_runtime35.jsxs)(
  chakra.svg,
  {
    viewBox: "0 0 128 128",
    color: "#fff",
    width: "100%",
    height: "100%",
    className: "chakra-avatar__svg",
    ...props,
    children: [
      (0, import_jsx_runtime35.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
        }
      ),
      (0, import_jsx_runtime35.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
        }
      )
    ]
  }
);

// node_modules/@chakra-ui/image/dist/chunk-X3PS6RUF.mjs
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
var NativeImage = forwardRef3(function NativeImage2(props, ref) {
  const { htmlWidth, htmlHeight, alt, ...rest } = props;
  return (0, import_jsx_runtime36.jsx)("img", { width: htmlWidth, height: htmlHeight, ref, alt, ...rest });
});
NativeImage.displayName = "NativeImage";

// node_modules/@chakra-ui/image/dist/chunk-SPIKMR6I.mjs
var import_react85 = __toESM(require_react(), 1);
function useImage(props) {
  const {
    loading,
    src,
    srcSet,
    onLoad,
    onError,
    crossOrigin,
    sizes: sizes24,
    ignoreFallback
  } = props;
  const [status, setStatus] = (0, import_react85.useState)("pending");
  (0, import_react85.useEffect)(() => {
    setStatus(src ? "loading" : "pending");
  }, [src]);
  const imageRef = (0, import_react85.useRef)();
  const load = (0, import_react85.useCallback)(() => {
    if (!src)
      return;
    flush();
    const img = new Image();
    img.src = src;
    if (crossOrigin)
      img.crossOrigin = crossOrigin;
    if (srcSet)
      img.srcset = srcSet;
    if (sizes24)
      img.sizes = sizes24;
    if (loading)
      img.loading = loading;
    img.onload = (event) => {
      flush();
      setStatus("loaded");
      onLoad == null ? void 0 : onLoad(event);
    };
    img.onerror = (error2) => {
      flush();
      setStatus("failed");
      onError == null ? void 0 : onError(error2);
    };
    imageRef.current = img;
  }, [src, crossOrigin, srcSet, sizes24, onLoad, onError, loading]);
  const flush = () => {
    if (imageRef.current) {
      imageRef.current.onload = null;
      imageRef.current.onerror = null;
      imageRef.current = null;
    }
  };
  useSafeLayoutEffect(() => {
    if (ignoreFallback)
      return void 0;
    if (status === "loading") {
      load();
    }
    return () => {
      flush();
    };
  }, [status, load, ignoreFallback]);
  return ignoreFallback ? "loaded" : status;
}
var shouldShowFallbackImage = (status, fallbackStrategy) => status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";

// node_modules/@chakra-ui/image/dist/chunk-QINAG4RG.mjs
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
function omit4(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key2 of keysToOmit) {
    if (key2 in clone) {
      delete clone[key2];
    }
  }
  return clone;
}
var Image2 = forwardRef3(function Image22(props, ref) {
  const {
    fallbackSrc,
    fallback,
    src,
    srcSet,
    align,
    fit,
    loading,
    ignoreFallback,
    crossOrigin,
    fallbackStrategy = "beforeLoadOrError",
    referrerPolicy,
    ...rest
  } = props;
  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;
  const shouldIgnoreFallbackImage = loading != null || // use can opt out of fallback image
  ignoreFallback || // if the user doesn't provide any kind of fallback we should ignore it
  !providedFallback;
  const status = useImage({
    ...props,
    crossOrigin,
    ignoreFallback: shouldIgnoreFallbackImage
  });
  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);
  const shared = {
    ref,
    objectFit: fit,
    objectPosition: align,
    ...shouldIgnoreFallbackImage ? rest : omit4(rest, ["onError", "onLoad"])
  };
  if (showFallbackImage) {
    if (fallback)
      return fallback;
    return (0, import_jsx_runtime37.jsx)(
      chakra.img,
      {
        as: NativeImage,
        className: "chakra-image__placeholder",
        src: fallbackSrc,
        ...shared
      }
    );
  }
  return (0, import_jsx_runtime37.jsx)(
    chakra.img,
    {
      as: NativeImage,
      src,
      srcSet,
      crossOrigin,
      loading,
      referrerPolicy,
      className: "chakra-image",
      ...shared
    }
  );
});
Image2.displayName = "Image";

// node_modules/@chakra-ui/image/dist/chunk-YF5BD7DN.mjs
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
var Img = forwardRef3((props, ref) => (0, import_jsx_runtime38.jsx)(chakra.img, { ref, as: NativeImage, className: "chakra-image", ...props }));

// node_modules/@chakra-ui/avatar/dist/chunk-V2ATFO44.mjs
var import_react86 = __toESM(require_react(), 1);
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
function AvatarImage(props) {
  const {
    src,
    srcSet,
    onError,
    onLoad,
    getInitials: getInitials2,
    name,
    borderRadius: borderRadius3,
    loading,
    iconLabel,
    icon = (0, import_jsx_runtime39.jsx)(GenericAvatarIcon, {}),
    ignoreFallback,
    referrerPolicy,
    crossOrigin
  } = props;
  const status = useImage({ src, onError, crossOrigin, ignoreFallback });
  const hasLoaded = status === "loaded";
  const showFallback = !src || !hasLoaded;
  if (showFallback) {
    return name ? (0, import_jsx_runtime39.jsx)(
      AvatarName,
      {
        className: "chakra-avatar__initials",
        getInitials: getInitials2,
        name
      }
    ) : (0, import_react86.cloneElement)(icon, {
      role: "img",
      "aria-label": iconLabel
    });
  }
  return (0, import_jsx_runtime39.jsx)(
    chakra.img,
    {
      src,
      srcSet,
      alt: name,
      onLoad,
      referrerPolicy,
      crossOrigin: crossOrigin != null ? crossOrigin : void 0,
      className: "chakra-avatar__img",
      loading,
      __css: {
        width: "100%",
        height: "100%",
        objectFit: "cover",
        borderRadius: borderRadius3
      }
    }
  );
}
AvatarImage.displayName = "AvatarImage";

// node_modules/@chakra-ui/avatar/dist/chunk-V7PAE35Z.mjs
var import_react87 = __toESM(require_react(), 1);
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var baseStyle43 = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  textTransform: "uppercase",
  fontWeight: "medium",
  position: "relative",
  flexShrink: 0
};
var Avatar = forwardRef3((props, ref) => {
  const styles2 = useMultiStyleConfig("Avatar", props);
  const [isLoaded, setIsLoaded] = (0, import_react87.useState)(false);
  const {
    src,
    srcSet,
    name,
    showBorder,
    borderRadius: borderRadius3 = "full",
    onError,
    onLoad: onLoadProp,
    getInitials: getInitials2 = initials,
    icon = (0, import_jsx_runtime40.jsx)(GenericAvatarIcon, {}),
    iconLabel = " avatar",
    loading,
    children,
    borderColor,
    ignoreFallback,
    crossOrigin,
    referrerPolicy,
    ...rest
  } = omitThemingProps(props);
  const avatarStyles = {
    borderRadius: borderRadius3,
    borderWidth: showBorder ? "2px" : void 0,
    ...baseStyle43,
    ...styles2.container
  };
  if (borderColor) {
    avatarStyles.borderColor = borderColor;
  }
  return (0, import_jsx_runtime40.jsx)(
    chakra.span,
    {
      ref,
      ...rest,
      className: cx("chakra-avatar", props.className),
      "data-loaded": dataAttr(isLoaded),
      __css: avatarStyles,
      children: (0, import_jsx_runtime40.jsxs)(AvatarStylesProvider, { value: styles2, children: [
        (0, import_jsx_runtime40.jsx)(
          AvatarImage,
          {
            src,
            srcSet,
            loading,
            onLoad: callAllHandlers(onLoadProp, () => {
              setIsLoaded(true);
            }),
            onError,
            getInitials: getInitials2,
            name,
            borderRadius: borderRadius3,
            icon,
            iconLabel,
            ignoreFallback,
            crossOrigin,
            referrerPolicy
          }
        ),
        children
      ] })
    }
  );
});
Avatar.displayName = "Avatar";

// node_modules/@chakra-ui/react-children-utils/dist/index.mjs
var import_react88 = __toESM(require_react(), 1);
function getValidChildren2(children) {
  return import_react88.Children.toArray(children).filter(
    (child) => (0, import_react88.isValidElement)(child)
  );
}

// node_modules/@chakra-ui/avatar/dist/chunk-A4TTV745.mjs
var import_react89 = __toESM(require_react(), 1);
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
function compact2(object2) {
  const clone = Object.assign({}, object2);
  for (let key2 in clone) {
    if (clone[key2] === void 0)
      delete clone[key2];
  }
  return clone;
}
var AvatarGroup = forwardRef3(
  function AvatarGroup2(props, ref) {
    const styles2 = useMultiStyleConfig("Avatar", props);
    const {
      children,
      borderColor,
      max: max3,
      spacing: spacing4 = "-0.75rem",
      borderRadius: borderRadius3 = "full",
      ...rest
    } = omitThemingProps(props);
    const validChildren = getValidChildren2(children);
    const childrenWithinMax = max3 != null ? validChildren.slice(0, max3) : validChildren;
    const excess = max3 != null ? validChildren.length - max3 : 0;
    const reversedChildren = childrenWithinMax.reverse();
    const clones = reversedChildren.map((child, index5) => {
      var _a9;
      const isFirstAvatar = index5 === 0;
      const childProps = {
        marginEnd: isFirstAvatar ? 0 : spacing4,
        size: props.size,
        borderColor: (_a9 = child.props.borderColor) != null ? _a9 : borderColor,
        showBorder: true
      };
      return (0, import_react89.cloneElement)(child, compact2(childProps));
    });
    const groupStyles = {
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-end",
      flexDirection: "row-reverse",
      ...styles2.group
    };
    const excessStyles = {
      borderRadius: borderRadius3,
      marginStart: spacing4,
      ...baseStyle43,
      ...styles2.excessLabel
    };
    return (0, import_jsx_runtime41.jsxs)(
      chakra.div,
      {
        ref,
        role: "group",
        __css: groupStyles,
        ...rest,
        className: cx("chakra-avatar__group", props.className),
        children: [
          excess > 0 && (0, import_jsx_runtime41.jsx)(chakra.span, { className: "chakra-avatar__excess", __css: excessStyles, children: `+${excess}` }),
          clones
        ]
      }
    );
  }
);
AvatarGroup.displayName = "AvatarGroup";

// node_modules/@chakra-ui/breadcrumb/dist/chunk-24NX3CUR.mjs
var [BreadcrumbStylesProvider, useBreadcrumbStyles] = createContext2({
  name: `BreadcrumbStylesContext`,
  errorMessage: `useBreadcrumbStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Breadcrumb />" `
});

// node_modules/@chakra-ui/breadcrumb/dist/chunk-UIZJRKRT.mjs
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var BreadcrumbLink = forwardRef3(
  function BreadcrumbLink2(props, ref) {
    const { isCurrentPage, as, className, href, ...rest } = props;
    const styles2 = useBreadcrumbStyles();
    const sharedProps = {
      ref,
      as,
      className: cx("chakra-breadcrumb__link", className),
      ...rest
    };
    if (isCurrentPage) {
      return (0, import_jsx_runtime42.jsx)(chakra.span, { "aria-current": "page", __css: styles2.link, ...sharedProps });
    }
    return (0, import_jsx_runtime42.jsx)(chakra.a, { __css: styles2.link, href, ...sharedProps });
  }
);
BreadcrumbLink.displayName = "BreadcrumbLink";

// node_modules/@chakra-ui/breadcrumb/dist/chunk-I4SEDIQD.mjs
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var BreadcrumbSeparator = forwardRef3(
  function BreadcrumbSeparator2(props, ref) {
    const { spacing: spacing4, ...rest } = props;
    const styles2 = useBreadcrumbStyles();
    const separatorStyles = {
      mx: spacing4,
      ...styles2.separator
    };
    return (0, import_jsx_runtime43.jsx)(
      chakra.span,
      {
        ref,
        role: "presentation",
        ...rest,
        __css: separatorStyles
      }
    );
  }
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

// node_modules/@chakra-ui/breadcrumb/dist/chunk-U7EUQI2I.mjs
var import_react90 = __toESM(require_react(), 1);
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var BreadcrumbItem = forwardRef3(
  function BreadcrumbItem2(props, ref) {
    const {
      isCurrentPage,
      separator,
      isLastChild,
      spacing: spacing4,
      children,
      className,
      ...rest
    } = props;
    const validChildren = getValidChildren2(children);
    const clones = validChildren.map((child) => {
      if (child.type === BreadcrumbLink) {
        return (0, import_react90.cloneElement)(child, {
          isCurrentPage
        });
      }
      if (child.type === BreadcrumbSeparator) {
        return (0, import_react90.cloneElement)(child, {
          spacing: spacing4,
          children: child.props.children || separator
        });
      }
      return child;
    });
    const styles2 = useBreadcrumbStyles();
    const itemStyles = {
      display: "inline-flex",
      alignItems: "center",
      ...styles2.item
    };
    const _className = cx("chakra-breadcrumb__list-item", className);
    return (0, import_jsx_runtime44.jsxs)(chakra.li, { ref, className: _className, ...rest, __css: itemStyles, children: [
      clones,
      !isLastChild && (0, import_jsx_runtime44.jsx)(BreadcrumbSeparator, { spacing: spacing4, children: separator })
    ] });
  }
);
BreadcrumbItem.displayName = "BreadcrumbItem";

// node_modules/@chakra-ui/breadcrumb/dist/chunk-QOOL75FN.mjs
var import_react91 = __toESM(require_react(), 1);
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var Breadcrumb = forwardRef3(
  function Breadcrumb2(props, ref) {
    const styles2 = useMultiStyleConfig("Breadcrumb", props);
    const ownProps = omitThemingProps(props);
    const {
      children,
      spacing: spacing4 = "0.5rem",
      separator = "/",
      className,
      listProps,
      ...rest
    } = ownProps;
    const validChildren = getValidChildren2(children);
    const count = validChildren.length;
    const clones = validChildren.map(
      (child, index5) => (0, import_react91.cloneElement)(child, {
        separator,
        spacing: spacing4,
        isLastChild: count === index5 + 1
      })
    );
    const _className = cx("chakra-breadcrumb", className);
    return (0, import_jsx_runtime45.jsx)(
      chakra.nav,
      {
        ref,
        "aria-label": "breadcrumb",
        className: _className,
        __css: styles2.container,
        ...rest,
        children: (0, import_jsx_runtime45.jsx)(BreadcrumbStylesProvider, { value: styles2, children: (0, import_jsx_runtime45.jsx)(
          chakra.ol,
          {
            className: "chakra-breadcrumb__list",
            ...listProps,
            __css: {
              display: "flex",
              alignItems: "center",
              ...styles2.list
            },
            children: clones
          }
        ) })
      }
    );
  }
);
Breadcrumb.displayName = "Breadcrumb";

// node_modules/@chakra-ui/button/dist/chunk-T6ZDZOLO.mjs
var [ButtonGroupProvider, useButtonGroup] = createContext2({
  strict: false,
  name: "ButtonGroupContext"
});

// node_modules/@chakra-ui/button/dist/chunk-DA7QIPTJ.mjs
var import_react92 = __toESM(require_react(), 1);
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
var attachedStyles = {
  horizontal: {
    "> *:first-of-type:not(:last-of-type)": { borderEndRadius: 0 },
    "> *:not(:first-of-type):not(:last-of-type)": { borderRadius: 0 },
    "> *:not(:first-of-type):last-of-type": { borderStartRadius: 0 }
  },
  vertical: {
    "> *:first-of-type:not(:last-of-type)": { borderBottomRadius: 0 },
    "> *:not(:first-of-type):not(:last-of-type)": { borderRadius: 0 },
    "> *:not(:first-of-type):last-of-type": { borderTopRadius: 0 }
  }
};
var gapStyles = {
  horizontal: (spacing4) => ({
    "& > *:not(style) ~ *:not(style)": { marginStart: spacing4 }
  }),
  vertical: (spacing4) => ({
    "& > *:not(style) ~ *:not(style)": { marginTop: spacing4 }
  })
};
var ButtonGroup = forwardRef3(
  function ButtonGroup2(props, ref) {
    const {
      size: size4,
      colorScheme,
      variant,
      className,
      spacing: spacing4 = "0.5rem",
      isAttached,
      isDisabled: isDisabled3,
      orientation = "horizontal",
      ...rest
    } = props;
    const _className = cx("chakra-button__group", className);
    const context2 = (0, import_react92.useMemo)(
      () => ({ size: size4, colorScheme, variant, isDisabled: isDisabled3 }),
      [size4, colorScheme, variant, isDisabled3]
    );
    let groupStyles = {
      display: "inline-flex",
      ...isAttached ? attachedStyles[orientation] : gapStyles[orientation](spacing4)
    };
    const isVertical = orientation === "vertical";
    return (0, import_jsx_runtime46.jsx)(ButtonGroupProvider, { value: context2, children: (0, import_jsx_runtime46.jsx)(
      chakra.div,
      {
        ref,
        role: "group",
        __css: groupStyles,
        className: _className,
        "data-attached": isAttached ? "" : void 0,
        "data-orientation": orientation,
        flexDir: isVertical ? "column" : void 0,
        ...rest
      }
    ) });
  }
);
ButtonGroup.displayName = "ButtonGroup";

// node_modules/@chakra-ui/button/dist/chunk-J37R6SZE.mjs
var import_react93 = __toESM(require_react(), 1);
function useButtonType(value) {
  const [isButton, setIsButton] = (0, import_react93.useState)(!value);
  const refCallback = (0, import_react93.useCallback)((node3) => {
    if (!node3)
      return;
    setIsButton(node3.tagName === "BUTTON");
  }, []);
  const type = isButton ? "button" : void 0;
  return { ref: refCallback, type };
}

// node_modules/@chakra-ui/button/dist/chunk-3RENZ2UO.mjs
var import_react94 = __toESM(require_react(), 1);
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
function ButtonIcon(props) {
  const { children, className, ...rest } = props;
  const _children = (0, import_react94.isValidElement)(children) ? (0, import_react94.cloneElement)(children, {
    "aria-hidden": true,
    focusable: false
  }) : children;
  const _className = cx("chakra-button__icon", className);
  return (0, import_jsx_runtime47.jsx)(
    chakra.span,
    {
      display: "inline-flex",
      alignSelf: "center",
      flexShrink: 0,
      ...rest,
      className: _className,
      children: _children
    }
  );
}
ButtonIcon.displayName = "ButtonIcon";

// node_modules/@chakra-ui/button/dist/chunk-QB2Y5VKH.mjs
var import_react95 = __toESM(require_react(), 1);
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
function ButtonSpinner(props) {
  const {
    label,
    placement,
    spacing: spacing4 = "0.5rem",
    children = (0, import_jsx_runtime48.jsx)(Spinner, { color: "currentColor", width: "1em", height: "1em" }),
    className,
    __css,
    ...rest
  } = props;
  const _className = cx("chakra-button__spinner", className);
  const marginProp = placement === "start" ? "marginEnd" : "marginStart";
  const spinnerStyles = (0, import_react95.useMemo)(
    () => ({
      display: "flex",
      alignItems: "center",
      position: label ? "relative" : "absolute",
      [marginProp]: label ? spacing4 : 0,
      fontSize: "1em",
      lineHeight: "normal",
      ...__css
    }),
    [__css, label, marginProp, spacing4]
  );
  return (0, import_jsx_runtime48.jsx)(chakra.div, { className: _className, ...rest, __css: spinnerStyles, children });
}
ButtonSpinner.displayName = "ButtonSpinner";

// node_modules/@chakra-ui/button/dist/chunk-UVUR7MCU.mjs
var import_react96 = __toESM(require_react(), 1);
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var Button = forwardRef3((props, ref) => {
  const group = useButtonGroup();
  const styles2 = useStyleConfig("Button", { ...group, ...props });
  const {
    isDisabled: isDisabled3 = group == null ? void 0 : group.isDisabled,
    isLoading,
    isActive,
    children,
    leftIcon,
    rightIcon,
    loadingText,
    iconSpacing: iconSpacing2 = "0.5rem",
    type,
    spinner,
    spinnerPlacement = "start",
    className,
    as,
    ...rest
  } = omitThemingProps(props);
  const buttonStyles = (0, import_react96.useMemo)(() => {
    const _focus = { ...styles2 == null ? void 0 : styles2["_focus"], zIndex: 1 };
    return {
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      justifyContent: "center",
      userSelect: "none",
      position: "relative",
      whiteSpace: "nowrap",
      verticalAlign: "middle",
      outline: "none",
      ...styles2,
      ...!!group && { _focus }
    };
  }, [styles2, group]);
  const { ref: _ref4, type: defaultType } = useButtonType(as);
  const contentProps = { rightIcon, leftIcon, iconSpacing: iconSpacing2, children };
  return (0, import_jsx_runtime49.jsxs)(
    chakra.button,
    {
      ref: useMergeRefs(ref, _ref4),
      as,
      type: type != null ? type : defaultType,
      "data-active": dataAttr(isActive),
      "data-loading": dataAttr(isLoading),
      __css: buttonStyles,
      className: cx("chakra-button", className),
      ...rest,
      disabled: isDisabled3 || isLoading,
      children: [
        isLoading && spinnerPlacement === "start" && (0, import_jsx_runtime49.jsx)(
          ButtonSpinner,
          {
            className: "chakra-button__spinner--start",
            label: loadingText,
            placement: "start",
            spacing: iconSpacing2,
            children: spinner
          }
        ),
        isLoading ? loadingText || (0, import_jsx_runtime49.jsx)(chakra.span, { opacity: 0, children: (0, import_jsx_runtime49.jsx)(ButtonContent, { ...contentProps }) }) : (0, import_jsx_runtime49.jsx)(ButtonContent, { ...contentProps }),
        isLoading && spinnerPlacement === "end" && (0, import_jsx_runtime49.jsx)(
          ButtonSpinner,
          {
            className: "chakra-button__spinner--end",
            label: loadingText,
            placement: "end",
            spacing: iconSpacing2,
            children: spinner
          }
        )
      ]
    }
  );
});
Button.displayName = "Button";
function ButtonContent(props) {
  const { leftIcon, rightIcon, children, iconSpacing: iconSpacing2 } = props;
  return (0, import_jsx_runtime49.jsxs)(import_jsx_runtime49.Fragment, { children: [
    leftIcon && (0, import_jsx_runtime49.jsx)(ButtonIcon, { marginEnd: iconSpacing2, children: leftIcon }),
    children,
    rightIcon && (0, import_jsx_runtime49.jsx)(ButtonIcon, { marginStart: iconSpacing2, children: rightIcon })
  ] });
}

// node_modules/@chakra-ui/button/dist/chunk-6QYXN73V.mjs
var import_react97 = __toESM(require_react(), 1);
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var IconButton = forwardRef3(
  (props, ref) => {
    const { icon, children, isRound, "aria-label": ariaLabel, ...rest } = props;
    const element = icon || children;
    const _children = (0, import_react97.isValidElement)(element) ? (0, import_react97.cloneElement)(element, {
      "aria-hidden": true,
      focusable: false
    }) : null;
    return (0, import_jsx_runtime50.jsx)(
      Button,
      {
        padding: "0",
        borderRadius: isRound ? "full" : void 0,
        ref,
        "aria-label": ariaLabel,
        ...rest,
        children: _children
      }
    );
  }
);
IconButton.displayName = "IconButton";

// node_modules/@chakra-ui/card/dist/chunk-HAZMUPV3.mjs
var [CardStylesProvider, useCardStyles] = createStylesContext("Card");

// node_modules/@chakra-ui/card/dist/chunk-FHHZMTWR.mjs
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var CardBody = forwardRef3(function CardBody2(props, ref) {
  const { className, ...rest } = props;
  const styles2 = useCardStyles();
  return (0, import_jsx_runtime51.jsx)(
    chakra.div,
    {
      ref,
      className: cx("chakra-card__body", className),
      __css: styles2.body,
      ...rest
    }
  );
});

// node_modules/@chakra-ui/card/dist/chunk-BDSTZZXD.mjs
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var CardFooter = forwardRef3(
  function CardFooter2(props, ref) {
    const { className, justify, ...rest } = props;
    const styles2 = useCardStyles();
    return (0, import_jsx_runtime52.jsx)(
      chakra.div,
      {
        ref,
        className: cx("chakra-card__footer", className),
        __css: {
          display: "flex",
          justifyContent: justify,
          ...styles2.footer
        },
        ...rest
      }
    );
  }
);

// node_modules/@chakra-ui/card/dist/chunk-2EW3JUUD.mjs
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var CardHeader = forwardRef3(
  function CardHeader2(props, ref) {
    const { className, ...rest } = props;
    const styles2 = useCardStyles();
    return (0, import_jsx_runtime53.jsx)(
      chakra.div,
      {
        ref,
        className: cx("chakra-card__header", className),
        __css: styles2.header,
        ...rest
      }
    );
  }
);

// node_modules/@chakra-ui/card/dist/chunk-YQO7BFFX.mjs
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var Card = forwardRef3(function Card2(props, ref) {
  const {
    className,
    children,
    direction: direction2 = "column",
    justify,
    align,
    ...rest
  } = omitThemingProps(props);
  const styles2 = useMultiStyleConfig("Card", props);
  return (0, import_jsx_runtime54.jsx)(
    chakra.div,
    {
      ref,
      className: cx("chakra-card", className),
      __css: {
        display: "flex",
        flexDirection: direction2,
        justifyContent: justify,
        alignItems: align,
        position: "relative",
        minWidth: 0,
        wordWrap: "break-word",
        ...styles2.container
      },
      ...rest,
      children: (0, import_jsx_runtime54.jsx)(CardStylesProvider, { value: styles2, children })
    }
  );
});

// node_modules/@chakra-ui/checkbox/dist/chunk-LYGBQ47X.mjs
var [CheckboxGroupProvider, useCheckboxGroupContext] = createContext2({
  name: "CheckboxGroupContext",
  strict: false
});

// node_modules/@chakra-ui/checkbox/dist/chunk-TOQK4WO2.mjs
var import_react98 = __toESM(require_react(), 1);
function isInputEvent2(value) {
  return value && isObject(value) && isObject(value.target);
}
function useCheckboxGroup(props = {}) {
  const {
    defaultValue: defaultValue2,
    value: valueProp,
    onChange: onChange2,
    isDisabled: isDisabled3,
    isNative
  } = props;
  const onChangeProp = useCallbackRef(onChange2);
  const [value, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue2 || [],
    onChange: onChangeProp
  });
  const handleChange = (0, import_react98.useCallback)(
    (eventOrValue) => {
      if (!value)
        return;
      const isChecked = isInputEvent2(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);
      const selectedValue = isInputEvent2(eventOrValue) ? eventOrValue.target.value : eventOrValue;
      const nextValue = isChecked ? [...value, selectedValue] : value.filter((v) => String(v) !== String(selectedValue));
      setValue(nextValue);
    },
    [setValue, value]
  );
  const getCheckboxProps = (0, import_react98.useCallback)(
    (props2 = {}) => {
      const checkedKey = isNative ? "checked" : "isChecked";
      return {
        ...props2,
        [checkedKey]: value.some((val) => String(props2.value) === String(val)),
        onChange: handleChange
      };
    },
    [handleChange, isNative, value]
  );
  return {
    value,
    isDisabled: isDisabled3,
    onChange: handleChange,
    setValue,
    getCheckboxProps
  };
}

// node_modules/@chakra-ui/checkbox/dist/chunk-CKJ5T3MX.mjs
var import_react99 = __toESM(require_react(), 1);
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
function CheckboxGroup(props) {
  const { colorScheme, size: size4, variant, children, isDisabled: isDisabled3 } = props;
  const { value, onChange: onChange2 } = useCheckboxGroup(props);
  const group = (0, import_react99.useMemo)(
    () => ({
      size: size4,
      onChange: onChange2,
      colorScheme,
      value,
      variant,
      isDisabled: isDisabled3
    }),
    [size4, onChange2, colorScheme, value, variant, isDisabled3]
  );
  return (0, import_jsx_runtime55.jsx)(CheckboxGroupProvider, { value: group, children });
}
CheckboxGroup.displayName = "CheckboxGroup";

// node_modules/@chakra-ui/checkbox/dist/chunk-2TOCDA5N.mjs
var import_react100 = __toESM(require_react(), 1);
function useInitialAnimationState(isChecked) {
  const [previousIsChecked, setPreviousIsChecked] = (0, import_react100.useState)(isChecked);
  const [shouldAnimate, setShouldAnimate] = (0, import_react100.useState)(false);
  if (isChecked !== previousIsChecked) {
    setShouldAnimate(true);
    setPreviousIsChecked(isChecked);
  }
  return shouldAnimate;
}

// node_modules/@chakra-ui/checkbox/dist/chunk-ULEC7HZU.mjs
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
function CheckIcon2(props) {
  return (0, import_jsx_runtime56.jsx)(
    chakra.svg,
    {
      width: "1.2em",
      viewBox: "0 0 12 10",
      style: {
        fill: "none",
        strokeWidth: 2,
        stroke: "currentColor",
        strokeDasharray: 16
      },
      ...props,
      children: (0, import_jsx_runtime56.jsx)("polyline", { points: "1.5 6 4.5 9 10.5 1" })
    }
  );
}
function IndeterminateIcon(props) {
  return (0, import_jsx_runtime56.jsx)(
    chakra.svg,
    {
      width: "1.2em",
      viewBox: "0 0 24 24",
      style: { stroke: "currentColor", strokeWidth: 4 },
      ...props,
      children: (0, import_jsx_runtime56.jsx)("line", { x1: "21", x2: "3", y1: "12", y2: "12" })
    }
  );
}
function CheckboxIcon(props) {
  const { isIndeterminate, isChecked, ...rest } = props;
  const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon2;
  return isChecked || isIndeterminate ? (0, import_jsx_runtime56.jsx)(
    chakra.div,
    {
      style: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        height: "100%"
      },
      children: (0, import_jsx_runtime56.jsx)(BaseIcon, { ...rest })
    }
  ) : null;
}

// node_modules/@chakra-ui/form-control/dist/chunk-DFWC5MHP.mjs
var import_react101 = __toESM(require_react(), 1);
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
var [FormControlStylesProvider, useFormControlStyles] = createContext2({
  name: `FormControlStylesContext`,
  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider, useFormControlContext] = createContext2({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled: isDisabled3,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = (0, import_react101.useId)();
  const id3 = idProp || `field-${uuid}`;
  const labelId = `${id3}-label`;
  const feedbackId = `${id3}-feedback`;
  const helpTextId = `${id3}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = (0, import_react101.useState)(false);
  const [hasHelpText, setHasHelpText] = (0, import_react101.useState)(false);
  const [isFocused, setFocus] = (0, import_react101.useState)(false);
  const getHelpTextProps = (0, import_react101.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      /**
       * Notify the field context when the help text is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */
      ref: mergeRefs2(forwardedRef, (node3) => {
        if (!node3)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = (0, import_react101.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled3),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id3
    }),
    [id3, isDisabled3, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = (0, import_react101.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      /**
       * Notify the field context when the error message is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */
      ref: mergeRefs2(forwardedRef, (node3) => {
        if (!node3)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = (0, import_react101.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group",
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled3),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly)
    }),
    [htmlProps, isDisabled3, isFocused, isInvalid, isReadOnly]
  );
  const getRequiredIndicatorProps = (0, import_react101.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled3,
    isFocused: !!isFocused,
    onFocus: () => setFocus(true),
    onBlur: () => setFocus(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id3,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl = forwardRef3(
  function FormControl2(props, ref) {
    const styles2 = useMultiStyleConfig("Form", props);
    const ownProps = omitThemingProps(props);
    const {
      getRootProps,
      htmlProps: _,
      ...context2
    } = useFormControlProvider(ownProps);
    const className = cx("chakra-form-control", props.className);
    return (0, import_jsx_runtime57.jsx)(FormControlProvider, { value: context2, children: (0, import_jsx_runtime57.jsx)(FormControlStylesProvider, { value: styles2, children: (0, import_jsx_runtime57.jsx)(
      chakra.div,
      {
        ...getRootProps({}, ref),
        className,
        __css: styles2["container"]
      }
    ) }) });
  }
);
FormControl.displayName = "FormControl";
var FormHelperText = forwardRef3(
  function FormHelperText2(props, ref) {
    const field = useFormControlContext();
    const styles2 = useFormControlStyles();
    const className = cx("chakra-form__helper-text", props.className);
    return (0, import_jsx_runtime57.jsx)(
      chakra.div,
      {
        ...field == null ? void 0 : field.getHelpTextProps(props, ref),
        __css: styles2.helperText,
        className
      }
    );
  }
);
FormHelperText.displayName = "FormHelperText";

// node_modules/@chakra-ui/form-control/dist/chunk-VGESXGVT.mjs
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var [FormErrorStylesProvider, useFormErrorStyles] = createContext2({
  name: `FormErrorStylesContext`,
  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `
});
var FormErrorMessage = forwardRef3(
  (props, ref) => {
    const styles2 = useMultiStyleConfig("FormError", props);
    const ownProps = omitThemingProps(props);
    const field = useFormControlContext();
    if (!(field == null ? void 0 : field.isInvalid))
      return null;
    return (0, import_jsx_runtime58.jsx)(FormErrorStylesProvider, { value: styles2, children: (0, import_jsx_runtime58.jsx)(
      chakra.div,
      {
        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),
        className: cx("chakra-form__error-message", props.className),
        __css: {
          display: "flex",
          alignItems: "center",
          ...styles2.text
        }
      }
    ) });
  }
);
FormErrorMessage.displayName = "FormErrorMessage";
var FormErrorIcon = forwardRef3((props, ref) => {
  const styles2 = useFormErrorStyles();
  const field = useFormControlContext();
  if (!(field == null ? void 0 : field.isInvalid))
    return null;
  const _className = cx("chakra-form__error-icon", props.className);
  return (0, import_jsx_runtime58.jsx)(
    Icon,
    {
      ref,
      "aria-hidden": true,
      ...props,
      __css: styles2.icon,
      className: _className,
      children: (0, import_jsx_runtime58.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  );
});
FormErrorIcon.displayName = "FormErrorIcon";

// node_modules/@chakra-ui/form-control/dist/chunk-H46NUPBZ.mjs
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var FormLabel = forwardRef3(function FormLabel2(passedProps, ref) {
  var _a9;
  const styles2 = useStyleConfig("FormLabel", passedProps);
  const props = omitThemingProps(passedProps);
  const {
    className,
    children,
    requiredIndicator = (0, import_jsx_runtime59.jsx)(RequiredIndicator, {}),
    optionalIndicator = null,
    ...rest
  } = props;
  const field = useFormControlContext();
  const ownProps = (_a9 = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a9 : { ref, ...rest };
  return (0, import_jsx_runtime59.jsxs)(
    chakra.label,
    {
      ...ownProps,
      className: cx("chakra-form__label", props.className),
      __css: {
        display: "block",
        textAlign: "start",
        ...styles2
      },
      children: [
        children,
        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
      ]
    }
  );
});
FormLabel.displayName = "FormLabel";
var RequiredIndicator = forwardRef3(
  function RequiredIndicator2(props, ref) {
    const field = useFormControlContext();
    const styles2 = useFormControlStyles();
    if (!(field == null ? void 0 : field.isRequired))
      return null;
    const className = cx("chakra-form__required-indicator", props.className);
    return (0, import_jsx_runtime59.jsx)(
      chakra.span,
      {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),
        __css: styles2.requiredIndicator,
        className
      }
    );
  }
);
RequiredIndicator.displayName = "RequiredIndicator";

// node_modules/@chakra-ui/form-control/dist/chunk-56K2BSAJ.mjs
function useFormControl(props) {
  const { isDisabled: isDisabled3, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps(props);
  return {
    ...rest,
    disabled: isDisabled3,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  };
}
function useFormControlProps(props) {
  var _a9, _b5, _c3;
  const field = useFormControlContext();
  const {
    id: id3,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled: isDisabled3,
    onFocus: onFocus4,
    onBlur: onBlur3,
    ...rest
  } = props;
  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {
    labelIds.push(field.feedbackId);
  }
  if (field == null ? void 0 : field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id3 != null ? id3 : field == null ? void 0 : field.id,
    isDisabled: (_a9 = disabled != null ? disabled : isDisabled3) != null ? _a9 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_b5 = readOnly != null ? readOnly : isReadOnly) != null ? _b5 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_c3 = required != null ? required : isRequired) != null ? _c3 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus4),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur3)
  };
}

// node_modules/@chakra-ui/visually-hidden/dist/chunk-3JHDQ75O.mjs
var visuallyHiddenStyle = {
  border: "0",
  clip: "rect(0, 0, 0, 0)",
  height: "1px",
  width: "1px",
  margin: "-1px",
  padding: "0",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};

// node_modules/@chakra-ui/visually-hidden/dist/chunk-KO6Q73AP.mjs
var VisuallyHidden = chakra("span", {
  baseStyle: visuallyHiddenStyle
});
VisuallyHidden.displayName = "VisuallyHidden";
var VisuallyHiddenInput = chakra("input", {
  baseStyle: visuallyHiddenStyle
});
VisuallyHiddenInput.displayName = "VisuallyHiddenInput";

// node_modules/@zag-js/dom-query/dist/index.mjs
function itemById(v, id3) {
  return v.find((node3) => node3.id === id3);
}
function indexOfId(v, id3) {
  const item = itemById(v, id3);
  return item ? v.indexOf(item) : -1;
}
var getValueText = (item) => item.dataset.valuetext ?? item.textContent ?? "";
var match2 = (valueText, query2) => valueText.toLowerCase().startsWith(query2.toLowerCase());
var wrap3 = (v, idx) => {
  return v.map((_, index5) => v[(Math.max(idx, 0) + index5) % v.length]);
};
function getByText(v, text, currentId) {
  const index5 = currentId ? indexOfId(v, currentId) : -1;
  let items = currentId ? wrap3(v, index5) : v;
  const isSingleKey = text.length === 1;
  if (isSingleKey) {
    items = items.filter((item) => item.id !== currentId);
  }
  return items.find((item) => match2(getValueText(item), text));
}
function getByTypeaheadImpl(_items, options2) {
  const { state: state2, activeId, key: key2, timeout = 350 } = options2;
  const search = state2.keysSoFar + key2;
  const isRepeated = search.length > 1 && Array.from(search).every((char2) => char2 === search[0]);
  const query2 = isRepeated ? search[0] : search;
  let items = _items.slice();
  const next2 = getByText(items, query2, activeId);
  function cleanup() {
    clearTimeout(state2.timer);
    state2.timer = -1;
  }
  function update(value) {
    state2.keysSoFar = value;
    cleanup();
    if (value !== "") {
      state2.timer = +setTimeout(() => {
        update("");
        cleanup();
      }, timeout);
    }
  }
  update(search);
  return next2;
}
var getByTypeahead = Object.assign(getByTypeaheadImpl, {
  defaultOptions: { keysSoFar: "", timer: -1 },
  isValidEvent: isValidTypeaheadEvent
});
function isValidTypeaheadEvent(event) {
  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
}
var isDom = () => typeof document !== "undefined";

// node_modules/@zag-js/focus-visible/dist/index.mjs
var hasSetup = false;
var modality = null;
var hasEventBeforeFocus = false;
var hasBlurredWindowRecently = false;
var handlers = /* @__PURE__ */ new Set();
function trigger(modality2, event) {
  handlers.forEach((handler) => handler(modality2, event));
}
var isMac = typeof window !== "undefined" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;
function isValidKey(e) {
  return !(e.metaKey || !isMac && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function onKeyboardEvent(event) {
  hasEventBeforeFocus = true;
  if (isValidKey(event)) {
    modality = "keyboard";
    trigger("keyboard", event);
  }
}
function onPointerEvent(event) {
  modality = "pointer";
  if (event.type === "mousedown" || event.type === "pointerdown") {
    hasEventBeforeFocus = true;
    const target = event.composedPath ? event.composedPath()[0] : event.target;
    let matches = false;
    try {
      matches = target.matches(":focus-visible");
    } catch {
    }
    if (matches)
      return;
    trigger("pointer", event);
  }
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted)
    return true;
  return event.detail === 0 && !event.pointerType;
}
function onClickEvent(e) {
  if (isVirtualClick(e)) {
    hasEventBeforeFocus = true;
    modality = "virtual";
  }
}
function onWindowFocus(event) {
  if (event.target === window || event.target === document) {
    return;
  }
  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {
    modality = "virtual";
    trigger("virtual", event);
  }
  hasEventBeforeFocus = false;
  hasBlurredWindowRecently = false;
}
function onWindowBlur() {
  hasEventBeforeFocus = false;
  hasBlurredWindowRecently = true;
}
function isFocusVisible() {
  return modality !== "pointer";
}
function setupGlobalFocusEvents() {
  if (!isDom() || hasSetup) {
    return;
  }
  const { focus: focus2 } = HTMLElement.prototype;
  HTMLElement.prototype.focus = function focusElement(...args) {
    hasEventBeforeFocus = true;
    focus2.apply(this, args);
  };
  document.addEventListener("keydown", onKeyboardEvent, true);
  document.addEventListener("keyup", onKeyboardEvent, true);
  document.addEventListener("click", onClickEvent, true);
  window.addEventListener("focus", onWindowFocus, true);
  window.addEventListener("blur", onWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", onPointerEvent, true);
    document.addEventListener("pointermove", onPointerEvent, true);
    document.addEventListener("pointerup", onPointerEvent, true);
  } else {
    document.addEventListener("mousedown", onPointerEvent, true);
    document.addEventListener("mousemove", onPointerEvent, true);
    document.addEventListener("mouseup", onPointerEvent, true);
  }
  hasSetup = true;
}
function trackFocusVisible(fn2) {
  setupGlobalFocusEvents();
  fn2(isFocusVisible());
  const handler = () => fn2(isFocusVisible());
  handlers.add(handler);
  return () => {
    handlers.delete(handler);
  };
}

// node_modules/@chakra-ui/checkbox/dist/chunk-7D6N5TE5.mjs
var import_react102 = __toESM(require_react(), 1);
function omit5(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key2 of keysToOmit) {
    if (key2 in clone) {
      delete clone[key2];
    }
  }
  return clone;
}
function useCheckbox(props = {}) {
  const formControlProps = useFormControlProps(props);
  const {
    isDisabled: isDisabled3,
    isReadOnly,
    isRequired,
    isInvalid,
    id: id3,
    onBlur: onBlur3,
    onFocus: onFocus4,
    "aria-describedby": ariaDescribedBy
  } = formControlProps;
  const {
    defaultChecked,
    isChecked: checkedProp,
    isFocusable: isFocusable4,
    onChange: onChange2,
    isIndeterminate,
    name,
    value,
    tabIndex = void 0,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-invalid": ariaInvalid,
    ...rest
  } = props;
  const htmlProps = omit5(rest, [
    "isDisabled",
    "isReadOnly",
    "isRequired",
    "isInvalid",
    "id",
    "onBlur",
    "onFocus",
    "aria-describedby"
  ]);
  const onChangeProp = useCallbackRef(onChange2);
  const onBlurProp = useCallbackRef(onBlur3);
  const onFocusProp = useCallbackRef(onFocus4);
  const [isFocusVisible2, setIsFocusVisible] = (0, import_react102.useState)(false);
  const [isFocused, setFocused] = (0, import_react102.useState)(false);
  const [isHovered, setHovered] = (0, import_react102.useState)(false);
  const [isActive, setActive] = (0, import_react102.useState)(false);
  (0, import_react102.useEffect)(() => {
    return trackFocusVisible(setIsFocusVisible);
  }, []);
  const inputRef = (0, import_react102.useRef)(null);
  const [rootIsLabelElement, setRootIsLabelElement] = (0, import_react102.useState)(true);
  const [checkedState, setCheckedState] = (0, import_react102.useState)(!!defaultChecked);
  const isControlled = checkedProp !== void 0;
  const isChecked = isControlled ? checkedProp : checkedState;
  const handleChange = (0, import_react102.useCallback)(
    (event) => {
      if (isReadOnly || isDisabled3) {
        event.preventDefault();
        return;
      }
      if (!isControlled) {
        if (isChecked) {
          setCheckedState(event.target.checked);
        } else {
          setCheckedState(isIndeterminate ? true : event.target.checked);
        }
      }
      onChangeProp == null ? void 0 : onChangeProp(event);
    },
    [
      isReadOnly,
      isDisabled3,
      isChecked,
      isControlled,
      isIndeterminate,
      onChangeProp
    ]
  );
  useSafeLayoutEffect(() => {
    if (inputRef.current) {
      inputRef.current.indeterminate = Boolean(isIndeterminate);
    }
  }, [isIndeterminate]);
  useUpdateEffect(() => {
    if (isDisabled3) {
      setFocused(false);
    }
  }, [isDisabled3, setFocused]);
  useSafeLayoutEffect(() => {
    const el = inputRef.current;
    if (!(el == null ? void 0 : el.form))
      return;
    const formResetListener = () => {
      setCheckedState(!!defaultChecked);
    };
    el.form.addEventListener("reset", formResetListener);
    return () => {
      var _a9;
      return (_a9 = el.form) == null ? void 0 : _a9.removeEventListener("reset", formResetListener);
    };
  }, []);
  const trulyDisabled = isDisabled3 && !isFocusable4;
  const onKeyDown = (0, import_react102.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(true);
      }
    },
    [setActive]
  );
  const onKeyUp = (0, import_react102.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(false);
      }
    },
    [setActive]
  );
  useSafeLayoutEffect(() => {
    if (!inputRef.current)
      return;
    const notInSync = inputRef.current.checked !== isChecked;
    if (notInSync) {
      setCheckedState(inputRef.current.checked);
    }
  }, [inputRef.current]);
  const getCheckboxProps = (0, import_react102.useCallback)(
    (props2 = {}, forwardedRef = null) => {
      const onPressDown = (event) => {
        if (isFocused) {
          event.preventDefault();
        }
        setActive(true);
      };
      return {
        ...props2,
        ref: forwardedRef,
        "data-active": dataAttr(isActive),
        "data-hover": dataAttr(isHovered),
        "data-checked": dataAttr(isChecked),
        "data-focus": dataAttr(isFocused),
        "data-focus-visible": dataAttr(isFocused && isFocusVisible2),
        "data-indeterminate": dataAttr(isIndeterminate),
        "data-disabled": dataAttr(isDisabled3),
        "data-invalid": dataAttr(isInvalid),
        "data-readonly": dataAttr(isReadOnly),
        "aria-hidden": true,
        onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),
        onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),
        onMouseEnter: callAllHandlers(
          props2.onMouseEnter,
          () => setHovered(true)
        ),
        onMouseLeave: callAllHandlers(
          props2.onMouseLeave,
          () => setHovered(false)
        )
      };
    },
    [
      isActive,
      isChecked,
      isDisabled3,
      isFocused,
      isFocusVisible2,
      isHovered,
      isIndeterminate,
      isInvalid,
      isReadOnly
    ]
  );
  const getIndicatorProps = (0, import_react102.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-active": dataAttr(isActive),
      "data-hover": dataAttr(isHovered),
      "data-checked": dataAttr(isChecked),
      "data-focus": dataAttr(isFocused),
      "data-focus-visible": dataAttr(isFocused && isFocusVisible2),
      "data-indeterminate": dataAttr(isIndeterminate),
      "data-disabled": dataAttr(isDisabled3),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly)
    }),
    [
      isActive,
      isChecked,
      isDisabled3,
      isFocused,
      isFocusVisible2,
      isHovered,
      isIndeterminate,
      isInvalid,
      isReadOnly
    ]
  );
  const getRootProps = (0, import_react102.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...htmlProps,
      ...props2,
      ref: mergeRefs2(forwardedRef, (node3) => {
        if (!node3)
          return;
        setRootIsLabelElement(node3.tagName === "LABEL");
      }),
      onClick: callAllHandlers(props2.onClick, () => {
        var _a9;
        if (!rootIsLabelElement) {
          (_a9 = inputRef.current) == null ? void 0 : _a9.click();
          requestAnimationFrame(() => {
            var _a24;
            (_a24 = inputRef.current) == null ? void 0 : _a24.focus({ preventScroll: true });
          });
        }
      }),
      "data-disabled": dataAttr(isDisabled3),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    }),
    [htmlProps, isDisabled3, isChecked, isInvalid, rootIsLabelElement]
  );
  const getInputProps = (0, import_react102.useCallback)(
    (props2 = {}, forwardedRef = null) => {
      return {
        ...props2,
        ref: mergeRefs2(inputRef, forwardedRef),
        type: "checkbox",
        name,
        value,
        id: id3,
        tabIndex,
        onChange: callAllHandlers(props2.onChange, handleChange),
        onBlur: callAllHandlers(
          props2.onBlur,
          onBlurProp,
          () => setFocused(false)
        ),
        onFocus: callAllHandlers(
          props2.onFocus,
          onFocusProp,
          () => setFocused(true)
        ),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
        onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
        required: isRequired,
        checked: isChecked,
        disabled: trulyDisabled,
        readOnly: isReadOnly,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        "aria-invalid": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,
        "aria-describedby": ariaDescribedBy,
        "aria-disabled": isDisabled3,
        style: visuallyHiddenStyle
      };
    },
    [
      name,
      value,
      id3,
      handleChange,
      onBlurProp,
      onFocusProp,
      onKeyDown,
      onKeyUp,
      isRequired,
      isChecked,
      trulyDisabled,
      isReadOnly,
      ariaLabel,
      ariaLabelledBy,
      ariaInvalid,
      isInvalid,
      ariaDescribedBy,
      isDisabled3,
      tabIndex
    ]
  );
  const getLabelProps = (0, import_react102.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),
      "data-disabled": dataAttr(isDisabled3),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    }),
    [isChecked, isDisabled3, isInvalid]
  );
  const state2 = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isIndeterminate,
    isDisabled: isDisabled3,
    isReadOnly,
    isRequired
  };
  return {
    state: state2,
    getRootProps,
    getCheckboxProps,
    getIndicatorProps,
    getInputProps,
    getLabelProps,
    htmlProps
  };
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}

// node_modules/@chakra-ui/checkbox/dist/chunk-CWVAJCXJ.mjs
var import_react103 = __toESM(require_react(), 1);
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var controlStyles = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  verticalAlign: "top",
  userSelect: "none",
  flexShrink: 0
};
var rootStyles = {
  cursor: "pointer",
  display: "inline-flex",
  alignItems: "center",
  verticalAlign: "top",
  position: "relative"
};
var checkAnim = keyframes({
  from: {
    opacity: 0,
    strokeDashoffset: 16,
    transform: "scale(0.95)"
  },
  to: {
    opacity: 1,
    strokeDashoffset: 0,
    transform: "scale(1)"
  }
});
var indeterminateOpacityAnim = keyframes({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});
var indeterminateScaleAnim = keyframes({
  from: {
    transform: "scaleX(0.65)"
  },
  to: {
    transform: "scaleX(1)"
  }
});
var Checkbox = forwardRef3(function Checkbox2(props, ref) {
  const group = useCheckboxGroupContext();
  const mergedProps = { ...group, ...props };
  const styles2 = useMultiStyleConfig("Checkbox", mergedProps);
  const ownProps = omitThemingProps(props);
  const {
    spacing: spacing4 = "0.5rem",
    className,
    children,
    iconColor,
    iconSize,
    icon = (0, import_jsx_runtime60.jsx)(CheckboxIcon, {}),
    isChecked: isCheckedProp,
    isDisabled: isDisabled3 = group == null ? void 0 : group.isDisabled,
    onChange: onChangeProp,
    inputProps,
    ...rest
  } = ownProps;
  let isChecked = isCheckedProp;
  if ((group == null ? void 0 : group.value) && ownProps.value) {
    isChecked = group.value.includes(ownProps.value);
  }
  let onChange2 = onChangeProp;
  if ((group == null ? void 0 : group.onChange) && ownProps.value) {
    onChange2 = callAll(group.onChange, onChangeProp);
  }
  const {
    state: state2,
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps
  } = useCheckbox({
    ...rest,
    isDisabled: isDisabled3,
    isChecked,
    onChange: onChange2
  });
  const shouldAnimate = useInitialAnimationState(state2.isChecked);
  const iconStyles = (0, import_react103.useMemo)(
    () => ({
      animation: !shouldAnimate ? void 0 : state2.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,
      fontSize: iconSize,
      color: iconColor,
      ...styles2.icon
    }),
    [iconColor, iconSize, shouldAnimate, state2.isIndeterminate, styles2.icon]
  );
  const clonedIcon = (0, import_react103.cloneElement)(icon, {
    __css: iconStyles,
    isIndeterminate: state2.isIndeterminate,
    isChecked: state2.isChecked
  });
  return (0, import_jsx_runtime60.jsxs)(
    chakra.label,
    {
      __css: { ...rootStyles, ...styles2.container },
      className: cx("chakra-checkbox", className),
      ...getRootProps(),
      children: [
        (0, import_jsx_runtime60.jsx)(
          "input",
          {
            className: "chakra-checkbox__input",
            ...getInputProps(inputProps, ref)
          }
        ),
        (0, import_jsx_runtime60.jsx)(
          chakra.span,
          {
            __css: { ...controlStyles, ...styles2.control },
            className: "chakra-checkbox__control",
            ...getCheckboxProps(),
            children: clonedIcon
          }
        ),
        children && (0, import_jsx_runtime60.jsx)(
          chakra.span,
          {
            className: "chakra-checkbox__label",
            ...getLabelProps(),
            __css: {
              marginStart: spacing4,
              ...styles2.label
            },
            children
          }
        )
      ]
    }
  );
});
Checkbox.displayName = "Checkbox";

// node_modules/@chakra-ui/control-box/dist/chunk-P2CZ2AGB.mjs
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var ControlBox = (props) => {
  const {
    type = "checkbox",
    _hover,
    _invalid,
    _disabled,
    _focus,
    _checked,
    _child = { opacity: 0 },
    _checkedAndChild = { opacity: 1 },
    _checkedAndDisabled,
    _checkedAndFocus,
    _checkedAndHover,
    children,
    ...rest
  } = props;
  const checkedAndDisabled = `input[type=${type}]:checked:disabled + &`;
  const checkedAndHover = `input[type=${type}]:checked:hover:not(:disabled) + &`;
  const checkedAndFocus = `input[type=${type}]:checked:focus + &`;
  const disabled = `input[type=${type}]:disabled + &`;
  const focus2 = `input[type=${type}]:focus + &`;
  const hover = `input[type=${type}]:hover:not(:disabled):not(:checked) + &`;
  const checked = `input[type=${type}]:checked + &, input[type=${type}][aria-checked=mixed] + &`;
  const invalid = `input[type=${type}][aria-invalid=true] + &`;
  const child = `& > *`;
  return (0, import_jsx_runtime61.jsx)(
    chakra.div,
    {
      ...rest,
      "aria-hidden": true,
      __css: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        transitionProperty: "common",
        transitionDuration: "fast",
        flexShrink: 0,
        [focus2]: _focus,
        [hover]: _hover,
        [disabled]: _disabled,
        [invalid]: _invalid,
        [checkedAndDisabled]: _checkedAndDisabled,
        [checkedAndFocus]: _checkedAndFocus,
        [checkedAndHover]: _checkedAndHover,
        [child]: _child,
        [checked]: {
          ..._checked,
          [child]: _checkedAndChild
        }
      },
      children
    }
  );
};
ControlBox.displayName = "ControlBox";

// node_modules/@chakra-ui/number-utils/dist/index.mjs
function toNumber(value) {
  const num = parseFloat(value);
  return typeof num !== "number" || Number.isNaN(num) ? 0 : num;
}
function toPrecision2(value, precision) {
  let nextValue = toNumber(value);
  const scaleFactor = 10 ** (precision != null ? precision : 10);
  nextValue = Math.round(nextValue * scaleFactor) / scaleFactor;
  return precision ? nextValue.toFixed(precision) : nextValue.toString();
}
function countDecimalPlaces2(value) {
  if (!Number.isFinite(value))
    return 0;
  let e = 1;
  let p = 0;
  while (Math.round(value * e) / e !== value) {
    e *= 10;
    p += 1;
  }
  return p;
}
function valueToPercent2(value, min3, max3) {
  return (value - min3) * 100 / (max3 - min3);
}
function percentToValue2(percent3, min3, max3) {
  return (max3 - min3) * percent3 + min3;
}
function roundValueToStep2(value, from2, step) {
  const nextValue = Math.round((value - from2) / step) * step + from2;
  const precision = countDecimalPlaces2(step);
  return toPrecision2(nextValue, precision);
}
function clampValue2(value, min3, max3) {
  if (value == null)
    return value;
  if (max3 < min3) {
    console.warn("clamp: max cannot be less than min");
  }
  return Math.min(Math.max(value, min3), max3);
}

// node_modules/@chakra-ui/counter/dist/chunk-AB3TPYVS.mjs
var import_react104 = __toESM(require_react(), 1);
function useCounter(props = {}) {
  const {
    onChange: onChange2,
    precision: precisionProp,
    defaultValue: defaultValue2,
    value: valueProp,
    step: stepProp = 1,
    min: min3 = Number.MIN_SAFE_INTEGER,
    max: max3 = Number.MAX_SAFE_INTEGER,
    keepWithinRange = true
  } = props;
  const onChangeProp = useCallbackRef(onChange2);
  const [valueState, setValue] = (0, import_react104.useState)(() => {
    var _a9;
    if (defaultValue2 == null)
      return "";
    return (_a9 = cast2(defaultValue2, stepProp, precisionProp)) != null ? _a9 : "";
  });
  const isControlled = typeof valueProp !== "undefined";
  const value = isControlled ? valueProp : valueState;
  const decimalPlaces = getDecimalPlaces(parse2(value), stepProp);
  const precision = precisionProp != null ? precisionProp : decimalPlaces;
  const update = (0, import_react104.useCallback)(
    (next2) => {
      if (next2 === value)
        return;
      if (!isControlled) {
        setValue(next2.toString());
      }
      onChangeProp == null ? void 0 : onChangeProp(next2.toString(), parse2(next2));
    },
    [onChangeProp, isControlled, value]
  );
  const clamp8 = (0, import_react104.useCallback)(
    (value2) => {
      let nextValue = value2;
      if (keepWithinRange) {
        nextValue = clampValue2(nextValue, min3, max3);
      }
      return toPrecision2(nextValue, precision);
    },
    [precision, keepWithinRange, max3, min3]
  );
  const increment = (0, import_react104.useCallback)(
    (step = stepProp) => {
      let next2;
      if (value === "") {
        next2 = parse2(step);
      } else {
        next2 = parse2(value) + step;
      }
      next2 = clamp8(next2);
      update(next2);
    },
    [clamp8, stepProp, update, value]
  );
  const decrement = (0, import_react104.useCallback)(
    (step = stepProp) => {
      let next2;
      if (value === "") {
        next2 = parse2(-step);
      } else {
        next2 = parse2(value) - step;
      }
      next2 = clamp8(next2);
      update(next2);
    },
    [clamp8, stepProp, update, value]
  );
  const reset = (0, import_react104.useCallback)(() => {
    var _a9;
    let next2;
    if (defaultValue2 == null) {
      next2 = "";
    } else {
      next2 = (_a9 = cast2(defaultValue2, stepProp, precisionProp)) != null ? _a9 : min3;
    }
    update(next2);
  }, [defaultValue2, precisionProp, stepProp, update, min3]);
  const castValue = (0, import_react104.useCallback)(
    (value2) => {
      var _a9;
      const nextValue = (_a9 = cast2(value2, stepProp, precision)) != null ? _a9 : min3;
      update(nextValue);
    },
    [precision, stepProp, update, min3]
  );
  const valueAsNumber = parse2(value);
  const isOutOfRange = valueAsNumber > max3 || valueAsNumber < min3;
  const isAtMax = valueAsNumber === max3;
  const isAtMin = valueAsNumber === min3;
  return {
    isOutOfRange,
    isAtMax,
    isAtMin,
    precision,
    value,
    valueAsNumber,
    update,
    reset,
    increment,
    decrement,
    clamp: clamp8,
    cast: castValue,
    setValue
  };
}
function parse2(value) {
  return parseFloat(value.toString().replace(/[^\w.-]+/g, ""));
}
function getDecimalPlaces(value, step) {
  return Math.max(countDecimalPlaces2(step), countDecimalPlaces2(value));
}
function cast2(value, step, precision) {
  const parsedValue = parse2(value);
  if (Number.isNaN(parsedValue))
    return void 0;
  const decimalPlaces = getDecimalPlaces(parsedValue, step);
  return toPrecision2(parsedValue, precision != null ? precision : decimalPlaces);
}

// node_modules/@chakra-ui/editable/dist/chunk-WYY72ITE.mjs
var [EditableStylesProvider, useEditableStyles] = createContext2({
  name: `EditableStylesContext`,
  errorMessage: `useEditableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Editable />" `
});
var [EditableProvider, useEditableContext] = createContext2({
  name: "EditableContext",
  errorMessage: "useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`"
});

// node_modules/@chakra-ui/editable/dist/chunk-47M7OZ3U.mjs
function useEditableState() {
  const { isEditing, onSubmit, onCancel, onEdit, isDisabled: isDisabled3 } = useEditableContext();
  return {
    isEditing,
    onSubmit,
    onCancel,
    onEdit,
    isDisabled: isDisabled3
  };
}

// node_modules/@chakra-ui/editable/dist/chunk-6XCKNNTK.mjs
var commonStyles = {
  fontSize: "inherit",
  fontWeight: "inherit",
  textAlign: "inherit",
  bg: "transparent"
};

// node_modules/@chakra-ui/editable/dist/chunk-7XO4TBDN.mjs
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var EditableInput = forwardRef3(
  function EditableInput2(props, ref) {
    const { getInputProps } = useEditableContext();
    const styles2 = useEditableStyles();
    const inputProps = getInputProps(props, ref);
    const _className = cx("chakra-editable__input", props.className);
    return (0, import_jsx_runtime62.jsx)(
      chakra.input,
      {
        ...inputProps,
        __css: {
          outline: 0,
          ...commonStyles,
          ...styles2.input
        },
        className: _className
      }
    );
  }
);
EditableInput.displayName = "EditableInput";

// node_modules/@chakra-ui/editable/dist/chunk-USE7AZZJ.mjs
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var EditablePreview = forwardRef3(
  function EditablePreview2(props, ref) {
    const { getPreviewProps } = useEditableContext();
    const styles2 = useEditableStyles();
    const previewProps = getPreviewProps(props, ref);
    const _className = cx("chakra-editable__preview", props.className);
    return (0, import_jsx_runtime63.jsx)(
      chakra.span,
      {
        ...previewProps,
        __css: {
          cursor: "text",
          display: "inline-block",
          ...commonStyles,
          ...styles2.preview
        },
        className: _className
      }
    );
  }
);
EditablePreview.displayName = "EditablePreview";

// node_modules/@chakra-ui/editable/dist/chunk-KE6CZM3P.mjs
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var EditableTextarea = forwardRef3(
  function EditableTextarea2(props, ref) {
    const { getTextareaProps } = useEditableContext();
    const styles2 = useEditableStyles();
    const textareaProps = getTextareaProps(props, ref);
    const _className = cx("chakra-editable__textarea", props.className);
    return (0, import_jsx_runtime64.jsx)(
      chakra.textarea,
      {
        ...textareaProps,
        __css: {
          outline: 0,
          ...commonStyles,
          ...styles2.textarea
        },
        className: _className
      }
    );
  }
);
EditableTextarea.displayName = "EditableTextarea";

// node_modules/@chakra-ui/react-use-event-listener/dist/index.mjs
var import_react105 = __toESM(require_react(), 1);
function useEventListener(target, event, handler, options2) {
  const listener = useCallbackRef(handler);
  (0, import_react105.useEffect)(() => {
    const node3 = typeof target === "function" ? target() : target != null ? target : document;
    if (!handler || !node3)
      return;
    node3.addEventListener(event, listener, options2);
    return () => {
      node3.removeEventListener(event, listener, options2);
    };
  }, [event, target, options2, listener, handler]);
  return () => {
    const node3 = typeof target === "function" ? target() : target != null ? target : document;
    node3 == null ? void 0 : node3.removeEventListener(event, listener, options2);
  };
}

// node_modules/@chakra-ui/react-use-focus-on-pointer-down/dist/index.mjs
function isRefObject3(val) {
  return "current" in val;
}
var isDom2 = () => typeof window !== "undefined";
function getPlatform() {
  var _a9;
  const agent = navigator.userAgentData;
  return (_a9 = agent == null ? void 0 : agent.platform) != null ? _a9 : navigator.platform;
}
var vn = (v) => isDom2() && v.test(navigator.vendor);
var pt = (v) => isDom2() && v.test(getPlatform());
var isApple = () => pt(/mac|iphone|ipad|ipod/i);
var isSafari = () => isApple() && vn(/apple/i);
function useFocusOnPointerDown(props) {
  const { ref, elements, enabled } = props;
  const doc = () => {
    var _a9, _b5;
    return (_b5 = (_a9 = ref.current) == null ? void 0 : _a9.ownerDocument) != null ? _b5 : document;
  };
  useEventListener(doc, "pointerdown", (event) => {
    if (!isSafari() || !enabled)
      return;
    const target = event.target;
    const els = elements != null ? elements : [ref];
    const isValidTarget = els.some((elementOrRef) => {
      const el = isRefObject3(elementOrRef) ? elementOrRef.current : elementOrRef;
      return (el == null ? void 0 : el.contains(target)) || el === target;
    });
    if (doc().activeElement !== target && isValidTarget) {
      event.preventDefault();
      target.focus();
    }
  });
}

// node_modules/@chakra-ui/editable/dist/chunk-TXN5ELBN.mjs
var import_react106 = __toESM(require_react(), 1);
function contains2(parent, child) {
  if (!parent)
    return false;
  return parent === child || parent.contains(child);
}
function useEditable(props = {}) {
  const {
    onChange: onChangeProp,
    onCancel: onCancelProp,
    onSubmit: onSubmitProp,
    onBlur: onBlurProp,
    value: valueProp,
    isDisabled: isDisabled3,
    defaultValue: defaultValue2,
    startWithEditView,
    isPreviewFocusable = true,
    submitOnBlur = true,
    selectAllOnFocus = true,
    placeholder,
    onEdit: onEditCallback,
    finalFocusRef,
    ...htmlProps
  } = props;
  const onEditProp = useCallbackRef(onEditCallback);
  const defaultIsEditing = Boolean(startWithEditView && !isDisabled3);
  const [isEditing, setIsEditing] = (0, import_react106.useState)(defaultIsEditing);
  const [value, setValue] = useControllableState({
    defaultValue: defaultValue2 || "",
    value: valueProp,
    onChange: onChangeProp
  });
  const [prevValue, setPrevValue] = (0, import_react106.useState)(value);
  const inputRef = (0, import_react106.useRef)(null);
  const previewRef = (0, import_react106.useRef)(null);
  const editButtonRef = (0, import_react106.useRef)(null);
  const cancelButtonRef = (0, import_react106.useRef)(null);
  const submitButtonRef = (0, import_react106.useRef)(null);
  useFocusOnPointerDown({
    ref: inputRef,
    enabled: isEditing,
    elements: [cancelButtonRef, submitButtonRef]
  });
  const isInteractive = !isEditing && !isDisabled3;
  useSafeLayoutEffect(() => {
    var _a9, _b5;
    if (isEditing) {
      (_a9 = inputRef.current) == null ? void 0 : _a9.focus();
      if (selectAllOnFocus)
        (_b5 = inputRef.current) == null ? void 0 : _b5.select();
    }
  }, []);
  useUpdateEffect(() => {
    var _a9, _b5, _c3, _d3;
    if (!isEditing) {
      if (finalFocusRef) {
        (_a9 = finalFocusRef.current) == null ? void 0 : _a9.focus();
      } else {
        (_b5 = editButtonRef.current) == null ? void 0 : _b5.focus();
      }
      return;
    }
    (_c3 = inputRef.current) == null ? void 0 : _c3.focus();
    if (selectAllOnFocus) {
      (_d3 = inputRef.current) == null ? void 0 : _d3.select();
    }
    onEditProp == null ? void 0 : onEditProp();
  }, [isEditing, onEditProp, selectAllOnFocus]);
  const onEdit = (0, import_react106.useCallback)(() => {
    if (isInteractive) {
      setIsEditing(true);
    }
  }, [isInteractive]);
  const onUpdatePrevValue = (0, import_react106.useCallback)(() => {
    setPrevValue(value);
  }, [value]);
  const onCancel = (0, import_react106.useCallback)(() => {
    setIsEditing(false);
    setValue(prevValue);
    onCancelProp == null ? void 0 : onCancelProp(prevValue);
    onBlurProp == null ? void 0 : onBlurProp(prevValue);
  }, [onCancelProp, onBlurProp, setValue, prevValue]);
  const onSubmit = (0, import_react106.useCallback)(() => {
    setIsEditing(false);
    setPrevValue(value);
    onSubmitProp == null ? void 0 : onSubmitProp(value);
    onBlurProp == null ? void 0 : onBlurProp(prevValue);
  }, [value, onSubmitProp, onBlurProp, prevValue]);
  (0, import_react106.useEffect)(() => {
    if (isEditing)
      return;
    const inputEl = inputRef.current;
    if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) {
      inputEl == null ? void 0 : inputEl.blur();
    }
  }, [isEditing]);
  const onChange2 = (0, import_react106.useCallback)(
    (event) => {
      setValue(event.currentTarget.value);
    },
    [setValue]
  );
  const onKeyDown = (0, import_react106.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        Escape: onCancel,
        Enter: (event2) => {
          if (!event2.shiftKey && !event2.metaKey) {
            onSubmit();
          }
        }
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [onCancel, onSubmit]
  );
  const onKeyDownWithoutSubmit = (0, import_react106.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        Escape: onCancel
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [onCancel]
  );
  const isValueEmpty = value.length === 0;
  const onBlur3 = (0, import_react106.useCallback)(
    (event) => {
      var _a9;
      if (!isEditing)
        return;
      const doc = event.currentTarget.ownerDocument;
      const relatedTarget = (_a9 = event.relatedTarget) != null ? _a9 : doc.activeElement;
      const targetIsCancel = contains2(cancelButtonRef.current, relatedTarget);
      const targetIsSubmit = contains2(submitButtonRef.current, relatedTarget);
      const isValidBlur = !targetIsCancel && !targetIsSubmit;
      if (isValidBlur) {
        if (submitOnBlur) {
          onSubmit();
        } else {
          onCancel();
        }
      }
    },
    [submitOnBlur, onSubmit, onCancel, isEditing]
  );
  const getPreviewProps = (0, import_react106.useCallback)(
    (props2 = {}, ref = null) => {
      const tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;
      return {
        ...props2,
        ref: mergeRefs2(ref, previewRef),
        children: isValueEmpty ? placeholder : value,
        hidden: isEditing,
        "aria-disabled": ariaAttr(isDisabled3),
        tabIndex,
        onFocus: callAllHandlers(props2.onFocus, onEdit, onUpdatePrevValue)
      };
    },
    [
      isDisabled3,
      isEditing,
      isInteractive,
      isPreviewFocusable,
      isValueEmpty,
      onEdit,
      onUpdatePrevValue,
      placeholder,
      value
    ]
  );
  const getInputProps = (0, import_react106.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      hidden: !isEditing,
      placeholder,
      ref: mergeRefs2(ref, inputRef),
      disabled: isDisabled3,
      "aria-disabled": ariaAttr(isDisabled3),
      value,
      onBlur: callAllHandlers(props2.onBlur, onBlur3),
      onChange: callAllHandlers(props2.onChange, onChange2),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)
    }),
    [
      isDisabled3,
      isEditing,
      onBlur3,
      onChange2,
      onKeyDown,
      onUpdatePrevValue,
      placeholder,
      value
    ]
  );
  const getTextareaProps = (0, import_react106.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      hidden: !isEditing,
      placeholder,
      ref: mergeRefs2(ref, inputRef),
      disabled: isDisabled3,
      "aria-disabled": ariaAttr(isDisabled3),
      value,
      onBlur: callAllHandlers(props2.onBlur, onBlur3),
      onChange: callAllHandlers(props2.onChange, onChange2),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDownWithoutSubmit),
      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)
    }),
    [
      isDisabled3,
      isEditing,
      onBlur3,
      onChange2,
      onKeyDownWithoutSubmit,
      onUpdatePrevValue,
      placeholder,
      value
    ]
  );
  const getEditButtonProps = (0, import_react106.useCallback)(
    (props2 = {}, ref = null) => ({
      "aria-label": "Edit",
      ...props2,
      type: "button",
      onClick: callAllHandlers(props2.onClick, onEdit),
      ref: mergeRefs2(ref, editButtonRef),
      disabled: isDisabled3
    }),
    [onEdit, isDisabled3]
  );
  const getSubmitButtonProps = (0, import_react106.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      "aria-label": "Submit",
      ref: mergeRefs2(submitButtonRef, ref),
      type: "button",
      onClick: callAllHandlers(props2.onClick, onSubmit),
      disabled: isDisabled3
    }),
    [onSubmit, isDisabled3]
  );
  const getCancelButtonProps = (0, import_react106.useCallback)(
    (props2 = {}, ref = null) => ({
      "aria-label": "Cancel",
      id: "cancel",
      ...props2,
      ref: mergeRefs2(cancelButtonRef, ref),
      type: "button",
      onClick: callAllHandlers(props2.onClick, onCancel),
      disabled: isDisabled3
    }),
    [onCancel, isDisabled3]
  );
  return {
    isEditing,
    isDisabled: isDisabled3,
    isValueEmpty,
    value,
    onEdit,
    onCancel,
    onSubmit,
    getPreviewProps,
    getInputProps,
    getTextareaProps,
    getEditButtonProps,
    getSubmitButtonProps,
    getCancelButtonProps,
    htmlProps
  };
}

// node_modules/@chakra-ui/editable/dist/chunk-ROCN3PRT.mjs
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var Editable = forwardRef3(function Editable2(props, ref) {
  const styles2 = useMultiStyleConfig("Editable", props);
  const ownProps = omitThemingProps(props);
  const { htmlProps, ...context2 } = useEditable(ownProps);
  const { isEditing, onSubmit, onCancel, onEdit } = context2;
  const _className = cx("chakra-editable", props.className);
  const children = runIfFn(props.children, {
    isEditing,
    onSubmit,
    onCancel,
    onEdit
  });
  return (0, import_jsx_runtime65.jsx)(EditableProvider, { value: context2, children: (0, import_jsx_runtime65.jsx)(EditableStylesProvider, { value: styles2, children: (0, import_jsx_runtime65.jsx)(
    chakra.div,
    {
      ref,
      ...htmlProps,
      className: _className,
      children
    }
  ) }) });
});
Editable.displayName = "Editable";

// node_modules/@chakra-ui/editable/dist/chunk-OKWGAP7R.mjs
function useEditableControls() {
  const {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  } = useEditableContext();
  return {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  };
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}

// node_modules/react-focus-lock/dist/es2015/Combination.js
var React25 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/Lock.js
var React22 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/focus-lock/dist/es2015/constants.js
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";
var FOCUS_NO_AUTOFOCUS = "data-no-autofocus";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef3(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react107 = __toESM(require_react());
function useCallbackRef2(initialValue, callback) {
  var ref = (0, import_react107.useState)(function() {
    return {
      // value
      value: initialValue,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last2 = ref.value;
          if (last2 !== value) {
            ref.value = value;
            ref.callback(value, last2);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
var React17 = __toESM(require_react());
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs2(refs, defaultValue2) {
  var callbackRef = useCallbackRef2(defaultValue2 || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef3(ref, newValue);
    });
  });
  React17.useLayoutEffect(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef3(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef3(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}

// node_modules/react-focus-lock/dist/es2015/FocusGuard.js
var React18 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var hiddenGuard = {
  width: "1px",
  height: "0px",
  padding: 0,
  overflow: "hidden",
  position: "fixed",
  top: "1px",
  left: "1px"
};
var InFocusGuard = function InFocusGuard2(_ref4) {
  var _ref$children = _ref4.children, children = _ref$children === void 0 ? null : _ref$children;
  return React18.createElement(React18.Fragment, null, React18.createElement("div", {
    key: "guard-first",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }), children, children && React18.createElement("div", {
    key: "guard-last",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }));
};
InFocusGuard.propTypes = true ? {
  children: import_prop_types.default.node
} : {};

// node_modules/use-sidecar/dist/es2015/hoc.js
var React19 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react108 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a2) {
  return a2;
}
function innerCreateMedium(defaults, middleware2) {
  if (middleware2 === void 0) {
    middleware2 = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware2(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb2) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
      }
      buffer = {
        push: function(x) {
          return cb2(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb2) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb2);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter6) {
          pendingQueue = pendingQueue.filter(filter6);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createMedium(defaults, middleware2) {
  if (middleware2 === void 0) {
    middleware2 = ItoI;
  }
  return innerCreateMedium(defaults, middleware2);
}
function createSidecarMedium(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options2);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/renderProp.js
var React20 = __toESM(require_react());
var import_react109 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/exports.js
var React21 = __toESM(require_react());
var SideCar = function(_a9) {
  var sideCar2 = _a9.sideCar, rest = __rest(_a9, ["sideCar"]);
  if (!sideCar2) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar2.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React21.createElement(Target, __assign({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// node_modules/react-focus-lock/dist/es2015/medium.js
var mediumFocus = createMedium({}, function(_ref4) {
  var target = _ref4.target, currentTarget = _ref4.currentTarget;
  return {
    target,
    currentTarget
  };
});
var mediumBlur = createMedium();
var mediumEffect = createMedium();
var mediumSidecar = createSidecarMedium({
  async: true,
  ssr: typeof document !== "undefined"
});

// node_modules/react-focus-lock/dist/es2015/scope.js
var import_react110 = __toESM(require_react());
var focusScope = (0, import_react110.createContext)(void 0);

// node_modules/react-focus-lock/dist/es2015/Lock.js
var emptyArray = [];
var FocusLock = React22.forwardRef(function FocusLockUI(props, parentRef) {
  var _extends22;
  var _React$useState = React22.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
  var observed = React22.useRef();
  var isActive = React22.useRef(false);
  var originalFocusedElement = React22.useRef(null);
  var _React$useState2 = React22.useState({}), update = _React$useState2[1];
  var children = props.children, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$noFocusGuards = props.noFocusGuards, noFocusGuards = _props$noFocusGuards === void 0 ? false : _props$noFocusGuards, _props$persistentFocu = props.persistentFocus, persistentFocus = _props$persistentFocu === void 0 ? false : _props$persistentFocu, _props$crossFrame = props.crossFrame, crossFrame = _props$crossFrame === void 0 ? true : _props$crossFrame, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, hasPositiveIndices = props.hasPositiveIndices, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container3 = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar2 = props.sideCar, _props$returnFocus = props.returnFocus, shouldReturnFocus = _props$returnFocus === void 0 ? false : _props$returnFocus, focusOptions = props.focusOptions, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
  var _React$useState3 = React22.useState({}), id3 = _React$useState3[0];
  var onActivation = React22.useCallback(function(_ref4) {
    var captureFocusRestore2 = _ref4.captureFocusRestore;
    if (!originalFocusedElement.current) {
      var _document;
      var activeElement = (_document = document) == null ? void 0 : _document.activeElement;
      originalFocusedElement.current = activeElement;
      if (activeElement !== document.body) {
        originalFocusedElement.current = captureFocusRestore2(activeElement);
      }
    }
    if (observed.current && onActivationCallback) {
      onActivationCallback(observed.current);
    }
    isActive.current = true;
    update();
  }, [onActivationCallback]);
  var onDeactivation = React22.useCallback(function() {
    isActive.current = false;
    if (onDeactivationCallback) {
      onDeactivationCallback(observed.current);
    }
    update();
  }, [onDeactivationCallback]);
  var returnFocus = React22.useCallback(function(allowDefer) {
    var focusRestore = originalFocusedElement.current;
    if (focusRestore) {
      var returnFocusTo = (typeof focusRestore === "function" ? focusRestore() : focusRestore) || document.body;
      var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
      if (howToReturnFocus) {
        var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : void 0;
        originalFocusedElement.current = null;
        if (allowDefer) {
          Promise.resolve().then(function() {
            return returnFocusTo.focus(returnFocusOptions);
          });
        } else {
          returnFocusTo.focus(returnFocusOptions);
        }
      }
    }
  }, [shouldReturnFocus]);
  var onFocus4 = React22.useCallback(function(event) {
    if (isActive.current) {
      mediumFocus.useMedium(event);
    }
  }, []);
  var onBlur3 = mediumBlur.useMedium;
  var setObserveNode = React22.useCallback(function(newObserved) {
    if (observed.current !== newObserved) {
      observed.current = newObserved;
      setObserved(newObserved);
    }
  }, []);
  if (true) {
    if (typeof allowTextSelection !== "undefined") {
      console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
    }
    React22.useEffect(function() {
      if (!observed.current && typeof Container3 !== "string") {
        console.error("FocusLock: could not obtain ref to internal node");
      }
    }, []);
  }
  var lockProps = _extends((_extends22 = {}, _extends22[FOCUS_DISABLED] = disabled && "disabled", _extends22[FOCUS_GROUP] = group, _extends22), containerProps);
  var hasLeadingGuards = noFocusGuards !== true;
  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
  var mergedRef = useMergeRefs2([parentRef, setObserveNode]);
  var focusScopeValue = React22.useMemo(function() {
    return {
      observed,
      shards,
      enabled: !disabled,
      active: isActive.current
    };
  }, [disabled, isActive.current, shards, realObserved]);
  return React22.createElement(React22.Fragment, null, hasLeadingGuards && [
    React22.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }),
    hasPositiveIndices ? React22.createElement("div", {
      key: "guard-nearest",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 1,
      style: hiddenGuard
    }) : null
  ], !disabled && React22.createElement(SideCar2, {
    id: id3,
    sideCar: mediumSidecar,
    observed: realObserved,
    disabled,
    persistentFocus,
    crossFrame,
    autoFocus,
    whiteList,
    shards,
    onActivation,
    onDeactivation,
    returnFocus,
    focusOptions
  }), React22.createElement(Container3, _extends({
    ref: mergedRef
  }, lockProps, {
    className,
    onBlur: onBlur3,
    onFocus: onFocus4
  }), React22.createElement(focusScope.Provider, {
    value: focusScopeValue
  }, children)), hasTailingGuards && React22.createElement("div", {
    "data-focus-guard": true,
    tabIndex: disabled ? -1 : 0,
    style: hiddenGuard
  }));
});
FocusLock.propTypes = true ? {
  children: import_prop_types2.node,
  disabled: import_prop_types2.bool,
  returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object, import_prop_types2.func]),
  focusOptions: import_prop_types2.object,
  noFocusGuards: import_prop_types2.bool,
  hasPositiveIndices: import_prop_types2.bool,
  allowTextSelection: import_prop_types2.bool,
  autoFocus: import_prop_types2.bool,
  persistentFocus: import_prop_types2.bool,
  crossFrame: import_prop_types2.bool,
  group: import_prop_types2.string,
  className: import_prop_types2.string,
  whiteList: import_prop_types2.func,
  shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
  as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
  lockProps: import_prop_types2.object,
  onActivation: import_prop_types2.func,
  onDeactivation: import_prop_types2.func,
  sideCar: import_prop_types2.any.isRequired
} : {};
var Lock_default = FocusLock;

// node_modules/react-focus-lock/dist/es2015/Trap.js
var React24 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o2, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p2) {
    o3.__proto__ = p2;
    return o3;
  };
  return _setPrototypeOf(o2, p);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t3, r3) {
  if ("object" != _typeof(t3) || !t3)
    return t3;
  var e = t3[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i2 = e.call(t3, r3 || "default");
    if ("object" != _typeof(i2))
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r3 ? String : Number)(t3);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t3) {
  var i2 = toPrimitive(t3, "string");
  return "symbol" == _typeof(i2) ? i2 : String(i2);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key2, value) {
  key2 = toPropertyKey(key2);
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value;
  }
  return obj;
}

// node_modules/react-clientside-effect/lib/index.es.js
var import_react111 = __toESM(require_react());
function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
  if (true) {
    if (typeof reducePropsToState2 !== "function") {
      throw new Error("Expected reducePropsToState to be a function.");
    }
    if (typeof handleStateChangeOnClient2 !== "function") {
      throw new Error("Expected handleStateChangeOnClient to be a function.");
    }
  }
  function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }
  return function wrap6(WrappedComponent) {
    if (true) {
      if (typeof WrappedComponent !== "function") {
        throw new Error("Expected WrappedComponent to be a React component.");
      }
    }
    var mountedInstances = [];
    var state2;
    function emitChange() {
      state2 = reducePropsToState2(mountedInstances.map(function(instance) {
        return instance.props;
      }));
      handleStateChangeOnClient2(state2);
    }
    var SideEffect = function(_PureComponent) {
      _inheritsLoose(SideEffect2, _PureComponent);
      function SideEffect2() {
        return _PureComponent.apply(this, arguments) || this;
      }
      SideEffect2.peek = function peek2() {
        return state2;
      };
      var _proto = SideEffect2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        mountedInstances.push(this);
        emitChange();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        emitChange();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        var index5 = mountedInstances.indexOf(this);
        mountedInstances.splice(index5, 1);
        emitChange();
      };
      _proto.render = function render() {
        return import_react111.default.createElement(WrappedComponent, this.props);
      };
      return SideEffect2;
    }(import_react111.PureComponent);
    _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
    return SideEffect;
  };
}
var index_es_default = withSideEffect;

// node_modules/focus-lock/dist/es2015/utils/array.js
var toArray = function(a2) {
  var ret = Array(a2.length);
  for (var i2 = 0; i2 < a2.length; ++i2) {
    ret[i2] = a2[i2];
  }
  return ret;
};
var asArray = function(a2) {
  return Array.isArray(a2) ? a2 : [a2];
};
var getFirst = function(a2) {
  return Array.isArray(a2) ? a2[0] : a2;
};

// node_modules/focus-lock/dist/es2015/utils/is.js
var isElementHidden = function(node3) {
  if (node3.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  var computedStyle = window.getComputedStyle(node3, null);
  if (!computedStyle || !computedStyle.getPropertyValue) {
    return false;
  }
  return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var getParentNode = function(node3) {
  return node3.parentNode && node3.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    node3.parentNode.host
  ) : node3.parentNode;
};
var isTopNode = function(node3) {
  return node3 === document || node3 && node3.nodeType === Node.DOCUMENT_NODE;
};
var isInert = function(node3) {
  return node3.hasAttribute("inert");
};
var isVisibleUncached = function(node3, checkParent) {
  return !node3 || isTopNode(node3) || !isElementHidden(node3) && !isInert(node3) && checkParent(getParentNode(node3));
};
var isVisibleCached = function(visibilityCache, node3) {
  var cached = visibilityCache.get(node3);
  if (cached !== void 0) {
    return cached;
  }
  var result = isVisibleUncached(node3, isVisibleCached.bind(void 0, visibilityCache));
  visibilityCache.set(node3, result);
  return result;
};
var isAutoFocusAllowedUncached = function(node3, checkParent) {
  return node3 && !isTopNode(node3) ? isAutoFocusAllowed(node3) ? checkParent(getParentNode(node3)) : false : true;
};
var isAutoFocusAllowedCached = function(cache2, node3) {
  var cached = cache2.get(node3);
  if (cached !== void 0) {
    return cached;
  }
  var result = isAutoFocusAllowedUncached(node3, isAutoFocusAllowedCached.bind(void 0, cache2));
  cache2.set(node3, result);
  return result;
};
var getDataset = function(node3) {
  return node3.dataset;
};
var isHTMLButtonElement = function(node3) {
  return node3.tagName === "BUTTON";
};
var isHTMLInputElement = function(node3) {
  return node3.tagName === "INPUT";
};
var isRadioElement = function(node3) {
  return isHTMLInputElement(node3) && node3.type === "radio";
};
var notHiddenInput = function(node3) {
  return !((isHTMLInputElement(node3) || isHTMLButtonElement(node3)) && (node3.type === "hidden" || node3.disabled));
};
var isAutoFocusAllowed = function(node3) {
  var attribute = node3.getAttribute(FOCUS_NO_AUTOFOCUS);
  return ![true, "true", ""].includes(attribute);
};
var isGuard = function(node3) {
  var _a9;
  return Boolean(node3 && ((_a9 = getDataset(node3)) === null || _a9 === void 0 ? void 0 : _a9.focusGuard));
};
var isNotAGuard = function(node3) {
  return !isGuard(node3);
};
var isDefined2 = function(x) {
  return Boolean(x);
};

// node_modules/focus-lock/dist/es2015/utils/tabOrder.js
var tabSort = function(a2, b2) {
  var aTab = Math.max(0, a2.tabIndex);
  var bTab = Math.max(0, b2.tabIndex);
  var tabDiff = aTab - bTab;
  var indexDiff = a2.index - b2.index;
  if (tabDiff) {
    if (!aTab) {
      return 1;
    }
    if (!bTab) {
      return -1;
    }
  }
  return tabDiff || indexDiff;
};
var getTabIndex = function(node3) {
  if (node3.tabIndex < 0) {
    if (!node3.hasAttribute("tabindex")) {
      return 0;
    }
  }
  return node3.tabIndex;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
  return toArray(nodes).map(function(node3, index5) {
    var tabIndex = getTabIndex(node3);
    return {
      node: node3,
      index: index5,
      tabIndex: keepGuards && tabIndex === -1 ? (node3.dataset || {}).focusGuard ? 0 : -1 : tabIndex
    };
  }).filter(function(data) {
    return !filterNegative || data.tabIndex >= 0;
  }).sort(tabSort);
};

// node_modules/focus-lock/dist/es2015/utils/tabbables.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  // elements with explicit roles will also use explicit tabindex
  // '[role="button"]',
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
];

// node_modules/focus-lock/dist/es2015/utils/tabUtils.js
var queryTabbables = tabbables.join(",");
var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
var getFocusablesWithShadowDom = function(parent, withGuards) {
  return toArray((parent.shadowRoot || parent).children).reduce(function(acc, child) {
    return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [child] : [], getFocusablesWithShadowDom(child));
  }, []);
};
var getFocusablesWithIFrame = function(parent, withGuards) {
  var _a9;
  if (parent instanceof HTMLIFrameElement && ((_a9 = parent.contentDocument) === null || _a9 === void 0 ? void 0 : _a9.body)) {
    return getFocusables([parent.contentDocument.body], withGuards);
  }
  return [parent];
};
var getFocusables = function(parents, withGuards) {
  return parents.reduce(function(acc, parent) {
    var _a9;
    var focusableWithShadowDom = getFocusablesWithShadowDom(parent, withGuards);
    var focusableWithIframes = (_a9 = []).concat.apply(_a9, focusableWithShadowDom.map(function(node3) {
      return getFocusablesWithIFrame(node3, withGuards);
    }));
    return acc.concat(
      // add all tabbables inside and within shadow DOMs in DOM order
      focusableWithIframes,
      // add if node is tabbable itself
      parent.parentNode ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node3) {
        return node3 === parent;
      }) : []
    );
  }, []);
};
var getParentAutofocusables = function(parent) {
  var parentFocus = parent.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
  return toArray(parentFocus).map(function(node3) {
    return getFocusables([node3]);
  }).reduce(function(acc, nodes) {
    return acc.concat(nodes);
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/DOMutils.js
var filterFocusable = function(nodes, visibilityCache) {
  return toArray(nodes).filter(function(node3) {
    return isVisibleCached(visibilityCache, node3);
  }).filter(function(node3) {
    return notHiddenInput(node3);
  });
};
var filterAutoFocusable = function(nodes, cache2) {
  if (cache2 === void 0) {
    cache2 = /* @__PURE__ */ new Map();
  }
  return toArray(nodes).filter(function(node3) {
    return isAutoFocusAllowedCached(cache2, node3);
  });
};
var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
};
var getFocusableNodes = function(topNodes, visibilityCache) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
};
var parentAutofocusables = function(topNode, visibilityCache) {
  return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
};
var contains3 = function(scope, element) {
  if (scope.shadowRoot) {
    return contains3(scope.shadowRoot, element);
  } else {
    if (Object.getPrototypeOf(scope).contains !== void 0 && Object.getPrototypeOf(scope).contains.call(scope, element)) {
      return true;
    }
    return toArray(scope.children).some(function(child) {
      var _a9;
      if (child instanceof HTMLIFrameElement) {
        var iframeBody = (_a9 = child.contentDocument) === null || _a9 === void 0 ? void 0 : _a9.body;
        if (iframeBody) {
          return contains3(iframeBody, element);
        }
        return false;
      }
      return contains3(child, element);
    });
  }
};

// node_modules/focus-lock/dist/es2015/utils/all-affected.js
var filterNested = function(nodes) {
  var contained = /* @__PURE__ */ new Set();
  var l = nodes.length;
  for (var i2 = 0; i2 < l; i2 += 1) {
    for (var j = i2 + 1; j < l; j += 1) {
      var position3 = nodes[i2].compareDocumentPosition(nodes[j]);
      if ((position3 & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
        contained.add(j);
      }
      if ((position3 & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
        contained.add(i2);
      }
    }
  }
  return nodes.filter(function(_, index5) {
    return !contained.has(index5);
  });
};
var getTopParent = function(node3) {
  return node3.parentNode ? getTopParent(node3.parentNode) : node3;
};
var getAllAffectedNodes = function(node3) {
  var nodes = asArray(node3);
  return nodes.filter(Boolean).reduce(function(acc, currentNode) {
    var group = currentNode.getAttribute(FOCUS_GROUP);
    acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, '="').concat(group, '"]:not([').concat(FOCUS_DISABLED, '="disabled"])')))) : [currentNode]);
    return acc;
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/safe.js
var safeProbe = function(cb2) {
  try {
    return cb2();
  } catch (e) {
    return void 0;
  }
};

// node_modules/focus-lock/dist/es2015/utils/getActiveElement.js
var getActiveElement2 = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  if (!inDocument || !inDocument.activeElement) {
    return void 0;
  }
  var activeElement = inDocument.activeElement;
  return activeElement.shadowRoot ? getActiveElement2(activeElement.shadowRoot) : activeElement instanceof HTMLIFrameElement && safeProbe(function() {
    return activeElement.contentWindow.document;
  }) ? getActiveElement2(activeElement.contentWindow.document) : activeElement;
};

// node_modules/focus-lock/dist/es2015/focusInside.js
var focusInFrame = function(frame5, activeElement) {
  return frame5 === activeElement;
};
var focusInsideIframe = function(topNode, activeElement) {
  return Boolean(toArray(topNode.querySelectorAll("iframe")).some(function(node3) {
    return focusInFrame(node3, activeElement);
  }));
};
var focusInside = function(topNode, activeElement) {
  if (activeElement === void 0) {
    activeElement = getActiveElement2(getFirst(topNode).ownerDocument);
  }
  if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
    return false;
  }
  return getAllAffectedNodes(topNode).some(function(node3) {
    return contains3(node3, activeElement) || focusInsideIframe(node3, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/focusIsHidden.js
var focusIsHidden = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  var activeElement = getActiveElement2(inDocument);
  if (!activeElement) {
    return false;
  }
  return toArray(inDocument.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function(node3) {
    return contains3(node3, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/utils/correctFocus.js
var findSelectedRadio = function(node3, nodes) {
  return nodes.filter(isRadioElement).filter(function(el) {
    return el.name === node3.name;
  }).filter(function(el) {
    return el.checked;
  })[0] || node3;
};
var correctNode = function(node3, nodes) {
  if (isRadioElement(node3) && node3.name) {
    return findSelectedRadio(node3, nodes);
  }
  return node3;
};
var correctNodes = function(nodes) {
  var resultSet = /* @__PURE__ */ new Set();
  nodes.forEach(function(node3) {
    return resultSet.add(correctNode(node3, nodes));
  });
  return nodes.filter(function(node3) {
    return resultSet.has(node3);
  });
};

// node_modules/focus-lock/dist/es2015/utils/firstFocus.js
var pickFirstFocus = function(nodes) {
  if (nodes[0] && nodes.length > 1) {
    return correctNode(nodes[0], nodes);
  }
  return nodes[0];
};
var pickFocusable = function(nodes, node3) {
  return nodes.indexOf(correctNode(node3, nodes));
};

// node_modules/focus-lock/dist/es2015/solver.js
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, innerTabbables, outerNodes, activeElement, lastNode) {
  var cnt = innerNodes.length;
  var firstFocus = innerNodes[0];
  var lastFocus = innerNodes[cnt - 1];
  var isOnGuard = isGuard(activeElement);
  if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
    return void 0;
  }
  var activeIndex = activeElement !== void 0 ? outerNodes.indexOf(activeElement) : -1;
  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
  if (activeIndex === -1) {
    if (lastNodeInside !== -1) {
      return lastNodeInside;
    }
    return NEW_FOCUS;
  }
  if (lastNodeInside === -1) {
    return NEW_FOCUS;
  }
  var indexDiff = activeIndex - lastIndex;
  var firstNodeIndex = outerNodes.indexOf(firstFocus);
  var lastNodeIndex = outerNodes.indexOf(lastFocus);
  var correctedNodes = correctNodes(outerNodes);
  var correctedIndex = activeElement !== void 0 ? correctedNodes.indexOf(activeElement) : -1;
  var correctedIndexDiff = correctedIndex - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
  if (!indexDiff && lastNodeInside >= 0) {
    return lastNodeInside;
  }
  if (innerTabbables.length === 0) {
    return lastNodeInside;
  }
  var returnFirstNode = pickFocusable(innerNodes, innerTabbables[0]);
  var returnLastNode = pickFocusable(innerNodes, innerTabbables[innerTabbables.length - 1]);
  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnLastNode;
  }
  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnFirstNode;
  }
  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex) {
    return returnLastNode;
  }
  if (activeIndex > lastNodeIndex) {
    return returnFirstNode;
  }
  if (indexDiff) {
    if (Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    return (cnt + lastNodeInside + indexDiff) % cnt;
  }
  return void 0;
};

// node_modules/focus-lock/dist/es2015/utils/auto-focus.js
var findAutoFocused = function(autoFocusables) {
  return function(node3) {
    var _a9;
    var autofocus = (_a9 = getDataset(node3)) === null || _a9 === void 0 ? void 0 : _a9.autofocus;
    return (
      // @ts-expect-error
      node3.autofocus || //
      autofocus !== void 0 && autofocus !== "false" || //
      autoFocusables.indexOf(node3) >= 0
    );
  };
};
var pickAutofocus = function(nodesIndexes, orderedNodes, groups) {
  var nodes = nodesIndexes.map(function(_a9) {
    var node3 = _a9.node;
    return node3;
  });
  var autoFocusable = filterAutoFocusable(nodes.filter(findAutoFocused(groups)));
  if (autoFocusable && autoFocusable.length) {
    return pickFirstFocus(autoFocusable);
  }
  return pickFirstFocus(filterAutoFocusable(orderedNodes));
};

// node_modules/focus-lock/dist/es2015/utils/parenting.js
var getParents = function(node3, parents) {
  if (parents === void 0) {
    parents = [];
  }
  parents.push(node3);
  if (node3.parentNode) {
    getParents(node3.parentNode.host || node3.parentNode, parents);
  }
  return parents;
};
var getCommonParent = function(nodeA, nodeB) {
  var parentsA = getParents(nodeA);
  var parentsB = getParents(nodeB);
  for (var i2 = 0; i2 < parentsA.length; i2 += 1) {
    var currentParent = parentsA[i2];
    if (parentsB.indexOf(currentParent) >= 0) {
      return currentParent;
    }
  }
  return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
  var activeElements = asArray(baseActiveElement);
  var leftEntries = asArray(leftEntry);
  var activeElement = activeElements[0];
  var topCommon = false;
  leftEntries.filter(Boolean).forEach(function(entry) {
    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
    rightEntries.filter(Boolean).forEach(function(subEntry) {
      var common = getCommonParent(activeElement, subEntry);
      if (common) {
        if (!topCommon || contains3(common, topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
  });
  return topCommon;
};
var allParentAutofocusables = function(entries, visibilityCache) {
  return entries.reduce(function(acc, node3) {
    return acc.concat(parentAutofocusables(node3, visibilityCache));
  }, []);
};

// node_modules/focus-lock/dist/es2015/focusSolver.js
var reorderNodes = function(srcNodes, dstNodes) {
  var remap = /* @__PURE__ */ new Map();
  dstNodes.forEach(function(entity) {
    return remap.set(entity.node, entity);
  });
  return srcNodes.map(function(node3) {
    return remap.get(node3);
  }).filter(isDefined2);
};
var focusSolver = function(topNode, lastNode) {
  var activeElement = getActiveElement2(asArray(topNode).length > 0 ? document : getFirst(topNode).ownerDocument);
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var anyFocusable = getFocusableNodes(entries, visibilityCache);
  var innerElements = anyFocusable.filter(function(_a9) {
    var node3 = _a9.node;
    return isNotAGuard(node3);
  });
  if (!innerElements[0]) {
    return void 0;
  }
  var outerNodes = getFocusableNodes([commonParent], visibilityCache).map(function(_a9) {
    var node3 = _a9.node;
    return node3;
  });
  var orderedInnerElements = reorderNodes(outerNodes, innerElements);
  var innerFocusables = orderedInnerElements.map(function(_a9) {
    var node3 = _a9.node;
    return node3;
  });
  var innerTabbable = orderedInnerElements.filter(function(_a9) {
    var tabIndex = _a9.tabIndex;
    return tabIndex >= 0;
  }).map(function(_a9) {
    var node3 = _a9.node;
    return node3;
  });
  var newId = newFocus(innerFocusables, innerTabbable, outerNodes, activeElement, lastNode);
  if (newId === NEW_FOCUS) {
    var focusNode = (
      // first try only tabbable, and the fallback to all focusable, as long as at least one element should be picked for focus
      pickAutofocus(anyFocusable, innerTabbable, allParentAutofocusables(entries, visibilityCache)) || pickAutofocus(anyFocusable, innerFocusables, allParentAutofocusables(entries, visibilityCache))
    );
    if (focusNode) {
      return { node: focusNode };
    } else {
      console.warn("focus-lock: cannot find any node to move focus into");
      return void 0;
    }
  }
  if (newId === void 0) {
    return newId;
  }
  return orderedInnerElements[newId];
};

// node_modules/focus-lock/dist/es2015/focusables.js
var expandFocusableNodes = function(topNode) {
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(topNode, topNode, entries);
  var outerNodes = orderByTabIndex(getFocusables([commonParent], true), true, true);
  var innerElements = getFocusables(entries, false);
  return outerNodes.map(function(_a9) {
    var node3 = _a9.node, index5 = _a9.index;
    return {
      node: node3,
      index: index5,
      lockItem: innerElements.indexOf(node3) >= 0,
      guard: isGuard(node3)
    };
  });
};

// node_modules/focus-lock/dist/es2015/commands.js
var focusOn = function(target, focusOptions) {
  if (!target) {
    return;
  }
  if ("focus" in target) {
    target.focus(focusOptions);
  }
  if ("contentWindow" in target && target.contentWindow) {
    target.contentWindow.focus();
  }
};

// node_modules/focus-lock/dist/es2015/moveFocusInside.js
var guardCount = 0;
var lockDisabled = false;
var moveFocusInside = function(topNode, lastNode, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var focusable = focusSolver(topNode, lastNode);
  if (lockDisabled) {
    return;
  }
  if (focusable) {
    if (guardCount > 2) {
      console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
      lockDisabled = true;
      setTimeout(function() {
        lockDisabled = false;
      }, 1);
      return;
    }
    guardCount++;
    focusOn(focusable.node, options2.focusOptions);
    guardCount--;
  }
};

// node_modules/focus-lock/dist/es2015/return-focus.js
function weakRef(value) {
  if (!value)
    return null;
  var w2 = value ? new WeakRef(value) : null;
  return function() {
    return (w2 === null || w2 === void 0 ? void 0 : w2.deref()) || null;
  };
}
var recordElementLocation = function(element) {
  if (!element) {
    return null;
  }
  var stack = [];
  var currentElement = element;
  while (currentElement && currentElement !== document.body) {
    stack.push({
      current: weakRef(currentElement),
      parent: weakRef(currentElement.parentElement),
      left: weakRef(currentElement.previousElementSibling),
      right: weakRef(currentElement.nextElementSibling)
    });
    currentElement = currentElement.parentElement;
  }
  return {
    element: weakRef(element),
    stack,
    ownerDocument: element.ownerDocument
  };
};
var restoreFocusTo = function(location2) {
  var _a9, _b5, _c3, _d3, _e3;
  if (!location2) {
    return void 0;
  }
  var stack = location2.stack, ownerDocument = location2.ownerDocument;
  var visibilityCache = /* @__PURE__ */ new Map();
  for (var _i = 0, stack_1 = stack; _i < stack_1.length; _i++) {
    var line2 = stack_1[_i];
    var parent_1 = (_a9 = line2.parent) === null || _a9 === void 0 ? void 0 : _a9.call(line2);
    if (parent_1 && ownerDocument.contains(parent_1)) {
      var left2 = (_b5 = line2.left) === null || _b5 === void 0 ? void 0 : _b5.call(line2);
      var right2 = (_c3 = line2.right) === null || _c3 === void 0 ? void 0 : _c3.call(line2);
      var focusables = getTabbableNodes([parent_1], visibilityCache);
      var aim = (
        // that is element itself
        (_e3 = (_d3 = left2 === null || left2 === void 0 ? void 0 : left2.nextElementSibling) !== null && _d3 !== void 0 ? _d3 : (
          // or somebody to the right?
          right2
        )) !== null && _e3 !== void 0 ? _e3 : (
          // or somebody to the left
          left2
        )
      );
      while (aim) {
        for (var _f3 = 0, focusables_1 = focusables; _f3 < focusables_1.length; _f3++) {
          var focusable = focusables_1[_f3];
          if (aim === null || aim === void 0 ? void 0 : aim.contains(focusable.node)) {
            return focusable.node;
          }
        }
        aim = aim.nextElementSibling;
      }
      if (focusables.length) {
        return focusables[0].node;
      }
    }
  }
  return void 0;
};
var captureFocusRestore = function(targetElement) {
  var location2 = recordElementLocation(targetElement);
  return function() {
    return restoreFocusTo(location2);
  };
};

// node_modules/focus-lock/dist/es2015/sibling.js
var getRelativeFocusable = function(element, scope, useTabbables) {
  if (!element || !scope) {
    console.error("no element or scope given");
    return {};
  }
  var shards = asArray(scope);
  if (shards.every(function(shard) {
    return !contains3(shard, element);
  })) {
    console.error("Active element is not contained in the scope");
    return {};
  }
  var focusables = useTabbables ? getTabbableNodes(shards, /* @__PURE__ */ new Map()) : getFocusableNodes(shards, /* @__PURE__ */ new Map());
  var current = focusables.findIndex(function(_a9) {
    var node3 = _a9.node;
    return node3 === element;
  });
  if (current === -1) {
    return void 0;
  }
  return {
    prev: focusables[current - 1],
    next: focusables[current + 1],
    first: focusables[0],
    last: focusables[focusables.length - 1]
  };
};
var getBoundary = function(shards, useTabbables) {
  var set2 = useTabbables ? getTabbableNodes(asArray(shards), /* @__PURE__ */ new Map()) : getFocusableNodes(asArray(shards), /* @__PURE__ */ new Map());
  return {
    first: set2[0],
    last: set2[set2.length - 1]
  };
};
var defaultOptions = function(options2) {
  return Object.assign({
    scope: document.body,
    cycle: true,
    onlyTabbable: true
  }, options2);
};
var moveFocus = function(fromElement, options2, cb2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var newOptions = defaultOptions(options2);
  var solution = getRelativeFocusable(fromElement, newOptions.scope, newOptions.onlyTabbable);
  if (!solution) {
    return;
  }
  var target = cb2(solution, newOptions.cycle);
  if (target) {
    focusOn(target.node, newOptions.focusOptions);
  }
};
var focusNextElement = function(fromElement, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  moveFocus(fromElement, options2, function(_a9, cycle) {
    var next2 = _a9.next, first = _a9.first;
    return next2 || cycle && first;
  });
};
var focusPrevElement = function(fromElement, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  moveFocus(fromElement, options2, function(_a9, cycle) {
    var prev2 = _a9.prev, last2 = _a9.last;
    return prev2 || cycle && last2;
  });
};
var pickBoundary = function(scope, options2, what) {
  var _a9;
  var boundary = getBoundary(scope, (_a9 = options2.onlyTabbable) !== null && _a9 !== void 0 ? _a9 : true);
  var node3 = boundary[what];
  if (node3) {
    focusOn(node3.node, options2.focusOptions);
  }
};
var focusFirstElement = function(scope, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  pickBoundary(scope, options2, "first");
};
var focusLastElement = function(scope, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  pickBoundary(scope, options2, "last");
};

// node_modules/react-focus-lock/dist/es2015/util.js
function deferAction(action) {
  setTimeout(action, 1);
}
var inlineProp = function inlineProp2(name, value) {
  var obj = {};
  obj[name] = value;
  return obj;
};
var extractRef = function extractRef2(ref) {
  return ref && "current" in ref ? ref.current : ref;
};

// node_modules/react-focus-lock/dist/es2015/Trap.js
var focusOnBody = function focusOnBody2() {
  return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus2() {
  return focusOnBody() || focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist2() {
  return true;
};
var focusWhitelisted = function focusWhitelisted2(activeElement) {
  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal2(observerNode, portaledElement) {
  lastPortaledElement = {
    observerNode,
    portaledElement
  };
};
var focusIsPortaledPair = function focusIsPortaledPair2(element) {
  return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end2, step, allNodes) {
  var lastGuard = null;
  var i2 = startIndex;
  do {
    var item = allNodes[i2];
    if (item.guard) {
      if (item.node.dataset.focusAutoGuard) {
        lastGuard = item;
      }
    } else if (item.lockItem) {
      if (i2 !== startIndex) {
        return;
      }
      lastGuard = null;
    } else {
      break;
    }
  } while ((i2 += step) !== end2);
  if (lastGuard) {
    lastGuard.node.tabIndex = 0;
  }
}
var focusWasOutside = function focusWasOutside2(crossFrameOption) {
  if (crossFrameOption) {
    return Boolean(focusWasOutsideWindow);
  }
  return focusWasOutsideWindow === "meanwhile";
};
var checkInHost = function checkInHost2(check, el, boundary) {
  return el && (el.host === check && (!el.activeElement || boundary.contains(el.activeElement)) || el.parentNode && checkInHost2(check, el.parentNode, boundary));
};
var withinHost = function withinHost2(activeElement, workingArea) {
  return workingArea.some(function(area) {
    return checkInHost(activeElement, area, area);
  });
};
var activateTrap = function activateTrap2() {
  var result = false;
  if (lastActiveTrap) {
    var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions;
    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
    var activeElement = document && document.activeElement;
    if (workingNode) {
      var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !(focusInside(workingArea) || activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              if (activeElement.blur) {
                activeElement.blur();
              }
              document.body.focus();
            } else {
              result = moveFocusInside(workingArea, lastActiveFocus, {
                focusOptions
              });
              lastPortaledElement = {};
            }
          }
          focusWasOutsideWindow = false;
          lastActiveFocus = document && document.activeElement;
        }
      }
      if (document && activeElement !== document.activeElement && document.querySelector("[data-focus-auto-guard]")) {
        var newActiveElement = document && document.activeElement;
        var allNodes = expandFocusableNodes(workingArea);
        var focusedIndex = allNodes.map(function(_ref4) {
          var node3 = _ref4.node;
          return node3;
        }).indexOf(newActiveElement);
        if (focusedIndex > -1) {
          allNodes.filter(function(_ref23) {
            var guard2 = _ref23.guard, node3 = _ref23.node;
            return guard2 && node3.dataset.focusAutoGuard;
          }).forEach(function(_ref32) {
            var node3 = _ref32.node;
            return node3.removeAttribute("tabIndex");
          });
          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
          autoGuard(focusedIndex, -1, -1, allNodes);
        }
      }
    }
  }
  return result;
};
var onTrap = function onTrap2(event) {
  if (activateTrap() && event) {
    event.stopPropagation();
    event.preventDefault();
  }
};
var onBlur = function onBlur2() {
  return deferAction(activateTrap);
};
var onFocus = function onFocus2(event) {
  var source = event.target;
  var currentNode = event.currentTarget;
  if (!currentNode.contains(source)) {
    recordPortal(currentNode, source);
  }
};
var FocusWatcher = function FocusWatcher2() {
  return null;
};
var FocusTrap = function FocusTrap2(_ref4) {
  var children = _ref4.children;
  return React24.createElement("div", {
    onBlur,
    onFocus
  }, children);
};
FocusTrap.propTypes = true ? {
  children: import_prop_types3.default.node.isRequired
} : {};
var onWindowBlur2 = function onWindowBlur3() {
  focusWasOutsideWindow = "just";
  deferAction(function() {
    focusWasOutsideWindow = "meanwhile";
  });
};
var attachHandler = function attachHandler2() {
  document.addEventListener("focusin", onTrap);
  document.addEventListener("focusout", onBlur);
  window.addEventListener("blur", onWindowBlur2);
};
var detachHandler = function detachHandler2() {
  document.removeEventListener("focusin", onTrap);
  document.removeEventListener("focusout", onBlur);
  window.removeEventListener("blur", onWindowBlur2);
};
function reducePropsToState(propsList) {
  return propsList.filter(function(_ref5) {
    var disabled = _ref5.disabled;
    return !disabled;
  });
}
var focusLockAPI = {
  moveFocusInside,
  focusInside,
  focusNextElement,
  focusPrevElement,
  focusFirstElement,
  focusLastElement,
  captureFocusRestore
};
function handleStateChangeOnClient(traps) {
  var trap = traps.slice(-1)[0];
  if (trap && !lastActiveTrap) {
    attachHandler();
  }
  var lastTrap = lastActiveTrap;
  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
  lastActiveTrap = trap;
  if (lastTrap && !sameTrap) {
    lastTrap.onDeactivation();
    if (!traps.filter(function(_ref6) {
      var id3 = _ref6.id;
      return id3 === lastTrap.id;
    }).length) {
      lastTrap.returnFocus(!trap);
    }
  }
  if (trap) {
    lastActiveFocus = null;
    if (!sameTrap || lastTrap.observed !== trap.observed) {
      trap.onActivation(focusLockAPI);
    }
    activateTrap(true);
    deferAction(activateTrap);
  } else {
    detachHandler();
    lastActiveFocus = null;
  }
}
mediumFocus.assignSyncMedium(onFocus);
mediumBlur.assignMedium(onBlur);
mediumEffect.assignMedium(function(cb2) {
  return cb2(focusLockAPI);
});
var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

// node_modules/react-focus-lock/dist/es2015/Combination.js
var FocusLockCombination = React25.forwardRef(function FocusLockUICombination(props, ref) {
  return React25.createElement(Lock_default, _extends({
    sideCar: Trap_default,
    ref
  }, props));
});
var _ref = Lock_default.propTypes || {};
var sideCar = _ref.sideCar;
var propTypes = _objectWithoutPropertiesLoose(_ref, ["sideCar"]);
FocusLockCombination.propTypes = true ? propTypes : {};
var Combination_default = FocusLockCombination;

// node_modules/react-focus-lock/dist/es2015/AutoFocusInside.js
var React26 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var AutoFocusInside = function AutoFocusInside2(_ref4) {
  var _ref$disabled = _ref4.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, children = _ref4.children, _ref$className = _ref4.className, className = _ref$className === void 0 ? void 0 : _ref$className;
  return React26.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !disabled), {
    className
  }), children);
};
AutoFocusInside.propTypes = true ? {
  children: import_prop_types4.default.node.isRequired,
  disabled: import_prop_types4.default.bool,
  className: import_prop_types4.default.string
} : {};

// node_modules/react-focus-lock/dist/es2015/MoveFocusInside.js
var React27 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var useFocusInside = function useFocusInside2(observedRef) {
  React27.useEffect(function() {
    var enabled = true;
    mediumEffect.useMedium(function(car) {
      var observed = observedRef && observedRef.current;
      if (enabled && observed) {
        if (!car.focusInside(observed)) {
          car.moveFocusInside(observed, null);
        }
      }
    });
    return function() {
      enabled = false;
    };
  }, [observedRef]);
};
function MoveFocusInside(_ref4) {
  var _ref$disabled = _ref4.disabled, isDisabled3 = _ref$disabled === void 0 ? false : _ref$disabled, className = _ref4.className, children = _ref4.children;
  var ref = React27.useRef(null);
  useFocusInside(isDisabled3 ? void 0 : ref);
  return React27.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !isDisabled3), {
    ref,
    className
  }), children);
}
MoveFocusInside.propTypes = true ? {
  children: import_prop_types5.default.node.isRequired,
  disabled: import_prop_types5.default.bool,
  className: import_prop_types5.default.string
} : {};

// node_modules/react-focus-lock/dist/es2015/FreeFocusInside.js
var React28 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var FreeFocusInside = function FreeFocusInside2(_ref4) {
  var children = _ref4.children, className = _ref4.className;
  return React28.createElement("div", _extends({}, inlineProp(FOCUS_ALLOW, true), {
    className
  }), children);
};
FreeFocusInside.propTypes = true ? {
  children: import_prop_types6.default.node.isRequired,
  className: import_prop_types6.default.string
} : {};

// node_modules/react-focus-lock/dist/es2015/use-focus-scope.js
var import_react112 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/use-focus-state.js
var import_react113 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/nano-events.js
var createNanoEvents = function createNanoEvents2() {
  return {
    emit: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      for (var i2 = 0, callbacks = this.events[event] || [], length3 = callbacks.length; i2 < length3; i2++) {
        callbacks[i2].apply(callbacks, args);
      }
    },
    events: {},
    on: function on(event, cb2) {
      var _this$events, _this = this;
      ((_this$events = this.events)[event] || (_this$events[event] = [])).push(cb2);
      return function() {
        var _this$events$event;
        _this.events[event] = (_this$events$event = _this.events[event]) == null ? void 0 : _this$events$event.filter(function(i2) {
          return cb2 !== i2;
        });
      };
    }
  };
};

// node_modules/react-focus-lock/dist/es2015/use-focus-state.js
var mainbus = createNanoEvents();

// node_modules/react-focus-lock/dist/es2015/index.js
var es2015_default = Combination_default;

// node_modules/@chakra-ui/dom-utils/dist/chunk-3XANSPY5.mjs
function isElement3(el) {
  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function isHTMLElement2(el) {
  var _a9;
  if (!isElement3(el))
    return false;
  const win = (_a9 = el.ownerDocument.defaultView) != null ? _a9 : window;
  return el instanceof win.HTMLElement;
}
function getOwnerWindow2(node3) {
  var _a9, _b5;
  return (_b5 = (_a9 = getOwnerDocument2(node3)) == null ? void 0 : _a9.defaultView) != null ? _b5 : window;
}
function getOwnerDocument2(node3) {
  return isElement3(node3) ? node3.ownerDocument : document;
}
function getActiveElement3(node3) {
  return getOwnerDocument2(node3).activeElement;
}

// node_modules/@chakra-ui/dom-utils/dist/chunk-4WEUWBTD.mjs
function isScrollParent(el) {
  const win = el.ownerDocument.defaultView || window;
  const { overflow, overflowX, overflowY } = win.getComputedStyle(el);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getParent(el) {
  if (el.localName === "html")
    return el;
  return el.assignedSlot || el.parentElement || el.ownerDocument.documentElement;
}
function getScrollParent(el) {
  if (["html", "body", "#document"].includes(el.localName)) {
    return el.ownerDocument.body;
  }
  if (isHTMLElement2(el) && isScrollParent(el)) {
    return el;
  }
  return getScrollParent(getParent(el));
}

// node_modules/@chakra-ui/dom-utils/dist/chunk-ROURZMX4.mjs
var hasTabIndex2 = (element) => element.hasAttribute("tabindex");
var hasNegativeTabIndex2 = (element) => hasTabIndex2(element) && element.tabIndex === -1;
function isDisabled2(element) {
  return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
}
function isHidden2(element) {
  if (element.parentElement && isHidden2(element.parentElement))
    return true;
  return element.hidden;
}
function isContentEditable2(element) {
  const value = element.getAttribute("contenteditable");
  return value !== "false" && value != null;
}
function isFocusable2(element) {
  if (!isHTMLElement2(element) || isHidden2(element) || isDisabled2(element)) {
    return false;
  }
  const { localName } = element;
  const focusableTags = ["input", "select", "textarea", "button"];
  if (focusableTags.indexOf(localName) >= 0)
    return true;
  const others2 = {
    a: () => element.hasAttribute("href"),
    audio: () => element.hasAttribute("controls"),
    video: () => element.hasAttribute("controls")
  };
  if (localName in others2) {
    return others2[localName]();
  }
  if (isContentEditable2(element))
    return true;
  return hasTabIndex2(element);
}
function isTabbable2(element) {
  if (!element)
    return false;
  return isHTMLElement2(element) && isFocusable2(element) && !hasNegativeTabIndex2(element);
}

// node_modules/@chakra-ui/dom-utils/dist/index.mjs
var focusableElList2 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector2 = focusableElList2.join();
var isVisible = (el) => el.offsetWidth > 0 && el.offsetHeight > 0;
function getAllFocusable2(container2) {
  const focusableEls = Array.from(
    container2.querySelectorAll(focusableElSelector2)
  );
  focusableEls.unshift(container2);
  return focusableEls.filter((el) => isFocusable2(el) && isVisible(el));
}

// node_modules/@chakra-ui/focus-lock/dist/chunk-UU5OHSNF.mjs
var import_react114 = __toESM(require_react(), 1);
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var _a7;
var FocusTrap3 = (_a7 = es2015_default.default) != null ? _a7 : es2015_default;
var FocusLock2 = (props) => {
  const {
    initialFocusRef,
    finalFocusRef,
    contentRef,
    restoreFocus,
    children,
    isDisabled: isDisabled3,
    autoFocus,
    persistentFocus,
    lockFocusAcrossFrames
  } = props;
  const onActivation = (0, import_react114.useCallback)(() => {
    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {
      initialFocusRef.current.focus();
    } else if (contentRef == null ? void 0 : contentRef.current) {
      const focusables = getAllFocusable2(contentRef.current);
      if (focusables.length === 0) {
        requestAnimationFrame(() => {
          var _a24;
          (_a24 = contentRef.current) == null ? void 0 : _a24.focus();
        });
      }
    }
  }, [initialFocusRef, contentRef]);
  const onDeactivation = (0, import_react114.useCallback)(() => {
    var _a24;
    (_a24 = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a24.focus();
  }, [finalFocusRef]);
  const returnFocus = restoreFocus && !finalFocusRef;
  return (0, import_jsx_runtime66.jsx)(
    FocusTrap3,
    {
      crossFrame: lockFocusAcrossFrames,
      persistentFocus,
      autoFocus,
      disabled: isDisabled3,
      onActivation,
      onDeactivation,
      returnFocus,
      children
    }
  );
};
FocusLock2.displayName = "FocusLock";

// node_modules/@chakra-ui/hooks/dist/chunk-6SQFIFNP.mjs
var import_react115 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-YSKACL7R.mjs
var import_react116 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-724WJZW4.mjs
var import_react117 = __toESM(require_react(), 1);
var useSafeLayoutEffect3 = isBrowser3 ? import_react117.useLayoutEffect : import_react117.useEffect;

// node_modules/@chakra-ui/hooks/dist/chunk-KA2477BY.mjs
var import_react118 = __toESM(require_react(), 1);
function useCallbackRef3(fn2, deps = []) {
  const ref = (0, import_react118.useRef)(fn2);
  useSafeLayoutEffect3(() => {
    ref.current = fn2;
  });
  return (0, import_react118.useCallback)((...args) => {
    var _a9;
    return (_a9 = ref.current) == null ? void 0 : _a9.call(ref, ...args);
  }, deps);
}

// node_modules/@chakra-ui/hooks/dist/chunk-HMTAETMO.mjs
var import_react119 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-W4SX2OS5.mjs
var import_react120 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-GVIR6Q3W.mjs
var import_react121 = __toESM(require_react(), 1);
function useInterval(callback, delay2) {
  const fn2 = useCallbackRef3(callback);
  (0, import_react121.useEffect)(() => {
    let intervalId = null;
    const tick = () => fn2();
    if (delay2 !== null) {
      intervalId = window.setInterval(tick, delay2);
    }
    return () => {
      if (intervalId) {
        window.clearInterval(intervalId);
      }
    };
  }, [delay2, fn2]);
}

// node_modules/@chakra-ui/hooks/dist/chunk-3VAWNCU2.mjs
var import_react122 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-AZVKQZKI.mjs
var import_react123 = __toESM(require_react(), 1);
function assignRef4(ref, value) {
  if (ref == null)
    return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error2) {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}
function useMergeRefs3(...refs) {
  return (0, import_react123.useMemo)(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (node3) => {
      refs.forEach((ref) => {
        if (ref)
          assignRef4(ref, node3);
      });
    };
  }, refs);
}

// node_modules/@chakra-ui/hooks/dist/chunk-7JEV5YKL.mjs
var import_react124 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-LMHOK4JG.mjs
var import_react125 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-R5W6LHQW.mjs
var import_react126 = __toESM(require_react(), 1);
function useOutsideClick(props) {
  const { ref, handler, enabled = true } = props;
  const savedHandler = useCallbackRef3(handler);
  const stateRef = (0, import_react126.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false
  });
  const state2 = stateRef.current;
  (0, import_react126.useEffect)(() => {
    if (!enabled)
      return;
    const onPointerDown = (e) => {
      if (isValidEvent(e, ref)) {
        state2.isPointerDown = true;
      }
    };
    const onMouseUp = (event) => {
      if (state2.ignoreEmulatedMouseEvents) {
        state2.ignoreEmulatedMouseEvents = false;
        return;
      }
      if (state2.isPointerDown && handler && isValidEvent(event, ref)) {
        state2.isPointerDown = false;
        savedHandler(event);
      }
    };
    const onTouchEnd = (event) => {
      state2.ignoreEmulatedMouseEvents = true;
      if (handler && state2.isPointerDown && isValidEvent(event, ref)) {
        state2.isPointerDown = false;
        savedHandler(event);
      }
    };
    const doc = getOwnerDocument(ref.current);
    doc.addEventListener("mousedown", onPointerDown, true);
    doc.addEventListener("mouseup", onMouseUp, true);
    doc.addEventListener("touchstart", onPointerDown, true);
    doc.addEventListener("touchend", onTouchEnd, true);
    return () => {
      doc.removeEventListener("mousedown", onPointerDown, true);
      doc.removeEventListener("mouseup", onMouseUp, true);
      doc.removeEventListener("touchstart", onPointerDown, true);
      doc.removeEventListener("touchend", onTouchEnd, true);
    };
  }, [handler, ref, savedHandler, state2, enabled]);
}
function isValidEvent(event, ref) {
  var _a9;
  const target = event.target;
  if (target) {
    const doc = getOwnerDocument(target);
    if (!doc.contains(target))
      return false;
  }
  return !((_a9 = ref.current) == null ? void 0 : _a9.contains(target));
}

// node_modules/@chakra-ui/hooks/dist/chunk-NGVRPZ6W.mjs
var import_react127 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-77SN3XBT.mjs
var import_react128 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-6B2YUEGK.mjs
var import_react129 = __toESM(require_react(), 1);
function useId6(idProp, prefix4) {
  const id3 = (0, import_react129.useId)();
  return (0, import_react129.useMemo)(
    () => idProp || [prefix4, id3].filter(Boolean).join("-"),
    [idProp, prefix4, id3]
  );
}

// node_modules/@chakra-ui/hooks/dist/chunk-7JSBRQFI.mjs
var import_react130 = __toESM(require_react(), 1);
function useControllableProp(prop2, state2) {
  const isControlled = prop2 !== void 0;
  const value = isControlled && typeof prop2 !== "undefined" ? prop2 : state2;
  return [isControlled, value];
}
function useControllableState2(props) {
  const {
    value: valueProp,
    defaultValue: defaultValue2,
    onChange: onChange2,
    shouldUpdate = (prev2, next2) => prev2 !== next2
  } = props;
  const onChangeProp = useCallbackRef3(onChange2);
  const shouldUpdateProp = useCallbackRef3(shouldUpdate);
  const [valueState, setValue] = (0, import_react130.useState)(defaultValue2);
  const isControlled = valueProp !== void 0;
  const value = isControlled ? valueProp : valueState;
  const updateValue = (0, import_react130.useCallback)(
    (next2) => {
      const nextValue = runIfFn3(next2, value);
      if (!shouldUpdateProp(value, nextValue)) {
        return;
      }
      if (!isControlled) {
        setValue(nextValue);
      }
      onChangeProp(nextValue);
    },
    [isControlled, onChangeProp, value, shouldUpdateProp]
  );
  return [value, updateValue];
}

// node_modules/@chakra-ui/hooks/dist/chunk-7JBTTEVG.mjs
var import_react131 = __toESM(require_react(), 1);
function useDisclosure(props = {}) {
  const {
    onClose: onCloseProp,
    onOpen: onOpenProp,
    isOpen: isOpenProp,
    id: idProp
  } = props;
  const onOpenPropCallbackRef = useCallbackRef3(onOpenProp);
  const onClosePropCallbackRef = useCallbackRef3(onCloseProp);
  const [isOpenState, setIsOpen] = (0, import_react131.useState)(props.defaultIsOpen || false);
  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);
  const id3 = useId6(idProp, "disclosure");
  const onClose = (0, import_react131.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();
  }, [isControlled, onClosePropCallbackRef]);
  const onOpen = (0, import_react131.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();
  }, [isControlled, onOpenPropCallbackRef]);
  const onToggle = (0, import_react131.useCallback)(() => {
    const action = isOpen ? onClose : onOpen;
    action();
  }, [isOpen, onOpen, onClose]);
  return {
    isOpen: !!isOpen,
    onOpen,
    onClose,
    onToggle,
    isControlled,
    getButtonProps: (props2 = {}) => ({
      ...props2,
      "aria-expanded": isOpen,
      "aria-controls": id3,
      onClick: callAllHandlers2(props2.onClick, onToggle)
    }),
    getDisclosureProps: (props2 = {}) => ({
      ...props2,
      hidden: !isOpen,
      id: id3
    })
  };
}

// node_modules/@chakra-ui/hooks/dist/chunk-QNRG6N65.mjs
var import_react132 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-6WEF4DIO.mjs
var import_react133 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-IQENJQQ5.mjs
var import_react134 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-TJQCN7SC.mjs
var import_react135 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-ATO3JZNW.mjs
var import_react136 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-BBVTFCMB.mjs
var import_react137 = __toESM(require_react(), 1);
function useBoolean(initialState2 = false) {
  const [value, setValue] = (0, import_react137.useState)(initialState2);
  const callbacks = (0, import_react137.useMemo)(
    () => ({
      on: () => setValue(true),
      off: () => setValue(false),
      toggle: () => setValue((prev2) => !prev2)
    }),
    []
  );
  return [value, callbacks];
}

// node_modules/@chakra-ui/hooks/dist/chunk-KYYEOW6S.mjs
var import_react138 = __toESM(require_react(), 1);
var import_copy_to_clipboard = __toESM(require_copy_to_clipboard(), 1);
function useClipboard(value, optionsOrTimeout = {}) {
  const [hasCopied, setHasCopied] = (0, import_react138.useState)(false);
  const [valueState, setValueState] = (0, import_react138.useState)(value);
  (0, import_react138.useEffect)(() => setValueState(value), [value]);
  const { timeout = 1500, ...copyOptions } = typeof optionsOrTimeout === "number" ? { timeout: optionsOrTimeout } : optionsOrTimeout;
  const onCopy = (0, import_react138.useCallback)(() => {
    const didCopy = (0, import_copy_to_clipboard.default)(valueState, copyOptions);
    setHasCopied(didCopy);
  }, [valueState, copyOptions]);
  (0, import_react138.useEffect)(() => {
    let timeoutId = null;
    if (hasCopied) {
      timeoutId = window.setTimeout(() => {
        setHasCopied(false);
      }, timeout);
    }
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [timeout, hasCopied]);
  return {
    value: valueState,
    setValue: setValueState,
    onCopy,
    hasCopied
  };
}

// node_modules/@chakra-ui/hooks/dist/chunk-QP32JBMJ.mjs
var import_react139 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/hooks/dist/chunk-S7MFKWQB.mjs
var import_react140 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/input/dist/chunk-FKYN3ZGE.mjs
var import_react141 = __toESM(require_react(), 1);
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var [InputGroupStylesProvider, useInputGroupStyles] = createContext2({
  name: `InputGroupStylesContext`,
  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in "<InputGroup />" `
});
var InputGroup = forwardRef3(
  function InputGroup2(props, ref) {
    const styles2 = useMultiStyleConfig("Input", props);
    const { children, className, ...rest } = omitThemingProps(props);
    const _className = cx("chakra-input__group", className);
    const groupStyles = {};
    const validChildren = getValidChildren2(children);
    const input = styles2.field;
    validChildren.forEach((child) => {
      var _a9, _b5;
      if (!styles2)
        return;
      if (input && child.type.id === "InputLeftElement") {
        groupStyles.paddingStart = (_a9 = input.height) != null ? _a9 : input.h;
      }
      if (input && child.type.id === "InputRightElement") {
        groupStyles.paddingEnd = (_b5 = input.height) != null ? _b5 : input.h;
      }
      if (child.type.id === "InputRightAddon") {
        groupStyles.borderEndRadius = 0;
      }
      if (child.type.id === "InputLeftAddon") {
        groupStyles.borderStartRadius = 0;
      }
    });
    const clones = validChildren.map((child) => {
      var _a9, _b5;
      const theming = compact({
        size: ((_a9 = child.props) == null ? void 0 : _a9.size) || props.size,
        variant: ((_b5 = child.props) == null ? void 0 : _b5.variant) || props.variant
      });
      return child.type.id !== "Input" ? (0, import_react141.cloneElement)(child, theming) : (0, import_react141.cloneElement)(child, Object.assign(theming, groupStyles, child.props));
    });
    return (0, import_jsx_runtime67.jsx)(
      chakra.div,
      {
        className: _className,
        ref,
        __css: {
          width: "100%",
          display: "flex",
          position: "relative",
          // Parts of inputs override z-index to ensure that they stack correctly on each other
          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes
          isolation: "isolate",
          ...styles2.group
        },
        "data-group": true,
        ...rest,
        children: (0, import_jsx_runtime67.jsx)(InputGroupStylesProvider, { value: styles2, children: clones })
      }
    );
  }
);
InputGroup.displayName = "InputGroup";

// node_modules/@chakra-ui/input/dist/chunk-ADBZ7YHX.mjs
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var placements = {
  left: {
    marginEnd: "-1px",
    borderEndRadius: 0,
    borderEndColor: "transparent"
  },
  right: {
    marginStart: "-1px",
    borderStartRadius: 0,
    borderStartColor: "transparent"
  }
};
var StyledAddon = chakra("div", {
  baseStyle: {
    flex: "0 0 auto",
    width: "auto",
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap"
  }
});
var InputAddon = forwardRef3(
  function InputAddon2(props, ref) {
    var _a9;
    const { placement = "left", ...rest } = props;
    const placementStyles = (_a9 = placements[placement]) != null ? _a9 : {};
    const styles2 = useInputGroupStyles();
    return (0, import_jsx_runtime68.jsx)(
      StyledAddon,
      {
        ref,
        ...rest,
        __css: {
          ...styles2.addon,
          ...placementStyles
        }
      }
    );
  }
);
InputAddon.displayName = "InputAddon";
var InputLeftAddon = forwardRef3(
  function InputLeftAddon2(props, ref) {
    return (0, import_jsx_runtime68.jsx)(
      InputAddon,
      {
        ref,
        placement: "left",
        ...props,
        className: cx("chakra-input__left-addon", props.className)
      }
    );
  }
);
InputLeftAddon.displayName = "InputLeftAddon";
InputLeftAddon.id = "InputLeftAddon";
var InputRightAddon = forwardRef3(
  function InputRightAddon2(props, ref) {
    return (0, import_jsx_runtime68.jsx)(
      InputAddon,
      {
        ref,
        placement: "right",
        ...props,
        className: cx("chakra-input__right-addon", props.className)
      }
    );
  }
);
InputRightAddon.displayName = "InputRightAddon";
InputRightAddon.id = "InputRightAddon";

// node_modules/@chakra-ui/input/dist/chunk-2ZHRCML3.mjs
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var StyledInputElement = chakra("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "0",
    zIndex: 2
  }
});
var InputElement = forwardRef3(function InputElement2(props, ref) {
  var _a9, _b5;
  const { placement = "left", ...rest } = props;
  const styles2 = useInputGroupStyles();
  const input = styles2.field;
  const attr = placement === "left" ? "insetStart" : "insetEnd";
  const elementStyles = {
    [attr]: "0",
    width: (_a9 = input == null ? void 0 : input.height) != null ? _a9 : input == null ? void 0 : input.h,
    height: (_b5 = input == null ? void 0 : input.height) != null ? _b5 : input == null ? void 0 : input.h,
    fontSize: input == null ? void 0 : input.fontSize,
    ...styles2.element
  };
  return (0, import_jsx_runtime69.jsx)(StyledInputElement, { ref, __css: elementStyles, ...rest });
});
InputElement.id = "InputElement";
InputElement.displayName = "InputElement";
var InputLeftElement = forwardRef3(
  function InputLeftElement2(props, ref) {
    const { className, ...rest } = props;
    const _className = cx("chakra-input__left-element", className);
    return (0, import_jsx_runtime69.jsx)(
      InputElement,
      {
        ref,
        placement: "left",
        className: _className,
        ...rest
      }
    );
  }
);
InputLeftElement.id = "InputLeftElement";
InputLeftElement.displayName = "InputLeftElement";
var InputRightElement = forwardRef3(
  function InputRightElement2(props, ref) {
    const { className, ...rest } = props;
    const _className = cx("chakra-input__right-element", className);
    return (0, import_jsx_runtime69.jsx)(
      InputElement,
      {
        ref,
        placement: "right",
        className: _className,
        ...rest
      }
    );
  }
);
InputRightElement.id = "InputRightElement";
InputRightElement.displayName = "InputRightElement";

// node_modules/@chakra-ui/input/dist/chunk-6CVSDS6C.mjs
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var Input = forwardRef3(function Input2(props, ref) {
  const { htmlSize, ...rest } = props;
  const styles2 = useMultiStyleConfig("Input", rest);
  const ownProps = omitThemingProps(rest);
  const input = useFormControl(ownProps);
  const _className = cx("chakra-input", props.className);
  return (0, import_jsx_runtime70.jsx)(
    chakra.input,
    {
      size: htmlSize,
      ...input,
      __css: styles2.field,
      ref,
      className: _className
    }
  );
});
Input.displayName = "Input";
Input.id = "Input";

// node_modules/@chakra-ui/layout/dist/chunk-K7XRJ7NL.mjs
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var Link = forwardRef3(function Link2(props, ref) {
  const styles2 = useStyleConfig("Link", props);
  const { className, isExternal, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime71.jsx)(
    chakra.a,
    {
      target: isExternal ? "_blank" : void 0,
      rel: isExternal ? "noopener" : void 0,
      ref,
      className: cx("chakra-link", className),
      ...rest,
      __css: styles2
    }
  );
});
Link.displayName = "Link";

// node_modules/@chakra-ui/layout/dist/chunk-46CXQZ4E.mjs
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
var [ListStylesProvider, useListStyles] = createContext2({
  name: `ListStylesContext`,
  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in "<List />" `
});
var List = forwardRef3(function List2(props, ref) {
  const styles2 = useMultiStyleConfig("List", props);
  const {
    children,
    styleType = "none",
    stylePosition,
    spacing: spacing4,
    ...rest
  } = omitThemingProps(props);
  const validChildren = getValidChildren2(children);
  const selector = "& > *:not(style) ~ *:not(style)";
  const spacingStyle2 = spacing4 ? { [selector]: { mt: spacing4 } } : {};
  return (0, import_jsx_runtime72.jsx)(ListStylesProvider, { value: styles2, children: (0, import_jsx_runtime72.jsx)(
    chakra.ul,
    {
      ref,
      listStyleType: styleType,
      listStylePosition: stylePosition,
      role: "list",
      __css: { ...styles2.container, ...spacingStyle2 },
      ...rest,
      children: validChildren
    }
  ) });
});
List.displayName = "List";
var OrderedList = forwardRef3((props, ref) => {
  const { as, ...rest } = props;
  return (0, import_jsx_runtime72.jsx)(List, { ref, as: "ol", styleType: "decimal", marginStart: "1em", ...rest });
});
OrderedList.displayName = "OrderedList";
var UnorderedList = forwardRef3(function UnorderedList2(props, ref) {
  const { as, ...rest } = props;
  return (0, import_jsx_runtime72.jsx)(List, { ref, as: "ul", styleType: "initial", marginStart: "1em", ...rest });
});
UnorderedList.displayName = "UnorderedList";
var ListItem = forwardRef3(function ListItem2(props, ref) {
  const styles2 = useListStyles();
  return (0, import_jsx_runtime72.jsx)(chakra.li, { ref, ...props, __css: styles2.item });
});
ListItem.displayName = "ListItem";
var ListIcon = forwardRef3(function ListIcon2(props, ref) {
  const styles2 = useListStyles();
  return (0, import_jsx_runtime72.jsx)(Icon, { ref, role: "presentation", ...props, __css: styles2.icon });
});
ListIcon.displayName = "ListIcon";

// node_modules/@chakra-ui/layout/dist/chunk-JARCRF6W.mjs
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var Grid = forwardRef3(function Grid2(props, ref) {
  const {
    templateAreas,
    gap,
    rowGap,
    columnGap,
    column: column2,
    row,
    autoFlow,
    autoRows,
    templateRows,
    autoColumns,
    templateColumns,
    ...rest
  } = props;
  const styles2 = {
    display: "grid",
    gridTemplateAreas: templateAreas,
    gridGap: gap,
    gridRowGap: rowGap,
    gridColumnGap: columnGap,
    gridAutoColumns: autoColumns,
    gridColumn: column2,
    gridRow: row,
    gridAutoFlow: autoFlow,
    gridAutoRows: autoRows,
    gridTemplateRows: templateRows,
    gridTemplateColumns: templateColumns
  };
  return (0, import_jsx_runtime73.jsx)(chakra.div, { ref, __css: styles2, ...rest });
});
Grid.displayName = "Grid";

// node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs
var breakpoints3 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);
function mapResponsive2(prop2, mapper) {
  if (Array.isArray(prop2)) {
    return prop2.map((item) => item === null ? null : mapper(item));
  }
  if (isObject(prop2)) {
    return Object.keys(prop2).reduce((result, key2) => {
      result[key2] = mapper(prop2[key2]);
      return result;
    }, {});
  }
  if (prop2 != null) {
    return mapper(prop2);
  }
  return null;
}
function arrayToObjectNotation2(values2, bps = breakpoints3) {
  const result = {};
  values2.forEach((value, index5) => {
    const key2 = bps[index5];
    if (value == null)
      return;
    result[key2] = value;
  });
  return result;
}

// node_modules/@chakra-ui/layout/dist/chunk-NEK3OOAM.mjs
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
var SimpleGrid = forwardRef3(
  function SimpleGrid2(props, ref) {
    const { columns: columns2, spacingX, spacingY, spacing: spacing4, minChildWidth, ...rest } = props;
    const theme3 = useTheme2();
    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme3) : countToColumns(columns2);
    return (0, import_jsx_runtime74.jsx)(
      Grid,
      {
        ref,
        gap: spacing4,
        columnGap: spacingX,
        rowGap: spacingY,
        templateColumns,
        ...rest
      }
    );
  }
);
SimpleGrid.displayName = "SimpleGrid";
function toPx(n3) {
  return typeof n3 === "number" ? `${n3}px` : n3;
}
function widthToColumns(width, theme3) {
  return mapResponsive2(width, (value) => {
    const _value = getToken("sizes", value, toPx(value))(theme3);
    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;
  });
}
function countToColumns(count) {
  return mapResponsive2(
    count,
    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`
  );
}

// node_modules/@chakra-ui/layout/dist/chunk-BL2ZZSHG.mjs
var Spacer = chakra("div", {
  baseStyle: {
    flex: 1,
    justifySelf: "stretch",
    alignSelf: "stretch"
  }
});
Spacer.displayName = "Spacer";

// node_modules/@chakra-ui/layout/dist/chunk-2OOHT3W5.mjs
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var Text = forwardRef3(function Text2(props, ref) {
  const styles2 = useStyleConfig("Text", props);
  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);
  const aliasedProps = compact({
    textAlign: props.align,
    textDecoration: props.decoration,
    textTransform: props.casing
  });
  return (0, import_jsx_runtime75.jsx)(
    chakra.p,
    {
      ref,
      className: cx("chakra-text", props.className),
      ...aliasedProps,
      ...rest,
      __css: styles2
    }
  );
});
Text.displayName = "Text";

// node_modules/@chakra-ui/layout/dist/chunk-7ELO524Q.mjs
var import_react142 = __toESM(require_react(), 1);
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var Wrap = forwardRef3(function Wrap2(props, ref) {
  const {
    spacing: spacing4 = "0.5rem",
    spacingX,
    spacingY,
    children,
    justify,
    direction: direction2,
    align,
    className,
    shouldWrapChildren,
    ...rest
  } = props;
  const _children = (0, import_react142.useMemo)(
    () => shouldWrapChildren ? import_react142.Children.map(children, (child, index5) => (0, import_jsx_runtime76.jsx)(WrapItem, { children: child }, index5)) : children,
    [children, shouldWrapChildren]
  );
  return (0, import_jsx_runtime76.jsx)(chakra.div, { ref, className: cx("chakra-wrap", className), ...rest, children: (0, import_jsx_runtime76.jsx)(
    chakra.ul,
    {
      className: "chakra-wrap__list",
      __css: {
        display: "flex",
        flexWrap: "wrap",
        justifyContent: justify,
        alignItems: align,
        flexDirection: direction2,
        listStyleType: "none",
        gap: spacing4,
        columnGap: spacingX,
        rowGap: spacingY,
        padding: "0"
      },
      children: _children
    }
  ) });
});
Wrap.displayName = "Wrap";
var WrapItem = forwardRef3(function WrapItem2(props, ref) {
  const { className, ...rest } = props;
  return (0, import_jsx_runtime76.jsx)(
    chakra.li,
    {
      ref,
      __css: { display: "flex", alignItems: "flex-start" },
      className: cx("chakra-wrap__listitem", className),
      ...rest
    }
  );
});
WrapItem.displayName = "WrapItem";

// node_modules/@chakra-ui/layout/dist/chunk-KTD65HY5.mjs
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var StackDivider = (props) => (0, import_jsx_runtime77.jsx)(
  chakra.div,
  {
    className: "chakra-stack__divider",
    ...props,
    __css: {
      ...props["__css"],
      borderWidth: 0,
      alignSelf: "stretch",
      borderColor: "inherit",
      width: "auto",
      height: "auto"
    }
  }
);
StackDivider.displayName = "StackDivider";

// node_modules/@chakra-ui/layout/dist/chunk-ZFQCCYWD.mjs
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
var StackItem = (props) => (0, import_jsx_runtime78.jsx)(
  chakra.div,
  {
    className: "chakra-stack__item",
    ...props,
    __css: {
      display: "inline-block",
      flex: "0 0 auto",
      minWidth: 0,
      ...props["__css"]
    }
  }
);
StackItem.displayName = "StackItem";

// node_modules/@chakra-ui/layout/dist/chunk-5VJV6UNA.mjs
function getDividerStyles(options2) {
  const { spacing: spacing4, direction: direction2 } = options2;
  const dividerStyles = {
    column: {
      my: spacing4,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    "column-reverse": {
      my: spacing4,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    row: {
      mx: spacing4,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    },
    "row-reverse": {
      mx: spacing4,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    }
  };
  return {
    "&": mapResponsive2(
      direction2,
      (value) => dividerStyles[value]
    )
  };
}

// node_modules/@chakra-ui/layout/dist/chunk-ZHMYA64R.mjs
var import_react143 = __toESM(require_react(), 1);
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var Stack = forwardRef3((props, ref) => {
  const {
    isInline,
    direction: directionProp,
    align,
    justify,
    spacing: spacing4 = "0.5rem",
    wrap: wrap6,
    children,
    divider,
    className,
    shouldWrapChildren,
    ...rest
  } = props;
  const direction2 = isInline ? "row" : directionProp != null ? directionProp : "column";
  const dividerStyle = (0, import_react143.useMemo)(
    () => getDividerStyles({ spacing: spacing4, direction: direction2 }),
    [spacing4, direction2]
  );
  const hasDivider = !!divider;
  const shouldUseChildren = !shouldWrapChildren && !hasDivider;
  const clones = (0, import_react143.useMemo)(() => {
    const validChildren = getValidChildren2(children);
    return shouldUseChildren ? validChildren : validChildren.map((child, index5) => {
      const key2 = typeof child.key !== "undefined" ? child.key : index5;
      const isLast = index5 + 1 === validChildren.length;
      const wrappedChild = (0, import_jsx_runtime79.jsx)(StackItem, { children: child }, key2);
      const _child = shouldWrapChildren ? wrappedChild : child;
      if (!hasDivider)
        return _child;
      const clonedDivider = (0, import_react143.cloneElement)(
        divider,
        {
          __css: dividerStyle
        }
      );
      const _divider = isLast ? null : clonedDivider;
      return (0, import_jsx_runtime79.jsxs)(import_react143.Fragment, { children: [
        _child,
        _divider
      ] }, key2);
    });
  }, [
    divider,
    dividerStyle,
    hasDivider,
    shouldUseChildren,
    shouldWrapChildren,
    children
  ]);
  const _className = cx("chakra-stack", className);
  return (0, import_jsx_runtime79.jsx)(
    chakra.div,
    {
      ref,
      display: "flex",
      alignItems: align,
      justifyContent: justify,
      flexDirection: direction2,
      flexWrap: wrap6,
      gap: hasDivider ? void 0 : spacing4,
      className: _className,
      ...rest,
      children: clones
    }
  );
});
Stack.displayName = "Stack";

// node_modules/@chakra-ui/layout/dist/chunk-NTCQBYKE.mjs
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var VStack = forwardRef3((props, ref) => (0, import_jsx_runtime80.jsx)(Stack, { align: "center", ...props, direction: "column", ref }));
VStack.displayName = "VStack";

// node_modules/@chakra-ui/layout/dist/chunk-3ASUQ6PA.mjs
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
var HStack = forwardRef3((props, ref) => (0, import_jsx_runtime81.jsx)(Stack, { align: "center", ...props, direction: "row", ref }));
HStack.displayName = "HStack";

// node_modules/@chakra-ui/layout/dist/chunk-ZPFGWTBB.mjs
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
function spanFn(span) {
  return mapResponsive2(
    span,
    (value) => value === "auto" ? "auto" : `span ${value}/span ${value}`
  );
}
var GridItem = forwardRef3(function GridItem2(props, ref) {
  const {
    area,
    colSpan,
    colStart,
    colEnd,
    rowEnd,
    rowSpan,
    rowStart,
    ...rest
  } = props;
  const styles2 = compact({
    gridArea: area,
    gridColumn: spanFn(colSpan),
    gridRow: spanFn(rowSpan),
    gridColumnStart: colStart,
    gridColumnEnd: colEnd,
    gridRowStart: rowStart,
    gridRowEnd: rowEnd
  });
  return (0, import_jsx_runtime82.jsx)(chakra.div, { ref, __css: styles2, ...rest });
});
GridItem.displayName = "GridItem";

// node_modules/@chakra-ui/layout/dist/chunk-7OLJDQMT.mjs
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var Heading = forwardRef3(function Heading2(props, ref) {
  const styles2 = useStyleConfig("Heading", props);
  const { className, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime83.jsx)(
    chakra.h2,
    {
      ref,
      className: cx("chakra-heading", props.className),
      ...rest,
      __css: styles2
    }
  );
});
Heading.displayName = "Heading";

// node_modules/@chakra-ui/layout/dist/chunk-PULVB27S.mjs
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var Box = chakra("div");
Box.displayName = "Box";
var Square = forwardRef3(function Square2(props, ref) {
  const { size: size4, centerContent = true, ...rest } = props;
  const styles2 = centerContent ? { display: "flex", alignItems: "center", justifyContent: "center" } : {};
  return (0, import_jsx_runtime84.jsx)(
    Box,
    {
      ref,
      boxSize: size4,
      __css: {
        ...styles2,
        flexShrink: 0,
        flexGrow: 0
      },
      ...rest
    }
  );
});
Square.displayName = "Square";
var Circle = forwardRef3(function Circle2(props, ref) {
  const { size: size4, ...rest } = props;
  return (0, import_jsx_runtime84.jsx)(Square, { size: size4, ref, borderRadius: "9999px", ...rest });
});
Circle.displayName = "Circle";

// node_modules/@chakra-ui/layout/dist/chunk-6WNMSZKB.mjs
var import_react144 = __toESM(require_react(), 1);
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var escapeRegexp = (term) => term.replace(/[|\\{}()[\]^$+*?.-]/g, (char2) => `\\${char2}`);
function buildRegex(query) {
  const _query = query.filter((text) => text.length !== 0).map((text) => escapeRegexp(text.trim()));
  if (!_query.length) {
    return null;
  }
  return new RegExp(`(${_query.join("|")})`, "ig");
}
function highlightWords({ text, query }) {
  const regex2 = buildRegex(Array.isArray(query) ? query : [query]);
  if (!regex2) {
    return [{ text, match: false }];
  }
  const result = text.split(regex2).filter(Boolean);
  return result.map((str) => ({ text: str, match: regex2.test(str) }));
}
function useHighlight(props) {
  const { text, query } = props;
  return (0, import_react144.useMemo)(() => highlightWords({ text, query }), [text, query]);
}
var Mark = forwardRef3(function Mark2(props, ref) {
  const styles2 = useStyleConfig("Mark", props);
  const ownProps = omitThemingProps(props);
  return (0, import_jsx_runtime85.jsx)(
    Box,
    {
      ref,
      ...ownProps,
      as: "mark",
      __css: { bg: "transparent", whiteSpace: "nowrap", ...styles2 }
    }
  );
});
function Highlight(props) {
  const { children, query, styles: styles2 } = props;
  if (typeof children !== "string") {
    throw new Error("The children prop of Highlight must be a string");
  }
  const chunks = useHighlight({ query, text: children });
  return (0, import_jsx_runtime85.jsx)(import_jsx_runtime85.Fragment, { children: chunks.map((chunk2, index5) => {
    return chunk2.match ? (0, import_jsx_runtime85.jsx)(Mark, { sx: styles2, children: chunk2.text }, index5) : (0, import_jsx_runtime85.jsx)(import_react144.Fragment, { children: chunk2.text }, index5);
  }) });
}

// node_modules/@chakra-ui/layout/dist/chunk-FDDFQHXZ.mjs
var import_react145 = __toESM(require_react(), 1);
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var Indicator = forwardRef3(function Indicator2(props, ref) {
  const {
    offsetX,
    offsetY,
    offset: offset3 = "0",
    placement = "top-end",
    ...rest
  } = props;
  const styles2 = (0, import_react145.useMemo)(
    () => ({
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      position: "absolute",
      insetBlockStart: mapResponsive2(placement, (v) => {
        const [side] = v.split("-");
        const map2 = {
          top: offsetY != null ? offsetY : offset3,
          middle: "50%",
          bottom: "auto"
        };
        return map2[side];
      }),
      insetBlockEnd: mapResponsive2(placement, (v) => {
        const [side] = v.split("-");
        const map2 = {
          top: "auto",
          middle: "50%",
          bottom: offsetY != null ? offsetY : offset3
        };
        return map2[side];
      }),
      insetStart: mapResponsive2(placement, (v) => {
        const [, align] = v.split("-");
        const map2 = {
          start: offsetX != null ? offsetX : offset3,
          center: "50%",
          end: "auto"
        };
        return map2[align];
      }),
      insetEnd: mapResponsive2(placement, (v) => {
        const [, align] = v.split("-");
        const map2 = {
          start: "auto",
          center: "50%",
          end: offsetX != null ? offsetX : offset3
        };
        return map2[align];
      }),
      translate: mapResponsive2(placement, (v) => {
        const [side, align] = v.split("-");
        const mapX = { start: "-50%", center: "-50%", end: "50%" };
        const mapY = { top: "-50%", middle: "-50%", bottom: "50%" };
        return `${mapX[align]} ${mapY[side]}`;
      })
    }),
    [offset3, offsetX, offsetY, placement]
  );
  return (0, import_jsx_runtime86.jsx)(chakra.div, { ref, __css: styles2, ...rest });
});

// node_modules/@chakra-ui/layout/dist/chunk-EBIU6VW7.mjs
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var Kbd = forwardRef3(function Kbd2(props, ref) {
  const styles2 = useStyleConfig("Kbd", props);
  const { className, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime87.jsx)(
    chakra.kbd,
    {
      ref,
      className: cx("chakra-kbd", className),
      ...rest,
      __css: {
        fontFamily: "mono",
        ...styles2
      }
    }
  );
});
Kbd.displayName = "Kbd";

// node_modules/@chakra-ui/layout/dist/chunk-NRJBSIIZ.mjs
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var LinkOverlay = forwardRef3(
  function LinkOverlay2(props, ref) {
    const { isExternal, target, rel, className, ...rest } = props;
    return (0, import_jsx_runtime88.jsx)(
      chakra.a,
      {
        ...rest,
        ref,
        className: cx("chakra-linkbox__overlay", className),
        rel: isExternal ? "noopener noreferrer" : rel,
        target: isExternal ? "_blank" : target,
        __css: {
          position: "static",
          "&::before": {
            content: "''",
            cursor: "inherit",
            display: "block",
            position: "absolute",
            top: 0,
            left: 0,
            zIndex: 0,
            width: "100%",
            height: "100%"
          }
        }
      }
    );
  }
);
var LinkBox = forwardRef3(function LinkBox2(props, ref) {
  const { className, ...rest } = props;
  return (0, import_jsx_runtime88.jsx)(
    chakra.div,
    {
      ref,
      position: "relative",
      ...rest,
      className: cx("chakra-linkbox", className),
      __css: {
        /* Elevate the links and abbreviations up */
        "a[href]:not(.chakra-linkbox__overlay), abbr[title]": {
          position: "relative",
          zIndex: 1
        }
      }
    }
  );
});

// node_modules/@chakra-ui/layout/dist/chunk-ZVFRDZZY.mjs
var import_react146 = __toESM(require_react(), 1);
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
var AspectRatio = forwardRef3(function(props, ref) {
  const { ratio = 4 / 3, children, className, ...rest } = props;
  const child = import_react146.Children.only(children);
  const _className = cx("chakra-aspect-ratio", className);
  return (0, import_jsx_runtime89.jsx)(
    chakra.div,
    {
      ref,
      position: "relative",
      className: _className,
      _before: {
        height: 0,
        content: `""`,
        display: "block",
        paddingBottom: mapResponsive2(ratio, (r3) => `${1 / r3 * 100}%`)
      },
      __css: {
        "& > *:not(style)": {
          overflow: "hidden",
          position: "absolute",
          top: "0",
          right: "0",
          bottom: "0",
          left: "0",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          height: "100%"
        },
        "& > img, & > video": {
          objectFit: "cover"
        }
      },
      ...rest,
      children: child
    }
  );
});
AspectRatio.displayName = "AspectRatio";

// node_modules/@chakra-ui/layout/dist/chunk-Z6RXEUPO.mjs
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
var Badge = forwardRef3(function Badge2(props, ref) {
  const styles2 = useStyleConfig("Badge", props);
  const { className, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime90.jsx)(
    chakra.span,
    {
      ref,
      className: cx("chakra-badge", props.className),
      ...rest,
      __css: {
        display: "inline-block",
        whiteSpace: "nowrap",
        verticalAlign: "middle",
        ...styles2
      }
    }
  );
});
Badge.displayName = "Badge";

// node_modules/@chakra-ui/layout/dist/chunk-FAWTVNS3.mjs
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
var Center = chakra("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }
});
Center.displayName = "Center";
var centerStyles = {
  horizontal: {
    insetStart: "50%",
    transform: "translateX(-50%)"
  },
  vertical: {
    top: "50%",
    transform: "translateY(-50%)"
  },
  both: {
    insetStart: "50%",
    top: "50%",
    transform: "translate(-50%, -50%)"
  }
};
var AbsoluteCenter = forwardRef3(
  function AbsoluteCenter2(props, ref) {
    const { axis = "both", ...rest } = props;
    return (0, import_jsx_runtime91.jsx)(
      chakra.div,
      {
        ref,
        __css: centerStyles[axis],
        ...rest,
        position: "absolute"
      }
    );
  }
);

// node_modules/@chakra-ui/layout/dist/chunk-LZZHVJFG.mjs
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
var Code = forwardRef3(function Code2(props, ref) {
  const styles2 = useStyleConfig("Code", props);
  const { className, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime92.jsx)(
    chakra.code,
    {
      ref,
      className: cx("chakra-code", props.className),
      ...rest,
      __css: {
        display: "inline-block",
        ...styles2
      }
    }
  );
});
Code.displayName = "Code";

// node_modules/@chakra-ui/layout/dist/chunk-5MKCW436.mjs
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
var Container2 = forwardRef3(function Container22(props, ref) {
  const { className, centerContent, ...rest } = omitThemingProps(props);
  const styles2 = useStyleConfig("Container", props);
  return (0, import_jsx_runtime93.jsx)(
    chakra.div,
    {
      ref,
      className: cx("chakra-container", className),
      ...rest,
      __css: {
        ...styles2,
        ...centerContent && {
          display: "flex",
          flexDirection: "column",
          alignItems: "center"
        }
      }
    }
  );
});
Container2.displayName = "Container";

// node_modules/@chakra-ui/layout/dist/chunk-W7WUSNWJ.mjs
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
var Divider = forwardRef3(function Divider2(props, ref) {
  const {
    borderLeftWidth,
    borderBottomWidth,
    borderTopWidth,
    borderRightWidth,
    borderWidth,
    borderStyle,
    borderColor,
    ...styles2
  } = useStyleConfig("Divider", props);
  const {
    className,
    orientation = "horizontal",
    __css,
    ...rest
  } = omitThemingProps(props);
  const dividerStyles = {
    vertical: {
      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
      height: "100%"
    },
    horizontal: {
      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
      width: "100%"
    }
  };
  return (0, import_jsx_runtime94.jsx)(
    chakra.hr,
    {
      ref,
      "aria-orientation": orientation,
      ...rest,
      __css: {
        ...styles2,
        border: "0",
        borderColor,
        borderStyle,
        ...dividerStyles[orientation],
        ...__css
      },
      className: cx("chakra-divider", className)
    }
  );
});
Divider.displayName = "Divider";

// node_modules/@chakra-ui/layout/dist/chunk-KRPLQIP4.mjs
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
var Flex = forwardRef3(function Flex2(props, ref) {
  const { direction: direction2, align, justify, wrap: wrap6, basis, grow, shrink, ...rest } = props;
  const styles2 = {
    display: "flex",
    flexDirection: direction2,
    alignItems: align,
    justifyContent: justify,
    flexWrap: wrap6,
    flexBasis: basis,
    flexGrow: grow,
    flexShrink: shrink
  };
  return (0, import_jsx_runtime95.jsx)(chakra.div, { ref, __css: styles2, ...rest });
});
Flex.displayName = "Flex";

// node_modules/@chakra-ui/media-query/dist/chunk-57I6FYPZ.mjs
var import_react147 = __toESM(require_react(), 1);
function useMediaQuery(query, options2 = {}) {
  const { ssr = true, fallback } = options2;
  const { getWindow: getWindow4 } = useEnvironment();
  const queries = Array.isArray(query) ? query : [query];
  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];
  fallbackValues = fallbackValues.filter((v) => v != null);
  const [value, setValue] = (0, import_react147.useState)(() => {
    return queries.map((query2, index5) => ({
      media: query2,
      matches: ssr ? !!fallbackValues[index5] : getWindow4().matchMedia(query2).matches
    }));
  });
  (0, import_react147.useEffect)(() => {
    const win = getWindow4();
    setValue(
      queries.map((query2) => ({
        media: query2,
        matches: win.matchMedia(query2).matches
      }))
    );
    const mql = queries.map((query2) => win.matchMedia(query2));
    const handler = (evt) => {
      setValue((prev2) => {
        return prev2.slice().map((item) => {
          if (item.media === evt.media)
            return { ...item, matches: evt.matches };
          return item;
        });
      });
    };
    mql.forEach((mql2) => {
      if (typeof mql2.addListener === "function") {
        mql2.addListener(handler);
      } else {
        mql2.addEventListener("change", handler);
      }
    });
    return () => {
      mql.forEach((mql2) => {
        if (typeof mql2.removeListener === "function") {
          mql2.removeListener(handler);
        } else {
          mql2.removeEventListener("change", handler);
        }
      });
    };
  }, [getWindow4]);
  return value.map((item) => item.matches);
}

// node_modules/@chakra-ui/media-query/dist/chunk-Q2OSBGYW.mjs
function Visibility(props) {
  const { breakpoint, hide: hide3, children, ssr } = props;
  const [show] = useMediaQuery(breakpoint, { ssr });
  const isVisible2 = hide3 ? !show : show;
  const rendered = isVisible2 ? children : null;
  return rendered;
}

// node_modules/@chakra-ui/media-query/dist/chunk-OYHRTWD2.mjs
var getBreakpoint = (theme3, value) => {
  var _a9, _b5;
  return (_b5 = (_a9 = theme3 == null ? void 0 : theme3.breakpoints) == null ? void 0 : _a9[value]) != null ? _b5 : value;
};
function useQuery(props) {
  const { breakpoint = "", below, above } = props;
  const theme3 = useTheme2();
  const bpBelow = getBreakpoint(theme3, below);
  const bpAbove = getBreakpoint(theme3, above);
  let query = breakpoint;
  if (bpBelow) {
    query = `(max-width: ${bpBelow})`;
  } else if (bpAbove) {
    query = `(min-width: ${bpAbove})`;
  }
  return query;
}

// node_modules/@chakra-ui/media-query/dist/chunk-E2LBHKJ2.mjs
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
function Hide(props) {
  const { children, ssr } = props;
  const query = useQuery(props);
  return (0, import_jsx_runtime96.jsx)(Visibility, { breakpoint: query, hide: true, ssr, children });
}
Hide.displayName = "Hide";

// node_modules/@chakra-ui/media-query/dist/chunk-6RI7LWPK.mjs
function usePrefersReducedMotion(options2) {
  const [prefersReducedMotion2] = useMediaQuery(
    "(prefers-reduced-motion: reduce)",
    options2
  );
  return prefersReducedMotion2;
}

// node_modules/@chakra-ui/media-query/dist/chunk-VXCSBZ7K.mjs
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
function Show(props) {
  const { children, ssr } = props;
  const query = useQuery(props);
  return (0, import_jsx_runtime97.jsx)(Visibility, { breakpoint: query, ssr, children });
}
Show.displayName = "Show";

// node_modules/@chakra-ui/media-query/dist/chunk-C53CKZDP.mjs
function getClosestValue(values2, breakpoint, breakpoints4 = breakpoints3) {
  let index5 = Object.keys(values2).indexOf(breakpoint);
  if (index5 !== -1) {
    return values2[breakpoint];
  }
  let stopIndex = breakpoints4.indexOf(breakpoint);
  while (stopIndex >= 0) {
    const key2 = breakpoints4[stopIndex];
    if (values2.hasOwnProperty(key2)) {
      index5 = stopIndex;
      break;
    }
    stopIndex -= 1;
  }
  if (index5 !== -1) {
    const key2 = breakpoints4[index5];
    return values2[key2];
  }
  return void 0;
}

// node_modules/@chakra-ui/media-query/dist/chunk-6KW5I77S.mjs
function useBreakpoint(arg) {
  var _a9, _b5;
  const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : "base" };
  const theme3 = useTheme2();
  const breakpoints4 = theme3.__breakpoints.details.map(
    ({ minMaxQuery, breakpoint }) => ({
      breakpoint,
      query: minMaxQuery.replace("@media screen and ", "")
    })
  );
  const fallback = breakpoints4.map((bp) => bp.breakpoint === opts.fallback);
  const values2 = useMediaQuery(
    breakpoints4.map((bp) => bp.query),
    { fallback, ssr: opts.ssr }
  );
  const index5 = values2.findIndex((value) => value == true);
  return (_b5 = (_a9 = breakpoints4[index5]) == null ? void 0 : _a9.breakpoint) != null ? _b5 : opts.fallback;
}

// node_modules/@chakra-ui/media-query/dist/chunk-KC77MHL3.mjs
function useBreakpointValue(values2, arg) {
  var _a9;
  const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : "base" };
  const breakpoint = useBreakpoint(opts);
  const theme3 = useTheme2();
  if (!breakpoint)
    return;
  const breakpoints4 = Array.from(((_a9 = theme3.__breakpoints) == null ? void 0 : _a9.keys) || []);
  const obj = Array.isArray(values2) ? Object.fromEntries(
    Object.entries(arrayToObjectNotation2(values2, breakpoints4)).map(
      ([key2, value]) => [key2, value]
    )
  ) : values2;
  return getClosestValue(obj, breakpoint, breakpoints4);
}

// node_modules/@chakra-ui/menu/dist/chunk-YSKACL7R.mjs
var import_react148 = __toESM(require_react(), 1);
function isPrintableCharacter(event) {
  const { key: key2 } = event;
  return key2.length === 1 || key2.length > 1 && /[^a-zA-Z0-9]/.test(key2);
}
function useShortcut2(props = {}) {
  const { timeout = 300, preventDefault: preventDefault2 = () => true } = props;
  const [keys3, setKeys] = (0, import_react148.useState)([]);
  const timeoutRef = (0, import_react148.useRef)();
  const flush = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };
  const clearKeysAfterDelay = () => {
    flush();
    timeoutRef.current = setTimeout(() => {
      setKeys([]);
      timeoutRef.current = null;
    }, timeout);
  };
  (0, import_react148.useEffect)(() => flush, []);
  function onKeyDown(fn2) {
    return (event) => {
      if (event.key === "Backspace") {
        const keysCopy = [...keys3];
        keysCopy.pop();
        setKeys(keysCopy);
        return;
      }
      if (isPrintableCharacter(event)) {
        const keysCopy = keys3.concat(event.key);
        if (preventDefault2(event)) {
          event.preventDefault();
          event.stopPropagation();
        }
        setKeys(keysCopy);
        fn2(keysCopy.join(""));
        clearKeysAfterDelay();
      }
    };
  }
  return onKeyDown;
}

// node_modules/@chakra-ui/menu/dist/chunk-BWUXSGSJ.mjs
function getNextItemFromSearch2(items, searchString, itemToString, currentItem) {
  if (searchString == null) {
    return currentItem;
  }
  if (!currentItem) {
    const foundItem = items.find(
      (item) => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase())
    );
    return foundItem;
  }
  const matchingItems = items.filter(
    (item) => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase())
  );
  if (matchingItems.length > 0) {
    let nextIndex;
    if (matchingItems.includes(currentItem)) {
      const currentIndex = matchingItems.indexOf(currentItem);
      nextIndex = currentIndex + 1;
      if (nextIndex === matchingItems.length) {
        nextIndex = 0;
      }
      return matchingItems[nextIndex];
    }
    nextIndex = items.indexOf(matchingItems[0]);
    return items[nextIndex];
  }
  return currentItem;
}

// node_modules/@chakra-ui/clickable/dist/chunk-VDSXRTOE.mjs
var import_react149 = __toESM(require_react(), 1);
function useEventListeners() {
  const listeners = (0, import_react149.useRef)(/* @__PURE__ */ new Map());
  const currentListeners = listeners.current;
  const add5 = (0, import_react149.useCallback)((el, type, listener, options2) => {
    listeners.current.set(listener, { type, el, options: options2 });
    el.addEventListener(type, listener, options2);
  }, []);
  const remove2 = (0, import_react149.useCallback)(
    (el, type, listener, options2) => {
      el.removeEventListener(type, listener, options2);
      listeners.current.delete(listener);
    },
    []
  );
  (0, import_react149.useEffect)(
    () => () => {
      currentListeners.forEach((value, key2) => {
        remove2(value.el, value.type, key2, value.options);
      });
    },
    [remove2, currentListeners]
  );
  return { add: add5, remove: remove2 };
}

// node_modules/@chakra-ui/clickable/dist/chunk-AXLEE3EK.mjs
var import_react150 = __toESM(require_react(), 1);
function isValidElement6(event) {
  const element = event.target;
  const { tagName, isContentEditable: isContentEditable3 } = element;
  return tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable3 !== true;
}
function useClickable(props = {}) {
  const {
    ref: htmlRef,
    isDisabled: isDisabled3,
    isFocusable: isFocusable4,
    clickOnEnter = true,
    clickOnSpace = true,
    onMouseDown,
    onMouseUp,
    onClick,
    onKeyDown,
    onKeyUp,
    tabIndex: tabIndexProp,
    onMouseOver,
    onMouseLeave,
    ...htmlProps
  } = props;
  const [isButton, setIsButton] = (0, import_react150.useState)(true);
  const [isPressed, setIsPressed] = (0, import_react150.useState)(false);
  const listeners = useEventListeners();
  const refCallback = (node3) => {
    if (!node3)
      return;
    if (node3.tagName !== "BUTTON") {
      setIsButton(false);
    }
  };
  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;
  const trulyDisabled = isDisabled3 && !isFocusable4;
  const handleClick = (0, import_react150.useCallback)(
    (event) => {
      if (isDisabled3) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }
      const self2 = event.currentTarget;
      self2.focus();
      onClick == null ? void 0 : onClick(event);
    },
    [isDisabled3, onClick]
  );
  const onDocumentKeyUp = (0, import_react150.useCallback)(
    (e) => {
      if (isPressed && isValidElement6(e)) {
        e.preventDefault();
        e.stopPropagation();
        setIsPressed(false);
        listeners.remove(document, "keyup", onDocumentKeyUp, false);
      }
    },
    [isPressed, listeners]
  );
  const handleKeyDown = (0, import_react150.useCallback)(
    (event) => {
      onKeyDown == null ? void 0 : onKeyDown(event);
      if (isDisabled3 || event.defaultPrevented || event.metaKey) {
        return;
      }
      if (!isValidElement6(event.nativeEvent) || isButton)
        return;
      const shouldClickOnEnter = clickOnEnter && event.key === "Enter";
      const shouldClickOnSpace = clickOnSpace && event.key === " ";
      if (shouldClickOnSpace) {
        event.preventDefault();
        setIsPressed(true);
      }
      if (shouldClickOnEnter) {
        event.preventDefault();
        const self2 = event.currentTarget;
        self2.click();
      }
      listeners.add(document, "keyup", onDocumentKeyUp, false);
    },
    [
      isDisabled3,
      isButton,
      onKeyDown,
      clickOnEnter,
      clickOnSpace,
      listeners,
      onDocumentKeyUp
    ]
  );
  const handleKeyUp = (0, import_react150.useCallback)(
    (event) => {
      onKeyUp == null ? void 0 : onKeyUp(event);
      if (isDisabled3 || event.defaultPrevented || event.metaKey)
        return;
      if (!isValidElement6(event.nativeEvent) || isButton)
        return;
      const shouldClickOnSpace = clickOnSpace && event.key === " ";
      if (shouldClickOnSpace) {
        event.preventDefault();
        setIsPressed(false);
        const self2 = event.currentTarget;
        self2.click();
      }
    },
    [clickOnSpace, isButton, isDisabled3, onKeyUp]
  );
  const onDocumentMouseUp = (0, import_react150.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      setIsPressed(false);
      listeners.remove(document, "mouseup", onDocumentMouseUp, false);
    },
    [listeners]
  );
  const handleMouseDown = (0, import_react150.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      if (isDisabled3) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }
      if (!isButton) {
        setIsPressed(true);
      }
      const target = event.currentTarget;
      target.focus({ preventScroll: true });
      listeners.add(document, "mouseup", onDocumentMouseUp, false);
      onMouseDown == null ? void 0 : onMouseDown(event);
    },
    [isDisabled3, isButton, onMouseDown, listeners, onDocumentMouseUp]
  );
  const handleMouseUp = (0, import_react150.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      if (!isButton) {
        setIsPressed(false);
      }
      onMouseUp == null ? void 0 : onMouseUp(event);
    },
    [onMouseUp, isButton]
  );
  const handleMouseOver = (0, import_react150.useCallback)(
    (event) => {
      if (isDisabled3) {
        event.preventDefault();
        return;
      }
      onMouseOver == null ? void 0 : onMouseOver(event);
    },
    [isDisabled3, onMouseOver]
  );
  const handleMouseLeave = (0, import_react150.useCallback)(
    (event) => {
      if (isPressed) {
        event.preventDefault();
        setIsPressed(false);
      }
      onMouseLeave == null ? void 0 : onMouseLeave(event);
    },
    [isPressed, onMouseLeave]
  );
  const ref = mergeRefs2(htmlRef, refCallback);
  if (isButton) {
    return {
      ...htmlProps,
      ref,
      type: "button",
      "aria-disabled": trulyDisabled ? void 0 : isDisabled3,
      disabled: trulyDisabled,
      onClick: handleClick,
      onMouseDown,
      onMouseUp,
      onKeyUp,
      onKeyDown,
      onMouseOver,
      onMouseLeave
    };
  }
  return {
    ...htmlProps,
    ref,
    role: "button",
    "data-active": dataAttr(isPressed),
    "aria-disabled": isDisabled3 ? "true" : void 0,
    tabIndex: trulyDisabled ? void 0 : tabIndex,
    onClick: handleClick,
    onMouseDown: handleMouseDown,
    onMouseUp: handleMouseUp,
    onKeyUp: handleKeyUp,
    onKeyDown: handleKeyDown,
    onMouseOver: handleMouseOver,
    onMouseLeave: handleMouseLeave
  };
}

// node_modules/@chakra-ui/react-use-focus-effect/dist/index.mjs
var import_react151 = __toESM(require_react(), 1);
function preventReturnFocus(containerRef) {
  const el = containerRef.current;
  if (!el)
    return false;
  const activeElement = getActiveElement3(el);
  if (!activeElement)
    return false;
  if (el.contains(activeElement))
    return false;
  if (isTabbable2(activeElement))
    return true;
  return false;
}
function useFocusOnHide2(containerRef, options2) {
  const { shouldFocus: shouldFocusProp, visible, focusRef } = options2;
  const shouldFocus = shouldFocusProp && !visible;
  useUpdateEffect(() => {
    if (!shouldFocus)
      return;
    if (preventReturnFocus(containerRef)) {
      return;
    }
    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;
    let rafId;
    if (el) {
      rafId = requestAnimationFrame(() => {
        el.focus({ preventScroll: true });
      });
      return () => {
        cancelAnimationFrame(rafId);
      };
    }
  }, [shouldFocus, containerRef, focusRef]);
}
var defaultOptions2 = {
  preventScroll: true,
  shouldFocus: false
};
function useFocusOnShow2(target, options2 = defaultOptions2) {
  const { focusRef, preventScroll, shouldFocus, visible } = options2;
  const element = isRefObject4(target) ? target.current : target;
  const autoFocusValue = shouldFocus && visible;
  const autoFocusRef = (0, import_react151.useRef)(autoFocusValue);
  const lastVisibleRef = (0, import_react151.useRef)(visible);
  useSafeLayoutEffect(() => {
    if (!lastVisibleRef.current && visible) {
      autoFocusRef.current = autoFocusValue;
    }
    lastVisibleRef.current = visible;
  }, [visible, autoFocusValue]);
  const onFocus4 = (0, import_react151.useCallback)(() => {
    if (!visible || !element || !autoFocusRef.current)
      return;
    autoFocusRef.current = false;
    if (element.contains(document.activeElement))
      return;
    if (focusRef == null ? void 0 : focusRef.current) {
      requestAnimationFrame(() => {
        var _a9;
        (_a9 = focusRef.current) == null ? void 0 : _a9.focus({ preventScroll });
      });
    } else {
      const tabbableEls = getAllFocusable2(element);
      if (tabbableEls.length > 0) {
        requestAnimationFrame(() => {
          tabbableEls[0].focus({ preventScroll });
        });
      }
    }
  }, [visible, preventScroll, element, focusRef]);
  useUpdateEffect(() => {
    onFocus4();
  }, [onFocus4]);
  useEventListener(element, "transitionend", onFocus4);
}
function isRefObject4(val) {
  return "current" in val;
}

// node_modules/@chakra-ui/popper/dist/chunk-6WT2JRWX.mjs
var toVar2 = (value, fallback) => ({
  var: value,
  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`
});
var cssVars = {
  arrowShadowColor: toVar2("--popper-arrow-shadow-color"),
  arrowSize: toVar2("--popper-arrow-size", "8px"),
  arrowSizeHalf: toVar2("--popper-arrow-size-half"),
  arrowBg: toVar2("--popper-arrow-bg"),
  transformOrigin: toVar2("--popper-transform-origin"),
  arrowOffset: toVar2("--popper-arrow-offset")
};
function getBoxShadow(placement) {
  if (placement.includes("top"))
    return `1px 1px 0px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("bottom"))
    return `-1px -1px 0px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("right"))
    return `-1px 1px 0px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("left"))
    return `1px -1px 0px 0 var(--popper-arrow-shadow-color)`;
}
var transforms = {
  top: "bottom center",
  "top-start": "bottom left",
  "top-end": "bottom right",
  bottom: "top center",
  "bottom-start": "top left",
  "bottom-end": "top right",
  left: "right center",
  "left-start": "right top",
  "left-end": "right bottom",
  right: "left center",
  "right-start": "left top",
  "right-end": "left bottom"
};
var toTransformOrigin = (placement) => transforms[placement];
var defaultEventListeners = {
  scroll: true,
  resize: true
};
function getEventListenerOptions(value) {
  let eventListeners;
  if (typeof value === "object") {
    eventListeners = {
      enabled: true,
      options: { ...defaultEventListeners, ...value }
    };
  } else {
    eventListeners = {
      enabled: value,
      options: defaultEventListeners
    };
  }
  return eventListeners;
}

// node_modules/@chakra-ui/popper/dist/chunk-P4KPSAOW.mjs
var matchWidth = {
  name: "matchWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: ({ state: state2 }) => {
    state2.styles.popper.width = `${state2.rects.reference.width}px`;
  },
  effect: ({ state: state2 }) => () => {
    const reference2 = state2.elements.reference;
    state2.elements.popper.style.width = `${reference2.offsetWidth}px`;
  }
};
var transformOrigin = {
  name: "transformOrigin",
  enabled: true,
  phase: "write",
  fn: ({ state: state2 }) => {
    setTransformOrigin(state2);
  },
  effect: ({ state: state2 }) => () => {
    setTransformOrigin(state2);
  }
};
var setTransformOrigin = (state2) => {
  state2.elements.popper.style.setProperty(
    cssVars.transformOrigin.var,
    toTransformOrigin(state2.placement)
  );
};
var positionArrow = {
  name: "positionArrow",
  enabled: true,
  phase: "afterWrite",
  fn: ({ state: state2 }) => {
    setArrowStyles(state2);
  }
};
var setArrowStyles = (state2) => {
  var _a9;
  if (!state2.placement)
    return;
  const overrides2 = getArrowStyle(state2.placement);
  if (((_a9 = state2.elements) == null ? void 0 : _a9.arrow) && overrides2) {
    Object.assign(state2.elements.arrow.style, {
      [overrides2.property]: overrides2.value,
      width: cssVars.arrowSize.varRef,
      height: cssVars.arrowSize.varRef,
      zIndex: -1
    });
    const vars2 = {
      [cssVars.arrowSizeHalf.var]: `calc(${cssVars.arrowSize.varRef} / 2 - 1px)`,
      [cssVars.arrowOffset.var]: `calc(${cssVars.arrowSizeHalf.varRef} * -1)`
    };
    for (const property in vars2) {
      state2.elements.arrow.style.setProperty(property, vars2[property]);
    }
  }
};
var getArrowStyle = (placement) => {
  if (placement.startsWith("top")) {
    return { property: "bottom", value: cssVars.arrowOffset.varRef };
  }
  if (placement.startsWith("bottom")) {
    return { property: "top", value: cssVars.arrowOffset.varRef };
  }
  if (placement.startsWith("left")) {
    return { property: "right", value: cssVars.arrowOffset.varRef };
  }
  if (placement.startsWith("right")) {
    return { property: "left", value: cssVars.arrowOffset.varRef };
  }
};
var innerArrow = {
  name: "innerArrow",
  enabled: true,
  phase: "main",
  requires: ["arrow"],
  fn: ({ state: state2 }) => {
    setInnerArrowStyles(state2);
  },
  effect: ({ state: state2 }) => () => {
    setInnerArrowStyles(state2);
  }
};
var setInnerArrowStyles = (state2) => {
  if (!state2.elements.arrow)
    return;
  const inner = state2.elements.arrow.querySelector(
    "[data-popper-arrow-inner]"
  );
  if (!inner)
    return;
  const boxShadow2 = getBoxShadow(state2.placement);
  if (boxShadow2) {
    inner.style.setProperty("--popper-arrow-default-shadow", boxShadow2);
  }
  Object.assign(inner.style, {
    transform: "rotate(45deg)",
    background: cssVars.arrowBg.varRef,
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    position: "absolute",
    zIndex: "inherit",
    boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`
  });
};

// node_modules/@chakra-ui/popper/dist/chunk-AUJXXV3B.mjs
var logicals = {
  "start-start": { ltr: "left-start", rtl: "right-start" },
  "start-end": { ltr: "left-end", rtl: "right-end" },
  "end-start": { ltr: "right-start", rtl: "left-start" },
  "end-end": { ltr: "right-end", rtl: "left-end" },
  start: { ltr: "left", rtl: "right" },
  end: { ltr: "right", rtl: "left" }
};
var opposites = {
  "auto-start": "auto-end",
  "auto-end": "auto-start",
  "top-start": "top-end",
  "top-end": "top-start",
  "bottom-start": "bottom-end",
  "bottom-end": "bottom-start"
};
function getPopperPlacement(placement, dir = "ltr") {
  var _a9, _b5;
  const value = ((_a9 = logicals[placement]) == null ? void 0 : _a9[dir]) || placement;
  if (dir === "ltr")
    return value;
  return (_b5 = opposites[placement]) != null ? _b5 : value;
}

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto2 = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements2 = [].concat(basePlacements, [auto2]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node3) {
  if (node3 == null) {
    return window;
  }
  if (node3.toString() !== "[object Window]") {
    var ownerDocument = node3.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node3;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement4(node3) {
  var OwnElement = getWindow(node3).Element;
  return node3 instanceof OwnElement || node3 instanceof Element;
}
function isHTMLElement3(node3) {
  var OwnElement = getWindow(node3).HTMLElement;
  return node3 instanceof OwnElement || node3 instanceof HTMLElement;
}
function isShadowRoot(node3) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node3).ShadowRoot;
  return node3 instanceof OwnElement || node3 instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref4) {
  var state2 = _ref4.state;
  Object.keys(state2.elements).forEach(function(name) {
    var style = state2.styles[name] || {};
    var attributes = state2.attributes[name] || {};
    var element = state2.elements[name];
    if (!isHTMLElement3(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect2(_ref23) {
  var state2 = _ref23.state;
  var initialStyles = {
    popper: {
      position: state2.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state2.elements.popper.style, initialStyles.popper);
  state2.styles = initialStyles;
  if (state2.elements.arrow) {
    Object.assign(state2.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state2.elements).forEach(function(name) {
      var element = state2.elements[name];
      var attributes = state2.attributes[name] || {};
      var styleProperties = Object.keys(state2.styles.hasOwnProperty(name) ? state2.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement3(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect2,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement3(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref4 = isElement4(element) ? getWindow(element) : window, visualViewport = _ref4.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains5(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next2 = child;
    do {
      if (next2 && parent.isSameNode(next2)) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle3(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement4(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode2(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement3(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle3(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement3(element)) {
    var elementCss = getComputedStyle3(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode2(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement3(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css7 = getComputedStyle3(currentNode);
    if (css7.transform !== "none" || css7.perspective !== "none" || css7.contain === "paint" || ["transform", "perspective"].indexOf(css7.willChange) !== -1 || isFirefox && css7.willChange === "filter" || isFirefox && css7.filter && css7.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle3(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle3(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min3, value, max3) {
  return max(min3, min(value, max3));
}
function withinMaxClamp(min3, value, max3) {
  var v = within(min3, value, max3);
  return v > max3 ? max3 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys3) {
  return keys3.reduce(function(hashMap, key2) {
    hashMap[key2] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state2) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state2.rects, {
    placement: state2.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref4) {
  var _state$modifiersData$;
  var state2 = _ref4.state, name = _ref4.name, options2 = _ref4.options;
  var arrowElement = state2.elements.arrow;
  var popperOffsets2 = state2.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state2.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options2.padding, state2);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state2.rects.reference[len] + state2.rects.reference[axis] - popperOffsets2[axis] - state2.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state2.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min3 = paddingObject[minProp];
  var max3 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset3 = within(min3, center, max3);
  var axisProp = axis;
  state2.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset3, _state$modifiersData$.centerOffset = offset3 - center, _state$modifiersData$);
}
function effect3(_ref23) {
  var state2 = _ref23.state, options2 = _ref23.options;
  var _options$element = options2.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state2.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains5(state2.elements.popper, arrowElement)) {
    return;
  }
  state2.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect3,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref4, win) {
  var x = _ref4.x, y = _ref4.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref23) {
  var _Object$assign2;
  var popper2 = _ref23.popper, popperRect = _ref23.popperRect, placement = _ref23.placement, variation = _ref23.variation, offsets = _ref23.offsets, position3 = _ref23.position, gpuAcceleration = _ref23.gpuAcceleration, adaptive = _ref23.adaptive, roundOffsets = _ref23.roundOffsets, isFixed2 = _ref23.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref32 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref32.x;
  y = _ref32.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle3(offsetParent).position !== "static" && position3 === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed2 && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed2 && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles2 = Object.assign({
    position: position3
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles2, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles2, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state2 = _ref5.state, options2 = _ref5.options;
  var _options$gpuAccelerat = options2.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options2.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options2.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles2 = {
    placement: getBasePlacement(state2.placement),
    variation: getVariation(state2.placement),
    popper: state2.elements.popper,
    popperRect: state2.rects.popper,
    gpuAcceleration,
    isFixed: state2.options.strategy === "fixed"
  };
  if (state2.modifiersData.popperOffsets != null) {
    state2.styles.popper = Object.assign({}, state2.styles.popper, mapToStyles(Object.assign({}, commonStyles2, {
      offsets: state2.modifiersData.popperOffsets,
      position: state2.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state2.modifiersData.arrow != null) {
    state2.styles.arrow = Object.assign({}, state2.styles.arrow, mapToStyles(Object.assign({}, commonStyles2, {
      offsets: state2.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state2.attributes.popper = Object.assign({}, state2.attributes.popper, {
    "data-popper-placement": state2.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect4(_ref4) {
  var state2 = _ref4.state, instance = _ref4.instance, options2 = _ref4.options;
  var _options$scroll = options2.scroll, scroll3 = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options2.resize, resize2 = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state2.elements.popper);
  var scrollParents = [].concat(state2.scrollParents.reference, state2.scrollParents.popper);
  if (scroll3) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize2) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll3) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize2) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect4,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash3 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash3[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash4 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash4[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node3) {
  var win = getWindow(node3);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle3(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent2(element) {
  var _getComputedStyle = getComputedStyle3(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent2(node3) {
  if (["html", "body", "#document"].indexOf(getNodeName(node3)) >= 0) {
    return node3.ownerDocument.body;
  }
  if (isHTMLElement3(node3) && isScrollParent2(node3)) {
    return node3;
  }
  return getScrollParent2(getParentNode2(node3));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list2) {
  var _element$ownerDocumen;
  if (list2 === void 0) {
    list2 = [];
  }
  var scrollParent = getScrollParent2(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent2(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list2.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode2(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement4(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode2(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle3(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement3(element) ? getOffsetParent(element) : element;
  if (!isElement4(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement4(clippingParent) && contains5(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref4) {
  var reference2 = _ref4.reference, element = _ref4.element, placement = _ref4.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state2, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, _options$placement = _options.placement, placement = _options$placement === void 0 ? state2.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state2.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state2.rects.popper;
  var element = state2.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement4(element) ? element : element.contextElement || getDocumentElement(state2.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state2.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state2.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset3 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key2) {
      var multiply3 = [right, bottom].indexOf(key2) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key2) >= 0 ? "y" : "x";
      overflowOffsets[key2] += offset3[axis] * multiply3;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state2, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements2 : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements4 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements4.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements4;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state2, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a2, b2) {
    return overflows[a2] - overflows[b2];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto2) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref4) {
  var state2 = _ref4.state, options2 = _ref4.options, name = _ref4.name;
  if (state2.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options2.fallbackPlacements, padding = options2.padding, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, _options$flipVariatio = options2.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options2.allowedAutoPlacements;
  var preferredPlacement = state2.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements4 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto2 ? computeAutoPlacement(state2, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state2.rects.reference;
  var popperRect = state2.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements4[0];
  for (var i2 = 0; i2 < placements4.length; i2++) {
    var placement = placements4[i2];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state2, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements4.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state2.placement !== firstFittingPlacement) {
    state2.modifiersData[name]._skip = true;
    state2.placement = firstFittingPlacement;
    state2.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref4) {
  var state2 = _ref4.state, name = _ref4.name;
  var referenceRect = state2.rects.reference;
  var popperRect = state2.rects.popper;
  var preventedOffsets = state2.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state2, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state2, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state2.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state2.attributes.popper = Object.assign({}, state2.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset3) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref4 = typeof offset3 === "function" ? offset3(Object.assign({}, rects, {
    placement
  })) : offset3, skidding = _ref4[0], distance5 = _ref4[1];
  skidding = skidding || 0;
  distance5 = (distance5 || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance5,
    y: skidding
  } : {
    x: skidding,
    y: distance5
  };
}
function offset(_ref23) {
  var state2 = _ref23.state, options2 = _ref23.options, name = _ref23.name;
  var _options$offset = options2.offset, offset3 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements2.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state2.rects, offset3);
    return acc;
  }, {});
  var _data$state$placement = data[state2.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state2.modifiersData.popperOffsets != null) {
    state2.modifiersData.popperOffsets.x += x;
    state2.modifiersData.popperOffsets.y += y;
  }
  state2.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref4) {
  var state2 = _ref4.state, name = _ref4.name;
  state2.modifiersData[name] = computeOffsets({
    reference: state2.rects.reference,
    element: state2.rects.popper,
    strategy: "absolute",
    placement: state2.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref4) {
  var state2 = _ref4.state, options2 = _ref4.options, name = _ref4.name;
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, padding = options2.padding, _options$tether = options2.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options2.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state2, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state2.placement);
  var variation = getVariation(state2.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state2.modifiersData.popperOffsets;
  var referenceRect = state2.rects.reference;
  var popperRect = state2.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state2.rects, {
    placement: state2.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state2.modifiersData.offset ? state2.modifiersData.offset[state2.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset3 = popperOffsets2[mainAxis];
    var min3 = offset3 + overflow[mainSide];
    var max3 = offset3 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state2.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state2.modifiersData["arrow#persistent"] ? state2.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state2.elements.arrow && getOffsetParent(state2.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset3 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset3 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min3, tetherMin) : min3, offset3, tether ? max(max3, tetherMax) : max3);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset3;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state2.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node3) {
  if (node3 === getWindow(node3) || !isHTMLElement3(node3)) {
    return getWindowScroll(node3);
  } else {
    return getHTMLElementScroll(node3);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed2) {
  if (isFixed2 === void 0) {
    isFixed2 = false;
  }
  var isOffsetParentAnElement = isHTMLElement3(offsetParent);
  var offsetParentIsScaled = isHTMLElement3(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed2);
  var scroll3 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed2) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent2(documentElement)) {
      scroll3 = getNodeScroll(offsetParent);
    }
    if (isHTMLElement3(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll3.scrollLeft - offsets.x,
    y: rect.top + scroll3.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map2 = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map2.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map2.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key2) {
    return merged[key2];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions5 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options2) {
    if (options2 === void 0) {
      options2 = defaultOptions5;
    }
    var state2 = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions5),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state2,
      setOptions: function setOptions(setOptionsAction) {
        var options3 = typeof setOptionsAction === "function" ? setOptionsAction(state2.options) : setOptionsAction;
        cleanupModifierEffects();
        state2.options = Object.assign({}, defaultOptions5, state2.options, options3);
        state2.scrollParents = {
          reference: isElement4(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state2.options.modifiers)));
        state2.orderedModifiers = orderedModifiers.filter(function(m3) {
          return m3.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state2.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state2.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state2.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state2.reset = false;
        state2.placement = state2.options.placement;
        state2.orderedModifiers.forEach(function(modifier) {
          return state2.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index5 = 0; index5 < state2.orderedModifiers.length; index5++) {
          if (state2.reset === true) {
            state2.reset = false;
            index5 = -1;
            continue;
          }
          var _state$orderedModifie = state2.orderedModifiers[index5], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state2 = fn2({
              state: state2,
              options: _options,
              name,
              instance
            }) || state2;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state2);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options2).then(function(state3) {
      if (!isDestroyed && options2.onFirstUpdate) {
        options2.onFirstUpdate(state3);
      }
    });
    function runModifierEffects() {
      state2.orderedModifiers.forEach(function(_ref4) {
        var name = _ref4.name, _ref$options = _ref4.options, options3 = _ref$options === void 0 ? {} : _ref$options, effect5 = _ref4.effect;
        if (typeof effect5 === "function") {
          var cleanupFn = effect5({
            state: state2,
            name,
            instance,
            options: options3
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/@chakra-ui/popper/dist/chunk-LUYFNC5G.mjs
var import_react152 = __toESM(require_react(), 1);
function usePopper(props = {}) {
  const {
    enabled = true,
    modifiers,
    placement: placementProp = "bottom",
    strategy = "absolute",
    arrowPadding = 8,
    eventListeners = true,
    offset: offset3,
    gutter = 8,
    flip: flip3 = true,
    boundary = "clippingParents",
    preventOverflow: preventOverflow2 = true,
    matchWidth: matchWidth2,
    direction: direction2 = "ltr"
  } = props;
  const reference2 = (0, import_react152.useRef)(null);
  const popper2 = (0, import_react152.useRef)(null);
  const instance = (0, import_react152.useRef)(null);
  const placement = getPopperPlacement(placementProp, direction2);
  const cleanup = (0, import_react152.useRef)(() => {
  });
  const setupPopper = (0, import_react152.useCallback)(() => {
    var _a9;
    if (!enabled || !reference2.current || !popper2.current)
      return;
    (_a9 = cleanup.current) == null ? void 0 : _a9.call(cleanup);
    instance.current = createPopper3(reference2.current, popper2.current, {
      placement,
      modifiers: [
        innerArrow,
        positionArrow,
        transformOrigin,
        {
          ...matchWidth,
          enabled: !!matchWidth2
        },
        {
          name: "eventListeners",
          ...getEventListenerOptions(eventListeners)
        },
        {
          name: "arrow",
          options: { padding: arrowPadding }
        },
        {
          name: "offset",
          options: {
            offset: offset3 != null ? offset3 : [0, gutter]
          }
        },
        {
          name: "flip",
          enabled: !!flip3,
          options: { padding: 8 }
        },
        {
          name: "preventOverflow",
          enabled: !!preventOverflow2,
          options: { boundary }
        },
        // allow users override internal modifiers
        ...modifiers != null ? modifiers : []
      ],
      strategy
    });
    instance.current.forceUpdate();
    cleanup.current = instance.current.destroy;
  }, [
    placement,
    enabled,
    modifiers,
    matchWidth2,
    eventListeners,
    arrowPadding,
    offset3,
    gutter,
    flip3,
    preventOverflow2,
    boundary,
    strategy
  ]);
  (0, import_react152.useEffect)(() => {
    return () => {
      var _a9;
      if (!reference2.current && !popper2.current) {
        (_a9 = instance.current) == null ? void 0 : _a9.destroy();
        instance.current = null;
      }
    };
  }, []);
  const referenceRef = (0, import_react152.useCallback)(
    (node3) => {
      reference2.current = node3;
      setupPopper();
    },
    [setupPopper]
  );
  const getReferenceProps = (0, import_react152.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs2(referenceRef, ref)
    }),
    [referenceRef]
  );
  const popperRef = (0, import_react152.useCallback)(
    (node3) => {
      popper2.current = node3;
      setupPopper();
    },
    [setupPopper]
  );
  const getPopperProps = (0, import_react152.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs2(popperRef, ref),
      style: {
        ...props2.style,
        position: strategy,
        minWidth: matchWidth2 ? void 0 : "max-content",
        inset: "0 auto auto 0"
      }
    }),
    [strategy, popperRef, matchWidth2]
  );
  const getArrowProps = (0, import_react152.useCallback)((props2 = {}, ref = null) => {
    const { size: size4, shadowColor, bg, style, ...rest } = props2;
    return {
      ...rest,
      ref,
      "data-popper-arrow": "",
      style: getArrowStyle2(props2)
    };
  }, []);
  const getArrowInnerProps = (0, import_react152.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref,
      "data-popper-arrow-inner": ""
    }),
    []
  );
  return {
    update() {
      var _a9;
      (_a9 = instance.current) == null ? void 0 : _a9.update();
    },
    forceUpdate() {
      var _a9;
      (_a9 = instance.current) == null ? void 0 : _a9.forceUpdate();
    },
    transformOrigin: cssVars.transformOrigin.varRef,
    referenceRef,
    popperRef,
    getPopperProps,
    getArrowProps,
    getArrowInnerProps,
    getReferenceProps
  };
}
function getArrowStyle2(props) {
  const { size: size4, shadowColor, bg, style } = props;
  const computedStyle = { ...style, position: "absolute" };
  if (size4) {
    computedStyle["--popper-arrow-size"] = size4;
  }
  if (shadowColor) {
    computedStyle["--popper-arrow-shadow-color"] = shadowColor;
  }
  if (bg) {
    computedStyle["--popper-arrow-bg"] = bg;
  }
  return computedStyle;
}

// node_modules/@chakra-ui/react-use-disclosure/dist/index.mjs
var import_react153 = __toESM(require_react(), 1);
function useDisclosure2(props = {}) {
  const {
    onClose: onCloseProp,
    onOpen: onOpenProp,
    isOpen: isOpenProp,
    id: idProp
  } = props;
  const handleOpen = useCallbackRef(onOpenProp);
  const handleClose = useCallbackRef(onCloseProp);
  const [isOpenState, setIsOpen] = (0, import_react153.useState)(props.defaultIsOpen || false);
  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;
  const isControlled = isOpenProp !== void 0;
  const uid = (0, import_react153.useId)();
  const id3 = idProp != null ? idProp : `disclosure-${uid}`;
  const onClose = (0, import_react153.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    handleClose == null ? void 0 : handleClose();
  }, [isControlled, handleClose]);
  const onOpen = (0, import_react153.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    handleOpen == null ? void 0 : handleOpen();
  }, [isControlled, handleOpen]);
  const onToggle = (0, import_react153.useCallback)(() => {
    if (isOpen) {
      onClose();
    } else {
      onOpen();
    }
  }, [isOpen, onOpen, onClose]);
  function getButtonProps(props2 = {}) {
    return {
      ...props2,
      "aria-expanded": isOpen,
      "aria-controls": id3,
      onClick(event) {
        var _a9;
        (_a9 = props2.onClick) == null ? void 0 : _a9.call(props2, event);
        onToggle();
      }
    };
  }
  function getDisclosureProps(props2 = {}) {
    return {
      ...props2,
      hidden: !isOpen,
      id: id3
    };
  }
  return {
    isOpen,
    onOpen,
    onClose,
    onToggle,
    isControlled,
    getButtonProps,
    getDisclosureProps
  };
}

// node_modules/@chakra-ui/react-use-outside-click/dist/index.mjs
var import_react154 = __toESM(require_react(), 1);
function useOutsideClick2(props) {
  const { ref, handler, enabled = true } = props;
  const savedHandler = useCallbackRef(handler);
  const stateRef = (0, import_react154.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false
  });
  const state2 = stateRef.current;
  (0, import_react154.useEffect)(() => {
    if (!enabled)
      return;
    const onPointerDown = (e) => {
      if (isValidEvent2(e, ref)) {
        state2.isPointerDown = true;
      }
    };
    const onMouseUp = (event) => {
      if (state2.ignoreEmulatedMouseEvents) {
        state2.ignoreEmulatedMouseEvents = false;
        return;
      }
      if (state2.isPointerDown && handler && isValidEvent2(event, ref)) {
        state2.isPointerDown = false;
        savedHandler(event);
      }
    };
    const onTouchEnd = (event) => {
      state2.ignoreEmulatedMouseEvents = true;
      if (handler && state2.isPointerDown && isValidEvent2(event, ref)) {
        state2.isPointerDown = false;
        savedHandler(event);
      }
    };
    const doc = getOwnerDocument3(ref.current);
    doc.addEventListener("mousedown", onPointerDown, true);
    doc.addEventListener("mouseup", onMouseUp, true);
    doc.addEventListener("touchstart", onPointerDown, true);
    doc.addEventListener("touchend", onTouchEnd, true);
    return () => {
      doc.removeEventListener("mousedown", onPointerDown, true);
      doc.removeEventListener("mouseup", onMouseUp, true);
      doc.removeEventListener("touchstart", onPointerDown, true);
      doc.removeEventListener("touchend", onTouchEnd, true);
    };
  }, [handler, ref, savedHandler, state2, enabled]);
}
function isValidEvent2(event, ref) {
  var _a9;
  const target = event.target;
  if (target) {
    const doc = getOwnerDocument3(target);
    if (!doc.contains(target))
      return false;
  }
  return !((_a9 = ref.current) == null ? void 0 : _a9.contains(target));
}
function getOwnerDocument3(node3) {
  var _a9;
  return (_a9 = node3 == null ? void 0 : node3.ownerDocument) != null ? _a9 : document;
}

// node_modules/@chakra-ui/react-use-animation-state/dist/index.mjs
var import_react155 = __toESM(require_react(), 1);
function useAnimationState2(props) {
  const { isOpen, ref } = props;
  const [mounted, setMounted] = (0, import_react155.useState)(isOpen);
  const [once2, setOnce] = (0, import_react155.useState)(false);
  (0, import_react155.useEffect)(() => {
    if (!once2) {
      setMounted(isOpen);
      setOnce(true);
    }
  }, [isOpen, once2, mounted]);
  useEventListener(
    () => ref.current,
    "animationend",
    () => {
      setMounted(isOpen);
    }
  );
  const hidden = isOpen ? false : !mounted;
  return {
    present: !hidden,
    onComplete() {
      var _a9;
      const win = getOwnerWindow2(ref.current);
      const evt = new win.CustomEvent("animationend", { bubbles: true });
      (_a9 = ref.current) == null ? void 0 : _a9.dispatchEvent(evt);
    }
  };
}

// node_modules/@chakra-ui/lazy-utils/dist/index.mjs
function lazyDisclosure(options2) {
  const { wasSelected, enabled, isSelected, mode: mode2 = "unmount" } = options2;
  if (!enabled)
    return true;
  if (isSelected)
    return true;
  if (mode2 === "keepMounted" && wasSelected)
    return true;
  return false;
}

// node_modules/@chakra-ui/menu/dist/chunk-SANI5SUM.mjs
var import_react156 = __toESM(require_react(), 1);
var [
  MenuDescendantsProvider,
  useMenuDescendantsContext,
  useMenuDescendants,
  useMenuDescendant
] = createDescendantContext();
var [MenuProvider, useMenuContext] = createContext2({
  strict: false,
  name: "MenuContext"
});
function useIds2(idProp, ...prefixes) {
  const reactId = (0, import_react156.useId)();
  const id3 = idProp || reactId;
  return (0, import_react156.useMemo)(() => {
    return prefixes.map((prefix4) => `${prefix4}-${id3}`);
  }, [id3, prefixes]);
}
function getOwnerDocument4(node3) {
  var _a9;
  return (_a9 = node3 == null ? void 0 : node3.ownerDocument) != null ? _a9 : document;
}
function isActiveElement3(element) {
  const doc = getOwnerDocument4(element);
  return doc.activeElement === element;
}
function useMenu(props = {}) {
  const {
    id: id3,
    closeOnSelect = true,
    closeOnBlur = true,
    initialFocusRef,
    autoSelect = true,
    isLazy,
    isOpen: isOpenProp,
    defaultIsOpen,
    onClose: onCloseProp,
    onOpen: onOpenProp,
    placement = "bottom-start",
    lazyBehavior = "unmount",
    direction: direction2,
    computePositionOnMount = false,
    ...popperProps
  } = props;
  const menuRef = (0, import_react156.useRef)(null);
  const buttonRef = (0, import_react156.useRef)(null);
  const descendants = useMenuDescendants();
  const focusMenu = (0, import_react156.useCallback)(() => {
    requestAnimationFrame(() => {
      var _a9;
      (_a9 = menuRef.current) == null ? void 0 : _a9.focus({ preventScroll: false });
    });
  }, []);
  const focusFirstItem = (0, import_react156.useCallback)(() => {
    const id22 = setTimeout(() => {
      var _a9;
      if (initialFocusRef) {
        (_a9 = initialFocusRef.current) == null ? void 0 : _a9.focus();
      } else {
        const first = descendants.firstEnabled();
        if (first)
          setFocusedIndex(first.index);
      }
    });
    timeoutIds.current.add(id22);
  }, [descendants, initialFocusRef]);
  const focusLastItem = (0, import_react156.useCallback)(() => {
    const id22 = setTimeout(() => {
      const last2 = descendants.lastEnabled();
      if (last2)
        setFocusedIndex(last2.index);
    });
    timeoutIds.current.add(id22);
  }, [descendants]);
  const onOpenInternal = (0, import_react156.useCallback)(() => {
    onOpenProp == null ? void 0 : onOpenProp();
    if (autoSelect) {
      focusFirstItem();
    } else {
      focusMenu();
    }
  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);
  const { isOpen, onOpen, onClose, onToggle } = useDisclosure2({
    isOpen: isOpenProp,
    defaultIsOpen,
    onClose: onCloseProp,
    onOpen: onOpenInternal
  });
  useOutsideClick2({
    enabled: isOpen && closeOnBlur,
    ref: menuRef,
    handler: (event) => {
      var _a9;
      if (!((_a9 = buttonRef.current) == null ? void 0 : _a9.contains(event.target))) {
        onClose();
      }
    }
  });
  const popper2 = usePopper({
    ...popperProps,
    enabled: isOpen || computePositionOnMount,
    placement,
    direction: direction2
  });
  const [focusedIndex, setFocusedIndex] = (0, import_react156.useState)(-1);
  useUpdateEffect(() => {
    if (!isOpen) {
      setFocusedIndex(-1);
    }
  }, [isOpen]);
  useFocusOnHide2(menuRef, {
    focusRef: buttonRef,
    visible: isOpen,
    shouldFocus: true
  });
  const animationState = useAnimationState2({ isOpen, ref: menuRef });
  const [buttonId, menuId] = useIds2(id3, `menu-button`, `menu-list`);
  const openAndFocusMenu = (0, import_react156.useCallback)(() => {
    onOpen();
    focusMenu();
  }, [onOpen, focusMenu]);
  const timeoutIds = (0, import_react156.useRef)(/* @__PURE__ */ new Set([]));
  (0, import_react156.useEffect)(() => {
    const ids2 = timeoutIds.current;
    return () => {
      ids2.forEach((id22) => clearTimeout(id22));
      ids2.clear();
    };
  }, []);
  const openAndFocusFirstItem = (0, import_react156.useCallback)(() => {
    onOpen();
    focusFirstItem();
  }, [focusFirstItem, onOpen]);
  const openAndFocusLastItem = (0, import_react156.useCallback)(() => {
    onOpen();
    focusLastItem();
  }, [onOpen, focusLastItem]);
  const refocus = (0, import_react156.useCallback)(() => {
    var _a9, _b5;
    const doc = getOwnerDocument4(menuRef.current);
    const hasFocusWithin3 = (_a9 = menuRef.current) == null ? void 0 : _a9.contains(doc.activeElement);
    const shouldRefocus = isOpen && !hasFocusWithin3;
    if (!shouldRefocus)
      return;
    const node3 = (_b5 = descendants.item(focusedIndex)) == null ? void 0 : _b5.node;
    node3 == null ? void 0 : node3.focus({ preventScroll: true });
  }, [isOpen, focusedIndex, descendants]);
  const rafId = (0, import_react156.useRef)(null);
  return {
    openAndFocusMenu,
    openAndFocusFirstItem,
    openAndFocusLastItem,
    onTransitionEnd: refocus,
    unstable__animationState: animationState,
    descendants,
    popper: popper2,
    buttonId,
    menuId,
    forceUpdate: popper2.forceUpdate,
    orientation: "vertical",
    isOpen,
    onToggle,
    onOpen,
    onClose,
    menuRef,
    buttonRef,
    focusedIndex,
    closeOnSelect,
    closeOnBlur,
    autoSelect,
    setFocusedIndex,
    isLazy,
    lazyBehavior,
    initialFocusRef,
    rafId
  };
}
function useMenuButton(props = {}, externalRef = null) {
  const menu = useMenuContext();
  const { onToggle, popper: popper2, openAndFocusFirstItem, openAndFocusLastItem } = menu;
  const onKeyDown = (0, import_react156.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        Enter: openAndFocusFirstItem,
        ArrowDown: openAndFocusFirstItem,
        ArrowUp: openAndFocusLastItem
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        event.stopPropagation();
        action(event);
      }
    },
    [openAndFocusFirstItem, openAndFocusLastItem]
  );
  return {
    ...props,
    ref: mergeRefs2(menu.buttonRef, externalRef, popper2.referenceRef),
    id: menu.buttonId,
    "data-active": dataAttr(menu.isOpen),
    "aria-expanded": menu.isOpen,
    "aria-haspopup": "menu",
    "aria-controls": menu.menuId,
    onClick: callAllHandlers(props.onClick, onToggle),
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  };
}
function isTargetMenuItem(target) {
  var _a9;
  return isHTMLElement4(target) && !!((_a9 = target == null ? void 0 : target.getAttribute("role")) == null ? void 0 : _a9.startsWith("menuitem"));
}
function useMenuList(props = {}, ref = null) {
  const menu = useMenuContext();
  if (!menu) {
    throw new Error(
      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`
    );
  }
  const {
    focusedIndex,
    setFocusedIndex,
    menuRef,
    isOpen,
    onClose,
    menuId,
    isLazy,
    lazyBehavior,
    unstable__animationState: animated
  } = menu;
  const descendants = useMenuDescendantsContext();
  const createTypeaheadHandler = useShortcut2({
    preventDefault: (event) => event.key !== " " && isTargetMenuItem(event.target)
  });
  const onKeyDown = (0, import_react156.useCallback)(
    (event) => {
      if (!event.currentTarget.contains(event.target))
        return;
      const eventKey = event.key;
      const keyMap = {
        Tab: (event2) => event2.preventDefault(),
        Escape: onClose,
        ArrowDown: () => {
          const next2 = descendants.nextEnabled(focusedIndex);
          if (next2)
            setFocusedIndex(next2.index);
        },
        ArrowUp: () => {
          const prev2 = descendants.prevEnabled(focusedIndex);
          if (prev2)
            setFocusedIndex(prev2.index);
        }
      };
      const fn2 = keyMap[eventKey];
      if (fn2) {
        event.preventDefault();
        fn2(event);
        return;
      }
      const onTypeahead = createTypeaheadHandler((character2) => {
        const nextItem = getNextItemFromSearch2(
          descendants.values(),
          character2,
          (item) => {
            var _a9, _b5;
            return (_b5 = (_a9 = item == null ? void 0 : item.node) == null ? void 0 : _a9.textContent) != null ? _b5 : "";
          },
          descendants.item(focusedIndex)
        );
        if (nextItem) {
          const index5 = descendants.indexOf(nextItem.node);
          setFocusedIndex(index5);
        }
      });
      if (isTargetMenuItem(event.target)) {
        onTypeahead(event);
      }
    },
    [
      descendants,
      focusedIndex,
      createTypeaheadHandler,
      onClose,
      setFocusedIndex
    ]
  );
  const hasBeenOpened = (0, import_react156.useRef)(false);
  if (isOpen) {
    hasBeenOpened.current = true;
  }
  const shouldRenderChildren = lazyDisclosure({
    wasSelected: hasBeenOpened.current,
    enabled: isLazy,
    mode: lazyBehavior,
    isSelected: animated.present
  });
  return {
    ...props,
    ref: mergeRefs2(menuRef, ref),
    children: shouldRenderChildren ? props.children : null,
    tabIndex: -1,
    role: "menu",
    id: menuId,
    style: {
      ...props.style,
      transformOrigin: "var(--popper-transform-origin)"
    },
    "aria-orientation": "vertical",
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  };
}
function useMenuPositioner(props = {}) {
  const { popper: popper2, isOpen } = useMenuContext();
  return popper2.getPopperProps({
    ...props,
    style: {
      visibility: isOpen ? "visible" : "hidden",
      ...props.style
    }
  });
}
function useMenuItem(props = {}, externalRef = null) {
  const {
    onMouseEnter: onMouseEnterProp,
    onMouseMove: onMouseMoveProp,
    onMouseLeave: onMouseLeaveProp,
    onClick: onClickProp,
    onFocus: onFocusProp,
    isDisabled: isDisabled3,
    isFocusable: isFocusable4,
    closeOnSelect,
    type: typeProp,
    ...htmlProps
  } = props;
  const menu = useMenuContext();
  const {
    setFocusedIndex,
    focusedIndex,
    closeOnSelect: menuCloseOnSelect,
    onClose,
    menuRef,
    isOpen,
    menuId,
    rafId
  } = menu;
  const ref = (0, import_react156.useRef)(null);
  const id3 = `${menuId}-menuitem-${(0, import_react156.useId)()}`;
  const { index: index5, register } = useMenuDescendant({
    disabled: isDisabled3 && !isFocusable4
  });
  const onMouseEnter = (0, import_react156.useCallback)(
    (event) => {
      onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
      if (isDisabled3)
        return;
      setFocusedIndex(index5);
    },
    [setFocusedIndex, index5, isDisabled3, onMouseEnterProp]
  );
  const onMouseMove = (0, import_react156.useCallback)(
    (event) => {
      onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
      if (ref.current && !isActiveElement3(ref.current)) {
        onMouseEnter(event);
      }
    },
    [onMouseEnter, onMouseMoveProp]
  );
  const onMouseLeave = (0, import_react156.useCallback)(
    (event) => {
      onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
      if (isDisabled3)
        return;
      setFocusedIndex(-1);
    },
    [setFocusedIndex, isDisabled3, onMouseLeaveProp]
  );
  const onClick = (0, import_react156.useCallback)(
    (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (!isTargetMenuItem(event.currentTarget))
        return;
      if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {
        onClose();
      }
    },
    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]
  );
  const onFocus4 = (0, import_react156.useCallback)(
    (event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      setFocusedIndex(index5);
    },
    [setFocusedIndex, onFocusProp, index5]
  );
  const isFocused = index5 === focusedIndex;
  const trulyDisabled = isDisabled3 && !isFocusable4;
  useUpdateEffect(() => {
    if (!isOpen)
      return;
    if (isFocused && !trulyDisabled && ref.current) {
      if (rafId.current) {
        cancelAnimationFrame(rafId.current);
      }
      rafId.current = requestAnimationFrame(() => {
        var _a9;
        (_a9 = ref.current) == null ? void 0 : _a9.focus({ preventScroll: true });
        rafId.current = null;
      });
    } else if (menuRef.current && !isActiveElement3(menuRef.current)) {
      menuRef.current.focus({ preventScroll: true });
    }
    return () => {
      if (rafId.current) {
        cancelAnimationFrame(rafId.current);
      }
    };
  }, [isFocused, trulyDisabled, menuRef, isOpen]);
  const clickableProps = useClickable({
    onClick,
    onFocus: onFocus4,
    onMouseEnter,
    onMouseMove,
    onMouseLeave,
    ref: mergeRefs2(register, ref, externalRef),
    isDisabled: isDisabled3,
    isFocusable: isFocusable4
  });
  return {
    ...htmlProps,
    ...clickableProps,
    type: typeProp != null ? typeProp : clickableProps.type,
    id: id3,
    role: "menuitem",
    tabIndex: isFocused ? 0 : -1
  };
}
function useMenuOption(props = {}, ref = null) {
  const { type = "radio", isChecked, ...rest } = props;
  const ownProps = useMenuItem(rest, ref);
  return {
    ...ownProps,
    role: `menuitem${type}`,
    "aria-checked": isChecked
  };
}
function useMenuOptionGroup(props = {}) {
  const {
    children,
    type = "radio",
    value: valueProp,
    defaultValue: defaultValue2,
    onChange: onChangeProp,
    ...htmlProps
  } = props;
  const isRadio = type === "radio";
  const fallback = isRadio ? "" : [];
  const [value, setValue] = useControllableState({
    defaultValue: defaultValue2 != null ? defaultValue2 : fallback,
    value: valueProp,
    onChange: onChangeProp
  });
  const onChange2 = (0, import_react156.useCallback)(
    (selectedValue) => {
      if (type === "radio" && typeof value === "string") {
        setValue(selectedValue);
      }
      if (type === "checkbox" && Array.isArray(value)) {
        const nextValue = value.includes(selectedValue) ? value.filter((item) => item !== selectedValue) : value.concat(selectedValue);
        setValue(nextValue);
      }
    },
    [value, setValue, type]
  );
  const validChildren = getValidChildren2(children);
  const clones = validChildren.map((child) => {
    if (child.type.id !== "MenuItemOption")
      return child;
    const onClick = (event) => {
      var _a9, _b5;
      onChange2(child.props.value);
      (_b5 = (_a9 = child.props).onClick) == null ? void 0 : _b5.call(_a9, event);
    };
    const isChecked = type === "radio" ? child.props.value === value : value.includes(child.props.value);
    return (0, import_react156.cloneElement)(child, {
      type,
      onClick,
      isChecked
    });
  });
  return {
    ...htmlProps,
    children: clones
  };
}
function isHTMLElement4(el) {
  var _a9;
  if (!isElement5(el))
    return false;
  const win = (_a9 = el.ownerDocument.defaultView) != null ? _a9 : window;
  return el instanceof win.HTMLElement;
}
function isElement5(el) {
  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}

// node_modules/@chakra-ui/menu/dist/chunk-UZJ3TPNQ.mjs
var import_react157 = __toESM(require_react(), 1);
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
var [MenuStylesProvider, useMenuStyles] = createContext2({
  name: `MenuStylesContext`,
  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Menu />" `
});
var Menu = (props) => {
  const { children } = props;
  const styles2 = useMultiStyleConfig("Menu", props);
  const ownProps = omitThemingProps(props);
  const { direction: direction2 } = useTheme2();
  const { descendants, ...ctx } = useMenu({ ...ownProps, direction: direction2 });
  const context2 = (0, import_react157.useMemo)(() => ctx, [ctx]);
  const { isOpen, onClose, forceUpdate } = context2;
  return (0, import_jsx_runtime98.jsx)(MenuDescendantsProvider, { value: descendants, children: (0, import_jsx_runtime98.jsx)(MenuProvider, { value: context2, children: (0, import_jsx_runtime98.jsx)(MenuStylesProvider, { value: styles2, children: runIfFn(children, { isOpen, onClose, forceUpdate }) }) }) });
};
Menu.displayName = "Menu";

// node_modules/@chakra-ui/menu/dist/chunk-4CNGLKYX.mjs
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
var MenuCommand = forwardRef3(
  (props, ref) => {
    const styles2 = useMenuStyles();
    return (0, import_jsx_runtime99.jsx)(
      chakra.span,
      {
        ref,
        ...props,
        __css: styles2.command,
        className: "chakra-menu__command"
      }
    );
  }
);
MenuCommand.displayName = "MenuCommand";

// node_modules/@chakra-ui/menu/dist/chunk-M565QO7N.mjs
var import_react158 = __toESM(require_react(), 1);
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
var StyledMenuItem = forwardRef3(
  (props, ref) => {
    const { type, ...rest } = props;
    const styles2 = useMenuStyles();
    const btnType = rest.as || type ? type != null ? type : void 0 : "button";
    const buttonStyles = (0, import_react158.useMemo)(
      () => ({
        textDecoration: "none",
        color: "inherit",
        userSelect: "none",
        display: "flex",
        width: "100%",
        alignItems: "center",
        textAlign: "start",
        flex: "0 0 auto",
        outline: 0,
        ...styles2.item
      }),
      [styles2.item]
    );
    return (0, import_jsx_runtime100.jsx)(chakra.button, { ref, type: btnType, ...rest, __css: buttonStyles });
  }
);

// node_modules/@chakra-ui/menu/dist/chunk-HB6KBUMZ.mjs
var import_react159 = __toESM(require_react(), 1);
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
var MenuIcon = (props) => {
  const { className, children, ...rest } = props;
  const styles2 = useMenuStyles();
  const child = import_react159.Children.only(children);
  const clone = (0, import_react159.isValidElement)(child) ? (0, import_react159.cloneElement)(child, {
    focusable: "false",
    "aria-hidden": true,
    className: cx("chakra-menu__icon", child.props.className)
  }) : null;
  const _className = cx("chakra-menu__icon-wrapper", className);
  return (0, import_jsx_runtime101.jsx)(chakra.span, { className: _className, ...rest, __css: styles2.icon, children: clone });
};
MenuIcon.displayName = "MenuIcon";

// node_modules/@chakra-ui/menu/dist/chunk-5TWLKMYI.mjs
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var MenuItem = forwardRef3((props, ref) => {
  const {
    icon,
    iconSpacing: iconSpacing2 = "0.75rem",
    command,
    commandSpacing = "0.75rem",
    children,
    ...rest
  } = props;
  const menuitemProps = useMenuItem(rest, ref);
  const shouldWrap = icon || command;
  const _children = shouldWrap ? (0, import_jsx_runtime102.jsx)("span", { style: { pointerEvents: "none", flex: 1 }, children }) : children;
  return (0, import_jsx_runtime102.jsxs)(
    StyledMenuItem,
    {
      ...menuitemProps,
      className: cx("chakra-menu__menuitem", menuitemProps.className),
      children: [
        icon && (0, import_jsx_runtime102.jsx)(MenuIcon, { fontSize: "0.8em", marginEnd: iconSpacing2, children: icon }),
        _children,
        command && (0, import_jsx_runtime102.jsx)(MenuCommand, { marginStart: commandSpacing, children: command })
      ]
    }
  );
});
MenuItem.displayName = "MenuItem";

// node_modules/@chakra-ui/menu/dist/chunk-6MF6NSK4.mjs
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
var motionVariants = {
  enter: {
    visibility: "visible",
    opacity: 1,
    scale: 1,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    transitionEnd: {
      visibility: "hidden"
    },
    opacity: 0,
    scale: 0.8,
    transition: {
      duration: 0.1,
      easings: "easeOut"
    }
  }
};
var MenuTransition = chakra(motion.div);
var MenuList = forwardRef3(function MenuList2(props, ref) {
  var _a9, _b5;
  const { rootProps, motionProps, ...rest } = props;
  const {
    isOpen,
    onTransitionEnd,
    unstable__animationState: animated
  } = useMenuContext();
  const listProps = useMenuList(rest, ref);
  const positionerProps = useMenuPositioner(rootProps);
  const styles2 = useMenuStyles();
  return (0, import_jsx_runtime103.jsx)(
    chakra.div,
    {
      ...positionerProps,
      __css: { zIndex: (_b5 = props.zIndex) != null ? _b5 : (_a9 = styles2.list) == null ? void 0 : _a9.zIndex },
      children: (0, import_jsx_runtime103.jsx)(
        MenuTransition,
        {
          variants: motionVariants,
          initial: false,
          animate: isOpen ? "enter" : "exit",
          __css: { outline: 0, ...styles2.list },
          ...motionProps,
          className: cx("chakra-menu__menu-list", listProps.className),
          ...listProps,
          onUpdate: onTransitionEnd,
          onAnimationComplete: callAll(
            animated.onComplete,
            listProps.onAnimationComplete
          )
        }
      )
    }
  );
});
MenuList.displayName = "MenuList";

// node_modules/@chakra-ui/menu/dist/chunk-PTXXWAJU.mjs
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
var MenuGroup = forwardRef3((props, ref) => {
  const { title, children, className, ...rest } = props;
  const _className = cx("chakra-menu__group__title", className);
  const styles2 = useMenuStyles();
  return (0, import_jsx_runtime104.jsxs)("div", { ref, className: "chakra-menu__group", role: "group", children: [
    title && (0, import_jsx_runtime104.jsx)(chakra.p, { className: _className, ...rest, __css: styles2.groupTitle, children: title }),
    children
  ] });
});
MenuGroup.displayName = "MenuGroup";

// node_modules/@chakra-ui/menu/dist/chunk-IOKLOFVX.mjs
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
var MenuOptionGroup = (props) => {
  const { className, title, ...rest } = props;
  const ownProps = useMenuOptionGroup(rest);
  return (0, import_jsx_runtime105.jsx)(
    MenuGroup,
    {
      title,
      className: cx("chakra-menu__option-group", className),
      ...ownProps
    }
  );
};
MenuOptionGroup.displayName = "MenuOptionGroup";

// node_modules/@chakra-ui/menu/dist/chunk-Z3VR2BFQ.mjs
var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
var StyledMenuButton = forwardRef3((props, ref) => {
  const styles2 = useMenuStyles();
  return (0, import_jsx_runtime106.jsx)(
    chakra.button,
    {
      ref,
      ...props,
      __css: {
        display: "inline-flex",
        appearance: "none",
        alignItems: "center",
        outline: 0,
        ...styles2.button
      }
    }
  );
});
var MenuButton = forwardRef3(
  (props, ref) => {
    const { children, as: As, ...rest } = props;
    const buttonProps = useMenuButton(rest, ref);
    const Element2 = As || StyledMenuButton;
    return (0, import_jsx_runtime106.jsx)(
      Element2,
      {
        ...buttonProps,
        className: cx("chakra-menu__menu-button", props.className),
        children: (0, import_jsx_runtime106.jsx)(
          chakra.span,
          {
            __css: { pointerEvents: "none", flex: "1 1 auto", minW: 0 },
            children: props.children
          }
        )
      }
    );
  }
);
MenuButton.displayName = "MenuButton";

// node_modules/@chakra-ui/menu/dist/chunk-H43S3DLB.mjs
var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
var MenuDivider = (props) => {
  const { className, ...rest } = props;
  const styles2 = useMenuStyles();
  return (0, import_jsx_runtime107.jsx)(
    chakra.hr,
    {
      "aria-orientation": "horizontal",
      className: cx("chakra-menu__divider", className),
      ...rest,
      __css: styles2.divider
    }
  );
};
MenuDivider.displayName = "MenuDivider";

// node_modules/@chakra-ui/menu/dist/chunk-B3RAGXFV.mjs
var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
var CheckIcon3 = (props) => (0, import_jsx_runtime108.jsx)("svg", { viewBox: "0 0 14 14", width: "1em", height: "1em", ...props, children: (0, import_jsx_runtime108.jsx)(
  "polygon",
  {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }
) });
var MenuItemOption = forwardRef3(
  (props, ref) => {
    const { icon, iconSpacing: iconSpacing2 = "0.75rem", ...rest } = props;
    const optionProps = useMenuOption(rest, ref);
    return (0, import_jsx_runtime108.jsxs)(
      StyledMenuItem,
      {
        ...optionProps,
        className: cx("chakra-menu__menuitem-option", rest.className),
        children: [
          icon !== null && (0, import_jsx_runtime108.jsx)(
            MenuIcon,
            {
              fontSize: "0.8em",
              marginEnd: iconSpacing2,
              opacity: props.isChecked ? 1 : 0,
              children: icon || (0, import_jsx_runtime108.jsx)(CheckIcon3, {})
            }
          ),
          (0, import_jsx_runtime108.jsx)("span", { style: { flex: 1 }, children: optionProps.children })
        ]
      }
    );
  }
);
MenuItemOption.id = "MenuItemOption";
MenuItemOption.displayName = "MenuItemOption";

// node_modules/@chakra-ui/modal/dist/chunk-7NUJBCEL.mjs
var import_react160 = __toESM(require_react(), 1);
var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
var transitions = {
  slideInBottom: {
    ...slideFadeConfig,
    custom: { offsetY: 16, reverse: true }
  },
  slideInRight: {
    ...slideFadeConfig,
    custom: { offsetX: 16, reverse: true }
  },
  slideInTop: {
    ...slideFadeConfig,
    custom: { offsetY: -16, reverse: true }
  },
  slideInLeft: {
    ...slideFadeConfig,
    custom: { offsetX: -16, reverse: true }
  },
  scale: {
    ...scaleFadeConfig,
    custom: { initialScale: 0.95, reverse: true }
  },
  none: {}
};
var MotionSection = chakra(motion.section);
var getMotionProps = (preset) => {
  return transitions[preset || "none"];
};
var ModalTransition = (0, import_react160.forwardRef)(
  (props, ref) => {
    const { preset, motionProps = getMotionProps(preset), ...rest } = props;
    return (0, import_jsx_runtime109.jsx)(MotionSection, { ref, ...motionProps, ...rest });
  }
);
ModalTransition.displayName = "ModalTransition";

// node_modules/@chakra-ui/modal/dist/chunk-5WQ4PXEV.mjs
var __defProp2 = Object.defineProperty;
var __defNormalProp2 = (obj, key2, value) => key2 in obj ? __defProp2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __publicField3 = (obj, key2, value) => {
  __defNormalProp2(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);
  return value;
};

// node_modules/@chakra-ui/modal/dist/chunk-CYRBRIA2.mjs
var import_react161 = __toESM(require_react(), 1);
var ModalManager = class {
  constructor() {
    __publicField3(this, "modals");
    this.modals = /* @__PURE__ */ new Map();
  }
  add(modal) {
    this.modals.set(modal, this.modals.size + 1);
    return this.modals.size;
  }
  remove(modal) {
    this.modals.delete(modal);
  }
  isTopModal(modal) {
    if (!modal)
      return false;
    return this.modals.get(modal) === this.modals.size;
  }
};
var modalManager = new ModalManager();
function useModalManager(ref, isOpen) {
  const [index5, setIndex] = (0, import_react161.useState)(0);
  (0, import_react161.useEffect)(() => {
    const node3 = ref.current;
    if (!node3)
      return;
    if (isOpen) {
      const index22 = modalManager.add(node3);
      setIndex(index22);
    }
    return () => {
      modalManager.remove(node3);
      setIndex(0);
    };
  }, [isOpen, ref]);
  return index5;
}

// node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function(node3) {
  return node3 && (node3.host || unwrapHost(node3.parentNode));
};
var correctTargets = function(parent, targets) {
  return targets.map(function(target) {
    if (parent.contains(target)) {
      return target;
    }
    var correctedTarget = unwrapHost(target);
    if (correctedTarget && parent.contains(correctedTarget)) {
      return correctedTarget;
    }
    console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
    return null;
  }).filter(function(x) {
    return Boolean(x);
  });
};
var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
  var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var elementsToStop = new Set(targets);
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node3) {
      if (elementsToKeep.has(node3)) {
        deep(node3);
      } else {
        var attr = node3.getAttribute(controlAttribute);
        var alreadyHidden = attr !== null && attr !== "false";
        var counterValue = (counterMap.get(node3) || 0) + 1;
        var markerValue = (markerCounter.get(node3) || 0) + 1;
        counterMap.set(node3, counterValue);
        markerCounter.set(node3, markerValue);
        hiddenNodes.push(node3);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledNodes.set(node3, true);
        }
        if (markerValue === 1) {
          node3.setAttribute(markerName, "true");
        }
        if (!alreadyHidden) {
          node3.setAttribute(controlAttribute, "true");
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node3) {
      var counterValue = counterMap.get(node3) - 1;
      var markerValue = markerCounter.get(node3) - 1;
      counterMap.set(node3, counterValue);
      markerCounter.set(node3, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node3)) {
          node3.removeAttribute(controlAttribute);
        }
        uncontrolledNodes.delete(node3);
      }
      if (!markerValue) {
        node3.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  var activeParentNode = parentNode || getDefaultParent(originalTarget);
  if (!activeParentNode) {
    return function() {
      return null;
    };
  }
  targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
  return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
};

// node_modules/@chakra-ui/modal/dist/chunk-TJ2Q5ITW.mjs
var import_react162 = __toESM(require_react(), 1);
function useModal(props) {
  const {
    isOpen,
    onClose,
    id: id3,
    closeOnOverlayClick = true,
    closeOnEsc = true,
    useInert = true,
    onOverlayClick: onOverlayClickProp,
    onEsc
  } = props;
  const dialogRef = (0, import_react162.useRef)(null);
  const overlayRef = (0, import_react162.useRef)(null);
  const [dialogId, headerId, bodyId] = useIds3(
    id3,
    `chakra-modal`,
    `chakra-modal--header`,
    `chakra-modal--body`
  );
  useAriaHidden(dialogRef, isOpen && useInert);
  const index5 = useModalManager(dialogRef, isOpen);
  const mouseDownTarget = (0, import_react162.useRef)(null);
  const onMouseDown = (0, import_react162.useCallback)((event) => {
    mouseDownTarget.current = event.target;
  }, []);
  const onKeyDown = (0, import_react162.useCallback)(
    (event) => {
      if (event.key === "Escape") {
        event.stopPropagation();
        if (closeOnEsc) {
          onClose == null ? void 0 : onClose();
        }
        onEsc == null ? void 0 : onEsc();
      }
    },
    [closeOnEsc, onClose, onEsc]
  );
  const [headerMounted, setHeaderMounted] = (0, import_react162.useState)(false);
  const [bodyMounted, setBodyMounted] = (0, import_react162.useState)(false);
  const getDialogProps = (0, import_react162.useCallback)(
    (props2 = {}, ref = null) => ({
      role: "dialog",
      ...props2,
      ref: mergeRefs2(ref, dialogRef),
      id: dialogId,
      tabIndex: -1,
      "aria-modal": true,
      "aria-labelledby": headerMounted ? headerId : void 0,
      "aria-describedby": bodyMounted ? bodyId : void 0,
      onClick: callAllHandlers(
        props2.onClick,
        (event) => event.stopPropagation()
      )
    }),
    [bodyId, bodyMounted, dialogId, headerId, headerMounted]
  );
  const onOverlayClick = (0, import_react162.useCallback)(
    (event) => {
      event.stopPropagation();
      if (mouseDownTarget.current !== event.target)
        return;
      if (!modalManager.isTopModal(dialogRef.current))
        return;
      if (closeOnOverlayClick) {
        onClose == null ? void 0 : onClose();
      }
      onOverlayClickProp == null ? void 0 : onOverlayClickProp();
    },
    [onClose, closeOnOverlayClick, onOverlayClickProp]
  );
  const getDialogContainerProps = (0, import_react162.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs2(ref, overlayRef),
      onClick: callAllHandlers(props2.onClick, onOverlayClick),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)
    }),
    [onKeyDown, onMouseDown, onOverlayClick]
  );
  return {
    isOpen,
    onClose,
    headerId,
    bodyId,
    setBodyMounted,
    setHeaderMounted,
    dialogRef,
    overlayRef,
    getDialogProps,
    getDialogContainerProps,
    index: index5
  };
}
function useAriaHidden(ref, shouldHide) {
  const currentElement = ref.current;
  (0, import_react162.useEffect)(() => {
    if (!ref.current || !shouldHide)
      return void 0;
    return hideOthers(ref.current);
  }, [shouldHide, ref, currentElement]);
}
function useIds3(idProp, ...prefixes) {
  const reactId = (0, import_react162.useId)();
  const id3 = idProp || reactId;
  return (0, import_react162.useMemo)(() => {
    return prefixes.map((prefix4) => `${prefix4}-${id3}`);
  }, [id3, prefixes]);
}

// node_modules/@chakra-ui/modal/dist/chunk-MSA2NPQT.mjs
var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
var [ModalStylesProvider, useModalStyles] = createContext2({
  name: `ModalStylesContext`,
  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Modal />" `
});
var [ModalContextProvider, useModalContext] = createContext2({
  strict: true,
  name: "ModalContext",
  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
});
var Modal = (props) => {
  const modalProps = {
    scrollBehavior: "outside",
    autoFocus: true,
    trapFocus: true,
    returnFocusOnClose: true,
    blockScrollOnMount: true,
    allowPinchZoom: false,
    motionPreset: "scale",
    lockFocusAcrossFrames: true,
    ...props
  };
  const {
    portalProps,
    children,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames,
    onCloseComplete
  } = modalProps;
  const styles2 = useMultiStyleConfig("Modal", modalProps);
  const modal = useModal(modalProps);
  const context2 = {
    ...modal,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames
  };
  return (0, import_jsx_runtime110.jsx)(ModalContextProvider, { value: context2, children: (0, import_jsx_runtime110.jsx)(ModalStylesProvider, { value: styles2, children: (0, import_jsx_runtime110.jsx)(AnimatePresence, { onExitComplete: onCloseComplete, children: context2.isOpen && (0, import_jsx_runtime110.jsx)(Portal, { ...portalProps, children }) }) }) });
};
Modal.displayName = "Modal";

// node_modules/@chakra-ui/modal/dist/chunk-NABYTFTG.mjs
var import_react163 = __toESM(require_react(), 1);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var React33 = __toESM(require_react());

// node_modules/react-remove-scroll/dist/es2015/UI.js
var React29 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React29.forwardRef(function(props, parentRef) {
  var ref = React29.useRef(null);
  var _a9 = React29.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a9[0], setCallbacks = _a9[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar2 = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b5 = props.as, Container3 = _b5 === void 0 ? "div" : _b5, gapMode = props.gapMode, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
  var SideCar2 = sideCar2;
  var containerRef = useMergeRefs2([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return React29.createElement(
    React29.Fragment,
    null,
    enabled && React29.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
    forwardProps ? React29.cloneElement(React29.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React29.createElement(Container3, __assign({}, containerProps, { className, ref: containerRef }), children)
  );
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React32 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React31 = __toESM(require_react());

// node_modules/react-style-singleton/dist/es2015/hook.js
var React30 = __toESM(require_react());

// node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css7) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css7;
  } else {
    tag.appendChild(document.createTextNode(css7));
  }
}
function insertStyleTag(tag) {
  var head2 = document.head || document.getElementsByTagName("head")[0];
  head2.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter3 = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter3 == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter3++;
    },
    remove: function() {
      counter3--;
      if (!counter3 && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles2, isDynamic) {
    React30.useEffect(function() {
      sheet.add(styles2);
      return function() {
        sheet.remove();
      };
    }, [styles2 && isDynamic]);
  };
};

// node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle3 = styleHookSingleton();
  var Sheet = function(_a9) {
    var styles2 = _a9.styles, dynamic = _a9.dynamic;
    useStyle3(styles2, dynamic);
    return null;
  };
  return Sheet;
};

// node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse3 = function(x) {
  return parseInt(x || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left2 = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top2 = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right2 = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse3(left2), parse3(top2), parse3(right2)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var lockAttribute = "data-scroll-locked";
var getStyles = function(_a9, allowRelative, gapMode, important) {
  var left2 = _a9.left, top2 = _a9.top, right2 = _a9.right, gap = _a9.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left2, "px;\n    padding-top: ").concat(top2, "px;\n    padding-right: ").concat(right2, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var RemoveScrollBar = function(props) {
  var noRelative = props.noRelative, noImportant = props.noImportant, _a9 = props.gapMode, gapMode = _a9 === void 0 ? "margin" : _a9;
  var gap = React31.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  React31.useEffect(function() {
    document.body.setAttribute(lockAttribute, "");
    return function() {
      document.body.removeAttribute(lockAttribute);
    };
  }, []);
  return React31.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};

// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options2 = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options2, options2);
    window.removeEventListener("test", options2, options2);
  } catch (err) {
    passiveSupported = false;
  }
}
var options2;
var nonPassive = passiveSupported ? { passive: false } : false;

// node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var alwaysContainsScroll = function(node3) {
  return node3.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node3, overflow) {
  var styles2 = window.getComputedStyle(node3);
  return (
    // not-not-scrollable
    styles2[overflow] !== "hidden" && // contains scroll inside self
    !(styles2.overflowY === styles2.overflowX && !alwaysContainsScroll(node3) && styles2[overflow] === "visible")
  );
};
var elementCouldBeVScrolled = function(node3) {
  return elementCanBeScrolled(node3, "overflowY");
};
var elementCouldBeHScrolled = function(node3) {
  return elementCanBeScrolled(node3, "overflowX");
};
var locationCouldBeScrolled = function(axis, node3) {
  var ownerDocument = node3.ownerDocument;
  var current = node3;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable2 = elementCouldBeScrolled(axis, current);
    if (isScrollable2) {
      var _a9 = getScrollVariables(axis, current), s = _a9[1], d = _a9[2];
      if (s > d) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== ownerDocument.body);
  return false;
};
var getVScrollVariables = function(_a9) {
  var scrollTop = _a9.scrollTop, scrollHeight = _a9.scrollHeight, clientHeight = _a9.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a9) {
  var scrollLeft = _a9.scrollLeft, scrollWidth = _a9.scrollWidth, clientWidth = _a9.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node3) {
  return axis === "v" ? elementCouldBeVScrolled(node3) : elementCouldBeHScrolled(node3);
};
var getScrollVariables = function(axis, node3) {
  return axis === "v" ? getVScrollVariables(node3) : getHScrollVariables(node3);
};
var getDirectionFactor = function(axis, direction2) {
  return axis === "h" && direction2 === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta2 = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta2 > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a9 = getScrollVariables(axis, target), position3 = _a9[0], scroll_1 = _a9[1], capacity = _a9[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position3;
    if (position3 || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position3;
      }
    }
    if (target instanceof ShadowRoot) {
      target = target.host;
    } else {
      target = target.parentNode;
    }
  } while (
    // portaled content
    !targetInLock && target !== document.body || // self content
    targetInLock && (endTarget.contains(target) || endTarget === target)
  );
  if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta2 > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta2 > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef3 = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
  return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id3) {
  return "\n  .block-interactivity-".concat(id3, " {pointer-events: none;}\n  .allow-interactivity-").concat(id3, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React32.useRef([]);
  var touchStartRef = React32.useRef([0, 0]);
  var activeAxis = React32.useRef();
  var id3 = React32.useState(idCounter++)[0];
  var Style2 = React32.useState(styleSingleton)[0];
  var lastProps = React32.useRef(props);
  React32.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React32.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id3));
      var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef3), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id3));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id3));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id3));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React32.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React32.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta2 = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e) {
      return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta2);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef3).filter(Boolean).filter(function(node3) {
        return node3.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = React32.useCallback(function(name, delta2, target, should) {
    var event = { name, delta: delta2, target, should, shadowParent: getOutermostShadowParent(target) };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
        return e !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React32.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React32.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React32.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React32.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React32.createElement(
    React32.Fragment,
    null,
    inert ? React32.createElement(Style2, { styles: generateStyle(id3) }) : null,
    removeScrollBar ? React32.createElement(RemoveScrollBar, { gapMode: props.gapMode }) : null
  );
}
function getOutermostShadowParent(node3) {
  var shadowParent = null;
  while (node3 !== null) {
    if (node3 instanceof ShadowRoot) {
      shadowParent = node3.host;
      node3 = node3.host;
    }
    node3 = node3.parentNode;
  }
  return shadowParent;
}

// node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React33.forwardRef(function(props, ref) {
  return React33.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default2 = ReactRemoveScroll;

// node_modules/@chakra-ui/modal/dist/chunk-NABYTFTG.mjs
var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
function ModalFocusScope(props) {
  const {
    autoFocus,
    trapFocus,
    dialogRef,
    initialFocusRef,
    blockScrollOnMount,
    allowPinchZoom,
    finalFocusRef,
    returnFocusOnClose,
    preserveScrollBarGap,
    lockFocusAcrossFrames,
    isOpen
  } = useModalContext();
  const [isPresent3, safeToRemove] = usePresence();
  (0, import_react163.useEffect)(() => {
    if (!isPresent3 && safeToRemove) {
      setTimeout(safeToRemove);
    }
  }, [isPresent3, safeToRemove]);
  const index5 = useModalManager(dialogRef, isOpen);
  return (0, import_jsx_runtime111.jsx)(
    FocusLock2,
    {
      autoFocus,
      isDisabled: !trapFocus,
      initialFocusRef,
      finalFocusRef,
      restoreFocus: returnFocusOnClose,
      contentRef: dialogRef,
      lockFocusAcrossFrames,
      children: (0, import_jsx_runtime111.jsx)(
        Combination_default2,
        {
          removeScrollBar: !preserveScrollBarGap,
          allowPinchZoom,
          enabled: index5 === 1 && blockScrollOnMount,
          forwardProps: true,
          children: props.children
        }
      )
    }
  );
}

// node_modules/@chakra-ui/modal/dist/chunk-EL2VKIZQ.mjs
var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
var ModalContent = forwardRef3(
  (props, ref) => {
    const {
      className,
      children,
      containerProps: rootProps,
      motionProps,
      ...rest
    } = props;
    const { getDialogProps, getDialogContainerProps } = useModalContext();
    const dialogProps = getDialogProps(rest, ref);
    const containerProps = getDialogContainerProps(rootProps);
    const _className = cx("chakra-modal__content", className);
    const styles2 = useModalStyles();
    const dialogStyles = {
      display: "flex",
      flexDirection: "column",
      position: "relative",
      width: "100%",
      outline: 0,
      ...styles2.dialog
    };
    const dialogContainerStyles = {
      display: "flex",
      width: "100vw",
      height: "$100vh",
      position: "fixed",
      left: 0,
      top: 0,
      ...styles2.dialogContainer
    };
    const { motionPreset } = useModalContext();
    return (0, import_jsx_runtime112.jsx)(ModalFocusScope, { children: (0, import_jsx_runtime112.jsx)(
      chakra.div,
      {
        ...containerProps,
        className: "chakra-modal__content-container",
        tabIndex: -1,
        __css: dialogContainerStyles,
        children: (0, import_jsx_runtime112.jsx)(
          ModalTransition,
          {
            preset: motionPreset,
            motionProps,
            className: _className,
            ...dialogProps,
            __css: dialogStyles,
            children
          }
        )
      }
    ) });
  }
);
ModalContent.displayName = "ModalContent";

// node_modules/@chakra-ui/modal/dist/chunk-FQDHE43W.mjs
var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
function AlertDialog(props) {
  const { leastDestructiveRef, ...rest } = props;
  return (0, import_jsx_runtime113.jsx)(Modal, { ...rest, initialFocusRef: leastDestructiveRef });
}
var AlertDialogContent = forwardRef3(
  (props, ref) => (0, import_jsx_runtime113.jsx)(ModalContent, { ref, role: "alertdialog", ...props })
);

// node_modules/@chakra-ui/modal/dist/chunk-MCHDHFCQ.mjs
var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
var [DrawerContextProvider, useDrawerContext] = createContext2();
var placementMap2 = {
  start: { ltr: "left", rtl: "right" },
  end: { ltr: "right", rtl: "left" }
};
function getDrawerPlacement(placement, dir) {
  var _a9, _b5;
  if (!placement)
    return;
  return (_b5 = (_a9 = placementMap2[placement]) == null ? void 0 : _a9[dir]) != null ? _b5 : placement;
}
function Drawer(props) {
  var _a9;
  const {
    isOpen,
    onClose,
    placement: placementProp = "right",
    children,
    ...rest
  } = props;
  const theme3 = useTheme2();
  const drawerStyleConfig = (_a9 = theme3.components) == null ? void 0 : _a9.Drawer;
  const placement = getDrawerPlacement(placementProp, theme3.direction);
  return (0, import_jsx_runtime114.jsx)(DrawerContextProvider, { value: { placement }, children: (0, import_jsx_runtime114.jsx)(
    Modal,
    {
      isOpen,
      onClose,
      styleConfig: drawerStyleConfig,
      ...rest,
      children
    }
  ) });
}

// node_modules/@chakra-ui/modal/dist/chunk-65IR7CTH.mjs
var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
var MotionDiv = chakra(Slide);
var DrawerContent = forwardRef3(
  (props, ref) => {
    const {
      className,
      children,
      motionProps,
      containerProps: rootProps,
      ...rest
    } = props;
    const { getDialogProps, getDialogContainerProps, isOpen } = useModalContext();
    const dialogProps = getDialogProps(rest, ref);
    const containerProps = getDialogContainerProps(rootProps);
    const _className = cx("chakra-modal__content", className);
    const styles2 = useModalStyles();
    const dialogStyles = {
      display: "flex",
      flexDirection: "column",
      position: "relative",
      width: "100%",
      outline: 0,
      ...styles2.dialog
    };
    const dialogContainerStyles = {
      display: "flex",
      width: "100vw",
      height: "$100vh",
      position: "fixed",
      left: 0,
      top: 0,
      ...styles2.dialogContainer
    };
    const { placement } = useDrawerContext();
    return (0, import_jsx_runtime115.jsx)(ModalFocusScope, { children: (0, import_jsx_runtime115.jsx)(
      chakra.div,
      {
        ...containerProps,
        className: "chakra-modal__content-container",
        __css: dialogContainerStyles,
        children: (0, import_jsx_runtime115.jsx)(
          MotionDiv,
          {
            motionProps,
            direction: placement,
            in: isOpen,
            className: _className,
            ...dialogProps,
            __css: dialogStyles,
            children
          }
        )
      }
    ) });
  }
);
DrawerContent.displayName = "DrawerContent";

// node_modules/@chakra-ui/modal/dist/chunk-RAWN7VJ3.mjs
var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
var ModalFooter = forwardRef3(
  (props, ref) => {
    const { className, ...rest } = props;
    const _className = cx("chakra-modal__footer", className);
    const styles2 = useModalStyles();
    const footerStyles = {
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-end",
      ...styles2.footer
    };
    return (0, import_jsx_runtime116.jsx)(
      chakra.footer,
      {
        ref,
        ...rest,
        __css: footerStyles,
        className: _className
      }
    );
  }
);
ModalFooter.displayName = "ModalFooter";

// node_modules/@chakra-ui/modal/dist/chunk-5FG5SY5K.mjs
var import_react164 = __toESM(require_react(), 1);
var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
var ModalHeader = forwardRef3(
  (props, ref) => {
    const { className, ...rest } = props;
    const { headerId, setHeaderMounted } = useModalContext();
    (0, import_react164.useEffect)(() => {
      setHeaderMounted(true);
      return () => setHeaderMounted(false);
    }, [setHeaderMounted]);
    const _className = cx("chakra-modal__header", className);
    const styles2 = useModalStyles();
    const headerStyles = {
      flex: 0,
      ...styles2.header
    };
    return (0, import_jsx_runtime117.jsx)(
      chakra.header,
      {
        ref,
        className: _className,
        id: headerId,
        ...rest,
        __css: headerStyles
      }
    );
  }
);
ModalHeader.displayName = "ModalHeader";

// node_modules/@chakra-ui/modal/dist/chunk-JQMJHPZH.mjs
var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
var MotionDiv2 = chakra(motion.div);
var ModalOverlay = forwardRef3(
  (props, ref) => {
    const { className, transition: transition3, motionProps: _motionProps, ...rest } = props;
    const _className = cx("chakra-modal__overlay", className);
    const styles2 = useModalStyles();
    const overlayStyle = {
      pos: "fixed",
      left: "0",
      top: "0",
      w: "100vw",
      h: "100vh",
      ...styles2.overlay
    };
    const { motionPreset } = useModalContext();
    const defaultMotionProps = motionPreset === "none" ? {} : fadeConfig;
    const motionProps = _motionProps || defaultMotionProps;
    return (0, import_jsx_runtime118.jsx)(
      MotionDiv2,
      {
        ...motionProps,
        __css: overlayStyle,
        ref,
        className: _className,
        ...rest
      }
    );
  }
);
ModalOverlay.displayName = "ModalOverlay";

// node_modules/@chakra-ui/modal/dist/chunk-OFOVX77R.mjs
var import_react165 = __toESM(require_react(), 1);
var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
var ModalBody = forwardRef3((props, ref) => {
  const { className, ...rest } = props;
  const { bodyId, setBodyMounted } = useModalContext();
  (0, import_react165.useEffect)(() => {
    setBodyMounted(true);
    return () => setBodyMounted(false);
  }, [setBodyMounted]);
  const _className = cx("chakra-modal__body", className);
  const styles2 = useModalStyles();
  return (0, import_jsx_runtime119.jsx)(
    chakra.div,
    {
      ref,
      className: _className,
      id: bodyId,
      ...rest,
      __css: styles2.body
    }
  );
});
ModalBody.displayName = "ModalBody";

// node_modules/@chakra-ui/modal/dist/chunk-4FCEGNGT.mjs
var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
var ModalCloseButton = forwardRef3(
  (props, ref) => {
    const { onClick, className, ...rest } = props;
    const { onClose } = useModalContext();
    const _className = cx("chakra-modal__close-btn", className);
    const styles2 = useModalStyles();
    return (0, import_jsx_runtime120.jsx)(
      CloseButton,
      {
        ref,
        __css: styles2.closeButton,
        className: _className,
        onClick: callAllHandlers(onClick, (event) => {
          event.stopPropagation();
          onClose();
        }),
        ...rest
      }
    );
  }
);
ModalCloseButton.displayName = "ModalCloseButton";

// node_modules/@chakra-ui/number-input/dist/chunk-KWODBCCW.mjs
var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
var TriangleDownIcon = (props) => (0, import_jsx_runtime121.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime121.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
  }
) });
var TriangleUpIcon = (props) => (0, import_jsx_runtime121.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime121.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
  }
) });

// node_modules/@chakra-ui/number-input/dist/chunk-2PMVP26D.mjs
var import_react166 = __toESM(require_react(), 1);
function useAttributeObserver(ref, attributes, fn2, enabled) {
  (0, import_react166.useEffect)(() => {
    var _a9;
    if (!ref.current || !enabled)
      return;
    const win = (_a9 = ref.current.ownerDocument.defaultView) != null ? _a9 : window;
    const attrs = Array.isArray(attributes) ? attributes : [attributes];
    const obs = new win.MutationObserver((changes) => {
      for (const change of changes) {
        if (change.type === "attributes" && change.attributeName && attrs.includes(change.attributeName)) {
          fn2(change);
        }
      }
    });
    obs.observe(ref.current, { attributes: true, attributeFilter: attrs });
    return () => obs.disconnect();
  });
}

// node_modules/@chakra-ui/react-use-interval/dist/index.mjs
var import_react167 = __toESM(require_react(), 1);
function useInterval2(callback, delay2) {
  const fn2 = useCallbackRef(callback);
  (0, import_react167.useEffect)(() => {
    let intervalId = null;
    const tick = () => fn2();
    if (delay2 !== null) {
      intervalId = window.setInterval(tick, delay2);
    }
    return () => {
      if (intervalId) {
        window.clearInterval(intervalId);
      }
    };
  }, [delay2, fn2]);
}

// node_modules/@chakra-ui/number-input/dist/chunk-366L2ZDN.mjs
var import_react168 = __toESM(require_react(), 1);
var CONTINUOUS_CHANGE_INTERVAL = 50;
var CONTINUOUS_CHANGE_DELAY = 300;
function useSpinner(increment, decrement) {
  const [isSpinning, setIsSpinning] = (0, import_react168.useState)(false);
  const [action, setAction] = (0, import_react168.useState)(null);
  const [runOnce, setRunOnce] = (0, import_react168.useState)(true);
  const timeoutRef = (0, import_react168.useRef)(null);
  const removeTimeout = () => clearTimeout(timeoutRef.current);
  useInterval2(
    () => {
      if (action === "increment") {
        increment();
      }
      if (action === "decrement") {
        decrement();
      }
    },
    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null
  );
  const up = (0, import_react168.useCallback)(() => {
    if (runOnce) {
      increment();
    }
    timeoutRef.current = setTimeout(() => {
      setRunOnce(false);
      setIsSpinning(true);
      setAction("increment");
    }, CONTINUOUS_CHANGE_DELAY);
  }, [increment, runOnce]);
  const down = (0, import_react168.useCallback)(() => {
    if (runOnce) {
      decrement();
    }
    timeoutRef.current = setTimeout(() => {
      setRunOnce(false);
      setIsSpinning(true);
      setAction("decrement");
    }, CONTINUOUS_CHANGE_DELAY);
  }, [decrement, runOnce]);
  const stop = (0, import_react168.useCallback)(() => {
    setRunOnce(true);
    setIsSpinning(false);
    removeTimeout();
  }, []);
  (0, import_react168.useEffect)(() => {
    return () => removeTimeout();
  }, []);
  return { up, down, stop, isSpinning };
}

// node_modules/@chakra-ui/number-input/dist/chunk-4ZJMWFQT.mjs
var import_react169 = __toESM(require_react(), 1);
var FLOATING_POINT_REGEX = /^[Ee0-9+\-.]$/;
function isFloatingPointNumericCharacter(character2) {
  return FLOATING_POINT_REGEX.test(character2);
}
function isValidNumericKeyboardEvent(event, isValid) {
  if (event.key == null)
    return true;
  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
  const isSingleCharacterKey = event.key.length === 1;
  if (!isSingleCharacterKey || isModifierKey)
    return true;
  return isValid(event.key);
}
function useNumberInput(props = {}) {
  const {
    focusInputOnChange = true,
    clampValueOnBlur = true,
    keepWithinRange = true,
    min: min3 = Number.MIN_SAFE_INTEGER,
    max: max3 = Number.MAX_SAFE_INTEGER,
    step: stepProp = 1,
    isReadOnly,
    isDisabled: isDisabled3,
    isRequired,
    isInvalid,
    pattern = "[0-9]*(.[0-9]+)?",
    inputMode = "decimal",
    allowMouseWheel,
    id: id3,
    onChange: _,
    precision,
    name,
    "aria-describedby": ariaDescBy,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    onInvalid: onInvalidProp,
    getAriaValueText: getAriaValueTextProp,
    isValidCharacter: isValidCharacterProp,
    format: formatValue,
    parse: parseValue2,
    ...htmlProps
  } = props;
  const onFocus4 = useCallbackRef(onFocusProp);
  const onBlur3 = useCallbackRef(onBlurProp);
  const onInvalid = useCallbackRef(onInvalidProp);
  const isValidCharacter = useCallbackRef(
    isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter
  );
  const getAriaValueText = useCallbackRef(getAriaValueTextProp);
  const counter3 = useCounter(props);
  const {
    update: updateFn,
    increment: incrementFn,
    decrement: decrementFn
  } = counter3;
  const [isFocused, setFocused] = (0, import_react169.useState)(false);
  const isInteractive = !(isReadOnly || isDisabled3);
  const inputRef = (0, import_react169.useRef)(null);
  const inputSelectionRef = (0, import_react169.useRef)(null);
  const incrementButtonRef = (0, import_react169.useRef)(null);
  const decrementButtonRef = (0, import_react169.useRef)(null);
  const sanitize3 = (0, import_react169.useCallback)(
    (value) => value.split("").filter(isValidCharacter).join(""),
    [isValidCharacter]
  );
  const parse6 = (0, import_react169.useCallback)(
    (value) => {
      var _a9;
      return (_a9 = parseValue2 == null ? void 0 : parseValue2(value)) != null ? _a9 : value;
    },
    [parseValue2]
  );
  const format2 = (0, import_react169.useCallback)(
    (value) => {
      var _a9;
      return ((_a9 = formatValue == null ? void 0 : formatValue(value)) != null ? _a9 : value).toString();
    },
    [formatValue]
  );
  useUpdateEffect(() => {
    if (counter3.valueAsNumber > max3) {
      onInvalid == null ? void 0 : onInvalid("rangeOverflow", format2(counter3.value), counter3.valueAsNumber);
    } else if (counter3.valueAsNumber < min3) {
      onInvalid == null ? void 0 : onInvalid("rangeOverflow", format2(counter3.value), counter3.valueAsNumber);
    }
  }, [counter3.valueAsNumber, counter3.value, format2, onInvalid]);
  useSafeLayoutEffect(() => {
    if (!inputRef.current)
      return;
    const notInSync = inputRef.current.value != counter3.value;
    if (notInSync) {
      const parsedInput = parse6(inputRef.current.value);
      counter3.setValue(sanitize3(parsedInput));
    }
  }, [parse6, sanitize3]);
  const increment = (0, import_react169.useCallback)(
    (step = stepProp) => {
      if (isInteractive) {
        incrementFn(step);
      }
    },
    [incrementFn, isInteractive, stepProp]
  );
  const decrement = (0, import_react169.useCallback)(
    (step = stepProp) => {
      if (isInteractive) {
        decrementFn(step);
      }
    },
    [decrementFn, isInteractive, stepProp]
  );
  const spinner = useSpinner(increment, decrement);
  useAttributeObserver(
    incrementButtonRef,
    "disabled",
    spinner.stop,
    spinner.isSpinning
  );
  useAttributeObserver(
    decrementButtonRef,
    "disabled",
    spinner.stop,
    spinner.isSpinning
  );
  const onChange2 = (0, import_react169.useCallback)(
    (event) => {
      const evt = event.nativeEvent;
      if (evt.isComposing)
        return;
      const parsedInput = parse6(event.currentTarget.value);
      updateFn(sanitize3(parsedInput));
      inputSelectionRef.current = {
        start: event.currentTarget.selectionStart,
        end: event.currentTarget.selectionEnd
      };
    },
    [updateFn, sanitize3, parse6]
  );
  const _onFocus = (0, import_react169.useCallback)(
    (event) => {
      var _a9, _b5, _c3;
      onFocus4 == null ? void 0 : onFocus4(event);
      if (!inputSelectionRef.current)
        return;
      event.target.selectionStart = (_b5 = inputSelectionRef.current.start) != null ? _b5 : (_a9 = event.currentTarget.value) == null ? void 0 : _a9.length;
      event.currentTarget.selectionEnd = (_c3 = inputSelectionRef.current.end) != null ? _c3 : event.currentTarget.selectionStart;
    },
    [onFocus4]
  );
  const onKeyDown = (0, import_react169.useCallback)(
    (event) => {
      if (event.nativeEvent.isComposing)
        return;
      if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {
        event.preventDefault();
      }
      const stepFactor = getStepFactor(event) * stepProp;
      const eventKey = event.key;
      const keyMap = {
        ArrowUp: () => increment(stepFactor),
        ArrowDown: () => decrement(stepFactor),
        Home: () => updateFn(min3),
        End: () => updateFn(max3)
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [isValidCharacter, stepProp, increment, decrement, updateFn, min3, max3]
  );
  const getStepFactor = (event) => {
    let ratio = 1;
    if (event.metaKey || event.ctrlKey) {
      ratio = 0.1;
    }
    if (event.shiftKey) {
      ratio = 10;
    }
    return ratio;
  };
  const ariaValueText = (0, import_react169.useMemo)(() => {
    const text = getAriaValueText == null ? void 0 : getAriaValueText(counter3.value);
    if (text != null)
      return text;
    const defaultText = counter3.value.toString();
    return !defaultText ? void 0 : defaultText;
  }, [counter3.value, getAriaValueText]);
  const validateAndClamp = (0, import_react169.useCallback)(() => {
    let next2 = counter3.value;
    if (counter3.value === "")
      return;
    const valueStartsWithE = /^[eE]/.test(counter3.value.toString());
    if (valueStartsWithE) {
      counter3.setValue("");
    } else {
      if (counter3.valueAsNumber < min3) {
        next2 = min3;
      }
      if (counter3.valueAsNumber > max3) {
        next2 = max3;
      }
      counter3.cast(next2);
    }
  }, [counter3, max3, min3]);
  const onInputBlur = (0, import_react169.useCallback)(() => {
    setFocused(false);
    if (clampValueOnBlur) {
      validateAndClamp();
    }
  }, [clampValueOnBlur, setFocused, validateAndClamp]);
  const focusInput = (0, import_react169.useCallback)(() => {
    if (focusInputOnChange) {
      requestAnimationFrame(() => {
        var _a9;
        (_a9 = inputRef.current) == null ? void 0 : _a9.focus();
      });
    }
  }, [focusInputOnChange]);
  const spinUp = (0, import_react169.useCallback)(
    (event) => {
      event.preventDefault();
      spinner.up();
      focusInput();
    },
    [focusInput, spinner]
  );
  const spinDown = (0, import_react169.useCallback)(
    (event) => {
      event.preventDefault();
      spinner.down();
      focusInput();
    },
    [focusInput, spinner]
  );
  useEventListener(
    () => inputRef.current,
    "wheel",
    (event) => {
      var _a9, _b5;
      const doc = (_b5 = (_a9 = inputRef.current) == null ? void 0 : _a9.ownerDocument) != null ? _b5 : document;
      const isInputFocused = doc.activeElement === inputRef.current;
      if (!allowMouseWheel || !isInputFocused)
        return;
      event.preventDefault();
      const stepFactor = getStepFactor(event) * stepProp;
      const direction2 = Math.sign(event.deltaY);
      if (direction2 === -1) {
        increment(stepFactor);
      } else if (direction2 === 1) {
        decrement(stepFactor);
      }
    },
    { passive: false }
  );
  const getIncrementButtonProps = (0, import_react169.useCallback)(
    (props2 = {}, ref = null) => {
      const disabled = isDisabled3 || keepWithinRange && counter3.isAtMax;
      return {
        ...props2,
        ref: mergeRefs2(ref, incrementButtonRef),
        role: "button",
        tabIndex: -1,
        onPointerDown: callAllHandlers(props2.onPointerDown, (event) => {
          if (event.button !== 0 || disabled)
            return;
          spinUp(event);
        }),
        onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),
        onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),
        disabled,
        "aria-disabled": ariaAttr(disabled)
      };
    },
    [counter3.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled3]
  );
  const getDecrementButtonProps = (0, import_react169.useCallback)(
    (props2 = {}, ref = null) => {
      const disabled = isDisabled3 || keepWithinRange && counter3.isAtMin;
      return {
        ...props2,
        ref: mergeRefs2(ref, decrementButtonRef),
        role: "button",
        tabIndex: -1,
        onPointerDown: callAllHandlers(props2.onPointerDown, (event) => {
          if (event.button !== 0 || disabled)
            return;
          spinDown(event);
        }),
        onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),
        onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),
        disabled,
        "aria-disabled": ariaAttr(disabled)
      };
    },
    [counter3.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled3]
  );
  const getInputProps = (0, import_react169.useCallback)(
    (props2 = {}, ref = null) => {
      var _a9, _b5, _c3, _d3;
      return {
        name,
        inputMode,
        type: "text",
        pattern,
        "aria-labelledby": ariaLabelledBy,
        "aria-label": ariaLabel,
        "aria-describedby": ariaDescBy,
        id: id3,
        disabled: isDisabled3,
        ...props2,
        readOnly: (_a9 = props2.readOnly) != null ? _a9 : isReadOnly,
        "aria-readonly": (_b5 = props2.readOnly) != null ? _b5 : isReadOnly,
        "aria-required": (_c3 = props2.required) != null ? _c3 : isRequired,
        required: (_d3 = props2.required) != null ? _d3 : isRequired,
        ref: mergeRefs2(inputRef, ref),
        value: format2(counter3.value),
        role: "spinbutton",
        "aria-valuemin": min3,
        "aria-valuemax": max3,
        "aria-valuenow": Number.isNaN(counter3.valueAsNumber) ? void 0 : counter3.valueAsNumber,
        "aria-invalid": ariaAttr(isInvalid != null ? isInvalid : counter3.isOutOfRange),
        "aria-valuetext": ariaValueText,
        autoComplete: "off",
        autoCorrect: "off",
        onChange: callAllHandlers(props2.onChange, onChange2),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
        onFocus: callAllHandlers(
          props2.onFocus,
          _onFocus,
          () => setFocused(true)
        ),
        onBlur: callAllHandlers(props2.onBlur, onBlur3, onInputBlur)
      };
    },
    [
      name,
      inputMode,
      pattern,
      ariaLabelledBy,
      ariaLabel,
      format2,
      ariaDescBy,
      id3,
      isDisabled3,
      isRequired,
      isReadOnly,
      isInvalid,
      counter3.value,
      counter3.valueAsNumber,
      counter3.isOutOfRange,
      min3,
      max3,
      ariaValueText,
      onChange2,
      onKeyDown,
      _onFocus,
      onBlur3,
      onInputBlur
    ]
  );
  return {
    value: format2(counter3.value),
    valueAsNumber: counter3.valueAsNumber,
    isFocused,
    isDisabled: isDisabled3,
    isReadOnly,
    getIncrementButtonProps,
    getDecrementButtonProps,
    getInputProps,
    htmlProps
  };
}

// node_modules/@chakra-ui/number-input/dist/chunk-2JJX6TVY.mjs
var import_react170 = __toESM(require_react(), 1);
var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
var [NumberInputStylesProvider, useNumberInputStyles] = createContext2({
  name: `NumberInputStylesContext`,
  errorMessage: `useNumberInputStyles returned is 'undefined'. Seems you forgot to wrap the components in "<NumberInput />" `
});
var [NumberInputProvider, useNumberInputContext] = createContext2({
  name: "NumberInputContext",
  errorMessage: "useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />"
});
var NumberInput = forwardRef3(
  function NumberInput2(props, ref) {
    const styles2 = useMultiStyleConfig("NumberInput", props);
    const ownProps = omitThemingProps(props);
    const controlProps = useFormControlProps(ownProps);
    const { htmlProps, ...context2 } = useNumberInput(controlProps);
    const ctx = (0, import_react170.useMemo)(() => context2, [context2]);
    return (0, import_jsx_runtime122.jsx)(NumberInputProvider, { value: ctx, children: (0, import_jsx_runtime122.jsx)(NumberInputStylesProvider, { value: styles2, children: (0, import_jsx_runtime122.jsx)(
      chakra.div,
      {
        ...htmlProps,
        ref,
        className: cx("chakra-numberinput", props.className),
        __css: {
          position: "relative",
          zIndex: 0,
          ...styles2.root
        }
      }
    ) }) });
  }
);
NumberInput.displayName = "NumberInput";
var NumberInputStepper = forwardRef3(
  function NumberInputStepper2(props, ref) {
    const styles2 = useNumberInputStyles();
    return (0, import_jsx_runtime122.jsx)(
      chakra.div,
      {
        "aria-hidden": true,
        ref,
        ...props,
        __css: {
          display: "flex",
          flexDirection: "column",
          position: "absolute",
          top: "0",
          insetEnd: "0px",
          margin: "1px",
          height: "calc(100% - 2px)",
          zIndex: 1,
          ...styles2.stepperGroup
        }
      }
    );
  }
);
NumberInputStepper.displayName = "NumberInputStepper";
var NumberInputField = forwardRef3(
  function NumberInputField2(props, ref) {
    const { getInputProps } = useNumberInputContext();
    const input = getInputProps(props, ref);
    const styles2 = useNumberInputStyles();
    return (0, import_jsx_runtime122.jsx)(
      chakra.input,
      {
        ...input,
        className: cx("chakra-numberinput__field", props.className),
        __css: {
          width: "100%",
          ...styles2.field
        }
      }
    );
  }
);
NumberInputField.displayName = "NumberInputField";
var StyledStepper = chakra("div", {
  baseStyle: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    transitionProperty: "common",
    transitionDuration: "normal",
    userSelect: "none",
    cursor: "pointer",
    lineHeight: "normal"
  }
});
var NumberDecrementStepper = forwardRef3(function NumberDecrementStepper2(props, ref) {
  var _a9;
  const styles2 = useNumberInputStyles();
  const { getDecrementButtonProps } = useNumberInputContext();
  const decrement = getDecrementButtonProps(props, ref);
  return (0, import_jsx_runtime122.jsx)(StyledStepper, { ...decrement, __css: styles2.stepper, children: (_a9 = props.children) != null ? _a9 : (0, import_jsx_runtime122.jsx)(TriangleDownIcon, {}) });
});
NumberDecrementStepper.displayName = "NumberDecrementStepper";
var NumberIncrementStepper = forwardRef3(function NumberIncrementStepper2(props, ref) {
  var _a9;
  const { getIncrementButtonProps } = useNumberInputContext();
  const increment = getIncrementButtonProps(props, ref);
  const styles2 = useNumberInputStyles();
  return (0, import_jsx_runtime122.jsx)(StyledStepper, { ...increment, __css: styles2.stepper, children: (_a9 = props.children) != null ? _a9 : (0, import_jsx_runtime122.jsx)(TriangleUpIcon, {}) });
});
NumberIncrementStepper.displayName = "NumberIncrementStepper";

// node_modules/@chakra-ui/pin-input/dist/chunk-7FMJRAMH.mjs
var import_react171 = __toESM(require_react(), 1);
var [
  PinInputDescendantsProvider,
  usePinInputDescendantsContext,
  usePinInputDescendants,
  usePinInputDescendant
] = createDescendantContext();
var [PinInputProvider, usePinInputContext] = createContext2({
  name: "PinInputContext",
  errorMessage: "usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`"
});
var toArray2 = (value) => value == null ? void 0 : value.split("");
function validate(value, type) {
  const NUMERIC_REGEX = /^[0-9]+$/;
  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;
  const regex2 = type === "alphanumeric" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;
  return regex2.test(value);
}
function usePinInput(props = {}) {
  const {
    autoFocus,
    value,
    defaultValue: defaultValue2,
    onChange: onChange2,
    onComplete,
    placeholder = "○",
    manageFocus = true,
    otp = false,
    id: idProp,
    isDisabled: isDisabled3,
    isInvalid,
    type = "number",
    mask
  } = props;
  const uuid = (0, import_react171.useId)();
  const id3 = idProp != null ? idProp : `pin-input-${uuid}`;
  const descendants = usePinInputDescendants();
  const [moveFocus2, setMoveFocus] = (0, import_react171.useState)(true);
  const [focusedIndex, setFocusedIndex] = (0, import_react171.useState)(-1);
  const [values2, setValues3] = useControllableState({
    defaultValue: toArray2(defaultValue2) || [],
    value: toArray2(value),
    onChange: (values22) => onChange2 == null ? void 0 : onChange2(values22.join(""))
  });
  (0, import_react171.useEffect)(() => {
    if (autoFocus) {
      const first = descendants.first();
      if (first) {
        requestAnimationFrame(() => {
          first.node.focus();
        });
      }
    }
  }, [descendants]);
  const focusNext = (0, import_react171.useCallback)(
    (index5) => {
      if (!moveFocus2 || !manageFocus)
        return;
      const next2 = descendants.next(index5, false);
      if (next2) {
        requestAnimationFrame(() => {
          next2.node.focus();
        });
      }
    },
    [descendants, moveFocus2, manageFocus]
  );
  const setValue = (0, import_react171.useCallback)(
    (value2, index5, handleFocus = true) => {
      const nextValues = [...values2];
      nextValues[index5] = value2;
      setValues3(nextValues);
      const isComplete = value2 !== "" && nextValues.length === descendants.count() && nextValues.every(
        (inputValue) => inputValue != null && inputValue !== ""
      );
      if (isComplete) {
        onComplete == null ? void 0 : onComplete(nextValues.join(""));
      } else {
        if (handleFocus)
          focusNext(index5);
      }
    },
    [values2, setValues3, focusNext, onComplete, descendants]
  );
  const clear = (0, import_react171.useCallback)(() => {
    var _a9;
    const values22 = Array(descendants.count()).fill("");
    setValues3(values22);
    const first = descendants.first();
    (_a9 = first == null ? void 0 : first.node) == null ? void 0 : _a9.focus();
  }, [descendants, setValues3]);
  const getNextValue = (0, import_react171.useCallback)((value2, eventValue) => {
    let nextValue = eventValue;
    if ((value2 == null ? void 0 : value2.length) > 0) {
      if (value2[0] === eventValue.charAt(0)) {
        nextValue = eventValue.charAt(1);
      } else if (value2[0] === eventValue.charAt(1)) {
        nextValue = eventValue.charAt(0);
      }
    }
    return nextValue;
  }, []);
  const getInputProps = (0, import_react171.useCallback)(
    (props2) => {
      const { index: index5, ...rest } = props2;
      const onChange22 = (event) => {
        const eventValue = event.target.value;
        const currentValue = values2[index5];
        const nextValue = getNextValue(currentValue, eventValue);
        if (nextValue === "") {
          setValue("", index5);
          return;
        }
        if (eventValue.length > 2) {
          if (validate(eventValue, type)) {
            const nextValue2 = eventValue.split("").filter((_, index22) => index22 < descendants.count());
            setValues3(nextValue2);
            if (nextValue2.length === descendants.count()) {
              onComplete == null ? void 0 : onComplete(nextValue2.join(""));
            }
          }
        } else {
          if (validate(nextValue, type)) {
            setValue(nextValue, index5);
          }
          setMoveFocus(true);
        }
      };
      const onKeyDown = (event) => {
        var _a9;
        if (event.key === "Backspace" && manageFocus) {
          if (event.target.value === "") {
            const prevInput = descendants.prev(index5, false);
            if (prevInput) {
              setValue("", index5 - 1, false);
              (_a9 = prevInput.node) == null ? void 0 : _a9.focus();
              setMoveFocus(true);
            }
          } else {
            setMoveFocus(false);
          }
        }
      };
      const onFocus4 = () => {
        setFocusedIndex(index5);
      };
      const onBlur3 = () => {
        setFocusedIndex(-1);
      };
      const hasFocus = focusedIndex === index5;
      const inputType = type === "number" ? "tel" : "text";
      return {
        "aria-label": "Please enter your pin code",
        inputMode: type === "number" ? "numeric" : "text",
        type: mask ? "password" : inputType,
        ...rest,
        id: `${id3}-${index5}`,
        disabled: isDisabled3,
        "aria-invalid": ariaAttr(isInvalid),
        onChange: callAllHandlers(rest.onChange, onChange22),
        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),
        onFocus: callAllHandlers(rest.onFocus, onFocus4),
        onBlur: callAllHandlers(rest.onBlur, onBlur3),
        value: values2[index5] || "",
        autoComplete: otp ? "one-time-code" : "off",
        placeholder: hasFocus ? "" : placeholder
      };
    },
    [
      descendants,
      focusedIndex,
      getNextValue,
      id3,
      isDisabled3,
      mask,
      isInvalid,
      manageFocus,
      onComplete,
      otp,
      placeholder,
      setValue,
      setValues3,
      type,
      values2
    ]
  );
  return {
    // prop getter
    getInputProps,
    // state
    id: id3,
    descendants,
    values: values2,
    // actions
    setValue,
    setValues: setValues3,
    clear
  };
}
function usePinInputField(props = {}, ref = null) {
  const { getInputProps } = usePinInputContext();
  const { index: index5, register } = usePinInputDescendant();
  return getInputProps({
    ...props,
    ref: mergeRefs2(register, ref),
    index: index5
  });
}

// node_modules/@chakra-ui/pin-input/dist/chunk-I5V4ORUK.mjs
var import_react172 = __toESM(require_react(), 1);
var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
function PinInput(props) {
  const styles2 = useStyleConfig("PinInput", props);
  const { children, ...rest } = omitThemingProps(props);
  const { descendants, ...context2 } = usePinInput(rest);
  const clones = getValidChildren2(children).map(
    (child) => (0, import_react172.cloneElement)(child, { __css: styles2 })
  );
  return (0, import_jsx_runtime123.jsx)(PinInputDescendantsProvider, { value: descendants, children: (0, import_jsx_runtime123.jsx)(PinInputProvider, { value: context2, children: clones }) });
}
PinInput.displayName = "PinInput";
var PinInputField = forwardRef3(
  function PinInputField2(props, ref) {
    const inputProps = usePinInputField(props, ref);
    return (0, import_jsx_runtime123.jsx)(
      chakra.input,
      {
        ...inputProps,
        className: cx("chakra-pin-input", props.className)
      }
    );
  }
);
PinInputField.displayName = "PinInputField";

// node_modules/@chakra-ui/popover/dist/chunk-Z3POGKNI.mjs
var [PopoverProvider, usePopoverContext] = createContext2({
  name: "PopoverContext",
  errorMessage: "usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`"
});
var [PopoverStylesProvider, usePopoverStyles] = createContext2({
  name: `PopoverStylesContext`,
  errorMessage: `usePopoverStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Popover />" `
});

// node_modules/@chakra-ui/popover/dist/chunk-DHS7LAGW.mjs
var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
var PopoverHeader = forwardRef3(
  function PopoverHeader2(props, ref) {
    const { getHeaderProps } = usePopoverContext();
    const styles2 = usePopoverStyles();
    return (0, import_jsx_runtime124.jsx)(
      chakra.header,
      {
        ...getHeaderProps(props, ref),
        className: cx("chakra-popover__header", props.className),
        __css: styles2.header
      }
    );
  }
);
PopoverHeader.displayName = "PopoverHeader";

// node_modules/@chakra-ui/popover/dist/chunk-OFUG2FGD.mjs
var import_react173 = __toESM(require_react(), 1);
function PopoverTrigger(props) {
  const child = import_react173.Children.only(props.children);
  const { getTriggerProps } = usePopoverContext();
  return (0, import_react173.cloneElement)(child, getTriggerProps(child.props, child.ref));
}
PopoverTrigger.displayName = "PopoverTrigger";

// node_modules/@chakra-ui/popover/dist/chunk-A566ERKI.mjs
var import_react174 = __toESM(require_react(), 1);
var TRIGGER = {
  click: "click",
  hover: "hover"
};
function usePopover(props = {}) {
  const {
    closeOnBlur = true,
    closeOnEsc = true,
    initialFocusRef,
    id: id3,
    returnFocusOnClose = true,
    autoFocus = true,
    arrowSize,
    arrowShadowColor,
    trigger: trigger2 = TRIGGER.click,
    openDelay = 200,
    closeDelay = 200,
    isLazy,
    lazyBehavior = "unmount",
    computePositionOnMount,
    ...popperProps
  } = props;
  const { isOpen, onClose, onOpen, onToggle } = useDisclosure2(props);
  const anchorRef = (0, import_react174.useRef)(null);
  const triggerRef = (0, import_react174.useRef)(null);
  const popoverRef = (0, import_react174.useRef)(null);
  const isHoveringRef = (0, import_react174.useRef)(false);
  const hasBeenOpened = (0, import_react174.useRef)(false);
  if (isOpen) {
    hasBeenOpened.current = true;
  }
  const [hasHeader, setHasHeader] = (0, import_react174.useState)(false);
  const [hasBody, setHasBody] = (0, import_react174.useState)(false);
  const uuid = (0, import_react174.useId)();
  const uid = id3 != null ? id3 : uuid;
  const [triggerId, popoverId, headerId, bodyId] = [
    "popover-trigger",
    "popover-content",
    "popover-header",
    "popover-body"
  ].map((id22) => `${id22}-${uid}`);
  const {
    referenceRef,
    getArrowProps,
    getPopperProps,
    getArrowInnerProps,
    forceUpdate
  } = usePopper({
    ...popperProps,
    enabled: isOpen || !!computePositionOnMount
  });
  const animated = useAnimationState2({ isOpen, ref: popoverRef });
  useFocusOnPointerDown({
    enabled: isOpen,
    ref: triggerRef
  });
  useFocusOnHide2(popoverRef, {
    focusRef: triggerRef,
    visible: isOpen,
    shouldFocus: returnFocusOnClose && trigger2 === TRIGGER.click
  });
  useFocusOnShow2(popoverRef, {
    focusRef: initialFocusRef,
    visible: isOpen,
    shouldFocus: autoFocus && trigger2 === TRIGGER.click
  });
  const shouldRenderChildren = lazyDisclosure({
    wasSelected: hasBeenOpened.current,
    enabled: isLazy,
    mode: lazyBehavior,
    isSelected: animated.present
  });
  const getPopoverProps = (0, import_react174.useCallback)(
    (props2 = {}, _ref4 = null) => {
      const popoverProps = {
        ...props2,
        style: {
          ...props2.style,
          transformOrigin: cssVars.transformOrigin.varRef,
          [cssVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,
          [cssVars.arrowShadowColor.var]: arrowShadowColor
        },
        ref: mergeRefs2(popoverRef, _ref4),
        children: shouldRenderChildren ? props2.children : null,
        id: popoverId,
        tabIndex: -1,
        role: "dialog",
        onKeyDown: callAllHandlers(props2.onKeyDown, (event) => {
          if (closeOnEsc && event.key === "Escape") {
            onClose();
          }
        }),
        onBlur: callAllHandlers(props2.onBlur, (event) => {
          const relatedTarget = getRelatedTarget2(event);
          const targetIsPopover = contains6(popoverRef.current, relatedTarget);
          const targetIsTrigger = contains6(triggerRef.current, relatedTarget);
          const isValidBlur = !targetIsPopover && !targetIsTrigger;
          if (isOpen && closeOnBlur && isValidBlur) {
            onClose();
          }
        }),
        "aria-labelledby": hasHeader ? headerId : void 0,
        "aria-describedby": hasBody ? bodyId : void 0
      };
      if (trigger2 === TRIGGER.hover) {
        popoverProps.role = "tooltip";
        popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {
          isHoveringRef.current = true;
        });
        popoverProps.onMouseLeave = callAllHandlers(
          props2.onMouseLeave,
          (event) => {
            if (event.nativeEvent.relatedTarget === null) {
              return;
            }
            isHoveringRef.current = false;
            setTimeout(() => onClose(), closeDelay);
          }
        );
      }
      return popoverProps;
    },
    [
      shouldRenderChildren,
      popoverId,
      hasHeader,
      headerId,
      hasBody,
      bodyId,
      trigger2,
      closeOnEsc,
      onClose,
      isOpen,
      closeOnBlur,
      closeDelay,
      arrowShadowColor,
      arrowSize
    ]
  );
  const getPopoverPositionerProps = (0, import_react174.useCallback)(
    (props2 = {}, forwardedRef = null) => getPopperProps(
      {
        ...props2,
        style: {
          visibility: isOpen ? "visible" : "hidden",
          ...props2.style
        }
      },
      forwardedRef
    ),
    [isOpen, getPopperProps]
  );
  const getAnchorProps = (0, import_react174.useCallback)(
    (props2, _ref4 = null) => {
      return {
        ...props2,
        // If anchor is rendered, it is used as reference.
        ref: mergeRefs2(_ref4, anchorRef, referenceRef)
      };
    },
    [anchorRef, referenceRef]
  );
  const openTimeout = (0, import_react174.useRef)();
  const closeTimeout = (0, import_react174.useRef)();
  const maybeReferenceRef = (0, import_react174.useCallback)(
    (node3) => {
      if (anchorRef.current == null) {
        referenceRef(node3);
      }
    },
    [referenceRef]
  );
  const getTriggerProps = (0, import_react174.useCallback)(
    (props2 = {}, _ref4 = null) => {
      const triggerProps = {
        ...props2,
        ref: mergeRefs2(triggerRef, _ref4, maybeReferenceRef),
        id: triggerId,
        "aria-haspopup": "dialog",
        "aria-expanded": isOpen,
        "aria-controls": popoverId
      };
      if (trigger2 === TRIGGER.click) {
        triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);
      }
      if (trigger2 === TRIGGER.hover) {
        triggerProps.onFocus = callAllHandlers(props2.onFocus, () => {
          if (openTimeout.current === void 0) {
            onOpen();
          }
        });
        triggerProps.onBlur = callAllHandlers(props2.onBlur, (event) => {
          const relatedTarget = getRelatedTarget2(event);
          const isValidBlur = !contains6(popoverRef.current, relatedTarget);
          if (isOpen && closeOnBlur && isValidBlur) {
            onClose();
          }
        });
        triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, (event) => {
          if (event.key === "Escape") {
            onClose();
          }
        });
        triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {
          isHoveringRef.current = true;
          openTimeout.current = window.setTimeout(() => onOpen(), openDelay);
        });
        triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, () => {
          isHoveringRef.current = false;
          if (openTimeout.current) {
            clearTimeout(openTimeout.current);
            openTimeout.current = void 0;
          }
          closeTimeout.current = window.setTimeout(() => {
            if (isHoveringRef.current === false) {
              onClose();
            }
          }, closeDelay);
        });
      }
      return triggerProps;
    },
    [
      triggerId,
      isOpen,
      popoverId,
      trigger2,
      maybeReferenceRef,
      onToggle,
      onOpen,
      closeOnBlur,
      onClose,
      openDelay,
      closeDelay
    ]
  );
  (0, import_react174.useEffect)(() => {
    return () => {
      if (openTimeout.current) {
        clearTimeout(openTimeout.current);
      }
      if (closeTimeout.current) {
        clearTimeout(closeTimeout.current);
      }
    };
  }, []);
  const getHeaderProps = (0, import_react174.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      id: headerId,
      ref: mergeRefs2(ref, (node3) => {
        setHasHeader(!!node3);
      })
    }),
    [headerId]
  );
  const getBodyProps = (0, import_react174.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      id: bodyId,
      ref: mergeRefs2(ref, (node3) => {
        setHasBody(!!node3);
      })
    }),
    [bodyId]
  );
  return {
    forceUpdate,
    isOpen,
    onAnimationComplete: animated.onComplete,
    onClose,
    getAnchorProps,
    getArrowProps,
    getArrowInnerProps,
    getPopoverPositionerProps,
    getPopoverProps,
    getTriggerProps,
    getHeaderProps,
    getBodyProps
  };
}
function contains6(parent, child) {
  return parent === child || (parent == null ? void 0 : parent.contains(child));
}
function getRelatedTarget2(event) {
  var _a9;
  const activeEl = event.currentTarget.ownerDocument.activeElement;
  return (_a9 = event.relatedTarget) != null ? _a9 : activeEl;
}

// node_modules/@chakra-ui/popover/dist/chunk-3WRTUQ76.mjs
var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);
function Popover(props) {
  const styles2 = useMultiStyleConfig("Popover", props);
  const { children, ...rest } = omitThemingProps(props);
  const theme3 = useTheme2();
  const context2 = usePopover({ ...rest, direction: theme3.direction });
  return (0, import_jsx_runtime125.jsx)(PopoverProvider, { value: context2, children: (0, import_jsx_runtime125.jsx)(PopoverStylesProvider, { value: styles2, children: runIfFn(children, {
    isOpen: context2.isOpen,
    onClose: context2.onClose,
    forceUpdate: context2.forceUpdate
  }) }) });
}
Popover.displayName = "Popover";

// node_modules/@chakra-ui/popover/dist/chunk-DY5QRMBO.mjs
var import_react175 = __toESM(require_react(), 1);
function PopoverAnchor(props) {
  const child = import_react175.Children.only(props.children);
  const { getAnchorProps } = usePopoverContext();
  return (0, import_react175.cloneElement)(child, getAnchorProps(child.props, child.ref));
}
PopoverAnchor.displayName = "PopoverAnchor";

// node_modules/@chakra-ui/popover/dist/chunk-TL4BBA7T.mjs
var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
var resolveVar = (scale4, value) => value ? `${scale4}.${value}, ${value}` : void 0;
function PopoverArrow(props) {
  var _a9;
  const { bg, bgColor, backgroundColor, shadow, boxShadow: boxShadow2, shadowColor } = props;
  const { getArrowProps, getArrowInnerProps } = usePopoverContext();
  const styles2 = usePopoverStyles();
  const arrowBg = (_a9 = bg != null ? bg : bgColor) != null ? _a9 : backgroundColor;
  const arrowShadow = shadow != null ? shadow : boxShadow2;
  return (0, import_jsx_runtime126.jsx)(
    chakra.div,
    {
      ...getArrowProps(),
      className: "chakra-popover__arrow-positioner",
      children: (0, import_jsx_runtime126.jsx)(
        chakra.div,
        {
          className: cx("chakra-popover__arrow", props.className),
          ...getArrowInnerProps(props),
          __css: {
            "--popper-arrow-shadow-color": resolveVar("colors", shadowColor),
            "--popper-arrow-bg": resolveVar("colors", arrowBg),
            "--popper-arrow-shadow": resolveVar("shadows", arrowShadow),
            ...styles2.arrow
          }
        }
      )
    }
  );
}
PopoverArrow.displayName = "PopoverArrow";

// node_modules/@chakra-ui/popover/dist/chunk-RLMGYZLY.mjs
var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
var PopoverBody = forwardRef3(
  function PopoverBody2(props, ref) {
    const { getBodyProps } = usePopoverContext();
    const styles2 = usePopoverStyles();
    return (0, import_jsx_runtime127.jsx)(
      chakra.div,
      {
        ...getBodyProps(props, ref),
        className: cx("chakra-popover__body", props.className),
        __css: styles2.body
      }
    );
  }
);
PopoverBody.displayName = "PopoverBody";

// node_modules/@chakra-ui/popover/dist/chunk-JKY3EM6P.mjs
var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);
var PopoverCloseButton = forwardRef3(
  function PopoverCloseButton2(props, ref) {
    const { onClose } = usePopoverContext();
    const styles2 = usePopoverStyles();
    return (0, import_jsx_runtime128.jsx)(
      CloseButton,
      {
        size: "sm",
        onClick: onClose,
        className: cx("chakra-popover__close-btn", props.className),
        __css: styles2.closeButton,
        ref,
        ...props
      }
    );
  }
);
PopoverCloseButton.displayName = "PopoverCloseButton";

// node_modules/@chakra-ui/popover/dist/chunk-F4GPNG57.mjs
var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
function mergeVariants(variants19) {
  if (!variants19)
    return;
  return {
    enter: {
      ...variants19.enter,
      visibility: "visible"
    },
    exit: {
      ...variants19.exit,
      transitionEnd: {
        visibility: "hidden"
      }
    }
  };
}
var scaleFade = {
  exit: {
    opacity: 0,
    scale: 0.95,
    transition: {
      duration: 0.1,
      ease: [0.4, 0, 1, 1]
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      duration: 0.15,
      ease: [0, 0, 0.2, 1]
    }
  }
};
var MotionSection2 = chakra(motion.section);
var PopoverTransition = forwardRef3(function PopoverTransition2(props, ref) {
  const { variants: variants19 = scaleFade, ...rest } = props;
  const { isOpen } = usePopoverContext();
  return (0, import_jsx_runtime129.jsx)(
    MotionSection2,
    {
      ref,
      variants: mergeVariants(variants19),
      initial: false,
      animate: isOpen ? "enter" : "exit",
      ...rest
    }
  );
});
PopoverTransition.displayName = "PopoverTransition";

// node_modules/@chakra-ui/popover/dist/chunk-24I2HV4N.mjs
var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);
var PopoverContent = forwardRef3(
  function PopoverContent2(props, ref) {
    const { rootProps, motionProps, ...contentProps } = props;
    const { getPopoverProps, getPopoverPositionerProps, onAnimationComplete } = usePopoverContext();
    const styles2 = usePopoverStyles();
    const contentStyles = {
      position: "relative",
      display: "flex",
      flexDirection: "column",
      ...styles2.content
    };
    return (0, import_jsx_runtime130.jsx)(
      chakra.div,
      {
        ...getPopoverPositionerProps(rootProps),
        __css: styles2.popper,
        className: "chakra-popover__popper",
        children: (0, import_jsx_runtime130.jsx)(
          PopoverTransition,
          {
            ...motionProps,
            ...getPopoverProps(contentProps, ref),
            onAnimationComplete: callAll(
              onAnimationComplete,
              contentProps.onAnimationComplete
            ),
            className: cx("chakra-popover__content", props.className),
            __css: contentStyles
          }
        )
      }
    );
  }
);
PopoverContent.displayName = "PopoverContent";

// node_modules/@chakra-ui/popover/dist/chunk-R6BA5JLS.mjs
var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);
function PopoverFooter(props) {
  const styles2 = usePopoverStyles();
  return (0, import_jsx_runtime131.jsx)(
    chakra.footer,
    {
      ...props,
      className: cx("chakra-popover__footer", props.className),
      __css: styles2.footer
    }
  );
}
PopoverFooter.displayName = "PopoverFooter";

// node_modules/@chakra-ui/progress/dist/chunk-QQ2FLD7A.mjs
var CircularProgressLabel = chakra("div", {
  baseStyle: {
    fontSize: "0.24em",
    top: "50%",
    left: "50%",
    width: "100%",
    textAlign: "center",
    position: "absolute",
    transform: "translate(-50%, -50%)"
  }
});
CircularProgressLabel.displayName = "CircularProgressLabel";

// node_modules/@chakra-ui/progress/dist/chunk-7CG3L4JY.mjs
var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);
var Circle3 = (props) => (0, import_jsx_runtime132.jsx)(chakra.circle, { cx: 50, cy: 50, r: 42, fill: "transparent", ...props });
Circle3.displayName = "Circle";

// node_modules/@chakra-ui/progress/dist/chunk-TXZFUZNG.mjs
function valueToPercent3(value, min3, max3) {
  return (value - min3) * 100 / (max3 - min3);
}
var spin2 = keyframes({
  "0%": {
    strokeDasharray: "1, 400",
    strokeDashoffset: "0"
  },
  "50%": {
    strokeDasharray: "400, 400",
    strokeDashoffset: "-100"
  },
  "100%": {
    strokeDasharray: "400, 400",
    strokeDashoffset: "-260"
  }
});
var rotate = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var progress2 = keyframes({
  "0%": { left: "-40%" },
  "100%": { left: "100%" }
});
var stripe = keyframes({
  from: { backgroundPosition: "1rem 0" },
  to: { backgroundPosition: "0 0" }
});
function getProgressProps(options2) {
  const {
    value = 0,
    min: min3,
    max: max3,
    valueText,
    getValueText: getValueText2,
    isIndeterminate,
    role = "progressbar"
  } = options2;
  const percent3 = valueToPercent3(value, min3, max3);
  const getAriaValueText = () => {
    if (value == null)
      return void 0;
    return typeof getValueText2 === "function" ? getValueText2(value, percent3) : valueText;
  };
  return {
    bind: {
      "data-indeterminate": isIndeterminate ? "" : void 0,
      "aria-valuemax": max3,
      "aria-valuemin": min3,
      "aria-valuenow": isIndeterminate ? void 0 : value,
      "aria-valuetext": getAriaValueText(),
      role
    },
    percent: percent3,
    value
  };
}

// node_modules/@chakra-ui/progress/dist/chunk-EMKK5VRD.mjs
var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
var Shape = (props) => {
  const { size: size4, isIndeterminate, ...rest } = props;
  return (0, import_jsx_runtime133.jsx)(
    chakra.svg,
    {
      viewBox: "0 0 100 100",
      __css: {
        width: size4,
        height: size4,
        animation: isIndeterminate ? `${rotate} 2s linear infinite` : void 0
      },
      ...rest
    }
  );
};
Shape.displayName = "Shape";

// node_modules/@chakra-ui/progress/dist/chunk-Q6Q7I7E5.mjs
var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);
var CircularProgress = forwardRef3(
  (props, ref) => {
    var _a9;
    const {
      size: size4 = "48px",
      max: max3 = 100,
      min: min3 = 0,
      valueText,
      getValueText: getValueText2,
      value,
      capIsRound,
      children,
      thickness = "10px",
      color: color5 = "#0078d4",
      trackColor = "#edebe9",
      isIndeterminate,
      ...rest
    } = props;
    const progress4 = getProgressProps({
      min: min3,
      max: max3,
      value,
      valueText,
      getValueText: getValueText2,
      isIndeterminate
    });
    const determinant = isIndeterminate ? void 0 : ((_a9 = progress4.percent) != null ? _a9 : 0) * 2.64;
    const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;
    const indicatorProps = isIndeterminate ? {
      css: { animation: `${spin2} 1.5s linear infinite` }
    } : {
      strokeDashoffset: 66,
      strokeDasharray,
      transitionProperty: "stroke-dasharray, stroke",
      transitionDuration: "0.6s",
      transitionTimingFunction: "ease"
    };
    const rootStyles2 = {
      display: "inline-block",
      position: "relative",
      verticalAlign: "middle",
      fontSize: size4
    };
    return (0, import_jsx_runtime134.jsxs)(
      chakra.div,
      {
        ref,
        className: "chakra-progress",
        ...progress4.bind,
        ...rest,
        __css: rootStyles2,
        children: [
          (0, import_jsx_runtime134.jsxs)(Shape, { size: size4, isIndeterminate, children: [
            (0, import_jsx_runtime134.jsx)(
              Circle3,
              {
                stroke: trackColor,
                strokeWidth: thickness,
                className: "chakra-progress__track"
              }
            ),
            (0, import_jsx_runtime134.jsx)(
              Circle3,
              {
                stroke: color5,
                strokeWidth: thickness,
                className: "chakra-progress__indicator",
                strokeLinecap: capIsRound ? "round" : void 0,
                opacity: progress4.value === 0 && !isIndeterminate ? 0 : void 0,
                ...indicatorProps
              }
            )
          ] }),
          children
        ]
      }
    );
  }
);
CircularProgress.displayName = "CircularProgress";

// node_modules/@chakra-ui/progress/dist/chunk-BZDCPGYF.mjs
var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);
var [ProgressStylesProvider, useProgressStyles] = createContext2({
  name: `ProgressStylesContext`,
  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Progress />" `
});
var ProgressFilledTrack = forwardRef3(
  (props, ref) => {
    const { min: min3, max: max3, value, isIndeterminate, role, ...rest } = props;
    const progress22 = getProgressProps({
      value,
      min: min3,
      max: max3,
      isIndeterminate,
      role
    });
    const styles2 = useProgressStyles();
    const trackStyles = {
      height: "100%",
      ...styles2.filledTrack
    };
    return (0, import_jsx_runtime135.jsx)(
      chakra.div,
      {
        ref,
        style: { width: `${progress22.percent}%`, ...rest.style },
        ...progress22.bind,
        ...rest,
        __css: trackStyles
      }
    );
  }
);
var Progress = forwardRef3((props, ref) => {
  var _a9;
  const {
    value,
    min: min3 = 0,
    max: max3 = 100,
    hasStripe,
    isAnimated,
    children,
    borderRadius: propBorderRadius,
    isIndeterminate,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-valuetext": ariaValueText,
    title,
    role,
    ...rest
  } = omitThemingProps(props);
  const styles2 = useMultiStyleConfig("Progress", props);
  const borderRadius3 = propBorderRadius != null ? propBorderRadius : (_a9 = styles2.track) == null ? void 0 : _a9.borderRadius;
  const stripeAnimation = { animation: `${stripe} 1s linear infinite` };
  const shouldAddStripe = !isIndeterminate && hasStripe;
  const shouldAnimateStripe = shouldAddStripe && isAnimated;
  const css7 = {
    ...shouldAnimateStripe && stripeAnimation,
    ...isIndeterminate && {
      position: "absolute",
      willChange: "left",
      minWidth: "50%",
      animation: `${progress2} 1s ease infinite normal none running`
    }
  };
  const trackStyles = {
    overflow: "hidden",
    position: "relative",
    ...styles2.track
  };
  return (0, import_jsx_runtime135.jsx)(
    chakra.div,
    {
      ref,
      borderRadius: borderRadius3,
      __css: trackStyles,
      ...rest,
      children: (0, import_jsx_runtime135.jsxs)(ProgressStylesProvider, { value: styles2, children: [
        (0, import_jsx_runtime135.jsx)(
          ProgressFilledTrack,
          {
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            "aria-valuetext": ariaValueText,
            min: min3,
            max: max3,
            value,
            isIndeterminate,
            css: css7,
            borderRadius: borderRadius3,
            title,
            role
          }
        ),
        children
      ] })
    }
  );
});
Progress.displayName = "Progress";

// node_modules/@chakra-ui/progress/dist/chunk-TDPOTVYR.mjs
var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
var ProgressLabel = (props) => {
  const styles2 = useProgressStyles();
  const labelStyles = {
    top: "50%",
    left: "50%",
    width: "100%",
    textAlign: "center",
    position: "absolute",
    transform: "translate(-50%, -50%)",
    ...styles2.label
  };
  return (0, import_jsx_runtime136.jsx)(chakra.div, { ...props, __css: labelStyles });
};
ProgressLabel.displayName = "ProgressLabel";

// node_modules/@chakra-ui/radio/dist/chunk-Q56JAA3U.mjs
var import_react176 = __toESM(require_react(), 1);
function isInputEvent3(value) {
  return value && isObject(value) && isObject(value.target);
}
function useRadioGroup(props = {}) {
  const {
    onChange: onChangeProp,
    value: valueProp,
    defaultValue: defaultValue2,
    name: nameProp,
    isDisabled: isDisabled3,
    isFocusable: isFocusable4,
    isNative,
    ...htmlProps
  } = props;
  const [valueState, setValue] = (0, import_react176.useState)(defaultValue2 || "");
  const isControlled = typeof valueProp !== "undefined";
  const value = isControlled ? valueProp : valueState;
  const ref = (0, import_react176.useRef)(null);
  const focus2 = (0, import_react176.useCallback)(() => {
    const rootNode = ref.current;
    if (!rootNode)
      return;
    let query = `input:not(:disabled):checked`;
    const firstEnabledAndCheckedInput = rootNode.querySelector(
      query
    );
    if (firstEnabledAndCheckedInput) {
      firstEnabledAndCheckedInput.focus();
      return;
    }
    query = `input:not(:disabled)`;
    const firstEnabledInput = rootNode.querySelector(query);
    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();
  }, []);
  const uuid = (0, import_react176.useId)();
  const fallbackName = `radio-${uuid}`;
  const name = nameProp || fallbackName;
  const onChange2 = (0, import_react176.useCallback)(
    (eventOrValue) => {
      const nextValue = isInputEvent3(eventOrValue) ? eventOrValue.target.value : eventOrValue;
      if (!isControlled) {
        setValue(nextValue);
      }
      onChangeProp == null ? void 0 : onChangeProp(String(nextValue));
    },
    [onChangeProp, isControlled]
  );
  const getRootProps = (0, import_react176.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: mergeRefs2(forwardedRef, ref),
      role: "radiogroup"
    }),
    []
  );
  const getRadioProps = (0, import_react176.useCallback)(
    (props2 = {}, ref2 = null) => {
      const checkedKey = isNative ? "checked" : "isChecked";
      return {
        ...props2,
        ref: ref2,
        name,
        [checkedKey]: value != null ? props2.value === value : void 0,
        onChange(event) {
          onChange2(event);
        },
        "data-radiogroup": true
      };
    },
    [isNative, name, onChange2, value]
  );
  return {
    getRootProps,
    getRadioProps,
    name,
    ref,
    focus: focus2,
    setValue,
    value,
    onChange: onChange2,
    isDisabled: isDisabled3,
    isFocusable: isFocusable4,
    htmlProps
  };
}

// node_modules/@chakra-ui/radio/dist/chunk-FESYGSQT.mjs
var import_react177 = __toESM(require_react(), 1);
var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);
var [RadioGroupProvider, useRadioGroupContext] = createContext2({
  name: "RadioGroupContext",
  strict: false
});
var RadioGroup = forwardRef3((props, ref) => {
  const {
    colorScheme,
    size: size4,
    variant,
    children,
    className,
    isDisabled: isDisabled3,
    isFocusable: isFocusable4,
    ...rest
  } = props;
  const { value, onChange: onChange2, getRootProps, name, htmlProps } = useRadioGroup(rest);
  const group = (0, import_react177.useMemo)(
    () => ({
      name,
      size: size4,
      onChange: onChange2,
      colorScheme,
      value,
      variant,
      isDisabled: isDisabled3,
      isFocusable: isFocusable4
    }),
    [
      name,
      size4,
      onChange2,
      colorScheme,
      value,
      variant,
      isDisabled3,
      isFocusable4
    ]
  );
  return (0, import_jsx_runtime137.jsx)(RadioGroupProvider, { value: group, children: (0, import_jsx_runtime137.jsx)(
    chakra.div,
    {
      ...getRootProps(htmlProps, ref),
      className: cx("chakra-radio-group", className),
      children
    }
  ) });
});
RadioGroup.displayName = "RadioGroup";

// node_modules/@chakra-ui/radio/dist/chunk-2WQJ2JCV.mjs
var import_react178 = __toESM(require_react(), 1);
var visuallyHiddenStyle2 = {
  border: "0",
  clip: "rect(0, 0, 0, 0)",
  height: "1px",
  width: "1px",
  margin: "-1px",
  padding: "0",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
function useRadio(props = {}) {
  const {
    defaultChecked,
    isChecked: isCheckedProp,
    isFocusable: isFocusable4,
    isDisabled: isDisabledProp,
    isReadOnly: isReadOnlyProp,
    isRequired: isRequiredProp,
    onChange: onChange2,
    isInvalid: isInvalidProp,
    name,
    value,
    id: idProp,
    "data-radiogroup": dataRadioGroup,
    "aria-describedby": ariaDescribedBy,
    ...htmlProps
  } = props;
  const uuid = `radio-${(0, import_react178.useId)()}`;
  const formControl = useFormControlContext();
  const group = useRadioGroupContext();
  const isWithinRadioGroup = !!group || !!dataRadioGroup;
  const isWithinFormControl = !!formControl;
  let id3 = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;
  id3 = idProp != null ? idProp : id3;
  const isDisabled3 = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;
  const isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;
  const isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;
  const isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;
  const [isFocusVisible2, setIsFocusVisible] = (0, import_react178.useState)(false);
  const [isFocused, setFocused] = (0, import_react178.useState)(false);
  const [isHovered, setHovering] = (0, import_react178.useState)(false);
  const [isActive, setActive] = (0, import_react178.useState)(false);
  const [isCheckedState, setChecked] = (0, import_react178.useState)(Boolean(defaultChecked));
  const isControlled = typeof isCheckedProp !== "undefined";
  const isChecked = isControlled ? isCheckedProp : isCheckedState;
  (0, import_react178.useEffect)(() => {
    return trackFocusVisible(setIsFocusVisible);
  }, []);
  const handleChange = (0, import_react178.useCallback)(
    (event) => {
      if (isReadOnly || isDisabled3) {
        event.preventDefault();
        return;
      }
      if (!isControlled) {
        setChecked(event.target.checked);
      }
      onChange2 == null ? void 0 : onChange2(event);
    },
    [isControlled, isDisabled3, isReadOnly, onChange2]
  );
  const onKeyDown = (0, import_react178.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(true);
      }
    },
    [setActive]
  );
  const onKeyUp = (0, import_react178.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(false);
      }
    },
    [setActive]
  );
  const getRadioProps = (0, import_react178.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref,
      "data-active": dataAttr(isActive),
      "data-hover": dataAttr(isHovered),
      "data-disabled": dataAttr(isDisabled3),
      "data-invalid": dataAttr(isInvalid),
      "data-checked": dataAttr(isChecked),
      "data-focus": dataAttr(isFocused),
      "data-focus-visible": dataAttr(isFocused && isFocusVisible2),
      "data-readonly": dataAttr(isReadOnly),
      "aria-hidden": true,
      onMouseDown: callAllHandlers(props2.onMouseDown, () => setActive(true)),
      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),
      onMouseEnter: callAllHandlers(
        props2.onMouseEnter,
        () => setHovering(true)
      ),
      onMouseLeave: callAllHandlers(
        props2.onMouseLeave,
        () => setHovering(false)
      )
    }),
    [
      isActive,
      isHovered,
      isDisabled3,
      isInvalid,
      isChecked,
      isFocused,
      isReadOnly,
      isFocusVisible2
    ]
  );
  const { onFocus: onFocus4, onBlur: onBlur3 } = formControl != null ? formControl : {};
  const getInputProps = (0, import_react178.useCallback)(
    (props2 = {}, ref = null) => {
      const trulyDisabled = isDisabled3 && !isFocusable4;
      return {
        ...props2,
        id: id3,
        ref,
        type: "radio",
        name,
        value,
        onChange: callAllHandlers(props2.onChange, handleChange),
        onBlur: callAllHandlers(
          onBlur3,
          props2.onBlur,
          () => setFocused(false)
        ),
        onFocus: callAllHandlers(
          onFocus4,
          props2.onFocus,
          () => setFocused(true)
        ),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
        onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
        checked: isChecked,
        disabled: trulyDisabled,
        readOnly: isReadOnly,
        required: isRequired,
        "aria-invalid": ariaAttr(isInvalid),
        "aria-disabled": ariaAttr(trulyDisabled),
        "aria-required": ariaAttr(isRequired),
        "data-readonly": dataAttr(isReadOnly),
        "aria-describedby": ariaDescribedBy,
        style: visuallyHiddenStyle2
      };
    },
    [
      isDisabled3,
      isFocusable4,
      id3,
      name,
      value,
      handleChange,
      onBlur3,
      onFocus4,
      onKeyDown,
      onKeyUp,
      isChecked,
      isReadOnly,
      isRequired,
      isInvalid,
      ariaDescribedBy
    ]
  );
  const getLabelProps = (props2 = {}, ref = null) => ({
    ...props2,
    ref,
    onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent2),
    "data-disabled": dataAttr(isDisabled3),
    "data-checked": dataAttr(isChecked),
    "data-invalid": dataAttr(isInvalid)
  });
  const getRootProps = (props2, ref = null) => ({
    ...props2,
    ref,
    "data-disabled": dataAttr(isDisabled3),
    "data-checked": dataAttr(isChecked),
    "data-invalid": dataAttr(isInvalid)
  });
  const state2 = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isDisabled: isDisabled3,
    isReadOnly,
    isRequired
  };
  return {
    state: state2,
    /**
     * @deprecated - use `getRadioProps` instead
     */
    getCheckboxProps: getRadioProps,
    getRadioProps,
    getInputProps,
    getLabelProps,
    getRootProps,
    htmlProps
  };
}
function stopEvent2(event) {
  event.preventDefault();
  event.stopPropagation();
}

// node_modules/@chakra-ui/radio/dist/chunk-RDF2AYID.mjs
var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
function split3(object2, keys3) {
  const picked = {};
  const omitted2 = {};
  for (const [key2, value] of Object.entries(object2)) {
    if (keys3.includes(key2))
      picked[key2] = value;
    else
      omitted2[key2] = value;
  }
  return [picked, omitted2];
}
var Radio = forwardRef3((props, ref) => {
  var _a9;
  const group = useRadioGroupContext();
  const { onChange: onChangeProp, value: valueProp } = props;
  const styles2 = useMultiStyleConfig("Radio", { ...group, ...props });
  const ownProps = omitThemingProps(props);
  const {
    spacing: spacing4 = "0.5rem",
    children,
    isDisabled: isDisabled3 = group == null ? void 0 : group.isDisabled,
    isFocusable: isFocusable4 = group == null ? void 0 : group.isFocusable,
    inputProps: htmlInputProps,
    ...rest
  } = ownProps;
  let isChecked = props.isChecked;
  if ((group == null ? void 0 : group.value) != null && valueProp != null) {
    isChecked = group.value === valueProp;
  }
  let onChange2 = onChangeProp;
  if ((group == null ? void 0 : group.onChange) && valueProp != null) {
    onChange2 = callAll(group.onChange, onChangeProp);
  }
  const name = (_a9 = props == null ? void 0 : props.name) != null ? _a9 : group == null ? void 0 : group.name;
  const {
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps,
    htmlProps
  } = useRadio({
    ...rest,
    isChecked,
    isFocusable: isFocusable4,
    isDisabled: isDisabled3,
    onChange: onChange2,
    name
  });
  const [layoutProps, otherProps] = split3(htmlProps, layoutPropNames);
  const checkboxProps = getCheckboxProps(otherProps);
  const inputProps = getInputProps(htmlInputProps, ref);
  const labelProps = getLabelProps();
  const rootProps = Object.assign({}, layoutProps, getRootProps());
  const rootStyles2 = {
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    cursor: "pointer",
    position: "relative",
    ...styles2.container
  };
  const checkboxStyles = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    ...styles2.control
  };
  const labelStyles = {
    userSelect: "none",
    marginStart: spacing4,
    ...styles2.label
  };
  return (0, import_jsx_runtime138.jsxs)(chakra.label, { className: "chakra-radio", ...rootProps, __css: rootStyles2, children: [
    (0, import_jsx_runtime138.jsx)("input", { className: "chakra-radio__input", ...inputProps }),
    (0, import_jsx_runtime138.jsx)(
      chakra.span,
      {
        className: "chakra-radio__control",
        ...checkboxProps,
        __css: checkboxStyles
      }
    ),
    children && (0, import_jsx_runtime138.jsx)(
      chakra.span,
      {
        className: "chakra-radio__label",
        ...labelProps,
        __css: labelStyles,
        children
      }
    )
  ] });
});
Radio.displayName = "Radio";

// node_modules/@chakra-ui/select/dist/chunk-C6OUXMED.mjs
var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);
var SelectField = forwardRef3(
  function SelectField2(props, ref) {
    const { children, placeholder, className, ...rest } = props;
    return (0, import_jsx_runtime139.jsxs)(
      chakra.select,
      {
        ...rest,
        ref,
        className: cx("chakra-select", className),
        children: [
          placeholder && (0, import_jsx_runtime139.jsx)("option", { value: "", children: placeholder }),
          children
        ]
      }
    );
  }
);
SelectField.displayName = "SelectField";

// node_modules/@chakra-ui/select/dist/chunk-3RSXBRAN.mjs
var import_react179 = __toESM(require_react(), 1);
var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);
function split4(object2, keys3) {
  const picked = {};
  const omitted2 = {};
  for (const [key2, value] of Object.entries(object2)) {
    if (keys3.includes(key2))
      picked[key2] = value;
    else
      omitted2[key2] = value;
  }
  return [picked, omitted2];
}
var Select = forwardRef3((props, ref) => {
  var _a9;
  const styles2 = useMultiStyleConfig("Select", props);
  const {
    rootProps,
    placeholder,
    icon,
    color: color5,
    height,
    h,
    minH,
    minHeight,
    iconColor,
    iconSize,
    ...rest
  } = omitThemingProps(props);
  const [layoutProps, otherProps] = split4(rest, layoutPropNames);
  const ownProps = useFormControl(otherProps);
  const rootStyles2 = {
    width: "100%",
    height: "fit-content",
    position: "relative",
    color: color5
  };
  const fieldStyles = {
    paddingEnd: "2rem",
    ...styles2.field,
    _focus: {
      zIndex: "unset",
      ...(_a9 = styles2.field) == null ? void 0 : _a9["_focus"]
    }
  };
  return (0, import_jsx_runtime140.jsxs)(
    chakra.div,
    {
      className: "chakra-select__wrapper",
      __css: rootStyles2,
      ...layoutProps,
      ...rootProps,
      children: [
        (0, import_jsx_runtime140.jsx)(
          SelectField,
          {
            ref,
            height: h != null ? h : height,
            minH: minH != null ? minH : minHeight,
            placeholder,
            ...ownProps,
            __css: fieldStyles,
            children: props.children
          }
        ),
        (0, import_jsx_runtime140.jsx)(
          SelectIcon,
          {
            "data-disabled": dataAttr(ownProps.disabled),
            ...(iconColor || color5) && { color: iconColor || color5 },
            __css: styles2.icon,
            ...iconSize && { fontSize: iconSize },
            children: icon
          }
        )
      ]
    }
  );
});
Select.displayName = "Select";
var DefaultIcon = (props) => (0, import_jsx_runtime140.jsx)("svg", { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime140.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }
) });
var IconWrapper = chakra("div", {
  baseStyle: {
    position: "absolute",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    pointerEvents: "none",
    top: "50%",
    transform: "translateY(-50%)"
  }
});
var SelectIcon = (props) => {
  const { children = (0, import_jsx_runtime140.jsx)(DefaultIcon, {}), ...rest } = props;
  const clone = (0, import_react179.cloneElement)(children, {
    role: "presentation",
    className: "chakra-select__icon",
    focusable: false,
    "aria-hidden": true,
    // force icon to adhere to `IconWrapper` styles
    style: {
      width: "1em",
      height: "1em",
      color: "currentColor"
    }
  });
  return (0, import_jsx_runtime140.jsx)(IconWrapper, { ...rest, className: "chakra-select__icon-wrapper", children: (0, import_react179.isValidElement)(children) ? clone : null });
};
SelectIcon.displayName = "SelectIcon";

// node_modules/@chakra-ui/skeleton/dist/chunk-AASO4CLC.mjs
var import_react180 = __toESM(require_react(), 1);
function useIsFirstRender() {
  const isFirstRender = (0, import_react180.useRef)(true);
  (0, import_react180.useEffect)(() => {
    isFirstRender.current = false;
  }, []);
  return isFirstRender.current;
}

// node_modules/@chakra-ui/react-use-previous/dist/index.mjs
var import_react181 = __toESM(require_react(), 1);
function usePrevious2(value) {
  const ref = (0, import_react181.useRef)();
  (0, import_react181.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// node_modules/@chakra-ui/skeleton/dist/chunk-GOJLRND4.mjs
var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);
var StyledSkeleton = chakra("div", {
  baseStyle: {
    boxShadow: "none",
    backgroundClip: "padding-box",
    cursor: "default",
    color: "transparent",
    pointerEvents: "none",
    userSelect: "none",
    "&::before, &::after, *": {
      visibility: "hidden"
    }
  }
});
var $startColor2 = cssVar("skeleton-start-color");
var $endColor2 = cssVar("skeleton-end-color");
var fade = keyframes({
  from: { opacity: 0 },
  to: { opacity: 1 }
});
var bgFade = keyframes({
  from: {
    borderColor: $startColor2.reference,
    background: $startColor2.reference
  },
  to: {
    borderColor: $endColor2.reference,
    background: $endColor2.reference
  }
});
var Skeleton = forwardRef3((props, ref) => {
  const skeletonProps = {
    ...props,
    fadeDuration: typeof props.fadeDuration === "number" ? props.fadeDuration : 0.4,
    speed: typeof props.speed === "number" ? props.speed : 0.8
  };
  const styles2 = useStyleConfig("Skeleton", skeletonProps);
  const isFirstRender = useIsFirstRender();
  const {
    startColor = "",
    endColor = "",
    isLoaded,
    fadeDuration,
    speed,
    className,
    fitContent,
    ...rest
  } = omitThemingProps(skeletonProps);
  const [startColorVar, endColorVar] = useToken("colors", [
    startColor,
    endColor
  ]);
  const wasPreviouslyLoaded = usePrevious2(isLoaded);
  const _className = cx("chakra-skeleton", className);
  const cssVarStyles = {
    ...startColorVar && { [$startColor2.variable]: startColorVar },
    ...endColorVar && { [$endColor2.variable]: endColorVar }
  };
  if (isLoaded) {
    const animation = isFirstRender || wasPreviouslyLoaded ? "none" : `${fade} ${fadeDuration}s`;
    return (0, import_jsx_runtime141.jsx)(
      chakra.div,
      {
        ref,
        className: _className,
        __css: { animation },
        ...rest
      }
    );
  }
  return (0, import_jsx_runtime141.jsx)(
    StyledSkeleton,
    {
      ref,
      className: _className,
      ...rest,
      __css: {
        width: fitContent ? "fit-content" : void 0,
        ...styles2,
        ...cssVarStyles,
        _dark: { ...styles2["_dark"], ...cssVarStyles },
        animation: `${speed}s linear infinite alternate ${bgFade}`
      }
    }
  );
});
Skeleton.displayName = "Skeleton";

// node_modules/@chakra-ui/skeleton/dist/chunk-W7A7QDAK.mjs
var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);
var SkeletonCircle = ({
  size: size4 = "2rem",
  ...rest
}) => (0, import_jsx_runtime142.jsx)(Skeleton, { borderRadius: "full", boxSize: size4, ...rest });
SkeletonCircle.displayName = "SkeletonCircle";

// node_modules/@chakra-ui/skeleton/dist/chunk-IYS4KVU2.mjs
var import_jsx_runtime143 = __toESM(require_jsx_runtime(), 1);
function range(count) {
  return Array(count).fill(1).map((_, index5) => index5 + 1);
}
var defaultNoOfLines = 3;
var SkeletonText = (props) => {
  const {
    noOfLines = defaultNoOfLines,
    spacing: spacing4 = "0.5rem",
    skeletonHeight = "0.5rem",
    className,
    startColor,
    endColor,
    isLoaded,
    fadeDuration,
    speed,
    variant,
    size: size4,
    colorScheme,
    children,
    ...rest
  } = props;
  const noOfLinesValue = useBreakpointValue(
    typeof noOfLines === "number" ? [noOfLines] : noOfLines
  ) || defaultNoOfLines;
  const numbers = range(noOfLinesValue);
  const getWidth = (index5) => {
    if (noOfLinesValue > 1) {
      return index5 === numbers.length ? "80%" : "100%";
    }
    return "100%";
  };
  const _className = cx("chakra-skeleton__group", className);
  return (0, import_jsx_runtime143.jsx)(chakra.div, { className: _className, ...rest, children: numbers.map((number3, index5) => {
    if (isLoaded && index5 > 0) {
      return null;
    }
    const sizeProps = isLoaded ? null : {
      mb: number3 === numbers.length ? "0" : spacing4,
      width: getWidth(number3),
      height: skeletonHeight
    };
    return (0, import_jsx_runtime143.jsx)(
      Skeleton,
      {
        startColor,
        endColor,
        isLoaded,
        fadeDuration,
        speed,
        variant,
        size: size4,
        colorScheme,
        ...sizeProps,
        // allows animating the children
        children: index5 === 0 ? children : void 0
      },
      numbers.length.toString() + number3
    );
  }) });
};
SkeletonText.displayName = "SkeletonText";

// node_modules/@chakra-ui/skip-nav/dist/chunk-IZODFAGU.mjs
var import_jsx_runtime144 = __toESM(require_jsx_runtime(), 1);
var fallbackId = "chakra-skip-nav";
function getStyles2(styles2) {
  return {
    userSelect: "none",
    border: "0",
    height: "1px",
    width: "1px",
    margin: "-1px",
    padding: "0",
    outline: "0",
    overflow: "hidden",
    position: "absolute",
    clip: "rect(0 0 0 0)",
    ...styles2,
    _focus: {
      clip: "auto",
      width: "auto",
      height: "auto",
      ...styles2["_focus"]
    }
  };
}
var SkipNavLink = forwardRef3(
  function SkipNavLink2(props, ref) {
    const styles2 = useStyleConfig("SkipLink", props);
    const { id: id3 = fallbackId, ...rest } = omitThemingProps(props);
    return (0, import_jsx_runtime144.jsx)(chakra.a, { ...rest, ref, href: `#${id3}`, __css: getStyles2(styles2) });
  }
);
SkipNavLink.displayName = "SkipNavLink";
var SkipNavContent = forwardRef3(
  function SkipNavContent2(props, ref) {
    const { id: id3 = fallbackId, ...rest } = props;
    return (0, import_jsx_runtime144.jsx)(
      chakra.div,
      {
        ref,
        id: id3,
        tabIndex: -1,
        style: { outline: 0 },
        ...rest
      }
    );
  }
);
SkipNavContent.displayName = "SkipNavContent";

// node_modules/@chakra-ui/slider/dist/chunk-DX64QB22.mjs
var dataAttr3 = (condition) => condition ? "" : void 0;
var ariaAttr3 = (condition) => condition ? true : void 0;
var cx3 = (...classNames3) => classNames3.filter(Boolean).join(" ");
function callAllHandlers3(...fns) {
  return function func2(event) {
    fns.some((fn2) => {
      fn2 == null ? void 0 : fn2(event);
      return event == null ? void 0 : event.defaultPrevented;
    });
  };
}

// node_modules/@chakra-ui/slider/dist/chunk-E23N4XEN.mjs
function getIds(id3) {
  return {
    root: `slider-root-${id3}`,
    getThumb: (i2) => `slider-thumb-${id3}-${i2}`,
    getInput: (i2) => `slider-input-${id3}-${i2}`,
    track: `slider-track-${id3}`,
    innerTrack: `slider-filled-track-${id3}`,
    getMarker: (i2) => `slider-marker-${id3}-${i2}`,
    output: `slider-output-${id3}`
  };
}
function orient2(options2) {
  const { orientation, vertical, horizontal } = options2;
  return orientation === "vertical" ? vertical : horizontal;
}
var zeroSize = { width: 0, height: 0 };
var normalize3 = (a2) => a2 || zeroSize;
function getStyles3(options2) {
  const { orientation, thumbPercents, thumbRects, isReversed } = options2;
  const getThumbStyle = (i2) => {
    var _a9;
    const rect = (_a9 = thumbRects[i2]) != null ? _a9 : zeroSize;
    return {
      position: "absolute",
      userSelect: "none",
      WebkitUserSelect: "none",
      MozUserSelect: "none",
      msUserSelect: "none",
      touchAction: "none",
      ...orient2({
        orientation,
        vertical: {
          bottom: `calc(${thumbPercents[i2]}% - ${rect.height / 2}px)`
        },
        horizontal: {
          left: `calc(${thumbPercents[i2]}% - ${rect.width / 2}px)`
        }
      })
    };
  };
  const size4 = orientation === "vertical" ? thumbRects.reduce(
    (a2, b2) => normalize3(a2).height > normalize3(b2).height ? a2 : b2,
    zeroSize
  ) : thumbRects.reduce(
    (a2, b2) => normalize3(a2).width > normalize3(b2).width ? a2 : b2,
    zeroSize
  );
  const rootStyle = {
    position: "relative",
    touchAction: "none",
    WebkitTapHighlightColor: "rgba(0,0,0,0)",
    userSelect: "none",
    outline: 0,
    ...orient2({
      orientation,
      vertical: size4 ? {
        paddingLeft: size4.width / 2,
        paddingRight: size4.width / 2
      } : {},
      horizontal: size4 ? {
        paddingTop: size4.height / 2,
        paddingBottom: size4.height / 2
      } : {}
    })
  };
  const trackStyle = {
    position: "absolute",
    ...orient2({
      orientation,
      vertical: {
        left: "50%",
        transform: "translateX(-50%)",
        height: "100%"
      },
      horizontal: {
        top: "50%",
        transform: "translateY(-50%)",
        width: "100%"
      }
    })
  };
  const isSingleThumb = thumbPercents.length === 1;
  const fallback = [0, isReversed ? 100 - thumbPercents[0] : thumbPercents[0]];
  const range2 = isSingleThumb ? fallback : thumbPercents;
  let start2 = range2[0];
  if (!isSingleThumb && isReversed) {
    start2 = 100 - start2;
  }
  const percent3 = Math.abs(range2[range2.length - 1] - range2[0]);
  const innerTrackStyle = {
    ...trackStyle,
    ...orient2({
      orientation,
      vertical: isReversed ? { height: `${percent3}%`, top: `${start2}%` } : { height: `${percent3}%`, bottom: `${start2}%` },
      horizontal: isReversed ? { width: `${percent3}%`, right: `${start2}%` } : { width: `${percent3}%`, left: `${start2}%` }
    })
  };
  return { trackStyle, innerTrackStyle, rootStyle, getThumbStyle };
}
function getIsReversed(options2) {
  const { isReversed, direction: direction2, orientation } = options2;
  if (direction2 === "ltr" || orientation === "vertical") {
    return isReversed;
  }
  return !isReversed;
}

// node_modules/@chakra-ui/event-utils/dist/chunk-6K7SS4J6.mjs
function addDomEvent3(target, eventName, handler, options2) {
  target.addEventListener(eventName, handler, options2);
  return () => {
    target.removeEventListener(eventName, handler, options2);
  };
}

// node_modules/@chakra-ui/event-utils/dist/chunk-B7KYFEHM.mjs
function isMouseEvent2(event) {
  const win = getEventWindow3(event);
  if (typeof win.PointerEvent !== "undefined" && event instanceof win.PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof win.MouseEvent;
}
function isTouchEvent2(event) {
  const hasTouches = !!event.touches;
  return hasTouches;
}
function isMultiTouchEvent2(event) {
  return isTouchEvent2(event) && event.touches.length > 1;
}
function getEventWindow3(event) {
  var _a9;
  return (_a9 = event.view) != null ? _a9 : window;
}

// node_modules/@chakra-ui/event-utils/dist/chunk-6FBKF3LK.mjs
function pointFromTouch(e, type = "page") {
  const point = e.touches[0] || e.changedTouches[0];
  return { x: point[`${type}X`], y: point[`${type}Y`] };
}
function pointFromMouse(point, type = "page") {
  return {
    x: point[`${type}X`],
    y: point[`${type}Y`]
  };
}
function getEventPoint(event, type = "page") {
  return isTouchEvent2(event) ? pointFromTouch(event, type) : pointFromMouse(event, type);
}

// node_modules/@chakra-ui/event-utils/dist/chunk-KDLSVIYE.mjs
function filter3(cb2) {
  return (event) => {
    const isMouse = isMouseEvent2(event);
    if (!isMouse || isMouse && event.button === 0) {
      cb2(event);
    }
  };
}
function wrap4(cb2, filterPrimary = false) {
  function listener(event) {
    cb2(event, { point: getEventPoint(event) });
  }
  const fn2 = filterPrimary ? filter3(listener) : listener;
  return fn2;
}
function addPointerEvent3(target, type, cb2, options2) {
  return addDomEvent3(target, type, wrap4(cb2, type === "pointerdown"), options2);
}

// node_modules/@chakra-ui/react-use-pan-event/dist/chunk-Z2LY7B4S.mjs
var __defProp3 = Object.defineProperty;
var __defNormalProp3 = (obj, key2, value) => key2 in obj ? __defProp3(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __publicField4 = (obj, key2, value) => {
  __defNormalProp3(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);
  return value;
};
var PanEvent = class {
  constructor(event, handlers2, threshold) {
    __publicField4(this, "history", []);
    __publicField4(this, "startEvent", null);
    __publicField4(this, "lastEvent", null);
    __publicField4(this, "lastEventInfo", null);
    __publicField4(this, "handlers", {});
    __publicField4(this, "removeListeners", () => {
    });
    __publicField4(this, "threshold", 3);
    __publicField4(this, "win");
    __publicField4(this, "updatePoint", () => {
      if (!(this.lastEvent && this.lastEventInfo))
        return;
      const info2 = getPanInfo2(this.lastEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance3(info2.offset, { x: 0, y: 0 }) >= this.threshold;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { timestamp: timestamp2 } = getFrameData();
      this.history.push({ ...info2.point, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart == null ? void 0 : onStart(this.lastEvent, info2);
        this.startEvent = this.lastEvent;
      }
      onMove == null ? void 0 : onMove(this.lastEvent, info2);
    });
    __publicField4(this, "onPointerMove", (event2, info2) => {
      this.lastEvent = event2;
      this.lastEventInfo = info2;
      es_default.update(this.updatePoint, true);
    });
    __publicField4(this, "onPointerUp", (event2, info2) => {
      const panInfo = getPanInfo2(info2, this.history);
      const { onEnd, onSessionEnd } = this.handlers;
      onSessionEnd == null ? void 0 : onSessionEnd(event2, panInfo);
      this.end();
      if (!onEnd || !this.startEvent)
        return;
      onEnd == null ? void 0 : onEnd(event2, panInfo);
    });
    var _a9;
    this.win = (_a9 = event.view) != null ? _a9 : window;
    if (isMultiTouchEvent2(event))
      return;
    this.handlers = handlers2;
    if (threshold) {
      this.threshold = threshold;
    }
    event.stopPropagation();
    event.preventDefault();
    const info = { point: getEventPoint(event) };
    const { timestamp } = getFrameData();
    this.history = [{ ...info.point, timestamp }];
    const { onSessionStart } = handlers2;
    onSessionStart == null ? void 0 : onSessionStart(event, getPanInfo2(info, this.history));
    this.removeListeners = pipe5(
      addPointerEvent3(this.win, "pointermove", this.onPointerMove),
      addPointerEvent3(this.win, "pointerup", this.onPointerUp),
      addPointerEvent3(this.win, "pointercancel", this.onPointerUp)
    );
  }
  updateHandlers(handlers2) {
    this.handlers = handlers2;
  }
  end() {
    var _a9;
    (_a9 = this.removeListeners) == null ? void 0 : _a9.call(this);
    cancelSync.update(this.updatePoint);
  }
};
function subtract4(a2, b2) {
  return { x: a2.x - b2.x, y: a2.y - b2.y };
}
function getPanInfo2(info, history) {
  return {
    point: info.point,
    delta: subtract4(info.point, history[history.length - 1]),
    offset: subtract4(info.point, history[0]),
    velocity: getVelocity3(history, 0.1)
  };
}
var toMilliseconds = (v) => v * 1e3;
function getVelocity3(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i2 = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = history[history.length - 1];
  while (i2 >= 0) {
    timestampedPoint = history[i2];
    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {
      break;
    }
    i2--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time2 = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time2 === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time2,
    y: (lastPoint.y - timestampedPoint.y) / time2
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}
function pipe5(...fns) {
  return (v) => fns.reduce((a2, b2) => b2(a2), v);
}
function distance1D(a2, b2) {
  return Math.abs(a2 - b2);
}
function isPoint(point) {
  return "x" in point && "y" in point;
}
function distance3(a2, b2) {
  if (typeof a2 === "number" && typeof b2 === "number") {
    return distance1D(a2, b2);
  }
  if (isPoint(a2) && isPoint(b2)) {
    const xDelta = distance1D(a2.x, b2.x);
    const yDelta = distance1D(a2.y, b2.y);
    return Math.sqrt(xDelta ** 2 + yDelta ** 2);
  }
  return 0;
}

// node_modules/@chakra-ui/react-use-latest-ref/dist/index.mjs
var import_react182 = __toESM(require_react(), 1);
function useLatestRef2(value) {
  const ref = (0, import_react182.useRef)(null);
  ref.current = value;
  return ref;
}

// node_modules/@chakra-ui/react-use-pan-event/dist/chunk-AQIKOOGA.mjs
var import_react183 = __toESM(require_react(), 1);
function usePanEvent(ref, options2) {
  const {
    onPan,
    onPanStart,
    onPanEnd,
    onPanSessionStart,
    onPanSessionEnd,
    threshold
  } = options2;
  const hasPanEvents = Boolean(
    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd
  );
  const panSession = (0, import_react183.useRef)(null);
  const handlersRef = useLatestRef2({
    onSessionStart: onPanSessionStart,
    onSessionEnd: onPanSessionEnd,
    onStart: onPanStart,
    onMove: onPan,
    onEnd(event, info) {
      panSession.current = null;
      onPanEnd == null ? void 0 : onPanEnd(event, info);
    }
  });
  (0, import_react183.useEffect)(() => {
    var _a9;
    (_a9 = panSession.current) == null ? void 0 : _a9.updateHandlers(handlersRef.current);
  });
  (0, import_react183.useEffect)(() => {
    const node3 = ref.current;
    if (!node3 || !hasPanEvents)
      return;
    function onPointerDown(event) {
      panSession.current = new PanEvent(event, handlersRef.current, threshold);
    }
    return addPointerEvent3(node3, "pointerdown", onPointerDown);
  }, [ref, hasPanEvents, handlersRef, threshold]);
  (0, import_react183.useEffect)(() => {
    return () => {
      var _a9;
      (_a9 = panSession.current) == null ? void 0 : _a9.end();
      panSession.current = null;
    };
  }, []);
}

// node_modules/@chakra-ui/slider/dist/chunk-K3MZ7A5P.mjs
var import_react185 = __toESM(require_react(), 1);

// node_modules/@zag-js/element-size/dist/track-size.mjs
function trackElementSize(element, callback) {
  if (!element) {
    callback(void 0);
    return;
  }
  callback({ width: element.offsetWidth, height: element.offsetHeight });
  const win = element.ownerDocument.defaultView ?? window;
  const observer = new win.ResizeObserver((entries) => {
    if (!Array.isArray(entries) || !entries.length)
      return;
    const [entry] = entries;
    let width;
    let height;
    if ("borderBoxSize" in entry) {
      const borderSizeEntry = entry["borderBoxSize"];
      const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
      width = borderSize["inlineSize"];
      height = borderSize["blockSize"];
    } else {
      width = element.offsetWidth;
      height = element.offsetHeight;
    }
    callback({ width, height });
  });
  observer.observe(element, { box: "border-box" });
  return () => observer.unobserve(element);
}

// node_modules/@chakra-ui/react-use-size/dist/index.mjs
var import_react184 = __toESM(require_react(), 1);
var useSafeLayoutEffect4 = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react184.useLayoutEffect : import_react184.useEffect;
function trackMutation(el, cb2) {
  var _a9, _b5;
  if (!el || !el.parentElement)
    return;
  const win = (_b5 = (_a9 = el.ownerDocument) == null ? void 0 : _a9.defaultView) != null ? _b5 : window;
  const observer = new win.MutationObserver(() => {
    cb2();
  });
  observer.observe(el.parentElement, { childList: true });
  return () => {
    observer.disconnect();
  };
}
function useSizes({
  getNodes,
  observeMutation = true
}) {
  const [sizes24, setSizes] = (0, import_react184.useState)([]);
  const [count, setCount] = (0, import_react184.useState)(0);
  useSafeLayoutEffect4(() => {
    const elements = getNodes();
    const cleanups = elements.map(
      (element, index5) => trackElementSize(element, (size4) => {
        setSizes((sizes25) => {
          return [
            ...sizes25.slice(0, index5),
            size4,
            ...sizes25.slice(index5 + 1)
          ];
        });
      })
    );
    if (observeMutation) {
      const firstNode = elements[0];
      cleanups.push(
        trackMutation(firstNode, () => {
          setCount((count2) => count2 + 1);
        })
      );
    }
    return () => {
      cleanups.forEach((cleanup) => {
        cleanup == null ? void 0 : cleanup();
      });
    };
  }, [count]);
  return sizes24;
}
function isRef(ref) {
  return typeof ref === "object" && ref !== null && "current" in ref;
}
function useSize(subject) {
  const [size4] = useSizes({
    observeMutation: false,
    getNodes() {
      const node3 = isRef(subject) ? subject.current : subject;
      return [node3];
    }
  });
  return size4;
}

// node_modules/@chakra-ui/slider/dist/chunk-K3MZ7A5P.mjs
function useRangeSlider(props) {
  const {
    min: min3 = 0,
    max: max3 = 100,
    onChange: onChange2,
    value: valueProp,
    defaultValue: defaultValue2,
    isReversed: isReversedProp,
    direction: direction2 = "ltr",
    orientation = "horizontal",
    id: idProp,
    isDisabled: isDisabled3,
    isReadOnly,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    step = 1,
    getAriaValueText: getAriaValueTextProp,
    "aria-valuetext": ariaValueText,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    name,
    focusThumbOnChange = true,
    minStepsBetweenThumbs = 0,
    ...htmlProps
  } = props;
  const onChangeStart = useCallbackRef(onChangeStartProp);
  const onChangeEnd = useCallbackRef(onChangeEndProp);
  const getAriaValueText = useCallbackRef(getAriaValueTextProp);
  const isReversed = getIsReversed({
    isReversed: isReversedProp,
    direction: direction2,
    orientation
  });
  const [valueState, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue2 != null ? defaultValue2 : [25, 75],
    onChange: onChange2
  });
  if (!Array.isArray(valueState)) {
    throw new TypeError(
      `[range-slider] You passed an invalid value for \`value\` or \`defaultValue\`, expected \`Array\` but got \`${typeof valueState}\``
    );
  }
  const [isDragging, setDragging] = (0, import_react185.useState)(false);
  const [isFocused, setFocused] = (0, import_react185.useState)(false);
  const [activeIndex, setActiveIndex] = (0, import_react185.useState)(-1);
  const isInteractive = !(isDisabled3 || isReadOnly);
  const initialValue = (0, import_react185.useRef)(valueState);
  const value = valueState.map((val) => clampValue2(val, min3, max3));
  const spacing4 = minStepsBetweenThumbs * step;
  const valueBounds = getValueBounds(value, min3, max3, spacing4);
  const stateRef = (0, import_react185.useRef)({
    eventSource: null,
    value: [],
    valueBounds: []
  });
  stateRef.current.value = value;
  stateRef.current.valueBounds = valueBounds;
  const reversedValue = value.map((val) => max3 - val + min3);
  const thumbValues = isReversed ? reversedValue : value;
  const thumbPercents = thumbValues.map((val) => valueToPercent2(val, min3, max3));
  const isVertical = orientation === "vertical";
  const trackRef = (0, import_react185.useRef)(null);
  const rootRef = (0, import_react185.useRef)(null);
  const thumbRects = useSizes({
    getNodes() {
      const rootNode = rootRef.current;
      const thumbNodes = rootNode == null ? void 0 : rootNode.querySelectorAll("[role=slider]");
      return thumbNodes ? Array.from(thumbNodes) : [];
    }
  });
  const reactId = (0, import_react185.useId)();
  const uuid = idProp != null ? idProp : reactId;
  const ids2 = getIds(uuid);
  const getValueFromPointer = (0, import_react185.useCallback)(
    (event) => {
      var _a9, _b5;
      if (!trackRef.current)
        return;
      stateRef.current.eventSource = "pointer";
      const rect = trackRef.current.getBoundingClientRect();
      const { clientX, clientY } = (_b5 = (_a9 = event.touches) == null ? void 0 : _a9[0]) != null ? _b5 : event;
      const diff = isVertical ? rect.bottom - clientY : clientX - rect.left;
      const length3 = isVertical ? rect.height : rect.width;
      let percent3 = diff / length3;
      if (isReversed)
        percent3 = 1 - percent3;
      return percentToValue2(percent3, min3, max3);
    },
    [isVertical, isReversed, max3, min3]
  );
  const tenSteps = (max3 - min3) / 10;
  const oneStep = step || (max3 - min3) / 100;
  const actions = (0, import_react185.useMemo)(
    () => ({
      setValueAtIndex(index5, val) {
        if (!isInteractive)
          return;
        const bounds = stateRef.current.valueBounds[index5];
        val = parseFloat(roundValueToStep2(val, bounds.min, oneStep));
        val = clampValue2(val, bounds.min, bounds.max);
        const next2 = [...stateRef.current.value];
        next2[index5] = val;
        setValue(next2);
      },
      setActiveIndex,
      stepUp(index5, step2 = oneStep) {
        const valueAtIndex = stateRef.current.value[index5];
        const next2 = isReversed ? valueAtIndex - step2 : valueAtIndex + step2;
        actions.setValueAtIndex(index5, next2);
      },
      stepDown(index5, step2 = oneStep) {
        const valueAtIndex = stateRef.current.value[index5];
        const next2 = isReversed ? valueAtIndex + step2 : valueAtIndex - step2;
        actions.setValueAtIndex(index5, next2);
      },
      reset() {
        setValue(initialValue.current);
      }
    }),
    [oneStep, isReversed, setValue, isInteractive]
  );
  const onKeyDown = (0, import_react185.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        ArrowRight: () => actions.stepUp(activeIndex),
        ArrowUp: () => actions.stepUp(activeIndex),
        ArrowLeft: () => actions.stepDown(activeIndex),
        ArrowDown: () => actions.stepDown(activeIndex),
        PageUp: () => actions.stepUp(activeIndex, tenSteps),
        PageDown: () => actions.stepDown(activeIndex, tenSteps),
        Home: () => {
          const { min: value2 } = valueBounds[activeIndex];
          actions.setValueAtIndex(activeIndex, value2);
        },
        End: () => {
          const { max: value2 } = valueBounds[activeIndex];
          actions.setValueAtIndex(activeIndex, value2);
        }
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        event.stopPropagation();
        action(event);
        stateRef.current.eventSource = "keyboard";
      }
    },
    [actions, activeIndex, tenSteps, valueBounds]
  );
  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = (0, import_react185.useMemo)(
    () => getStyles3({
      isReversed,
      orientation,
      thumbRects,
      thumbPercents
    }),
    [isReversed, orientation, thumbPercents, thumbRects]
  );
  const focusThumb = (0, import_react185.useCallback)(
    (index5) => {
      var _a9;
      const idx = index5 != null ? index5 : activeIndex;
      if (idx !== -1 && focusThumbOnChange) {
        const id3 = ids2.getThumb(idx);
        const thumb = (_a9 = rootRef.current) == null ? void 0 : _a9.ownerDocument.getElementById(id3);
        if (thumb) {
          setTimeout(() => thumb.focus());
        }
      }
    },
    [focusThumbOnChange, activeIndex, ids2]
  );
  useUpdateEffect(() => {
    if (stateRef.current.eventSource === "keyboard") {
      onChangeEnd == null ? void 0 : onChangeEnd(stateRef.current.value);
    }
  }, [value, onChangeEnd]);
  const onPanSessionStart = (event) => {
    const pointValue = getValueFromPointer(event) || 0;
    const distances = stateRef.current.value.map(
      (val) => Math.abs(val - pointValue)
    );
    const closest2 = Math.min(...distances);
    let index5 = distances.indexOf(closest2);
    const thumbsAtPosition = distances.filter(
      (distance5) => distance5 === closest2
    );
    const isThumbStacked = thumbsAtPosition.length > 1;
    if (isThumbStacked && pointValue > stateRef.current.value[index5]) {
      index5 = index5 + thumbsAtPosition.length - 1;
    }
    setActiveIndex(index5);
    actions.setValueAtIndex(index5, pointValue);
    focusThumb(index5);
  };
  const onPan = (event) => {
    if (activeIndex == -1)
      return;
    const pointValue = getValueFromPointer(event) || 0;
    setActiveIndex(activeIndex);
    actions.setValueAtIndex(activeIndex, pointValue);
    focusThumb(activeIndex);
  };
  usePanEvent(rootRef, {
    onPanSessionStart(event) {
      if (!isInteractive)
        return;
      setDragging(true);
      onPanSessionStart(event);
      onChangeStart == null ? void 0 : onChangeStart(stateRef.current.value);
    },
    onPanSessionEnd() {
      if (!isInteractive)
        return;
      setDragging(false);
      onChangeEnd == null ? void 0 : onChangeEnd(stateRef.current.value);
    },
    onPan(event) {
      if (!isInteractive)
        return;
      onPan(event);
    }
  });
  const getRootProps = (0, import_react185.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ...htmlProps,
        id: ids2.root,
        ref: mergeRefs2(ref, rootRef),
        tabIndex: -1,
        "aria-disabled": ariaAttr3(isDisabled3),
        "data-focused": dataAttr3(isFocused),
        style: { ...props2.style, ...rootStyle }
      };
    },
    [htmlProps, isDisabled3, isFocused, rootStyle, ids2]
  );
  const getTrackProps = (0, import_react185.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref: mergeRefs2(ref, trackRef),
        id: ids2.track,
        "data-disabled": dataAttr3(isDisabled3),
        style: { ...props2.style, ...trackStyle }
      };
    },
    [isDisabled3, trackStyle, ids2]
  );
  const getInnerTrackProps = (0, import_react185.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref,
        id: ids2.innerTrack,
        style: {
          ...props2.style,
          ...innerTrackStyle
        }
      };
    },
    [innerTrackStyle, ids2]
  );
  const getThumbProps = (0, import_react185.useCallback)(
    (props2, ref = null) => {
      var _a9;
      const { index: index5, ...rest } = props2;
      const valueAtIndex = value[index5];
      if (valueAtIndex == null) {
        throw new TypeError(
          `[range-slider > thumb] Cannot find value at index \`${index5}\`. The \`value\` or \`defaultValue\` length is : ${value.length}`
        );
      }
      const bounds = valueBounds[index5];
      return {
        ...rest,
        ref,
        role: "slider",
        tabIndex: isInteractive ? 0 : void 0,
        id: ids2.getThumb(index5),
        "data-active": dataAttr3(isDragging && activeIndex === index5),
        "aria-valuetext": (_a9 = getAriaValueText == null ? void 0 : getAriaValueText(valueAtIndex)) != null ? _a9 : ariaValueText == null ? void 0 : ariaValueText[index5],
        "aria-valuemin": bounds.min,
        "aria-valuemax": bounds.max,
        "aria-valuenow": valueAtIndex,
        "aria-orientation": orientation,
        "aria-disabled": ariaAttr3(isDisabled3),
        "aria-readonly": ariaAttr3(isReadOnly),
        "aria-label": ariaLabel == null ? void 0 : ariaLabel[index5],
        "aria-labelledby": (ariaLabel == null ? void 0 : ariaLabel[index5]) ? void 0 : ariaLabelledBy == null ? void 0 : ariaLabelledBy[index5],
        style: { ...props2.style, ...getThumbStyle(index5) },
        onKeyDown: callAllHandlers3(props2.onKeyDown, onKeyDown),
        onFocus: callAllHandlers3(props2.onFocus, () => {
          setFocused(true);
          setActiveIndex(index5);
        }),
        onBlur: callAllHandlers3(props2.onBlur, () => {
          setFocused(false);
          setActiveIndex(-1);
        })
      };
    },
    [
      ids2,
      value,
      valueBounds,
      isInteractive,
      isDragging,
      activeIndex,
      getAriaValueText,
      ariaValueText,
      orientation,
      isDisabled3,
      isReadOnly,
      ariaLabel,
      ariaLabelledBy,
      getThumbStyle,
      onKeyDown,
      setFocused
    ]
  );
  const getOutputProps = (0, import_react185.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref,
        id: ids2.output,
        htmlFor: value.map((v, i2) => ids2.getThumb(i2)).join(" "),
        "aria-live": "off"
      };
    },
    [ids2, value]
  );
  const getMarkerProps = (0, import_react185.useCallback)(
    (props2, ref = null) => {
      const { value: v, ...rest } = props2;
      const isInRange = !(v < min3 || v > max3);
      const isHighlighted = v >= value[0] && v <= value[value.length - 1];
      let percent3 = valueToPercent2(v, min3, max3);
      percent3 = isReversed ? 100 - percent3 : percent3;
      const markerStyle = {
        position: "absolute",
        pointerEvents: "none",
        ...orient2({
          orientation,
          vertical: { bottom: `${percent3}%` },
          horizontal: { left: `${percent3}%` }
        })
      };
      return {
        ...rest,
        ref,
        id: ids2.getMarker(props2.value),
        role: "presentation",
        "aria-hidden": true,
        "data-disabled": dataAttr3(isDisabled3),
        "data-invalid": dataAttr3(!isInRange),
        "data-highlighted": dataAttr3(isHighlighted),
        style: {
          ...props2.style,
          ...markerStyle
        }
      };
    },
    [isDisabled3, isReversed, max3, min3, orientation, value, ids2]
  );
  const getInputProps = (0, import_react185.useCallback)(
    (props2, ref = null) => {
      const { index: index5, ...rest } = props2;
      return {
        ...rest,
        ref,
        id: ids2.getInput(index5),
        type: "hidden",
        value: value[index5],
        name: Array.isArray(name) ? name[index5] : `${name}-${index5}`
      };
    },
    [name, value, ids2]
  );
  const state2 = {
    value,
    isFocused,
    isDragging,
    getThumbPercent: (index5) => thumbPercents[index5],
    getThumbMinValue: (index5) => valueBounds[index5].min,
    getThumbMaxValue: (index5) => valueBounds[index5].max
  };
  return {
    state: state2,
    actions,
    getRootProps,
    getTrackProps,
    getInnerTrackProps,
    getThumbProps,
    getMarkerProps,
    getInputProps,
    getOutputProps
  };
}
function getValueBounds(arr, min3, max3, spacing4) {
  return arr.map((v, i2) => {
    const _min = i2 === 0 ? min3 : arr[i2 - 1] + spacing4;
    const _max = i2 === arr.length - 1 ? max3 : arr[i2 + 1] - spacing4;
    return { min: _min, max: _max };
  });
}

// node_modules/@chakra-ui/slider/dist/chunk-RD3HQFPG.mjs
var import_react186 = __toESM(require_react(), 1);
var import_jsx_runtime145 = __toESM(require_jsx_runtime(), 1);
var [RangeSliderProvider, useRangeSliderContext] = createContext2({
  name: "SliderContext",
  errorMessage: "useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />"
});
var [RangeSliderStylesProvider, useRangeSliderStyles] = createContext2({
  name: `RangeSliderStylesContext`,
  errorMessage: `useRangeSliderStyles returned is 'undefined'. Seems you forgot to wrap the components in "<RangeSlider />" `
});
var RangeSlider = forwardRef3(
  function RangeSlider2(props, ref) {
    const sliderProps = {
      orientation: "horizontal",
      ...props
    };
    const styles2 = useMultiStyleConfig("Slider", sliderProps);
    const ownProps = omitThemingProps(sliderProps);
    const { direction: direction2 } = useTheme2();
    ownProps.direction = direction2;
    const { getRootProps, ...context2 } = useRangeSlider(ownProps);
    const ctx = (0, import_react186.useMemo)(
      () => ({ ...context2, name: sliderProps.name }),
      [context2, sliderProps.name]
    );
    return (0, import_jsx_runtime145.jsx)(RangeSliderProvider, { value: ctx, children: (0, import_jsx_runtime145.jsx)(RangeSliderStylesProvider, { value: styles2, children: (0, import_jsx_runtime145.jsx)(
      chakra.div,
      {
        ...getRootProps({}, ref),
        className: "chakra-slider",
        __css: styles2.container,
        children: sliderProps.children
      }
    ) }) });
  }
);
RangeSlider.displayName = "RangeSlider";
var RangeSliderThumb = forwardRef3(
  function RangeSliderThumb2(props, ref) {
    const { getThumbProps, getInputProps, name } = useRangeSliderContext();
    const styles2 = useRangeSliderStyles();
    const thumbProps = getThumbProps(props, ref);
    return (0, import_jsx_runtime145.jsxs)(
      chakra.div,
      {
        ...thumbProps,
        className: cx3("chakra-slider__thumb", props.className),
        __css: styles2.thumb,
        children: [
          thumbProps.children,
          name && (0, import_jsx_runtime145.jsx)("input", { ...getInputProps({ index: props.index }) })
        ]
      }
    );
  }
);
RangeSliderThumb.displayName = "RangeSliderThumb";
var RangeSliderTrack = forwardRef3(
  function RangeSliderTrack2(props, ref) {
    const { getTrackProps } = useRangeSliderContext();
    const styles2 = useRangeSliderStyles();
    const trackProps = getTrackProps(props, ref);
    return (0, import_jsx_runtime145.jsx)(
      chakra.div,
      {
        ...trackProps,
        className: cx3("chakra-slider__track", props.className),
        __css: styles2.track,
        "data-testid": "chakra-range-slider-track"
      }
    );
  }
);
RangeSliderTrack.displayName = "RangeSliderTrack";
var RangeSliderFilledTrack = forwardRef3(function RangeSliderFilledTrack2(props, ref) {
  const { getInnerTrackProps } = useRangeSliderContext();
  const styles2 = useRangeSliderStyles();
  const trackProps = getInnerTrackProps(props, ref);
  return (0, import_jsx_runtime145.jsx)(
    chakra.div,
    {
      ...trackProps,
      className: "chakra-slider__filled-track",
      __css: styles2.filledTrack
    }
  );
});
RangeSliderFilledTrack.displayName = "RangeSliderFilledTrack";
var RangeSliderMark = forwardRef3(
  function RangeSliderMark2(props, ref) {
    const { getMarkerProps } = useRangeSliderContext();
    const styles2 = useRangeSliderStyles();
    const markProps = getMarkerProps(props, ref);
    return (0, import_jsx_runtime145.jsx)(
      chakra.div,
      {
        ...markProps,
        className: cx3("chakra-slider__marker", props.className),
        __css: styles2.mark
      }
    );
  }
);
RangeSliderMark.displayName = "RangeSliderMark";

// node_modules/@chakra-ui/slider/dist/chunk-45OCWRAV.mjs
var import_react187 = __toESM(require_react(), 1);
function useSlider(props) {
  var _a9;
  const {
    min: min3 = 0,
    max: max3 = 100,
    onChange: onChange2,
    value: valueProp,
    defaultValue: defaultValue2,
    isReversed: isReversedProp,
    direction: direction2 = "ltr",
    orientation = "horizontal",
    id: idProp,
    isDisabled: isDisabled3,
    isReadOnly,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    step = 1,
    getAriaValueText: getAriaValueTextProp,
    "aria-valuetext": ariaValueText,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    name,
    focusThumbOnChange = true,
    ...htmlProps
  } = props;
  const onChangeStart = useCallbackRef(onChangeStartProp);
  const onChangeEnd = useCallbackRef(onChangeEndProp);
  const getAriaValueText = useCallbackRef(getAriaValueTextProp);
  const isReversed = getIsReversed({
    isReversed: isReversedProp,
    direction: direction2,
    orientation
  });
  const [computedValue, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue2 != null ? defaultValue2 : getDefaultValue(min3, max3),
    onChange: onChange2
  });
  const [isDragging, setDragging] = (0, import_react187.useState)(false);
  const [isFocused, setFocused] = (0, import_react187.useState)(false);
  const isInteractive = !(isDisabled3 || isReadOnly);
  const tenSteps = (max3 - min3) / 10;
  const oneStep = step || (max3 - min3) / 100;
  const value = clampValue2(computedValue, min3, max3);
  const reversedValue = max3 - value + min3;
  const trackValue = isReversed ? reversedValue : value;
  const thumbPercent = valueToPercent2(trackValue, min3, max3);
  const isVertical = orientation === "vertical";
  const stateRef = useLatestRef2({
    min: min3,
    max: max3,
    step,
    isDisabled: isDisabled3,
    value,
    isInteractive,
    isReversed,
    isVertical,
    eventSource: null,
    focusThumbOnChange,
    orientation
  });
  const trackRef = (0, import_react187.useRef)(null);
  const thumbRef = (0, import_react187.useRef)(null);
  const rootRef = (0, import_react187.useRef)(null);
  const reactId = (0, import_react187.useId)();
  const uuid = idProp != null ? idProp : reactId;
  const [thumbId, trackId] = [`slider-thumb-${uuid}`, `slider-track-${uuid}`];
  const getValueFromPointer = (0, import_react187.useCallback)(
    (event) => {
      var _a24, _b5;
      if (!trackRef.current)
        return;
      const state22 = stateRef.current;
      state22.eventSource = "pointer";
      const trackRect = trackRef.current.getBoundingClientRect();
      const { clientX, clientY } = (_b5 = (_a24 = event.touches) == null ? void 0 : _a24[0]) != null ? _b5 : event;
      const diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;
      const length3 = isVertical ? trackRect.height : trackRect.width;
      let percent3 = diff / length3;
      if (isReversed) {
        percent3 = 1 - percent3;
      }
      let nextValue = percentToValue2(percent3, state22.min, state22.max);
      if (state22.step) {
        nextValue = parseFloat(
          roundValueToStep2(nextValue, state22.min, state22.step)
        );
      }
      nextValue = clampValue2(nextValue, state22.min, state22.max);
      return nextValue;
    },
    [isVertical, isReversed, stateRef]
  );
  const constrain = (0, import_react187.useCallback)(
    (value2) => {
      const state22 = stateRef.current;
      if (!state22.isInteractive)
        return;
      value2 = parseFloat(roundValueToStep2(value2, state22.min, oneStep));
      value2 = clampValue2(value2, state22.min, state22.max);
      setValue(value2);
    },
    [oneStep, setValue, stateRef]
  );
  const actions = (0, import_react187.useMemo)(
    () => ({
      stepUp(step2 = oneStep) {
        const next2 = isReversed ? value - step2 : value + step2;
        constrain(next2);
      },
      stepDown(step2 = oneStep) {
        const next2 = isReversed ? value + step2 : value - step2;
        constrain(next2);
      },
      reset() {
        constrain(defaultValue2 || 0);
      },
      stepTo(value2) {
        constrain(value2);
      }
    }),
    [constrain, isReversed, value, oneStep, defaultValue2]
  );
  const onKeyDown = (0, import_react187.useCallback)(
    (event) => {
      const state22 = stateRef.current;
      const keyMap = {
        ArrowRight: () => actions.stepUp(),
        ArrowUp: () => actions.stepUp(),
        ArrowLeft: () => actions.stepDown(),
        ArrowDown: () => actions.stepDown(),
        PageUp: () => actions.stepUp(tenSteps),
        PageDown: () => actions.stepDown(tenSteps),
        Home: () => constrain(state22.min),
        End: () => constrain(state22.max)
      };
      const action = keyMap[event.key];
      if (action) {
        event.preventDefault();
        event.stopPropagation();
        action(event);
        state22.eventSource = "keyboard";
      }
    },
    [actions, constrain, tenSteps, stateRef]
  );
  const valueText = (_a9 = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _a9 : ariaValueText;
  const thumbSize = useSize(thumbRef);
  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = (0, import_react187.useMemo)(() => {
    const state22 = stateRef.current;
    const thumbRect = thumbSize != null ? thumbSize : { width: 0, height: 0 };
    return getStyles3({
      isReversed,
      orientation: state22.orientation,
      thumbRects: [thumbRect],
      thumbPercents: [thumbPercent]
    });
  }, [isReversed, thumbSize, thumbPercent, stateRef]);
  const focusThumb = (0, import_react187.useCallback)(() => {
    const state22 = stateRef.current;
    if (state22.focusThumbOnChange) {
      setTimeout(() => {
        var _a24;
        return (_a24 = thumbRef.current) == null ? void 0 : _a24.focus();
      });
    }
  }, [stateRef]);
  useUpdateEffect(() => {
    const state22 = stateRef.current;
    focusThumb();
    if (state22.eventSource === "keyboard") {
      onChangeEnd == null ? void 0 : onChangeEnd(state22.value);
    }
  }, [value, onChangeEnd]);
  function setValueFromPointer(event) {
    const nextValue = getValueFromPointer(event);
    if (nextValue != null && nextValue !== stateRef.current.value) {
      setValue(nextValue);
    }
  }
  usePanEvent(rootRef, {
    onPanSessionStart(event) {
      const state22 = stateRef.current;
      if (!state22.isInteractive)
        return;
      setDragging(true);
      focusThumb();
      setValueFromPointer(event);
      onChangeStart == null ? void 0 : onChangeStart(state22.value);
    },
    onPanSessionEnd() {
      const state22 = stateRef.current;
      if (!state22.isInteractive)
        return;
      setDragging(false);
      onChangeEnd == null ? void 0 : onChangeEnd(state22.value);
    },
    onPan(event) {
      const state22 = stateRef.current;
      if (!state22.isInteractive)
        return;
      setValueFromPointer(event);
    }
  });
  const getRootProps = (0, import_react187.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ...htmlProps,
        ref: mergeRefs2(ref, rootRef),
        tabIndex: -1,
        "aria-disabled": ariaAttr3(isDisabled3),
        "data-focused": dataAttr3(isFocused),
        style: {
          ...props2.style,
          ...rootStyle
        }
      };
    },
    [htmlProps, isDisabled3, isFocused, rootStyle]
  );
  const getTrackProps = (0, import_react187.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref: mergeRefs2(ref, trackRef),
        id: trackId,
        "data-disabled": dataAttr3(isDisabled3),
        style: {
          ...props2.style,
          ...trackStyle
        }
      };
    },
    [isDisabled3, trackId, trackStyle]
  );
  const getInnerTrackProps = (0, import_react187.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref,
        style: {
          ...props2.style,
          ...innerTrackStyle
        }
      };
    },
    [innerTrackStyle]
  );
  const getThumbProps = (0, import_react187.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref: mergeRefs2(ref, thumbRef),
        role: "slider",
        tabIndex: isInteractive ? 0 : void 0,
        id: thumbId,
        "data-active": dataAttr3(isDragging),
        "aria-valuetext": valueText,
        "aria-valuemin": min3,
        "aria-valuemax": max3,
        "aria-valuenow": value,
        "aria-orientation": orientation,
        "aria-disabled": ariaAttr3(isDisabled3),
        "aria-readonly": ariaAttr3(isReadOnly),
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabel ? void 0 : ariaLabelledBy,
        style: {
          ...props2.style,
          ...getThumbStyle(0)
        },
        onKeyDown: callAllHandlers3(props2.onKeyDown, onKeyDown),
        onFocus: callAllHandlers3(props2.onFocus, () => setFocused(true)),
        onBlur: callAllHandlers3(props2.onBlur, () => setFocused(false))
      };
    },
    [
      isInteractive,
      thumbId,
      isDragging,
      valueText,
      min3,
      max3,
      value,
      orientation,
      isDisabled3,
      isReadOnly,
      ariaLabel,
      ariaLabelledBy,
      getThumbStyle,
      onKeyDown
    ]
  );
  const getMarkerProps = (0, import_react187.useCallback)(
    (props2, ref = null) => {
      const isInRange = !(props2.value < min3 || props2.value > max3);
      const isHighlighted = value >= props2.value;
      const markerPercent = valueToPercent2(props2.value, min3, max3);
      const markerStyle = {
        position: "absolute",
        pointerEvents: "none",
        ...orient3({
          orientation,
          vertical: {
            bottom: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`
          },
          horizontal: {
            left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`
          }
        })
      };
      return {
        ...props2,
        ref,
        role: "presentation",
        "aria-hidden": true,
        "data-disabled": dataAttr3(isDisabled3),
        "data-invalid": dataAttr3(!isInRange),
        "data-highlighted": dataAttr3(isHighlighted),
        style: {
          ...props2.style,
          ...markerStyle
        }
      };
    },
    [isDisabled3, isReversed, max3, min3, orientation, value]
  );
  const getInputProps = (0, import_react187.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref,
        type: "hidden",
        value,
        name
      };
    },
    [name, value]
  );
  const state2 = { value, isFocused, isDragging };
  return {
    state: state2,
    actions,
    getRootProps,
    getTrackProps,
    getInnerTrackProps,
    getThumbProps,
    getMarkerProps,
    getInputProps
  };
}
function orient3(options2) {
  const { orientation, vertical, horizontal } = options2;
  return orientation === "vertical" ? vertical : horizontal;
}
function getDefaultValue(min3, max3) {
  return max3 < min3 ? min3 : min3 + (max3 - min3) / 2;
}

// node_modules/@chakra-ui/slider/dist/chunk-6KSEUUNN.mjs
var import_jsx_runtime146 = __toESM(require_jsx_runtime(), 1);
var [SliderProvider, useSliderContext] = createContext2({
  name: "SliderContext",
  hookName: "useSliderContext",
  providerName: "<Slider />"
});
var [SliderStylesProvider, useSliderStyles] = createContext2({
  name: `SliderStylesContext`,
  hookName: `useSliderStyles`,
  providerName: "<Slider />"
});
var Slider = forwardRef3((props, ref) => {
  var _a9;
  const sliderProps = {
    ...props,
    orientation: (_a9 = props == null ? void 0 : props.orientation) != null ? _a9 : "horizontal"
  };
  const styles2 = useMultiStyleConfig("Slider", sliderProps);
  const ownProps = omitThemingProps(sliderProps);
  const { direction: direction2 } = useTheme2();
  ownProps.direction = direction2;
  const { getInputProps, getRootProps, ...context2 } = useSlider(ownProps);
  const rootProps = getRootProps();
  const inputProps = getInputProps({}, ref);
  return (0, import_jsx_runtime146.jsx)(SliderProvider, { value: context2, children: (0, import_jsx_runtime146.jsx)(SliderStylesProvider, { value: styles2, children: (0, import_jsx_runtime146.jsxs)(
    chakra.div,
    {
      ...rootProps,
      className: cx3("chakra-slider", sliderProps.className),
      __css: styles2.container,
      children: [
        sliderProps.children,
        (0, import_jsx_runtime146.jsx)("input", { ...inputProps })
      ]
    }
  ) }) });
});
Slider.displayName = "Slider";
var SliderThumb = forwardRef3((props, ref) => {
  const { getThumbProps } = useSliderContext();
  const styles2 = useSliderStyles();
  const thumbProps = getThumbProps(props, ref);
  return (0, import_jsx_runtime146.jsx)(
    chakra.div,
    {
      ...thumbProps,
      className: cx3("chakra-slider__thumb", props.className),
      __css: styles2.thumb
    }
  );
});
SliderThumb.displayName = "SliderThumb";
var SliderTrack = forwardRef3((props, ref) => {
  const { getTrackProps } = useSliderContext();
  const styles2 = useSliderStyles();
  const trackProps = getTrackProps(props, ref);
  return (0, import_jsx_runtime146.jsx)(
    chakra.div,
    {
      ...trackProps,
      className: cx3("chakra-slider__track", props.className),
      __css: styles2.track
    }
  );
});
SliderTrack.displayName = "SliderTrack";
var SliderFilledTrack = forwardRef3(
  (props, ref) => {
    const { getInnerTrackProps } = useSliderContext();
    const styles2 = useSliderStyles();
    const trackProps = getInnerTrackProps(props, ref);
    return (0, import_jsx_runtime146.jsx)(
      chakra.div,
      {
        ...trackProps,
        className: cx3("chakra-slider__filled-track", props.className),
        __css: styles2.filledTrack
      }
    );
  }
);
SliderFilledTrack.displayName = "SliderFilledTrack";
var SliderMark = forwardRef3((props, ref) => {
  const { getMarkerProps } = useSliderContext();
  const styles2 = useSliderStyles();
  const markProps = getMarkerProps(props, ref);
  return (0, import_jsx_runtime146.jsx)(
    chakra.div,
    {
      ...markProps,
      className: cx3("chakra-slider__marker", props.className),
      __css: styles2.mark
    }
  );
});
SliderMark.displayName = "SliderMark";

// node_modules/@chakra-ui/stat/dist/chunk-W64KV3Y7.mjs
var import_jsx_runtime147 = __toESM(require_jsx_runtime(), 1);
var [StatStylesProvider, useStatStyles] = createContext2({
  name: `StatStylesContext`,
  errorMessage: `useStatStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Stat />" `
});
var Stat = forwardRef3(function Stat2(props, ref) {
  const styles2 = useMultiStyleConfig("Stat", props);
  const statStyles = {
    position: "relative",
    flex: "1 1 0%",
    ...styles2.container
  };
  const { className, children, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime147.jsx)(StatStylesProvider, { value: styles2, children: (0, import_jsx_runtime147.jsx)(
    chakra.div,
    {
      ref,
      ...rest,
      className: cx("chakra-stat", className),
      __css: statStyles,
      children: (0, import_jsx_runtime147.jsx)("dl", { children })
    }
  ) });
});
Stat.displayName = "Stat";

// node_modules/@chakra-ui/stat/dist/chunk-ZKKHYQWO.mjs
var import_jsx_runtime148 = __toESM(require_jsx_runtime(), 1);
var StatDownArrow = (props) => (0, import_jsx_runtime148.jsx)(Icon, { color: "red.400", ...props, children: (0, import_jsx_runtime148.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
  }
) });
StatDownArrow.displayName = "StatDownArrow";
function StatUpArrow(props) {
  return (0, import_jsx_runtime148.jsx)(Icon, { color: "green.400", ...props, children: (0, import_jsx_runtime148.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
    }
  ) });
}
StatUpArrow.displayName = "StatUpArrow";
function StatArrow(props) {
  const { type, "aria-label": ariaLabel, ...rest } = props;
  const styles2 = useStatStyles();
  const BaseIcon = type === "increase" ? StatUpArrow : StatDownArrow;
  const defaultAriaLabel = type === "increase" ? "increased by" : "decreased by";
  const label = ariaLabel || defaultAriaLabel;
  return (0, import_jsx_runtime148.jsxs)(import_jsx_runtime148.Fragment, { children: [
    (0, import_jsx_runtime148.jsx)(chakra.span, { srOnly: true, children: label }),
    (0, import_jsx_runtime148.jsx)(BaseIcon, { "aria-hidden": true, ...rest, __css: styles2.icon })
  ] });
}
StatArrow.displayName = "StatArrow";

// node_modules/@chakra-ui/stat/dist/chunk-BSQ2CXML.mjs
var import_jsx_runtime149 = __toESM(require_jsx_runtime(), 1);
var StatGroup = forwardRef3(function StatGroup2(props, ref) {
  return (0, import_jsx_runtime149.jsx)(
    chakra.div,
    {
      ...props,
      ref,
      role: "group",
      className: cx("chakra-stat__group", props.className),
      __css: {
        display: "flex",
        flexWrap: "wrap",
        justifyContent: "space-around",
        alignItems: "flex-start"
      }
    }
  );
});
StatGroup.displayName = "StatGroup";

// node_modules/@chakra-ui/stat/dist/chunk-RMNGYPBK.mjs
var import_jsx_runtime150 = __toESM(require_jsx_runtime(), 1);
var StatHelpText = forwardRef3(
  function StatHelpText2(props, ref) {
    const styles2 = useStatStyles();
    return (0, import_jsx_runtime150.jsx)(
      chakra.dd,
      {
        ref,
        ...props,
        className: cx("chakra-stat__help-text", props.className),
        __css: styles2.helpText
      }
    );
  }
);
StatHelpText.displayName = "StatHelpText";

// node_modules/@chakra-ui/stat/dist/chunk-Z457NQVE.mjs
var import_jsx_runtime151 = __toESM(require_jsx_runtime(), 1);
var StatLabel = forwardRef3(function StatLabel2(props, ref) {
  const styles2 = useStatStyles();
  return (0, import_jsx_runtime151.jsx)(
    chakra.dt,
    {
      ref,
      ...props,
      className: cx("chakra-stat__label", props.className),
      __css: styles2.label
    }
  );
});
StatLabel.displayName = "StatLabel";

// node_modules/@chakra-ui/stat/dist/chunk-GF2QC326.mjs
var import_jsx_runtime152 = __toESM(require_jsx_runtime(), 1);
var StatNumber = forwardRef3(function StatNumber2(props, ref) {
  const styles2 = useStatStyles();
  return (0, import_jsx_runtime152.jsx)(
    chakra.dd,
    {
      ref,
      ...props,
      className: cx("chakra-stat__number", props.className),
      __css: {
        ...styles2.number,
        fontFeatureSettings: "pnum",
        fontVariantNumeric: "proportional-nums"
      }
    }
  );
});
StatNumber.displayName = "StatNumber";

// node_modules/@chakra-ui/stepper/dist/chunk-5JULEEQD.mjs
var [StepContextProvider, useStepContext] = createContext2(
  { name: "StepContext" }
);
var [StepperStylesProvider, useStepperStyles] = createStylesContext("Stepper");

// node_modules/@chakra-ui/stepper/dist/chunk-D2YOVTOT.mjs
var import_jsx_runtime153 = __toESM(require_jsx_runtime(), 1);
var StepTitle = forwardRef3(function StepTitle2(props, ref) {
  const { status } = useStepContext();
  const styles2 = useStepperStyles();
  return (0, import_jsx_runtime153.jsx)(
    chakra.h3,
    {
      ref,
      "data-status": status,
      ...props,
      __css: styles2.title,
      className: cx("chakra-step__title", props.className)
    }
  );
});

// node_modules/@chakra-ui/stepper/dist/chunk-V5KO42CT.mjs
var import_jsx_runtime154 = __toESM(require_jsx_runtime(), 1);
var Step = forwardRef3(function Step2(props, ref) {
  const { orientation, status, showLastSeparator } = useStepContext();
  const styles2 = useStepperStyles();
  return (0, import_jsx_runtime154.jsx)(
    chakra.div,
    {
      ref,
      "data-status": status,
      "data-orientation": orientation,
      "data-stretch": dataAttr(showLastSeparator),
      __css: styles2.step,
      ...props,
      className: cx("chakra-step", props.className)
    }
  );
});

// node_modules/@chakra-ui/stepper/dist/chunk-3CJ44H2L.mjs
var import_react188 = __toESM(require_react(), 1);
var import_jsx_runtime155 = __toESM(require_jsx_runtime(), 1);
var Stepper = forwardRef3(function Stepper2(props, ref) {
  const styles2 = useMultiStyleConfig("Stepper", props);
  const {
    children,
    index: index5,
    orientation = "horizontal",
    showLastSeparator = false,
    ...restProps
  } = omitThemingProps(props);
  const stepElements = import_react188.Children.toArray(children);
  const stepCount = stepElements.length;
  function getStatus(step) {
    if (step < index5)
      return "complete";
    if (step > index5)
      return "incomplete";
    return "active";
  }
  return (0, import_jsx_runtime155.jsx)(
    chakra.div,
    {
      ref,
      "aria-label": "Progress",
      "data-orientation": orientation,
      ...restProps,
      __css: styles2.stepper,
      className: cx("chakra-stepper", props.className),
      children: (0, import_jsx_runtime155.jsx)(StepperStylesProvider, { value: styles2, children: stepElements.map((child, index22) => (0, import_jsx_runtime155.jsx)(
        StepContextProvider,
        {
          value: {
            index: index22,
            status: getStatus(index22),
            orientation,
            showLastSeparator,
            count: stepCount,
            isFirst: index22 === 0,
            isLast: index22 === stepCount - 1
          },
          children: child
        },
        index22
      )) })
    }
  );
});

// node_modules/@chakra-ui/stepper/dist/chunk-YK2WH7TU.mjs
var import_react189 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/stepper/dist/chunk-TT4IEOBJ.mjs
var import_jsx_runtime156 = __toESM(require_jsx_runtime(), 1);
var StepDescription = forwardRef3(function StepDescription2(props, ref) {
  const { status } = useStepContext();
  const styles2 = useStepperStyles();
  return (0, import_jsx_runtime156.jsx)(
    chakra.p,
    {
      ref,
      "data-status": status,
      ...props,
      className: cx("chakra-step__description", props.className),
      __css: styles2.description
    }
  );
});

// node_modules/@chakra-ui/stepper/dist/chunk-ZVCNMXD3.mjs
var import_jsx_runtime157 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/stepper/dist/chunk-BHFVWI2H.mjs
var import_jsx_runtime158 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/stepper/dist/chunk-2EGA5JYM.mjs
var import_jsx_runtime159 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/stepper/dist/chunk-D3AI6OO6.mjs
var import_jsx_runtime160 = __toESM(require_jsx_runtime(), 1);
var StepNumber = forwardRef3(function StepNumber2(props, ref) {
  const { children, ...restProps } = props;
  const { status, index: index5 } = useStepContext();
  const styles2 = useStepperStyles();
  return (0, import_jsx_runtime160.jsx)(
    chakra.div,
    {
      ref,
      "data-status": status,
      __css: styles2.number,
      ...restProps,
      className: cx("chakra-step__number", props.className),
      children: children || index5 + 1
    }
  );
});

// node_modules/@chakra-ui/stepper/dist/chunk-4LPX3T3V.mjs
var import_jsx_runtime161 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/stepper/dist/chunk-ZAW7TYJD.mjs
var import_jsx_runtime162 = __toESM(require_jsx_runtime(), 1);
var StepSeparator = forwardRef3(function StepSeparator2(props, ref) {
  const { orientation, status, isLast, showLastSeparator } = useStepContext();
  const styles2 = useStepperStyles();
  if (isLast && !showLastSeparator)
    return null;
  return (0, import_jsx_runtime162.jsx)(
    chakra.div,
    {
      ref,
      role: "separator",
      "data-orientation": orientation,
      "data-status": status,
      __css: styles2.separator,
      ...props,
      className: cx("chakra-step__separator", props.className)
    }
  );
});

// node_modules/@chakra-ui/switch/dist/chunk-VTV6N5LE.mjs
var import_react190 = __toESM(require_react(), 1);
var import_jsx_runtime163 = __toESM(require_jsx_runtime(), 1);
var Switch = forwardRef3(function Switch2(props, ref) {
  const styles2 = useMultiStyleConfig("Switch", props);
  const { spacing: spacing4 = "0.5rem", children, ...ownProps } = omitThemingProps(props);
  const {
    getIndicatorProps,
    getInputProps,
    getCheckboxProps,
    getRootProps,
    getLabelProps
  } = useCheckbox(ownProps);
  const containerStyles = (0, import_react190.useMemo)(
    () => ({
      display: "inline-block",
      position: "relative",
      verticalAlign: "middle",
      lineHeight: 0,
      ...styles2.container
    }),
    [styles2.container]
  );
  const trackStyles = (0, import_react190.useMemo)(
    () => ({
      display: "inline-flex",
      flexShrink: 0,
      justifyContent: "flex-start",
      boxSizing: "content-box",
      cursor: "pointer",
      ...styles2.track
    }),
    [styles2.track]
  );
  const labelStyles = (0, import_react190.useMemo)(
    () => ({
      userSelect: "none",
      marginStart: spacing4,
      ...styles2.label
    }),
    [spacing4, styles2.label]
  );
  return (0, import_jsx_runtime163.jsxs)(
    chakra.label,
    {
      ...getRootProps(),
      className: cx("chakra-switch", props.className),
      __css: containerStyles,
      children: [
        (0, import_jsx_runtime163.jsx)("input", { className: "chakra-switch__input", ...getInputProps({}, ref) }),
        (0, import_jsx_runtime163.jsx)(
          chakra.span,
          {
            ...getCheckboxProps(),
            className: "chakra-switch__track",
            __css: trackStyles,
            children: (0, import_jsx_runtime163.jsx)(
              chakra.span,
              {
                __css: styles2.thumb,
                className: "chakra-switch__thumb",
                ...getIndicatorProps()
              }
            )
          }
        ),
        children && (0, import_jsx_runtime163.jsx)(
          chakra.span,
          {
            className: "chakra-switch__label",
            ...getLabelProps(),
            __css: labelStyles,
            children
          }
        )
      ]
    }
  );
});
Switch.displayName = "Switch";

// node_modules/@chakra-ui/table/dist/chunk-GEJVU65N.mjs
var import_jsx_runtime164 = __toESM(require_jsx_runtime(), 1);
var [TableStylesProvider, useTableStyles] = createContext2({
  name: `TableStylesContext`,
  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Table />" `
});
var Table = forwardRef3((props, ref) => {
  const styles2 = useMultiStyleConfig("Table", props);
  const { className, layout: layout3, ...tableProps } = omitThemingProps(props);
  return (0, import_jsx_runtime164.jsx)(TableStylesProvider, { value: styles2, children: (0, import_jsx_runtime164.jsx)(
    chakra.table,
    {
      ref,
      __css: { tableLayout: layout3, ...styles2.table },
      className: cx("chakra-table", className),
      ...tableProps
    }
  ) });
});
Table.displayName = "Table";

// node_modules/@chakra-ui/table/dist/chunk-DRZNIHMG.mjs
var import_jsx_runtime165 = __toESM(require_jsx_runtime(), 1);
var Thead = forwardRef3((props, ref) => {
  const styles2 = useTableStyles();
  return (0, import_jsx_runtime165.jsx)(chakra.thead, { ...props, ref, __css: styles2.thead });
});

// node_modules/@chakra-ui/table/dist/chunk-GIQFRSD6.mjs
var import_jsx_runtime166 = __toESM(require_jsx_runtime(), 1);
var Tr = forwardRef3((props, ref) => {
  const styles2 = useTableStyles();
  return (0, import_jsx_runtime166.jsx)(chakra.tr, { ...props, ref, __css: styles2.tr });
});

// node_modules/@chakra-ui/table/dist/chunk-V3K6UINC.mjs
var import_jsx_runtime167 = __toESM(require_jsx_runtime(), 1);
var TableCaption = forwardRef3(
  (props, ref) => {
    const { placement = "bottom", ...rest } = props;
    const styles2 = useTableStyles();
    return (0, import_jsx_runtime167.jsx)(
      chakra.caption,
      {
        ...rest,
        ref,
        __css: {
          ...styles2.caption,
          captionSide: placement
        }
      }
    );
  }
);
TableCaption.displayName = "TableCaption";

// node_modules/@chakra-ui/table/dist/chunk-OA6OURRG.mjs
var import_jsx_runtime168 = __toESM(require_jsx_runtime(), 1);
var TableContainer = forwardRef3(
  (props, ref) => {
    var _a9;
    const { overflow, overflowX, className, ...rest } = props;
    return (0, import_jsx_runtime168.jsx)(
      chakra.div,
      {
        ref,
        className: cx("chakra-table__container", className),
        ...rest,
        __css: {
          display: "block",
          whiteSpace: "nowrap",
          WebkitOverflowScrolling: "touch",
          overflowX: (_a9 = overflow != null ? overflow : overflowX) != null ? _a9 : "auto",
          overflowY: "hidden",
          maxWidth: "100%"
        }
      }
    );
  }
);

// node_modules/@chakra-ui/table/dist/chunk-J4QO5GAJ.mjs
var import_jsx_runtime169 = __toESM(require_jsx_runtime(), 1);
var Tbody = forwardRef3((props, ref) => {
  const styles2 = useTableStyles();
  return (0, import_jsx_runtime169.jsx)(chakra.tbody, { ...props, ref, __css: styles2.tbody });
});

// node_modules/@chakra-ui/table/dist/chunk-T2WCTPDH.mjs
var import_jsx_runtime170 = __toESM(require_jsx_runtime(), 1);
var Td = forwardRef3(
  ({ isNumeric: isNumeric3, ...rest }, ref) => {
    const styles2 = useTableStyles();
    return (0, import_jsx_runtime170.jsx)(
      chakra.td,
      {
        ...rest,
        ref,
        __css: styles2.td,
        "data-is-numeric": isNumeric3
      }
    );
  }
);

// node_modules/@chakra-ui/table/dist/chunk-B5H2YLEF.mjs
var import_jsx_runtime171 = __toESM(require_jsx_runtime(), 1);
var Tfoot = forwardRef3((props, ref) => {
  const styles2 = useTableStyles();
  return (0, import_jsx_runtime171.jsx)(chakra.tfoot, { ...props, ref, __css: styles2.tfoot });
});

// node_modules/@chakra-ui/table/dist/chunk-MGVPL3OH.mjs
var import_jsx_runtime172 = __toESM(require_jsx_runtime(), 1);
var Th = forwardRef3(
  ({ isNumeric: isNumeric3, ...rest }, ref) => {
    const styles2 = useTableStyles();
    return (0, import_jsx_runtime172.jsx)(
      chakra.th,
      {
        ...rest,
        ref,
        __css: styles2.th,
        "data-is-numeric": isNumeric3
      }
    );
  }
);

// node_modules/@chakra-ui/tabs/dist/chunk-NXSBASJ3.mjs
var import_react191 = __toESM(require_react(), 1);
var [
  TabsDescendantsProvider,
  useTabsDescendantsContext,
  useTabsDescendants,
  useTabsDescendant
] = createDescendantContext();
function useTabs(props) {
  var _a9;
  const {
    defaultIndex,
    onChange: onChange2,
    index: index5,
    isManual,
    isLazy,
    lazyBehavior = "unmount",
    orientation = "horizontal",
    direction: direction2 = "ltr",
    ...htmlProps
  } = props;
  const [focusedIndex, setFocusedIndex] = (0, import_react191.useState)(defaultIndex != null ? defaultIndex : 0);
  const [selectedIndex, setSelectedIndex] = useControllableState({
    defaultValue: defaultIndex != null ? defaultIndex : 0,
    value: index5,
    onChange: onChange2
  });
  (0, import_react191.useEffect)(() => {
    if (index5 != null) {
      setFocusedIndex(index5);
    }
  }, [index5]);
  const descendants = useTabsDescendants();
  const uuid = (0, import_react191.useId)();
  const uid = (_a9 = props.id) != null ? _a9 : uuid;
  const id3 = `tabs-${uid}`;
  return {
    id: id3,
    selectedIndex,
    focusedIndex,
    setSelectedIndex,
    setFocusedIndex,
    isManual,
    isLazy,
    lazyBehavior,
    orientation,
    descendants,
    direction: direction2,
    htmlProps
  };
}
var [TabsProvider, useTabsContext] = createContext2({
  name: "TabsContext",
  errorMessage: "useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />"
});
function useTabList(props) {
  const { focusedIndex, orientation, direction: direction2 } = useTabsContext();
  const descendants = useTabsDescendantsContext();
  const onKeyDown = (0, import_react191.useCallback)(
    (event) => {
      const nextTab = () => {
        var _a9;
        const next2 = descendants.nextEnabled(focusedIndex);
        if (next2)
          (_a9 = next2.node) == null ? void 0 : _a9.focus();
      };
      const prevTab = () => {
        var _a9;
        const prev2 = descendants.prevEnabled(focusedIndex);
        if (prev2)
          (_a9 = prev2.node) == null ? void 0 : _a9.focus();
      };
      const firstTab = () => {
        var _a9;
        const first = descendants.firstEnabled();
        if (first)
          (_a9 = first.node) == null ? void 0 : _a9.focus();
      };
      const lastTab = () => {
        var _a9;
        const last2 = descendants.lastEnabled();
        if (last2)
          (_a9 = last2.node) == null ? void 0 : _a9.focus();
      };
      const isHorizontal = orientation === "horizontal";
      const isVertical = orientation === "vertical";
      const eventKey = event.key;
      const ArrowStart = direction2 === "ltr" ? "ArrowLeft" : "ArrowRight";
      const ArrowEnd = direction2 === "ltr" ? "ArrowRight" : "ArrowLeft";
      const keyMap = {
        [ArrowStart]: () => isHorizontal && prevTab(),
        [ArrowEnd]: () => isHorizontal && nextTab(),
        ArrowDown: () => isVertical && nextTab(),
        ArrowUp: () => isVertical && prevTab(),
        Home: firstTab,
        End: lastTab
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [descendants, focusedIndex, orientation, direction2]
  );
  return {
    ...props,
    role: "tablist",
    "aria-orientation": orientation,
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  };
}
function useTab(props) {
  const { isDisabled: isDisabled3 = false, isFocusable: isFocusable4 = false, ...htmlProps } = props;
  const { setSelectedIndex, isManual, id: id3, setFocusedIndex, selectedIndex } = useTabsContext();
  const { index: index5, register } = useTabsDescendant({
    disabled: isDisabled3 && !isFocusable4
  });
  const isSelected = index5 === selectedIndex;
  const onClick = () => {
    setSelectedIndex(index5);
  };
  const onFocus4 = () => {
    setFocusedIndex(index5);
    const isDisabledButFocusable = isDisabled3 && isFocusable4;
    const shouldSelect = !isManual && !isDisabledButFocusable;
    if (shouldSelect) {
      setSelectedIndex(index5);
    }
  };
  const clickableProps = useClickable({
    ...htmlProps,
    ref: mergeRefs2(register, props.ref),
    isDisabled: isDisabled3,
    isFocusable: isFocusable4,
    onClick: callAllHandlers(props.onClick, onClick)
  });
  const type = "button";
  return {
    ...clickableProps,
    id: makeTabId(id3, index5),
    role: "tab",
    tabIndex: isSelected ? 0 : -1,
    type,
    "aria-selected": isSelected,
    "aria-controls": makeTabPanelId(id3, index5),
    onFocus: isDisabled3 ? void 0 : callAllHandlers(props.onFocus, onFocus4)
  };
}
var [TabPanelProvider, useTabPanelContext] = createContext2({});
function useTabPanels(props) {
  const context2 = useTabsContext();
  const { id: id3, selectedIndex } = context2;
  const validChildren = getValidChildren2(props.children);
  const children = validChildren.map(
    (child, index5) => (0, import_react191.createElement)(
      TabPanelProvider,
      {
        key: index5,
        value: {
          isSelected: index5 === selectedIndex,
          id: makeTabPanelId(id3, index5),
          tabId: makeTabId(id3, index5),
          selectedIndex
        }
      },
      child
    )
  );
  return { ...props, children };
}
function useTabPanel(props) {
  const { children, ...htmlProps } = props;
  const { isLazy, lazyBehavior } = useTabsContext();
  const { isSelected, id: id3, tabId } = useTabPanelContext();
  const hasBeenSelected = (0, import_react191.useRef)(false);
  if (isSelected) {
    hasBeenSelected.current = true;
  }
  const shouldRenderChildren = lazyDisclosure({
    wasSelected: hasBeenSelected.current,
    isSelected,
    enabled: isLazy,
    mode: lazyBehavior
  });
  return {
    // Puts the tabpanel in the page `Tab` sequence.
    tabIndex: 0,
    ...htmlProps,
    children: shouldRenderChildren ? children : null,
    role: "tabpanel",
    "aria-labelledby": tabId,
    hidden: !isSelected,
    id: id3
  };
}
function useTabIndicator() {
  const context2 = useTabsContext();
  const descendants = useTabsDescendantsContext();
  const { selectedIndex, orientation } = context2;
  const isHorizontal = orientation === "horizontal";
  const isVertical = orientation === "vertical";
  const [rect, setRect] = (0, import_react191.useState)(() => {
    if (isHorizontal)
      return { left: 0, width: 0 };
    if (isVertical)
      return { top: 0, height: 0 };
    return void 0;
  });
  const [hasMeasured, setHasMeasured] = (0, import_react191.useState)(false);
  useSafeLayoutEffect(() => {
    if (selectedIndex == null)
      return;
    const tab = descendants.item(selectedIndex);
    if (tab == null)
      return;
    if (isHorizontal) {
      setRect({ left: tab.node.offsetLeft, width: tab.node.offsetWidth });
    }
    if (isVertical) {
      setRect({ top: tab.node.offsetTop, height: tab.node.offsetHeight });
    }
    const id3 = requestAnimationFrame(() => {
      setHasMeasured(true);
    });
    return () => {
      if (id3) {
        cancelAnimationFrame(id3);
      }
    };
  }, [selectedIndex, isHorizontal, isVertical, descendants]);
  return {
    position: "absolute",
    transitionProperty: "left, right, top, bottom, height, width",
    transitionDuration: hasMeasured ? "200ms" : "0ms",
    transitionTimingFunction: "cubic-bezier(0, 0, 0.2, 1)",
    ...rect
  };
}
function makeTabId(id3, index5) {
  return `${id3}--tab-${index5}`;
}
function makeTabPanelId(id3, index5) {
  return `${id3}--tabpanel-${index5}`;
}

// node_modules/@chakra-ui/tabs/dist/chunk-GTRZJDIL.mjs
var import_react192 = __toESM(require_react(), 1);
var import_jsx_runtime173 = __toESM(require_jsx_runtime(), 1);
var [TabsStylesProvider, useTabsStyles] = createContext2({
  name: `TabsStylesContext`,
  errorMessage: `useTabsStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Tabs />" `
});
var Tabs = forwardRef3(function Tabs2(props, ref) {
  const styles2 = useMultiStyleConfig("Tabs", props);
  const { children, className, ...rest } = omitThemingProps(props);
  const { htmlProps, descendants, ...ctx } = useTabs(rest);
  const context2 = (0, import_react192.useMemo)(() => ctx, [ctx]);
  const { isFitted: _, ...rootProps } = htmlProps;
  const tabsStyles = {
    position: "relative",
    ...styles2.root
  };
  return (0, import_jsx_runtime173.jsx)(TabsDescendantsProvider, { value: descendants, children: (0, import_jsx_runtime173.jsx)(TabsProvider, { value: context2, children: (0, import_jsx_runtime173.jsx)(TabsStylesProvider, { value: styles2, children: (0, import_jsx_runtime173.jsx)(
    chakra.div,
    {
      className: cx("chakra-tabs", className),
      ref,
      ...rootProps,
      __css: tabsStyles,
      children
    }
  ) }) }) });
});
Tabs.displayName = "Tabs";

// node_modules/@chakra-ui/tabs/dist/chunk-XYXC6MAF.mjs
var import_jsx_runtime174 = __toESM(require_jsx_runtime(), 1);
var TabIndicator = forwardRef3(
  function TabIndicator2(props, ref) {
    const indicatorStyle = useTabIndicator();
    const style = {
      ...props.style,
      ...indicatorStyle
    };
    const styles2 = useTabsStyles();
    return (0, import_jsx_runtime174.jsx)(
      chakra.div,
      {
        ref,
        ...props,
        className: cx("chakra-tabs__tab-indicator", props.className),
        style,
        __css: styles2.indicator
      }
    );
  }
);
TabIndicator.displayName = "TabIndicator";

// node_modules/@chakra-ui/tabs/dist/chunk-BXDFYXZJ.mjs
var import_jsx_runtime175 = __toESM(require_jsx_runtime(), 1);
var TabList = forwardRef3(function TabList2(props, ref) {
  const tablistProps = useTabList({ ...props, ref });
  const styles2 = useTabsStyles();
  const tablistStyles = {
    display: "flex",
    ...styles2.tablist
  };
  return (0, import_jsx_runtime175.jsx)(
    chakra.div,
    {
      ...tablistProps,
      className: cx("chakra-tabs__tablist", props.className),
      __css: tablistStyles
    }
  );
});
TabList.displayName = "TabList";

// node_modules/@chakra-ui/tabs/dist/chunk-KGTDXOFZ.mjs
var import_jsx_runtime176 = __toESM(require_jsx_runtime(), 1);
var TabPanel = forwardRef3(function TabPanel2(props, ref) {
  const panelProps = useTabPanel({ ...props, ref });
  const styles2 = useTabsStyles();
  return (0, import_jsx_runtime176.jsx)(
    chakra.div,
    {
      outline: "0",
      ...panelProps,
      className: cx("chakra-tabs__tab-panel", props.className),
      __css: styles2.tabpanel
    }
  );
});
TabPanel.displayName = "TabPanel";

// node_modules/@chakra-ui/tabs/dist/chunk-4YMKQ5D4.mjs
var import_jsx_runtime177 = __toESM(require_jsx_runtime(), 1);
var TabPanels = forwardRef3(function TabPanels2(props, ref) {
  const panelsProps = useTabPanels(props);
  const styles2 = useTabsStyles();
  return (0, import_jsx_runtime177.jsx)(
    chakra.div,
    {
      ...panelsProps,
      width: "100%",
      ref,
      className: cx("chakra-tabs__tab-panels", props.className),
      __css: styles2.tabpanels
    }
  );
});
TabPanels.displayName = "TabPanels";

// node_modules/@chakra-ui/tabs/dist/chunk-IAXSQ4X2.mjs
var import_jsx_runtime178 = __toESM(require_jsx_runtime(), 1);
var Tab = forwardRef3(function Tab2(props, ref) {
  const styles2 = useTabsStyles();
  const tabProps = useTab({ ...props, ref });
  const tabStyles = {
    outline: "0",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    ...styles2.tab
  };
  return (0, import_jsx_runtime178.jsx)(
    chakra.button,
    {
      ...tabProps,
      className: cx("chakra-tabs__tab", props.className),
      __css: tabStyles
    }
  );
});
Tab.displayName = "Tab";

// node_modules/@chakra-ui/tag/dist/chunk-RPO2WXNL.mjs
var import_jsx_runtime179 = __toESM(require_jsx_runtime(), 1);
var [TagStylesProvider, useTagStyles] = createContext2({
  name: `TagStylesContext`,
  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Tag />" `
});
var Tag = forwardRef3((props, ref) => {
  const styles2 = useMultiStyleConfig("Tag", props);
  const ownProps = omitThemingProps(props);
  const containerStyles = {
    display: "inline-flex",
    verticalAlign: "top",
    alignItems: "center",
    maxWidth: "100%",
    ...styles2.container
  };
  return (0, import_jsx_runtime179.jsx)(TagStylesProvider, { value: styles2, children: (0, import_jsx_runtime179.jsx)(chakra.span, { ref, ...ownProps, __css: containerStyles }) });
});
Tag.displayName = "Tag";
var TagLabel = forwardRef3((props, ref) => {
  const styles2 = useTagStyles();
  return (0, import_jsx_runtime179.jsx)(chakra.span, { ref, noOfLines: 1, ...props, __css: styles2.label });
});
TagLabel.displayName = "TagLabel";
var TagLeftIcon = forwardRef3((props, ref) => (0, import_jsx_runtime179.jsx)(Icon, { ref, verticalAlign: "top", marginEnd: "0.5rem", ...props }));
TagLeftIcon.displayName = "TagLeftIcon";
var TagRightIcon = forwardRef3((props, ref) => (0, import_jsx_runtime179.jsx)(Icon, { ref, verticalAlign: "top", marginStart: "0.5rem", ...props }));
TagRightIcon.displayName = "TagRightIcon";
var TagCloseIcon = (props) => (0, import_jsx_runtime179.jsx)(Icon, { verticalAlign: "inherit", viewBox: "0 0 512 512", ...props, children: (0, import_jsx_runtime179.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"
  }
) });
TagCloseIcon.displayName = "TagCloseIcon";
var TagCloseButton = forwardRef3(
  (props, ref) => {
    const { isDisabled: isDisabled3, children, ...rest } = props;
    const styles2 = useTagStyles();
    const btnStyles = {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      outline: "0",
      ...styles2.closeButton
    };
    return (0, import_jsx_runtime179.jsx)(
      chakra.button,
      {
        ref,
        "aria-label": "close",
        ...rest,
        type: "button",
        disabled: isDisabled3,
        __css: btnStyles,
        children: children || (0, import_jsx_runtime179.jsx)(TagCloseIcon, {})
      }
    );
  }
);
TagCloseButton.displayName = "TagCloseButton";

// node_modules/@chakra-ui/textarea/dist/chunk-4IH3O7BJ.mjs
var import_jsx_runtime180 = __toESM(require_jsx_runtime(), 1);
function omit6(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key2 of keysToOmit) {
    if (key2 in clone) {
      delete clone[key2];
    }
  }
  return clone;
}
var omitted = ["h", "minH", "height", "minHeight"];
var Textarea = forwardRef3((props, ref) => {
  const styles2 = useStyleConfig("Textarea", props);
  const { className, rows, ...rest } = omitThemingProps(props);
  const textareaProps = useFormControl(rest);
  const textareaStyles = rows ? omit6(styles2, omitted) : styles2;
  return (0, import_jsx_runtime180.jsx)(
    chakra.textarea,
    {
      ref,
      rows,
      ...textareaProps,
      className: cx("chakra-textarea", className),
      __css: textareaStyles
    }
  );
});
Textarea.displayName = "Textarea";

// node_modules/@chakra-ui/tooltip/dist/chunk-XRZH7COS.mjs
var scale2 = {
  exit: {
    scale: 0.85,
    opacity: 0,
    transition: {
      opacity: { duration: 0.15, easings: "easeInOut" },
      scale: { duration: 0.2, easings: "easeInOut" }
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      opacity: { easings: "easeOut", duration: 0.2 },
      scale: { duration: 0.2, ease: [0.175, 0.885, 0.4, 1.1] }
    }
  }
};

// node_modules/@chakra-ui/tooltip/dist/chunk-P7BNLW77.mjs
var import_react193 = __toESM(require_react(), 1);
var getDoc = (ref) => {
  var _a9;
  return ((_a9 = ref.current) == null ? void 0 : _a9.ownerDocument) || document;
};
var getWin = (ref) => {
  var _a9, _b5;
  return ((_b5 = (_a9 = ref.current) == null ? void 0 : _a9.ownerDocument) == null ? void 0 : _b5.defaultView) || window;
};
function useTooltip(props = {}) {
  const {
    openDelay = 0,
    closeDelay = 0,
    closeOnClick = true,
    closeOnMouseDown,
    closeOnScroll,
    closeOnPointerDown = closeOnMouseDown,
    closeOnEsc = true,
    onOpen: onOpenProp,
    onClose: onCloseProp,
    placement,
    id: id3,
    isOpen: isOpenProp,
    defaultIsOpen,
    arrowSize = 10,
    arrowShadowColor,
    arrowPadding,
    modifiers,
    isDisabled: isDisabled3,
    gutter,
    offset: offset3,
    direction: direction2,
    ...htmlProps
  } = props;
  const { isOpen, onOpen, onClose } = useDisclosure2({
    isOpen: isOpenProp,
    defaultIsOpen,
    onOpen: onOpenProp,
    onClose: onCloseProp
  });
  const { referenceRef, getPopperProps, getArrowInnerProps, getArrowProps } = usePopper({
    enabled: isOpen,
    placement,
    arrowPadding,
    modifiers,
    gutter,
    offset: offset3,
    direction: direction2
  });
  const uuid = (0, import_react193.useId)();
  const uid = id3 != null ? id3 : uuid;
  const tooltipId = `tooltip-${uid}`;
  const ref = (0, import_react193.useRef)(null);
  const enterTimeout = (0, import_react193.useRef)();
  const clearEnterTimeout = (0, import_react193.useCallback)(() => {
    if (enterTimeout.current) {
      clearTimeout(enterTimeout.current);
      enterTimeout.current = void 0;
    }
  }, []);
  const exitTimeout = (0, import_react193.useRef)();
  const clearExitTimeout = (0, import_react193.useCallback)(() => {
    if (exitTimeout.current) {
      clearTimeout(exitTimeout.current);
      exitTimeout.current = void 0;
    }
  }, []);
  const closeNow = (0, import_react193.useCallback)(() => {
    clearExitTimeout();
    onClose();
  }, [onClose, clearExitTimeout]);
  const dispatchCloseEvent = useCloseEvent(ref, closeNow);
  const openWithDelay = (0, import_react193.useCallback)(() => {
    if (!isDisabled3 && !enterTimeout.current) {
      if (isOpen)
        dispatchCloseEvent();
      const win = getWin(ref);
      enterTimeout.current = win.setTimeout(onOpen, openDelay);
    }
  }, [dispatchCloseEvent, isDisabled3, isOpen, onOpen, openDelay]);
  const closeWithDelay = (0, import_react193.useCallback)(() => {
    clearEnterTimeout();
    const win = getWin(ref);
    exitTimeout.current = win.setTimeout(closeNow, closeDelay);
  }, [closeDelay, closeNow, clearEnterTimeout]);
  const onClick = (0, import_react193.useCallback)(() => {
    if (isOpen && closeOnClick) {
      closeWithDelay();
    }
  }, [closeOnClick, closeWithDelay, isOpen]);
  const onPointerDown = (0, import_react193.useCallback)(() => {
    if (isOpen && closeOnPointerDown) {
      closeWithDelay();
    }
  }, [closeOnPointerDown, closeWithDelay, isOpen]);
  const onKeyDown = (0, import_react193.useCallback)(
    (event) => {
      if (isOpen && event.key === "Escape") {
        closeWithDelay();
      }
    },
    [isOpen, closeWithDelay]
  );
  useEventListener(
    () => getDoc(ref),
    "keydown",
    closeOnEsc ? onKeyDown : void 0
  );
  useEventListener(
    () => {
      if (!closeOnScroll)
        return null;
      const node3 = ref.current;
      if (!node3)
        return null;
      const scrollParent = getScrollParent(node3);
      return scrollParent.localName === "body" ? getWin(ref) : scrollParent;
    },
    "scroll",
    () => {
      if (isOpen && closeOnScroll) {
        closeNow();
      }
    },
    { passive: true, capture: true }
  );
  (0, import_react193.useEffect)(() => {
    if (!isDisabled3)
      return;
    clearEnterTimeout();
    if (isOpen)
      onClose();
  }, [isDisabled3, isOpen, onClose, clearEnterTimeout]);
  (0, import_react193.useEffect)(() => {
    return () => {
      clearEnterTimeout();
      clearExitTimeout();
    };
  }, [clearEnterTimeout, clearExitTimeout]);
  useEventListener(() => ref.current, "pointerleave", closeWithDelay);
  const getTriggerProps = (0, import_react193.useCallback)(
    (props2 = {}, _ref4 = null) => {
      const triggerProps = {
        ...props2,
        ref: mergeRefs2(ref, _ref4, referenceRef),
        onPointerEnter: callAllHandlers(props2.onPointerEnter, (e) => {
          if (e.pointerType === "touch")
            return;
          openWithDelay();
        }),
        onClick: callAllHandlers(props2.onClick, onClick),
        onPointerDown: callAllHandlers(props2.onPointerDown, onPointerDown),
        onFocus: callAllHandlers(props2.onFocus, openWithDelay),
        onBlur: callAllHandlers(props2.onBlur, closeWithDelay),
        "aria-describedby": isOpen ? tooltipId : void 0
      };
      return triggerProps;
    },
    [
      openWithDelay,
      closeWithDelay,
      onPointerDown,
      isOpen,
      tooltipId,
      onClick,
      referenceRef
    ]
  );
  const getTooltipPositionerProps = (0, import_react193.useCallback)(
    (props2 = {}, forwardedRef = null) => getPopperProps(
      {
        ...props2,
        style: {
          ...props2.style,
          [cssVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,
          [cssVars.arrowShadowColor.var]: arrowShadowColor
        }
      },
      forwardedRef
    ),
    [getPopperProps, arrowSize, arrowShadowColor]
  );
  const getTooltipProps = (0, import_react193.useCallback)(
    (props2 = {}, ref2 = null) => {
      const styles2 = {
        ...props2.style,
        position: "relative",
        transformOrigin: cssVars.transformOrigin.varRef
      };
      return {
        ref: ref2,
        ...htmlProps,
        ...props2,
        id: tooltipId,
        role: "tooltip",
        style: styles2
      };
    },
    [htmlProps, tooltipId]
  );
  return {
    isOpen,
    show: openWithDelay,
    hide: closeWithDelay,
    getTriggerProps,
    getTooltipProps,
    getTooltipPositionerProps,
    getArrowProps,
    getArrowInnerProps
  };
}
var closeEventName = "chakra-ui:close-tooltip";
function useCloseEvent(ref, close) {
  (0, import_react193.useEffect)(() => {
    const doc = getDoc(ref);
    doc.addEventListener(closeEventName, close);
    return () => doc.removeEventListener(closeEventName, close);
  }, [close, ref]);
  return () => {
    const doc = getDoc(ref);
    const win = getWin(ref);
    doc.dispatchEvent(new win.CustomEvent(closeEventName));
  };
}

// node_modules/@chakra-ui/tooltip/dist/chunk-TK6VMDNP.mjs
var import_react194 = __toESM(require_react(), 1);
var import_jsx_runtime181 = __toESM(require_jsx_runtime(), 1);
function omit7(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key2 of keysToOmit) {
    if (key2 in clone) {
      delete clone[key2];
    }
  }
  return clone;
}
function pick4(object2, keysToPick) {
  const result = {};
  for (const key2 of keysToPick) {
    if (key2 in object2) {
      result[key2] = object2[key2];
    }
  }
  return result;
}
var MotionDiv3 = chakra(motion.div);
var Tooltip = forwardRef3((props, ref) => {
  var _a9, _b5;
  const styles2 = useStyleConfig("Tooltip", props);
  const ownProps = omitThemingProps(props);
  const theme3 = useTheme2();
  const {
    children,
    label,
    shouldWrapChildren,
    "aria-label": ariaLabel,
    hasArrow,
    bg,
    portalProps,
    background: background2,
    backgroundColor,
    bgColor,
    motionProps,
    ...rest
  } = ownProps;
  const userDefinedBg = (_b5 = (_a9 = background2 != null ? background2 : backgroundColor) != null ? _a9 : bg) != null ? _b5 : bgColor;
  if (userDefinedBg) {
    styles2.bg = userDefinedBg;
    const bgVar = getCSSVar(theme3, "colors", userDefinedBg);
    styles2[cssVars.arrowBg.var] = bgVar;
  }
  const tooltip = useTooltip({ ...rest, direction: theme3.direction });
  const shouldWrap = typeof children === "string" || shouldWrapChildren;
  let trigger2;
  if (shouldWrap) {
    trigger2 = (0, import_jsx_runtime181.jsx)(
      chakra.span,
      {
        display: "inline-block",
        tabIndex: 0,
        ...tooltip.getTriggerProps(),
        children
      }
    );
  } else {
    const child = import_react194.Children.only(children);
    trigger2 = (0, import_react194.cloneElement)(
      child,
      tooltip.getTriggerProps(child.props, child.ref)
    );
  }
  const hasAriaLabel = !!ariaLabel;
  const _tooltipProps = tooltip.getTooltipProps({}, ref);
  const tooltipProps = hasAriaLabel ? omit7(_tooltipProps, ["role", "id"]) : _tooltipProps;
  const srOnlyProps = pick4(_tooltipProps, ["role", "id"]);
  if (!label) {
    return (0, import_jsx_runtime181.jsx)(import_jsx_runtime181.Fragment, { children });
  }
  return (0, import_jsx_runtime181.jsxs)(import_jsx_runtime181.Fragment, { children: [
    trigger2,
    (0, import_jsx_runtime181.jsx)(AnimatePresence, { children: tooltip.isOpen && (0, import_jsx_runtime181.jsx)(Portal, { ...portalProps, children: (0, import_jsx_runtime181.jsx)(
      chakra.div,
      {
        ...tooltip.getTooltipPositionerProps(),
        __css: {
          zIndex: styles2.zIndex,
          pointerEvents: "none"
        },
        children: (0, import_jsx_runtime181.jsxs)(
          MotionDiv3,
          {
            variants: scale2,
            initial: "exit",
            animate: "enter",
            exit: "exit",
            ...motionProps,
            ...tooltipProps,
            __css: styles2,
            children: [
              label,
              hasAriaLabel && (0, import_jsx_runtime181.jsx)(chakra.span, { srOnly: true, ...srOnlyProps, children: ariaLabel }),
              hasArrow && (0, import_jsx_runtime181.jsx)(
                chakra.div,
                {
                  "data-popper-arrow": true,
                  className: "chakra-tooltip__arrow-wrapper",
                  children: (0, import_jsx_runtime181.jsx)(
                    chakra.div,
                    {
                      "data-popper-arrow-inner": true,
                      className: "chakra-tooltip__arrow",
                      __css: { bg: styles2.bg }
                    }
                  )
                }
              )
            ]
          }
        )
      }
    ) }) })
  ] });
});
Tooltip.displayName = "Tooltip";

// node_modules/@northlight/ui/dist/es/northlight.js
var import_react291 = __toESM(require_react());

// node_modules/chakra-react-select/dist/esm/select/select.js
var import_react210 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys(e, r3) {
  var t3 = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e);
    r3 && (o2 = o2.filter(function(r4) {
      return Object.getOwnPropertyDescriptor(e, r4).enumerable;
    })), t3.push.apply(t3, o2);
  }
  return t3;
}
function _objectSpread2(e) {
  for (var r3 = 1; r3 < arguments.length; r3++) {
    var t3 = null != arguments[r3] ? arguments[r3] : {};
    r3 % 2 ? ownKeys(Object(t3), true).forEach(function(r4) {
      _defineProperty(e, r4, t3[r4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t3)) : ownKeys(Object(t3)).forEach(function(r4) {
      Object.defineProperty(e, r4, Object.getOwnPropertyDescriptor(t3, r4));
    });
  }
  return e;
}

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(r3, l) {
  var t3 = null == r3 ? null : "undefined" != typeof Symbol && r3[Symbol.iterator] || r3["@@iterator"];
  if (null != t3) {
    var e, n3, i2, u, a2 = [], f = true, o2 = false;
    try {
      if (i2 = (t3 = t3.call(r3)).next, 0 === l) {
        if (Object(t3) !== t3)
          return;
        f = false;
      } else
        for (; !(f = (e = i2.call(t3)).done) && (a2.push(e.value), a2.length !== l); f = true)
          ;
    } catch (r4) {
      o2 = true, n3 = r4;
    } finally {
      try {
        if (!f && null != t3["return"] && (u = t3["return"](), Object(u) !== u))
          return;
      } finally {
        if (o2)
          throw n3;
      }
    }
    return a2;
  }
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n3 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n3 === "Object" && o2.constructor)
    n3 = o2.constructor.name;
  if (n3 === "Map" || n3 === "Set")
    return Array.from(o2);
  if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
    return _arrayLikeToArray(o2, minLen);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key2, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key2 = sourceSymbolKeys[i2];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key2))
        continue;
      target[key2] = source[key2];
    }
  }
  return target;
}

// node_modules/react-select/dist/useStateManager-7e1e8489.esm.js
var import_react195 = __toESM(require_react());
var _excluded = ["defaultInputValue", "defaultMenuIsOpen", "defaultValue", "inputValue", "menuIsOpen", "onChange", "onInputChange", "onMenuClose", "onMenuOpen", "value"];
function useStateManager(_ref4) {
  var _ref$defaultInputValu = _ref4.defaultInputValue, defaultInputValue = _ref$defaultInputValu === void 0 ? "" : _ref$defaultInputValu, _ref$defaultMenuIsOpe = _ref4.defaultMenuIsOpen, defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe, _ref$defaultValue = _ref4.defaultValue, defaultValue2 = _ref$defaultValue === void 0 ? null : _ref$defaultValue, propsInputValue = _ref4.inputValue, propsMenuIsOpen = _ref4.menuIsOpen, propsOnChange = _ref4.onChange, propsOnInputChange = _ref4.onInputChange, propsOnMenuClose = _ref4.onMenuClose, propsOnMenuOpen = _ref4.onMenuOpen, propsValue = _ref4.value, restSelectProps = _objectWithoutProperties(_ref4, _excluded);
  var _useState = (0, import_react195.useState)(propsInputValue !== void 0 ? propsInputValue : defaultInputValue), _useState2 = _slicedToArray(_useState, 2), stateInputValue = _useState2[0], setStateInputValue = _useState2[1];
  var _useState3 = (0, import_react195.useState)(propsMenuIsOpen !== void 0 ? propsMenuIsOpen : defaultMenuIsOpen), _useState4 = _slicedToArray(_useState3, 2), stateMenuIsOpen = _useState4[0], setStateMenuIsOpen = _useState4[1];
  var _useState5 = (0, import_react195.useState)(propsValue !== void 0 ? propsValue : defaultValue2), _useState6 = _slicedToArray(_useState5, 2), stateValue = _useState6[0], setStateValue = _useState6[1];
  var onChange2 = (0, import_react195.useCallback)(function(value2, actionMeta) {
    if (typeof propsOnChange === "function") {
      propsOnChange(value2, actionMeta);
    }
    setStateValue(value2);
  }, [propsOnChange]);
  var onInputChange = (0, import_react195.useCallback)(function(value2, actionMeta) {
    var newValue;
    if (typeof propsOnInputChange === "function") {
      newValue = propsOnInputChange(value2, actionMeta);
    }
    setStateInputValue(newValue !== void 0 ? newValue : value2);
  }, [propsOnInputChange]);
  var onMenuOpen = (0, import_react195.useCallback)(function() {
    if (typeof propsOnMenuOpen === "function") {
      propsOnMenuOpen();
    }
    setStateMenuIsOpen(true);
  }, [propsOnMenuOpen]);
  var onMenuClose = (0, import_react195.useCallback)(function() {
    if (typeof propsOnMenuClose === "function") {
      propsOnMenuClose();
    }
    setStateMenuIsOpen(false);
  }, [propsOnMenuClose]);
  var inputValue = propsInputValue !== void 0 ? propsInputValue : stateInputValue;
  var menuIsOpen = propsMenuIsOpen !== void 0 ? propsMenuIsOpen : stateMenuIsOpen;
  var value = propsValue !== void 0 ? propsValue : stateValue;
  return _objectSpread2(_objectSpread2({}, restSelectProps), {}, {
    inputValue,
    menuIsOpen,
    onChange: onChange2,
    onInputChange,
    onMenuClose,
    onMenuOpen,
    value
  });
}

// node_modules/react-select/dist/react-select.esm.js
var React35 = __toESM(require_react());
var import_react201 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  try {
    var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t4) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t3;
  })();
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

// node_modules/react-select/dist/Select-aecb2a80.esm.js
var React34 = __toESM(require_react());
var import_react199 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

// node_modules/react-select/dist/index-baa8dc4f.esm.js
var import_react198 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements3 = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min2 = Math.min;
var max2 = Math.max;
var round2 = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
function rectToClientRect2(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName2(node3) {
  if (isNode2(node3)) {
    return (node3.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow2(node3) {
  var _node$ownerDocument;
  return (node3 == null || (_node$ownerDocument = node3.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement2(node3) {
  var _ref4;
  return (_ref4 = (isNode2(node3) ? node3.ownerDocument : node3.document) || window.document) == null ? void 0 : _ref4.documentElement;
}
function isNode2(value) {
  return value instanceof Node || value instanceof getWindow2(value).Node;
}
function isElement6(value) {
  return value instanceof Element || value instanceof getWindow2(value).Element;
}
function isHTMLElement5(value) {
  return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;
}
function isShadowRoot2(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle4(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node3) {
  return ["html", "body", "#document"].includes(getNodeName2(node3));
}
function getComputedStyle4(element) {
  return getWindow2(element).getComputedStyle(element);
}
function getParentNode3(node3) {
  if (getNodeName2(node3) === "html") {
    return node3;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node3.assignedSlot || // DOM Element detected.
    node3.parentNode || // ShadowRoot detected.
    isShadowRoot2(node3) && node3.host || // Fallback.
    getDocumentElement2(node3)
  );
  return isShadowRoot2(result) ? result.host : result;
}
function getNearestOverflowAncestor(node3) {
  const parentNode = getParentNode3(node3);
  if (isLastTraversableNode(parentNode)) {
    return node3.ownerDocument ? node3.ownerDocument.body : node3.body;
  }
  if (isHTMLElement5(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node3, list2, traverseIframes) {
  var _node$ownerDocument2;
  if (list2 === void 0) {
    list2 = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node3);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node3.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow2(scrollableAncestor);
  if (isBody) {
    return list2.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list2.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css7 = getComputedStyle4(element);
  let width = parseFloat(css7.width) || 0;
  let height = parseFloat(css7.height) || 0;
  const hasOffset = isHTMLElement5(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round2(width) !== offsetWidth || round2(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement6(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement5(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round2(rect.width) : rect.width) / width;
  let y = ($ ? round2(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow2(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed2, floatingOffsetParent) {
  if (isFixed2 === void 0) {
    isFixed2 = false;
  }
  if (!floatingOffsetParent || isFixed2 && floatingOffsetParent !== getWindow2(element)) {
    return false;
  }
  return isFixed2;
}
function getBoundingClientRect2(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale4 = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement6(offsetParent)) {
        scale4 = getScale(offsetParent);
      }
    } else {
      scale4 = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale4.x;
  let y = (clientRect.top + visualOffsets.y) / scale4.y;
  let width = clientRect.width / scale4.x;
  let height = clientRect.height / scale4.y;
  if (domElement) {
    const win = getWindow2(domElement);
    const offsetWin = offsetParent && isElement6(offsetParent) ? getWindow2(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css7 = getComputedStyle4(currentIFrame);
      const left2 = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css7.paddingLeft)) * iframeScale.x;
      const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css7.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left2;
      y += top2;
      currentWin = getWindow2(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect2({
    width,
    height,
    x,
    y
  });
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement2(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left: left2,
      top: top2,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top2);
    const insetRight = floor(root.clientWidth - (left2 + width));
    const insetBottom = floor(root.clientHeight - (top2 + height));
    const insetLeft = floor(left2);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options2 = {
      rootMargin,
      threshold: max2(0, min2(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options2,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options2);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference2, floating, update, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options2;
  const referenceEl = unwrapElement(reference2);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref4) => {
      let [firstEntry] = _ref4;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect2(reference2) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect2(reference2);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}

// node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
var import_react196 = __toESM(require_react());
var index2 = import_react196.useLayoutEffect;
var use_isomorphic_layout_effect_browser_esm_default = index2;

// node_modules/react-select/dist/index-baa8dc4f.esm.js
var _excluded$4 = ["className", "clearValue", "cx", "getStyles", "getClassNames", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue", "theme"];
var noop4 = function noop5() {
};
function applyPrefixToName(prefix4, name) {
  if (!name) {
    return prefix4;
  } else if (name[0] === "-") {
    return prefix4 + name;
  } else {
    return prefix4 + "__" + name;
  }
}
function classNames2(prefix4, state2) {
  for (var _len = arguments.length, classNameList = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    classNameList[_key - 2] = arguments[_key];
  }
  var arr = [].concat(classNameList);
  if (state2 && prefix4) {
    for (var key2 in state2) {
      if (state2.hasOwnProperty(key2) && state2[key2]) {
        arr.push("".concat(applyPrefixToName(prefix4, key2)));
      }
    }
  }
  return arr.filter(function(i2) {
    return i2;
  }).map(function(i2) {
    return String(i2).trim();
  }).join(" ");
}
var cleanValue = function cleanValue2(value) {
  if (isArray2(value))
    return value.filter(Boolean);
  if (_typeof(value) === "object" && value !== null)
    return [value];
  return [];
};
var cleanCommonProps = function cleanCommonProps2(props) {
  props.className;
  props.clearValue;
  props.cx;
  props.getStyles;
  props.getClassNames;
  props.getValue;
  props.hasValue;
  props.isMulti;
  props.isRtl;
  props.options;
  props.selectOption;
  props.selectProps;
  props.setValue;
  props.theme;
  var innerProps = _objectWithoutProperties(props, _excluded$4);
  return _objectSpread2({}, innerProps);
};
var getStyleProps = function getStyleProps2(props, name, classNamesState) {
  var cx4 = props.cx, getStyles4 = props.getStyles, getClassNames = props.getClassNames, className = props.className;
  return {
    css: getStyles4(name, props),
    className: cx4(classNamesState !== null && classNamesState !== void 0 ? classNamesState : {}, getClassNames(name, props), className)
  };
};
function handleInputChange(inputValue, actionMeta, onInputChange) {
  if (onInputChange) {
    var _newValue = onInputChange(inputValue, actionMeta);
    if (typeof _newValue === "string")
      return _newValue;
  }
  return inputValue;
}
function isDocumentElement(el) {
  return [document.documentElement, document.body, window].indexOf(el) > -1;
}
function normalizedHeight(el) {
  if (isDocumentElement(el)) {
    return window.innerHeight;
  }
  return el.clientHeight;
}
function getScrollTop(el) {
  if (isDocumentElement(el)) {
    return window.pageYOffset;
  }
  return el.scrollTop;
}
function scrollTo(el, top2) {
  if (isDocumentElement(el)) {
    window.scrollTo(0, top2);
    return;
  }
  el.scrollTop = top2;
}
function getScrollParent3(element) {
  var style = getComputedStyle(element);
  var excludeStaticParent = style.position === "absolute";
  var overflowRx = /(auto|scroll)/;
  if (style.position === "fixed")
    return document.documentElement;
  for (var parent = element; parent = parent.parentElement; ) {
    style = getComputedStyle(parent);
    if (excludeStaticParent && style.position === "static") {
      continue;
    }
    if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
      return parent;
    }
  }
  return document.documentElement;
}
function easeOutCubic(t3, b2, c2, d) {
  return c2 * ((t3 = t3 / d - 1) * t3 * t3 + 1) + b2;
}
function animatedScrollTo(element, to) {
  var duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 200;
  var callback = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : noop4;
  var start2 = getScrollTop(element);
  var change = to - start2;
  var increment = 10;
  var currentTime = 0;
  function animateScroll() {
    currentTime += increment;
    var val = easeOutCubic(currentTime, start2, change, duration);
    scrollTo(element, val);
    if (currentTime < duration) {
      window.requestAnimationFrame(animateScroll);
    } else {
      callback(element);
    }
  }
  animateScroll();
}
function scrollIntoView(menuEl, focusedEl) {
  var menuRect = menuEl.getBoundingClientRect();
  var focusedRect = focusedEl.getBoundingClientRect();
  var overScroll = focusedEl.offsetHeight / 3;
  if (focusedRect.bottom + overScroll > menuRect.bottom) {
    scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
  } else if (focusedRect.top - overScroll < menuRect.top) {
    scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
  }
}
function getBoundingClientObj(element) {
  var rect = element.getBoundingClientRect();
  return {
    bottom: rect.bottom,
    height: rect.height,
    left: rect.left,
    right: rect.right,
    top: rect.top,
    width: rect.width
  };
}
function isTouchCapable() {
  try {
    document.createEvent("TouchEvent");
    return true;
  } catch (e) {
    return false;
  }
}
function isMobileDevice() {
  try {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  } catch (e) {
    return false;
  }
}
var passiveOptionAccessed = false;
var options = {
  get passive() {
    return passiveOptionAccessed = true;
  }
};
var w = typeof window !== "undefined" ? window : {};
if (w.addEventListener && w.removeEventListener) {
  w.addEventListener("p", noop4, options);
  w.removeEventListener("p", noop4, false);
}
var supportsPassiveEvents = passiveOptionAccessed;
function notNullish(item) {
  return item != null;
}
function isArray2(arg) {
  return Array.isArray(arg);
}
function valueTernary(isMulti, multiValue, singleValue) {
  return isMulti ? multiValue : singleValue;
}
function singleValueAsValue(singleValue) {
  return singleValue;
}
function multiValueAsValue(multiValue) {
  return multiValue;
}
var removeProps = function removeProps2(propsObj) {
  for (var _len2 = arguments.length, properties2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    properties2[_key2 - 1] = arguments[_key2];
  }
  var propsMap = Object.entries(propsObj).filter(function(_ref4) {
    var _ref23 = _slicedToArray(_ref4, 1), key2 = _ref23[0];
    return !properties2.includes(key2);
  });
  return propsMap.reduce(function(newProps, _ref32) {
    var _ref4 = _slicedToArray(_ref32, 2), key2 = _ref4[0], val = _ref4[1];
    newProps[key2] = val;
    return newProps;
  }, {});
};
var _excluded$3 = ["children", "innerProps"];
var _excluded2$1 = ["children", "innerProps"];
function getMenuPlacement(_ref4) {
  var preferredMaxHeight = _ref4.maxHeight, menuEl = _ref4.menuEl, minHeight = _ref4.minHeight, preferredPlacement = _ref4.placement, shouldScroll = _ref4.shouldScroll, isFixedPosition = _ref4.isFixedPosition, controlHeight2 = _ref4.controlHeight;
  var scrollParent = getScrollParent3(menuEl);
  var defaultState = {
    placement: "bottom",
    maxHeight: preferredMaxHeight
  };
  if (!menuEl || !menuEl.offsetParent)
    return defaultState;
  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(), scrollHeight = _scrollParent$getBoun.height;
  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(), menuBottom = _menuEl$getBoundingCl.bottom, menuHeight = _menuEl$getBoundingCl.height, menuTop = _menuEl$getBoundingCl.top;
  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(), containerTop = _menuEl$offsetParent$.top;
  var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);
  var scrollTop = getScrollTop(scrollParent);
  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
  var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
  var viewSpaceAbove = containerTop - marginTop;
  var viewSpaceBelow = viewHeight - menuTop;
  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
  var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;
  var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
  var scrollUp = scrollTop + menuTop - marginTop;
  var scrollDuration = 160;
  switch (preferredPlacement) {
    case "auto":
    case "bottom":
      if (viewSpaceBelow >= menuHeight) {
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }
        var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
        return {
          placement: "bottom",
          maxHeight: constrainedHeight
        };
      }
      if (preferredPlacement === "auto" || isFixedPosition) {
        var _constrainedHeight = preferredMaxHeight;
        var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
        if (spaceAbove >= minHeight) {
          _constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight2, preferredMaxHeight);
        }
        return {
          placement: "top",
          maxHeight: _constrainedHeight
        };
      }
      if (preferredPlacement === "bottom") {
        if (shouldScroll) {
          scrollTo(scrollParent, scrollDown);
        }
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      break;
    case "top":
      if (viewSpaceAbove >= menuHeight) {
        return {
          placement: "top",
          maxHeight: preferredMaxHeight
        };
      }
      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: "top",
          maxHeight: preferredMaxHeight
        };
      }
      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
        var _constrainedHeight2 = preferredMaxHeight;
        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
          _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
        }
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: "top",
          maxHeight: _constrainedHeight2
        };
      }
      return {
        placement: "bottom",
        maxHeight: preferredMaxHeight
      };
    default:
      throw new Error('Invalid placement provided "'.concat(preferredPlacement, '".'));
  }
  return defaultState;
}
function alignToControl(placement) {
  var placementToCSSProp = {
    bottom: "top",
    top: "bottom"
  };
  return placement ? placementToCSSProp[placement] : "bottom";
}
var coercePlacement = function coercePlacement2(p) {
  return p === "auto" ? "bottom" : p;
};
var menuCSS = function menuCSS2(_ref23, unstyled) {
  var _objectSpread22;
  var placement = _ref23.placement, _ref2$theme = _ref23.theme, borderRadius3 = _ref2$theme.borderRadius, spacing4 = _ref2$theme.spacing, colors3 = _ref2$theme.colors;
  return _objectSpread2((_objectSpread22 = {
    label: "menu"
  }, _defineProperty(_objectSpread22, alignToControl(placement), "100%"), _defineProperty(_objectSpread22, "position", "absolute"), _defineProperty(_objectSpread22, "width", "100%"), _defineProperty(_objectSpread22, "zIndex", 1), _objectSpread22), unstyled ? {} : {
    backgroundColor: colors3.neutral0,
    borderRadius: borderRadius3,
    boxShadow: "0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)",
    marginBottom: spacing4.menuGutter,
    marginTop: spacing4.menuGutter
  });
};
var PortalPlacementContext = (0, import_react198.createContext)(null);
var MenuPlacer = function MenuPlacer2(props) {
  var children = props.children, minMenuHeight = props.minMenuHeight, maxMenuHeight = props.maxMenuHeight, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition, menuShouldScrollIntoView = props.menuShouldScrollIntoView, theme3 = props.theme;
  var _ref32 = (0, import_react198.useContext)(PortalPlacementContext) || {}, setPortalPlacement = _ref32.setPortalPlacement;
  var ref = (0, import_react198.useRef)(null);
  var _useState = (0, import_react198.useState)(maxMenuHeight), _useState2 = _slicedToArray(_useState, 2), maxHeight = _useState2[0], setMaxHeight = _useState2[1];
  var _useState3 = (0, import_react198.useState)(null), _useState4 = _slicedToArray(_useState3, 2), placement = _useState4[0], setPlacement = _useState4[1];
  var controlHeight2 = theme3.spacing.controlHeight;
  use_isomorphic_layout_effect_browser_esm_default(function() {
    var menuEl = ref.current;
    if (!menuEl)
      return;
    var isFixedPosition = menuPosition === "fixed";
    var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
    var state2 = getMenuPlacement({
      maxHeight: maxMenuHeight,
      menuEl,
      minHeight: minMenuHeight,
      placement: menuPlacement,
      shouldScroll,
      isFixedPosition,
      controlHeight: controlHeight2
    });
    setMaxHeight(state2.maxHeight);
    setPlacement(state2.placement);
    setPortalPlacement === null || setPortalPlacement === void 0 ? void 0 : setPortalPlacement(state2.placement);
  }, [maxMenuHeight, menuPlacement, menuPosition, menuShouldScrollIntoView, minMenuHeight, setPortalPlacement, controlHeight2]);
  return children({
    ref,
    placerProps: _objectSpread2(_objectSpread2({}, props), {}, {
      placement: placement || coercePlacement(menuPlacement),
      maxHeight
    })
  });
};
var Menu2 = function Menu3(props) {
  var children = props.children, innerRef = props.innerRef, innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, "menu", {
    menu: true
  }), {
    ref: innerRef
  }, innerProps), children);
};
var Menu$1 = Menu2;
var menuListCSS = function menuListCSS2(_ref4, unstyled) {
  var maxHeight = _ref4.maxHeight, baseUnit2 = _ref4.theme.spacing.baseUnit;
  return _objectSpread2({
    maxHeight,
    overflowY: "auto",
    position: "relative",
    // required for offset[Height, Top] > keyboard scroll
    WebkitOverflowScrolling: "touch"
  }, unstyled ? {} : {
    paddingBottom: baseUnit2,
    paddingTop: baseUnit2
  });
};
var MenuList3 = function MenuList4(props) {
  var children = props.children, innerProps = props.innerProps, innerRef = props.innerRef, isMulti = props.isMulti;
  return jsx("div", _extends({}, getStyleProps(props, "menuList", {
    "menu-list": true,
    "menu-list--is-multi": isMulti
  }), {
    ref: innerRef
  }, innerProps), children);
};
var noticeCSS = function noticeCSS2(_ref5, unstyled) {
  var _ref5$theme = _ref5.theme, baseUnit2 = _ref5$theme.spacing.baseUnit, colors3 = _ref5$theme.colors;
  return _objectSpread2({
    textAlign: "center"
  }, unstyled ? {} : {
    color: colors3.neutral40,
    padding: "".concat(baseUnit2 * 2, "px ").concat(baseUnit2 * 3, "px")
  });
};
var noOptionsMessageCSS = noticeCSS;
var loadingMessageCSS = noticeCSS;
var NoOptionsMessage = function NoOptionsMessage2(_ref6) {
  var _ref6$children = _ref6.children, children = _ref6$children === void 0 ? "No options" : _ref6$children, innerProps = _ref6.innerProps, restProps = _objectWithoutProperties(_ref6, _excluded$3);
  return jsx("div", _extends({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    children,
    innerProps
  }), "noOptionsMessage", {
    "menu-notice": true,
    "menu-notice--no-options": true
  }), innerProps), children);
};
var LoadingMessage = function LoadingMessage2(_ref7) {
  var _ref7$children = _ref7.children, children = _ref7$children === void 0 ? "Loading..." : _ref7$children, innerProps = _ref7.innerProps, restProps = _objectWithoutProperties(_ref7, _excluded2$1);
  return jsx("div", _extends({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    children,
    innerProps
  }), "loadingMessage", {
    "menu-notice": true,
    "menu-notice--loading": true
  }), innerProps), children);
};
var menuPortalCSS = function menuPortalCSS2(_ref8) {
  var rect = _ref8.rect, offset3 = _ref8.offset, position3 = _ref8.position;
  return {
    left: rect.left,
    position: position3,
    top: offset3,
    width: rect.width,
    zIndex: 1
  };
};
var MenuPortal = function MenuPortal2(props) {
  var appendTo = props.appendTo, children = props.children, controlElement = props.controlElement, innerProps = props.innerProps, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition;
  var menuPortalRef = (0, import_react198.useRef)(null);
  var cleanupRef = (0, import_react198.useRef)(null);
  var _useState5 = (0, import_react198.useState)(coercePlacement(menuPlacement)), _useState6 = _slicedToArray(_useState5, 2), placement = _useState6[0], setPortalPlacement = _useState6[1];
  var portalPlacementContext = (0, import_react198.useMemo)(function() {
    return {
      setPortalPlacement
    };
  }, []);
  var _useState7 = (0, import_react198.useState)(null), _useState8 = _slicedToArray(_useState7, 2), computedPosition = _useState8[0], setComputedPosition = _useState8[1];
  var updateComputedPosition = (0, import_react198.useCallback)(function() {
    if (!controlElement)
      return;
    var rect = getBoundingClientObj(controlElement);
    var scrollDistance = menuPosition === "fixed" ? 0 : window.pageYOffset;
    var offset3 = rect[placement] + scrollDistance;
    if (offset3 !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {
      setComputedPosition({
        offset: offset3,
        rect
      });
    }
  }, [controlElement, menuPosition, placement, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width]);
  use_isomorphic_layout_effect_browser_esm_default(function() {
    updateComputedPosition();
  }, [updateComputedPosition]);
  var runAutoUpdate = (0, import_react198.useCallback)(function() {
    if (typeof cleanupRef.current === "function") {
      cleanupRef.current();
      cleanupRef.current = null;
    }
    if (controlElement && menuPortalRef.current) {
      cleanupRef.current = autoUpdate(controlElement, menuPortalRef.current, updateComputedPosition, {
        elementResize: "ResizeObserver" in window
      });
    }
  }, [controlElement, updateComputedPosition]);
  use_isomorphic_layout_effect_browser_esm_default(function() {
    runAutoUpdate();
  }, [runAutoUpdate]);
  var setMenuPortalElement = (0, import_react198.useCallback)(function(menuPortalElement) {
    menuPortalRef.current = menuPortalElement;
    runAutoUpdate();
  }, [runAutoUpdate]);
  if (!appendTo && menuPosition !== "fixed" || !computedPosition)
    return null;
  var menuWrapper = jsx("div", _extends({
    ref: setMenuPortalElement
  }, getStyleProps(_objectSpread2(_objectSpread2({}, props), {}, {
    offset: computedPosition.offset,
    position: menuPosition,
    rect: computedPosition.rect
  }), "menuPortal", {
    "menu-portal": true
  }), innerProps), children);
  return jsx(PortalPlacementContext.Provider, {
    value: portalPlacementContext
  }, appendTo ? (0, import_react_dom2.createPortal)(menuWrapper, appendTo) : menuWrapper);
};
var containerCSS = function containerCSS2(_ref4) {
  var isDisabled3 = _ref4.isDisabled, isRtl = _ref4.isRtl;
  return {
    label: "container",
    direction: isRtl ? "rtl" : void 0,
    pointerEvents: isDisabled3 ? "none" : void 0,
    // cancel mouse events when disabled
    position: "relative"
  };
};
var SelectContainer = function SelectContainer2(props) {
  var children = props.children, innerProps = props.innerProps, isDisabled3 = props.isDisabled, isRtl = props.isRtl;
  return jsx("div", _extends({}, getStyleProps(props, "container", {
    "--is-disabled": isDisabled3,
    "--is-rtl": isRtl
  }), innerProps), children);
};
var valueContainerCSS = function valueContainerCSS2(_ref23, unstyled) {
  var spacing4 = _ref23.theme.spacing, isMulti = _ref23.isMulti, hasValue = _ref23.hasValue, controlShouldRenderValue = _ref23.selectProps.controlShouldRenderValue;
  return _objectSpread2({
    alignItems: "center",
    display: isMulti && hasValue && controlShouldRenderValue ? "flex" : "grid",
    flex: 1,
    flexWrap: "wrap",
    WebkitOverflowScrolling: "touch",
    position: "relative",
    overflow: "hidden"
  }, unstyled ? {} : {
    padding: "".concat(spacing4.baseUnit / 2, "px ").concat(spacing4.baseUnit * 2, "px")
  });
};
var ValueContainer = function ValueContainer2(props) {
  var children = props.children, innerProps = props.innerProps, isMulti = props.isMulti, hasValue = props.hasValue;
  return jsx("div", _extends({}, getStyleProps(props, "valueContainer", {
    "value-container": true,
    "value-container--is-multi": isMulti,
    "value-container--has-value": hasValue
  }), innerProps), children);
};
var indicatorsContainerCSS = function indicatorsContainerCSS2() {
  return {
    alignItems: "center",
    alignSelf: "stretch",
    display: "flex",
    flexShrink: 0
  };
};
var IndicatorsContainer = function IndicatorsContainer2(props) {
  var children = props.children, innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, "indicatorsContainer", {
    indicators: true
  }), innerProps), children);
};
var _templateObject;
var _excluded$2 = ["size"];
var _excluded2 = ["innerProps", "isRtl", "size"];
function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref2 = false ? {
  name: "8mmkcg",
  styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0"
} : {
  name: "tj5bde-Svg",
  styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;label:Svg;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var Svg = function Svg2(_ref4) {
  var size4 = _ref4.size, props = _objectWithoutProperties(_ref4, _excluded$2);
  return jsx("svg", _extends({
    height: size4,
    width: size4,
    viewBox: "0 0 20 20",
    "aria-hidden": "true",
    focusable: "false",
    css: _ref2
  }, props));
};
var CrossIcon = function CrossIcon2(props) {
  return jsx(Svg, _extends({
    size: 20
  }, props), jsx("path", {
    d: "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
  }));
};
var DownChevron = function DownChevron2(props) {
  return jsx(Svg, _extends({
    size: 20
  }, props), jsx("path", {
    d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
  }));
};
var baseCSS = function baseCSS2(_ref32, unstyled) {
  var isFocused = _ref32.isFocused, _ref3$theme = _ref32.theme, baseUnit2 = _ref3$theme.spacing.baseUnit, colors3 = _ref3$theme.colors;
  return _objectSpread2({
    label: "indicatorContainer",
    display: "flex",
    transition: "color 150ms"
  }, unstyled ? {} : {
    color: isFocused ? colors3.neutral60 : colors3.neutral20,
    padding: baseUnit2 * 2,
    ":hover": {
      color: isFocused ? colors3.neutral80 : colors3.neutral40
    }
  });
};
var dropdownIndicatorCSS = baseCSS;
var DropdownIndicator = function DropdownIndicator2(props) {
  var children = props.children, innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, "dropdownIndicator", {
    indicator: true,
    "dropdown-indicator": true
  }), innerProps), children || jsx(DownChevron, null));
};
var clearIndicatorCSS = baseCSS;
var ClearIndicator = function ClearIndicator2(props) {
  var children = props.children, innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, "clearIndicator", {
    indicator: true,
    "clear-indicator": true
  }), innerProps), children || jsx(CrossIcon, null));
};
var indicatorSeparatorCSS = function indicatorSeparatorCSS2(_ref4, unstyled) {
  var isDisabled3 = _ref4.isDisabled, _ref4$theme = _ref4.theme, baseUnit2 = _ref4$theme.spacing.baseUnit, colors3 = _ref4$theme.colors;
  return _objectSpread2({
    label: "indicatorSeparator",
    alignSelf: "stretch",
    width: 1
  }, unstyled ? {} : {
    backgroundColor: isDisabled3 ? colors3.neutral10 : colors3.neutral20,
    marginBottom: baseUnit2 * 2,
    marginTop: baseUnit2 * 2
  });
};
var IndicatorSeparator = function IndicatorSeparator2(props) {
  var innerProps = props.innerProps;
  return jsx("span", _extends({}, innerProps, getStyleProps(props, "indicatorSeparator", {
    "indicator-separator": true
  })));
};
var loadingDotAnimations = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"])));
var loadingIndicatorCSS = function loadingIndicatorCSS2(_ref5, unstyled) {
  var isFocused = _ref5.isFocused, size4 = _ref5.size, _ref5$theme = _ref5.theme, colors3 = _ref5$theme.colors, baseUnit2 = _ref5$theme.spacing.baseUnit;
  return _objectSpread2({
    label: "loadingIndicator",
    display: "flex",
    transition: "color 150ms",
    alignSelf: "center",
    fontSize: size4,
    lineHeight: 1,
    marginRight: size4,
    textAlign: "center",
    verticalAlign: "middle"
  }, unstyled ? {} : {
    color: isFocused ? colors3.neutral60 : colors3.neutral20,
    padding: baseUnit2 * 2
  });
};
var LoadingDot = function LoadingDot2(_ref6) {
  var delay2 = _ref6.delay, offset3 = _ref6.offset;
  return jsx("span", {
    css: css({
      animation: "".concat(loadingDotAnimations, " 1s ease-in-out ").concat(delay2, "ms infinite;"),
      backgroundColor: "currentColor",
      borderRadius: "1em",
      display: "inline-block",
      marginLeft: offset3 ? "1em" : void 0,
      height: "1em",
      verticalAlign: "top",
      width: "1em"
    }, false ? "" : ";label:LoadingDot;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  });
};
var LoadingIndicator = function LoadingIndicator2(_ref7) {
  var innerProps = _ref7.innerProps, isRtl = _ref7.isRtl, _ref7$size = _ref7.size, size4 = _ref7$size === void 0 ? 4 : _ref7$size, restProps = _objectWithoutProperties(_ref7, _excluded2);
  return jsx("div", _extends({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    innerProps,
    isRtl,
    size: size4
  }), "loadingIndicator", {
    indicator: true,
    "loading-indicator": true
  }), innerProps), jsx(LoadingDot, {
    delay: 0,
    offset: isRtl
  }), jsx(LoadingDot, {
    delay: 160,
    offset: true
  }), jsx(LoadingDot, {
    delay: 320,
    offset: !isRtl
  }));
};
var css$1 = function css4(_ref4, unstyled) {
  var isDisabled3 = _ref4.isDisabled, isFocused = _ref4.isFocused, _ref$theme = _ref4.theme, colors3 = _ref$theme.colors, borderRadius3 = _ref$theme.borderRadius, spacing4 = _ref$theme.spacing;
  return _objectSpread2({
    label: "control",
    alignItems: "center",
    cursor: "default",
    display: "flex",
    flexWrap: "wrap",
    justifyContent: "space-between",
    minHeight: spacing4.controlHeight,
    outline: "0 !important",
    position: "relative",
    transition: "all 100ms"
  }, unstyled ? {} : {
    backgroundColor: isDisabled3 ? colors3.neutral5 : colors3.neutral0,
    borderColor: isDisabled3 ? colors3.neutral10 : isFocused ? colors3.primary : colors3.neutral20,
    borderRadius: borderRadius3,
    borderStyle: "solid",
    borderWidth: 1,
    boxShadow: isFocused ? "0 0 0 1px ".concat(colors3.primary) : void 0,
    "&:hover": {
      borderColor: isFocused ? colors3.primary : colors3.neutral30
    }
  });
};
var Control = function Control2(props) {
  var children = props.children, isDisabled3 = props.isDisabled, isFocused = props.isFocused, innerRef = props.innerRef, innerProps = props.innerProps, menuIsOpen = props.menuIsOpen;
  return jsx("div", _extends({
    ref: innerRef
  }, getStyleProps(props, "control", {
    control: true,
    "control--is-disabled": isDisabled3,
    "control--is-focused": isFocused,
    "control--menu-is-open": menuIsOpen
  }), innerProps), children);
};
var Control$1 = Control;
var _excluded$1 = ["data"];
var groupCSS = function groupCSS2(_ref4, unstyled) {
  var spacing4 = _ref4.theme.spacing;
  return unstyled ? {} : {
    paddingBottom: spacing4.baseUnit * 2,
    paddingTop: spacing4.baseUnit * 2
  };
};
var Group2 = function Group3(props) {
  var children = props.children, cx4 = props.cx, getStyles4 = props.getStyles, getClassNames = props.getClassNames, Heading3 = props.Heading, headingProps = props.headingProps, innerProps = props.innerProps, label = props.label, theme3 = props.theme, selectProps = props.selectProps;
  return jsx("div", _extends({}, getStyleProps(props, "group", {
    group: true
  }), innerProps), jsx(Heading3, _extends({}, headingProps, {
    selectProps,
    theme: theme3,
    getStyles: getStyles4,
    getClassNames,
    cx: cx4
  }), label), jsx("div", null, children));
};
var groupHeadingCSS = function groupHeadingCSS2(_ref23, unstyled) {
  var _ref2$theme = _ref23.theme, colors3 = _ref2$theme.colors, spacing4 = _ref2$theme.spacing;
  return _objectSpread2({
    label: "group",
    cursor: "default",
    display: "block"
  }, unstyled ? {} : {
    color: colors3.neutral40,
    fontSize: "75%",
    fontWeight: 500,
    marginBottom: "0.25em",
    paddingLeft: spacing4.baseUnit * 3,
    paddingRight: spacing4.baseUnit * 3,
    textTransform: "uppercase"
  });
};
var GroupHeading = function GroupHeading2(props) {
  var _cleanCommonProps = cleanCommonProps(props);
  _cleanCommonProps.data;
  var innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$1);
  return jsx("div", _extends({}, getStyleProps(props, "groupHeading", {
    "group-heading": true
  }), innerProps));
};
var Group$1 = Group2;
var _excluded3 = ["innerRef", "isDisabled", "isHidden", "inputClassName"];
var inputCSS = function inputCSS2(_ref4, unstyled) {
  var isDisabled3 = _ref4.isDisabled, value = _ref4.value, _ref$theme = _ref4.theme, spacing4 = _ref$theme.spacing, colors3 = _ref$theme.colors;
  return _objectSpread2(_objectSpread2({
    visibility: isDisabled3 ? "hidden" : "visible",
    // force css to recompute when value change due to @emotion bug.
    // We can remove it whenever the bug is fixed.
    transform: value ? "translateZ(0)" : ""
  }, containerStyle), unstyled ? {} : {
    margin: spacing4.baseUnit / 2,
    paddingBottom: spacing4.baseUnit / 2,
    paddingTop: spacing4.baseUnit / 2,
    color: colors3.neutral80
  });
};
var spacingStyle = {
  gridArea: "1 / 2",
  font: "inherit",
  minWidth: "2px",
  border: 0,
  margin: 0,
  outline: 0,
  padding: 0
};
var containerStyle = {
  flex: "1 1 auto",
  display: "inline-grid",
  gridArea: "1 / 1 / 2 / 3",
  gridTemplateColumns: "0 min-content",
  "&:after": _objectSpread2({
    content: 'attr(data-value) " "',
    visibility: "hidden",
    whiteSpace: "pre"
  }, spacingStyle)
};
var inputStyle = function inputStyle2(isHidden3) {
  return _objectSpread2({
    label: "input",
    color: "inherit",
    background: 0,
    opacity: isHidden3 ? 0 : 1,
    width: "100%"
  }, spacingStyle);
};
var Input3 = function Input4(props) {
  var cx4 = props.cx, value = props.value;
  var _cleanCommonProps = cleanCommonProps(props), innerRef = _cleanCommonProps.innerRef, isDisabled3 = _cleanCommonProps.isDisabled, isHidden3 = _cleanCommonProps.isHidden, inputClassName = _cleanCommonProps.inputClassName, innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded3);
  return jsx("div", _extends({}, getStyleProps(props, "input", {
    "input-container": true
  }), {
    "data-value": value || ""
  }), jsx("input", _extends({
    className: cx4({
      input: true
    }, inputClassName),
    ref: innerRef,
    style: inputStyle(isHidden3),
    disabled: isDisabled3
  }, innerProps)));
};
var Input$1 = Input3;
var multiValueCSS = function multiValueCSS2(_ref4, unstyled) {
  var _ref$theme = _ref4.theme, spacing4 = _ref$theme.spacing, borderRadius3 = _ref$theme.borderRadius, colors3 = _ref$theme.colors;
  return _objectSpread2({
    label: "multiValue",
    display: "flex",
    minWidth: 0
  }, unstyled ? {} : {
    backgroundColor: colors3.neutral10,
    borderRadius: borderRadius3 / 2,
    margin: spacing4.baseUnit / 2
  });
};
var multiValueLabelCSS = function multiValueLabelCSS2(_ref23, unstyled) {
  var _ref2$theme = _ref23.theme, borderRadius3 = _ref2$theme.borderRadius, colors3 = _ref2$theme.colors, cropWithEllipsis = _ref23.cropWithEllipsis;
  return _objectSpread2({
    overflow: "hidden",
    textOverflow: cropWithEllipsis || cropWithEllipsis === void 0 ? "ellipsis" : void 0,
    whiteSpace: "nowrap"
  }, unstyled ? {} : {
    borderRadius: borderRadius3 / 2,
    color: colors3.neutral80,
    fontSize: "85%",
    padding: 3,
    paddingLeft: 6
  });
};
var multiValueRemoveCSS = function multiValueRemoveCSS2(_ref32, unstyled) {
  var _ref3$theme = _ref32.theme, spacing4 = _ref3$theme.spacing, borderRadius3 = _ref3$theme.borderRadius, colors3 = _ref3$theme.colors, isFocused = _ref32.isFocused;
  return _objectSpread2({
    alignItems: "center",
    display: "flex"
  }, unstyled ? {} : {
    borderRadius: borderRadius3 / 2,
    backgroundColor: isFocused ? colors3.dangerLight : void 0,
    paddingLeft: spacing4.baseUnit,
    paddingRight: spacing4.baseUnit,
    ":hover": {
      backgroundColor: colors3.dangerLight,
      color: colors3.danger
    }
  });
};
var MultiValueGeneric = function MultiValueGeneric2(_ref4) {
  var children = _ref4.children, innerProps = _ref4.innerProps;
  return jsx("div", innerProps, children);
};
var MultiValueContainer = MultiValueGeneric;
var MultiValueLabel = MultiValueGeneric;
function MultiValueRemove(_ref5) {
  var children = _ref5.children, innerProps = _ref5.innerProps;
  return jsx("div", _extends({
    role: "button"
  }, innerProps), children || jsx(CrossIcon, {
    size: 14
  }));
}
var MultiValue = function MultiValue2(props) {
  var children = props.children, components4 = props.components, data = props.data, innerProps = props.innerProps, isDisabled3 = props.isDisabled, removeProps3 = props.removeProps, selectProps = props.selectProps;
  var Container3 = components4.Container, Label2 = components4.Label, Remove = components4.Remove;
  return jsx(Container3, {
    data,
    innerProps: _objectSpread2(_objectSpread2({}, getStyleProps(props, "multiValue", {
      "multi-value": true,
      "multi-value--is-disabled": isDisabled3
    })), innerProps),
    selectProps
  }, jsx(Label2, {
    data,
    innerProps: _objectSpread2({}, getStyleProps(props, "multiValueLabel", {
      "multi-value__label": true
    })),
    selectProps
  }, children), jsx(Remove, {
    data,
    innerProps: _objectSpread2(_objectSpread2({}, getStyleProps(props, "multiValueRemove", {
      "multi-value__remove": true
    })), {}, {
      "aria-label": "Remove ".concat(children || "option")
    }, removeProps3),
    selectProps
  }));
};
var MultiValue$1 = MultiValue;
var optionCSS = function optionCSS2(_ref4, unstyled) {
  var isDisabled3 = _ref4.isDisabled, isFocused = _ref4.isFocused, isSelected = _ref4.isSelected, _ref$theme = _ref4.theme, spacing4 = _ref$theme.spacing, colors3 = _ref$theme.colors;
  return _objectSpread2({
    label: "option",
    cursor: "default",
    display: "block",
    fontSize: "inherit",
    width: "100%",
    userSelect: "none",
    WebkitTapHighlightColor: "rgba(0, 0, 0, 0)"
  }, unstyled ? {} : {
    backgroundColor: isSelected ? colors3.primary : isFocused ? colors3.primary25 : "transparent",
    color: isDisabled3 ? colors3.neutral20 : isSelected ? colors3.neutral0 : "inherit",
    padding: "".concat(spacing4.baseUnit * 2, "px ").concat(spacing4.baseUnit * 3, "px"),
    // provide some affordance on touch devices
    ":active": {
      backgroundColor: !isDisabled3 ? isSelected ? colors3.primary : colors3.primary50 : void 0
    }
  });
};
var Option = function Option2(props) {
  var children = props.children, isDisabled3 = props.isDisabled, isFocused = props.isFocused, isSelected = props.isSelected, innerRef = props.innerRef, innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, "option", {
    option: true,
    "option--is-disabled": isDisabled3,
    "option--is-focused": isFocused,
    "option--is-selected": isSelected
  }), {
    ref: innerRef,
    "aria-disabled": isDisabled3
  }, innerProps), children);
};
var Option$1 = Option;
var placeholderCSS = function placeholderCSS2(_ref4, unstyled) {
  var _ref$theme = _ref4.theme, spacing4 = _ref$theme.spacing, colors3 = _ref$theme.colors;
  return _objectSpread2({
    label: "placeholder",
    gridArea: "1 / 1 / 2 / 3"
  }, unstyled ? {} : {
    color: colors3.neutral50,
    marginLeft: spacing4.baseUnit / 2,
    marginRight: spacing4.baseUnit / 2
  });
};
var Placeholder = function Placeholder2(props) {
  var children = props.children, innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, "placeholder", {
    placeholder: true
  }), innerProps), children);
};
var Placeholder$1 = Placeholder;
var css5 = function css6(_ref4, unstyled) {
  var isDisabled3 = _ref4.isDisabled, _ref$theme = _ref4.theme, spacing4 = _ref$theme.spacing, colors3 = _ref$theme.colors;
  return _objectSpread2({
    label: "singleValue",
    gridArea: "1 / 1 / 2 / 3",
    maxWidth: "100%",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, unstyled ? {} : {
    color: isDisabled3 ? colors3.neutral40 : colors3.neutral80,
    marginLeft: spacing4.baseUnit / 2,
    marginRight: spacing4.baseUnit / 2
  });
};
var SingleValue = function SingleValue2(props) {
  var children = props.children, isDisabled3 = props.isDisabled, innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, "singleValue", {
    "single-value": true,
    "single-value--is-disabled": isDisabled3
  }), innerProps), children);
};
var SingleValue$1 = SingleValue;
var components2 = {
  ClearIndicator,
  Control: Control$1,
  DropdownIndicator,
  DownChevron,
  CrossIcon,
  Group: Group$1,
  GroupHeading,
  IndicatorsContainer,
  IndicatorSeparator,
  Input: Input$1,
  LoadingIndicator,
  Menu: Menu$1,
  MenuList: MenuList3,
  MenuPortal,
  LoadingMessage,
  NoOptionsMessage,
  MultiValue: MultiValue$1,
  MultiValueContainer,
  MultiValueLabel,
  MultiValueRemove,
  Option: Option$1,
  Placeholder: Placeholder$1,
  SelectContainer,
  SingleValue: SingleValue$1,
  ValueContainer
};
var defaultComponents = function defaultComponents2(props) {
  return _objectSpread2(_objectSpread2({}, components2), props.components);
};

// node_modules/memoize-one/dist/memoize-one.esm.js
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === "number" && value !== value;
};
function isEqual2(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i2 = 0; i2 < newInputs.length; i2++) {
    if (!isEqual2(newInputs[i2], lastInputs[i2])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual4) {
  if (isEqual4 === void 0) {
    isEqual4 = areInputsEqual;
  }
  var cache2 = null;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (cache2 && cache2.lastThis === this && isEqual4(newArgs, cache2.lastArgs)) {
      return cache2.lastResult;
    }
    var lastResult = resultFn.apply(this, newArgs);
    cache2 = {
      lastResult,
      lastArgs: newArgs,
      lastThis: this
    };
    return lastResult;
  }
  memoized.clear = function clear() {
    cache2 = null;
  };
  return memoized;
}

// node_modules/react-select/dist/Select-aecb2a80.esm.js
function _EMOTION_STRINGIFIED_CSS_ERROR__$2() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref3 = false ? {
  name: "7pg0cj-a11yText",
  styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap"
} : {
  name: "1f43avz-a11yText-A11yText",
  styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNSSIsImZpbGUiOiJBMTF5VGV4dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCB7IGpzeCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLy8gQXNzaXN0aXZlIHRleHQgdG8gZGVzY3JpYmUgdmlzdWFsIGVsZW1lbnRzLiBIaWRkZW4gZm9yIHNpZ2h0ZWQgdXNlcnMuXG5jb25zdCBBMTF5VGV4dCA9IChwcm9wczogSlNYLkludHJpbnNpY0VsZW1lbnRzWydzcGFuJ10pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$2
};
var A11yText = function A11yText2(props) {
  return jsx("span", _extends({
    css: _ref3
  }, props));
};
var A11yText$1 = A11yText;
var defaultAriaLiveMessages = {
  guidance: function guidance(props) {
    var isSearchable = props.isSearchable, isMulti = props.isMulti, isDisabled3 = props.isDisabled, tabSelectsValue = props.tabSelectsValue, context2 = props.context;
    switch (context2) {
      case "menu":
        return "Use Up and Down to choose options".concat(isDisabled3 ? "" : ", press Enter to select the currently focused option", ", press Escape to exit the menu").concat(tabSelectsValue ? ", press Tab to select the option and exit the menu" : "", ".");
      case "input":
        return "".concat(props["aria-label"] || "Select", " is focused ").concat(isSearchable ? ",type to refine list" : "", ", press Down to open the menu, ").concat(isMulti ? " press left to focus selected values" : "");
      case "value":
        return "Use left and right to toggle between focused values, press Backspace to remove the currently focused value";
      default:
        return "";
    }
  },
  onChange: function onChange(props) {
    var action = props.action, _props$label = props.label, label = _props$label === void 0 ? "" : _props$label, labels = props.labels, isDisabled3 = props.isDisabled;
    switch (action) {
      case "deselect-option":
      case "pop-value":
      case "remove-value":
        return "option ".concat(label, ", deselected.");
      case "clear":
        return "All selected options have been cleared.";
      case "initial-input-focus":
        return "option".concat(labels.length > 1 ? "s" : "", " ").concat(labels.join(","), ", selected.");
      case "select-option":
        return isDisabled3 ? "option ".concat(label, " is disabled. Select another option.") : "option ".concat(label, ", selected.");
      default:
        return "";
    }
  },
  onFocus: function onFocus3(props) {
    var context2 = props.context, focused = props.focused, options2 = props.options, _props$label2 = props.label, label = _props$label2 === void 0 ? "" : _props$label2, selectValue = props.selectValue, isDisabled3 = props.isDisabled, isSelected = props.isSelected;
    var getArrayIndex = function getArrayIndex2(arr, item) {
      return arr && arr.length ? "".concat(arr.indexOf(item) + 1, " of ").concat(arr.length) : "";
    };
    if (context2 === "value" && selectValue) {
      return "value ".concat(label, " focused, ").concat(getArrayIndex(selectValue, focused), ".");
    }
    if (context2 === "menu") {
      var disabled = isDisabled3 ? " disabled" : "";
      var status = "".concat(isSelected ? "selected" : "focused").concat(disabled);
      return "option ".concat(label, " ").concat(status, ", ").concat(getArrayIndex(options2, focused), ".");
    }
    return "";
  },
  onFilter: function onFilter(props) {
    var inputValue = props.inputValue, resultsMessage = props.resultsMessage;
    return "".concat(resultsMessage).concat(inputValue ? " for search term " + inputValue : "", ".");
  }
};
var LiveRegion = function LiveRegion2(props) {
  var ariaSelection = props.ariaSelection, focusedOption = props.focusedOption, focusedValue = props.focusedValue, focusableOptions = props.focusableOptions, isFocused = props.isFocused, selectValue = props.selectValue, selectProps = props.selectProps, id3 = props.id;
  var ariaLiveMessages = selectProps.ariaLiveMessages, getOptionLabel4 = selectProps.getOptionLabel, inputValue = selectProps.inputValue, isMulti = selectProps.isMulti, isOptionDisabled3 = selectProps.isOptionDisabled, isSearchable = selectProps.isSearchable, menuIsOpen = selectProps.menuIsOpen, options2 = selectProps.options, screenReaderStatus2 = selectProps.screenReaderStatus, tabSelectsValue = selectProps.tabSelectsValue;
  var ariaLabel = selectProps["aria-label"];
  var ariaLive = selectProps["aria-live"];
  var messages = (0, import_react199.useMemo)(function() {
    return _objectSpread2(_objectSpread2({}, defaultAriaLiveMessages), ariaLiveMessages || {});
  }, [ariaLiveMessages]);
  var ariaSelected = (0, import_react199.useMemo)(function() {
    var message = "";
    if (ariaSelection && messages.onChange) {
      var option = ariaSelection.option, selectedOptions = ariaSelection.options, removedValue = ariaSelection.removedValue, removedValues = ariaSelection.removedValues, value = ariaSelection.value;
      var asOption = function asOption2(val) {
        return !Array.isArray(val) ? val : null;
      };
      var selected = removedValue || option || asOption(value);
      var label = selected ? getOptionLabel4(selected) : "";
      var multiSelected = selectedOptions || removedValues || void 0;
      var labels = multiSelected ? multiSelected.map(getOptionLabel4) : [];
      var onChangeProps = _objectSpread2({
        // multiSelected items are usually items that have already been selected
        // or set by the user as a default value so we assume they are not disabled
        isDisabled: selected && isOptionDisabled3(selected, selectValue),
        label,
        labels
      }, ariaSelection);
      message = messages.onChange(onChangeProps);
    }
    return message;
  }, [ariaSelection, messages, isOptionDisabled3, selectValue, getOptionLabel4]);
  var ariaFocused = (0, import_react199.useMemo)(function() {
    var focusMsg = "";
    var focused = focusedOption || focusedValue;
    var isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption));
    if (focused && messages.onFocus) {
      var onFocusProps = {
        focused,
        label: getOptionLabel4(focused),
        isDisabled: isOptionDisabled3(focused, selectValue),
        isSelected,
        options: focusableOptions,
        context: focused === focusedOption ? "menu" : "value",
        selectValue
      };
      focusMsg = messages.onFocus(onFocusProps);
    }
    return focusMsg;
  }, [focusedOption, focusedValue, getOptionLabel4, isOptionDisabled3, messages, focusableOptions, selectValue]);
  var ariaResults = (0, import_react199.useMemo)(function() {
    var resultsMsg = "";
    if (menuIsOpen && options2.length && messages.onFilter) {
      var resultsMessage = screenReaderStatus2({
        count: focusableOptions.length
      });
      resultsMsg = messages.onFilter({
        inputValue,
        resultsMessage
      });
    }
    return resultsMsg;
  }, [focusableOptions, inputValue, menuIsOpen, messages, options2, screenReaderStatus2]);
  var ariaGuidance = (0, import_react199.useMemo)(function() {
    var guidanceMsg = "";
    if (messages.guidance) {
      var context2 = focusedValue ? "value" : menuIsOpen ? "menu" : "input";
      guidanceMsg = messages.guidance({
        "aria-label": ariaLabel,
        context: context2,
        isDisabled: focusedOption && isOptionDisabled3(focusedOption, selectValue),
        isMulti,
        isSearchable,
        tabSelectsValue
      });
    }
    return guidanceMsg;
  }, [ariaLabel, focusedOption, focusedValue, isMulti, isOptionDisabled3, isSearchable, menuIsOpen, messages, selectValue, tabSelectsValue]);
  var ariaContext = "".concat(ariaFocused, " ").concat(ariaResults, " ").concat(ariaGuidance);
  var ScreenReaderText = jsx(import_react199.Fragment, null, jsx("span", {
    id: "aria-selection"
  }, ariaSelected), jsx("span", {
    id: "aria-context"
  }, ariaContext));
  var isInitialFocus = (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus";
  return jsx(import_react199.Fragment, null, jsx(A11yText$1, {
    id: id3
  }, isInitialFocus && ScreenReaderText), jsx(A11yText$1, {
    "aria-live": ariaLive,
    "aria-atomic": "false",
    "aria-relevant": "additions text"
  }, isFocused && !isInitialFocus && ScreenReaderText));
};
var LiveRegion$1 = LiveRegion;
var diacritics = [{
  base: "A",
  letters: "AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ"
}, {
  base: "AA",
  letters: "Ꜳ"
}, {
  base: "AE",
  letters: "ÆǼǢ"
}, {
  base: "AO",
  letters: "Ꜵ"
}, {
  base: "AU",
  letters: "Ꜷ"
}, {
  base: "AV",
  letters: "ꜸꜺ"
}, {
  base: "AY",
  letters: "Ꜽ"
}, {
  base: "B",
  letters: "BⒷＢḂḄḆɃƂƁ"
}, {
  base: "C",
  letters: "CⒸＣĆĈĊČÇḈƇȻꜾ"
}, {
  base: "D",
  letters: "DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ"
}, {
  base: "DZ",
  letters: "ǱǄ"
}, {
  base: "Dz",
  letters: "ǲǅ"
}, {
  base: "E",
  letters: "EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ"
}, {
  base: "F",
  letters: "FⒻＦḞƑꝻ"
}, {
  base: "G",
  letters: "GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ"
}, {
  base: "H",
  letters: "HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ"
}, {
  base: "I",
  letters: "IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ"
}, {
  base: "J",
  letters: "JⒿＪĴɈ"
}, {
  base: "K",
  letters: "KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ"
}, {
  base: "L",
  letters: "LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ"
}, {
  base: "LJ",
  letters: "Ǉ"
}, {
  base: "Lj",
  letters: "ǈ"
}, {
  base: "M",
  letters: "MⓂＭḾṀṂⱮƜ"
}, {
  base: "N",
  letters: "NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ"
}, {
  base: "NJ",
  letters: "Ǌ"
}, {
  base: "Nj",
  letters: "ǋ"
}, {
  base: "O",
  letters: "OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ"
}, {
  base: "OI",
  letters: "Ƣ"
}, {
  base: "OO",
  letters: "Ꝏ"
}, {
  base: "OU",
  letters: "Ȣ"
}, {
  base: "P",
  letters: "PⓅＰṔṖƤⱣꝐꝒꝔ"
}, {
  base: "Q",
  letters: "QⓆＱꝖꝘɊ"
}, {
  base: "R",
  letters: "RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ"
}, {
  base: "S",
  letters: "SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ"
}, {
  base: "T",
  letters: "TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ"
}, {
  base: "TZ",
  letters: "Ꜩ"
}, {
  base: "U",
  letters: "UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ"
}, {
  base: "V",
  letters: "VⓋＶṼṾƲꝞɅ"
}, {
  base: "VY",
  letters: "Ꝡ"
}, {
  base: "W",
  letters: "WⓌＷẀẂŴẆẄẈⱲ"
}, {
  base: "X",
  letters: "XⓍＸẊẌ"
}, {
  base: "Y",
  letters: "YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ"
}, {
  base: "Z",
  letters: "ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ"
}, {
  base: "a",
  letters: "aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ"
}, {
  base: "aa",
  letters: "ꜳ"
}, {
  base: "ae",
  letters: "æǽǣ"
}, {
  base: "ao",
  letters: "ꜵ"
}, {
  base: "au",
  letters: "ꜷ"
}, {
  base: "av",
  letters: "ꜹꜻ"
}, {
  base: "ay",
  letters: "ꜽ"
}, {
  base: "b",
  letters: "bⓑｂḃḅḇƀƃɓ"
}, {
  base: "c",
  letters: "cⓒｃćĉċčçḉƈȼꜿↄ"
}, {
  base: "d",
  letters: "dⓓｄḋďḍḑḓḏđƌɖɗꝺ"
}, {
  base: "dz",
  letters: "ǳǆ"
}, {
  base: "e",
  letters: "eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ"
}, {
  base: "f",
  letters: "fⓕｆḟƒꝼ"
}, {
  base: "g",
  letters: "gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ"
}, {
  base: "h",
  letters: "hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ"
}, {
  base: "hv",
  letters: "ƕ"
}, {
  base: "i",
  letters: "iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı"
}, {
  base: "j",
  letters: "jⓙｊĵǰɉ"
}, {
  base: "k",
  letters: "kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ"
}, {
  base: "l",
  letters: "lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ"
}, {
  base: "lj",
  letters: "ǉ"
}, {
  base: "m",
  letters: "mⓜｍḿṁṃɱɯ"
}, {
  base: "n",
  letters: "nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ"
}, {
  base: "nj",
  letters: "ǌ"
}, {
  base: "o",
  letters: "oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ"
}, {
  base: "oi",
  letters: "ƣ"
}, {
  base: "ou",
  letters: "ȣ"
}, {
  base: "oo",
  letters: "ꝏ"
}, {
  base: "p",
  letters: "pⓟｐṕṗƥᵽꝑꝓꝕ"
}, {
  base: "q",
  letters: "qⓠｑɋꝗꝙ"
}, {
  base: "r",
  letters: "rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ"
}, {
  base: "s",
  letters: "sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ"
}, {
  base: "t",
  letters: "tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ"
}, {
  base: "tz",
  letters: "ꜩ"
}, {
  base: "u",
  letters: "uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ"
}, {
  base: "v",
  letters: "vⓥｖṽṿʋꝟʌ"
}, {
  base: "vy",
  letters: "ꝡ"
}, {
  base: "w",
  letters: "wⓦｗẁẃŵẇẅẘẉⱳ"
}, {
  base: "x",
  letters: "xⓧｘẋẍ"
}, {
  base: "y",
  letters: "yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ"
}, {
  base: "z",
  letters: "zⓩｚźẑżžẓẕƶȥɀⱬꝣ"
}];
var anyDiacritic = new RegExp("[" + diacritics.map(function(d) {
  return d.letters;
}).join("") + "]", "g");
var diacriticToBase = {};
for (i2 = 0; i2 < diacritics.length; i2++) {
  diacritic = diacritics[i2];
  for (j = 0; j < diacritic.letters.length; j++) {
    diacriticToBase[diacritic.letters[j]] = diacritic.base;
  }
}
var diacritic;
var j;
var i2;
var stripDiacritics = function stripDiacritics2(str) {
  return str.replace(anyDiacritic, function(match4) {
    return diacriticToBase[match4];
  });
};
var memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics);
var trimString = function trimString2(str) {
  return str.replace(/^\s+|\s+$/g, "");
};
var defaultStringify = function defaultStringify2(option) {
  return "".concat(option.label, " ").concat(option.value);
};
var createFilter = function createFilter2(config2) {
  return function(option, rawInput) {
    if (option.data.__isNew__)
      return true;
    var _ignoreCase$ignoreAcc = _objectSpread2({
      ignoreCase: true,
      ignoreAccents: true,
      stringify: defaultStringify,
      trim: true,
      matchFrom: "any"
    }, config2), ignoreCase = _ignoreCase$ignoreAcc.ignoreCase, ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents, stringify2 = _ignoreCase$ignoreAcc.stringify, trim3 = _ignoreCase$ignoreAcc.trim, matchFrom = _ignoreCase$ignoreAcc.matchFrom;
    var input = trim3 ? trimString(rawInput) : rawInput;
    var candidate = trim3 ? trimString(stringify2(option)) : stringify2(option);
    if (ignoreCase) {
      input = input.toLowerCase();
      candidate = candidate.toLowerCase();
    }
    if (ignoreAccents) {
      input = memoizedStripDiacriticsForInput(input);
      candidate = stripDiacritics(candidate);
    }
    return matchFrom === "start" ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
  };
};
var _excluded4 = ["innerRef"];
function DummyInput(_ref4) {
  var innerRef = _ref4.innerRef, props = _objectWithoutProperties(_ref4, _excluded4);
  var filteredProps = removeProps(props, "onExited", "in", "enter", "exit", "appear");
  return jsx("input", _extends({
    ref: innerRef
  }, filteredProps, {
    css: css({
      label: "dummyInput",
      // get rid of any default styles
      background: 0,
      border: 0,
      // important! this hides the flashing cursor
      caretColor: "transparent",
      fontSize: "inherit",
      gridArea: "1 / 1 / 2 / 3",
      outline: 0,
      padding: 0,
      // important! without `width` browsers won't allow focus
      width: 1,
      // remove cursor on desktop
      color: "transparent",
      // remove cursor on mobile whilst maintaining "scroll into view" behaviour
      left: -100,
      opacity: 0,
      position: "relative",
      transform: "scale(.01)"
    }, false ? "" : ";label:DummyInput;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkR1bW15SW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlCTSIsImZpbGUiOiJEdW1teUlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgcmVtb3ZlUHJvcHMgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIER1bW15SW5wdXQoe1xuICBpbm5lclJlZixcbiAgLi4ucHJvcHNcbn06IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snaW5wdXQnXSAmIHtcbiAgcmVhZG9ubHkgaW5uZXJSZWY6IFJlZjxIVE1MSW5wdXRFbGVtZW50Pjtcbn0pIHtcbiAgLy8gUmVtb3ZlIGFuaW1hdGlvbiBwcm9wcyBub3QgbWVhbnQgZm9yIEhUTUwgZWxlbWVudHNcbiAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IHJlbW92ZVByb3BzKFxuICAgIHByb3BzLFxuICAgICdvbkV4aXRlZCcsXG4gICAgJ2luJyxcbiAgICAnZW50ZXInLFxuICAgICdleGl0JyxcbiAgICAnYXBwZWFyJ1xuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGlucHV0XG4gICAgICByZWY9e2lubmVyUmVmfVxuICAgICAgey4uLmZpbHRlcmVkUHJvcHN9XG4gICAgICBjc3M9e3tcbiAgICAgICAgbGFiZWw6ICdkdW1teUlucHV0JyxcbiAgICAgICAgLy8gZ2V0IHJpZCBvZiBhbnkgZGVmYXVsdCBzdHlsZXNcbiAgICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHRoaXMgaGlkZXMgdGhlIGZsYXNoaW5nIGN1cnNvclxuICAgICAgICBjYXJldENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgICBncmlkQXJlYTogJzEgLyAxIC8gMiAvIDMnLFxuICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHdpdGhvdXQgYHdpZHRoYCBicm93c2VycyB3b24ndCBhbGxvdyBmb2N1c1xuICAgICAgICB3aWR0aDogMSxcblxuICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIGRlc2t0b3BcbiAgICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG5cbiAgICAgICAgLy8gcmVtb3ZlIGN1cnNvciBvbiBtb2JpbGUgd2hpbHN0IG1haW50YWluaW5nIFwic2Nyb2xsIGludG8gdmlld1wiIGJlaGF2aW91clxuICAgICAgICBsZWZ0OiAtMTAwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoLjAxKScsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG4iXX0= */")
  }));
}
var cancelScroll = function cancelScroll2(event) {
  event.preventDefault();
  event.stopPropagation();
};
function useScrollCapture(_ref4) {
  var isEnabled = _ref4.isEnabled, onBottomArrive = _ref4.onBottomArrive, onBottomLeave = _ref4.onBottomLeave, onTopArrive = _ref4.onTopArrive, onTopLeave = _ref4.onTopLeave;
  var isBottom = (0, import_react199.useRef)(false);
  var isTop = (0, import_react199.useRef)(false);
  var touchStart = (0, import_react199.useRef)(0);
  var scrollTarget = (0, import_react199.useRef)(null);
  var handleEventDelta = (0, import_react199.useCallback)(function(event, delta2) {
    if (scrollTarget.current === null)
      return;
    var _scrollTarget$current = scrollTarget.current, scrollTop = _scrollTarget$current.scrollTop, scrollHeight = _scrollTarget$current.scrollHeight, clientHeight = _scrollTarget$current.clientHeight;
    var target = scrollTarget.current;
    var isDeltaPositive = delta2 > 0;
    var availableScroll = scrollHeight - clientHeight - scrollTop;
    var shouldCancelScroll = false;
    if (availableScroll > delta2 && isBottom.current) {
      if (onBottomLeave)
        onBottomLeave(event);
      isBottom.current = false;
    }
    if (isDeltaPositive && isTop.current) {
      if (onTopLeave)
        onTopLeave(event);
      isTop.current = false;
    }
    if (isDeltaPositive && delta2 > availableScroll) {
      if (onBottomArrive && !isBottom.current) {
        onBottomArrive(event);
      }
      target.scrollTop = scrollHeight;
      shouldCancelScroll = true;
      isBottom.current = true;
    } else if (!isDeltaPositive && -delta2 > scrollTop) {
      if (onTopArrive && !isTop.current) {
        onTopArrive(event);
      }
      target.scrollTop = 0;
      shouldCancelScroll = true;
      isTop.current = true;
    }
    if (shouldCancelScroll) {
      cancelScroll(event);
    }
  }, [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]);
  var onWheel = (0, import_react199.useCallback)(function(event) {
    handleEventDelta(event, event.deltaY);
  }, [handleEventDelta]);
  var onTouchStart = (0, import_react199.useCallback)(function(event) {
    touchStart.current = event.changedTouches[0].clientY;
  }, []);
  var onTouchMove = (0, import_react199.useCallback)(function(event) {
    var deltaY = touchStart.current - event.changedTouches[0].clientY;
    handleEventDelta(event, deltaY);
  }, [handleEventDelta]);
  var startListening = (0, import_react199.useCallback)(function(el) {
    if (!el)
      return;
    var notPassive = supportsPassiveEvents ? {
      passive: false
    } : false;
    el.addEventListener("wheel", onWheel, notPassive);
    el.addEventListener("touchstart", onTouchStart, notPassive);
    el.addEventListener("touchmove", onTouchMove, notPassive);
  }, [onTouchMove, onTouchStart, onWheel]);
  var stopListening = (0, import_react199.useCallback)(function(el) {
    if (!el)
      return;
    el.removeEventListener("wheel", onWheel, false);
    el.removeEventListener("touchstart", onTouchStart, false);
    el.removeEventListener("touchmove", onTouchMove, false);
  }, [onTouchMove, onTouchStart, onWheel]);
  (0, import_react199.useEffect)(function() {
    if (!isEnabled)
      return;
    var element = scrollTarget.current;
    startListening(element);
    return function() {
      stopListening(element);
    };
  }, [isEnabled, startListening, stopListening]);
  return function(element) {
    scrollTarget.current = element;
  };
}
var STYLE_KEYS = ["boxSizing", "height", "overflow", "paddingRight", "position"];
var LOCK_STYLES = {
  boxSizing: "border-box",
  // account for possible declaration `width: 100%;` on body
  overflow: "hidden",
  position: "relative",
  height: "100%"
};
function preventTouchMove(e) {
  e.preventDefault();
}
function allowTouchMove(e) {
  e.stopPropagation();
}
function preventInertiaScroll() {
  var top2 = this.scrollTop;
  var totalScroll = this.scrollHeight;
  var currentScroll = top2 + this.offsetHeight;
  if (top2 === 0) {
    this.scrollTop = 1;
  } else if (currentScroll === totalScroll) {
    this.scrollTop = top2 - 1;
  }
}
function isTouchDevice() {
  return "ontouchstart" in window || navigator.maxTouchPoints;
}
var canUseDOM2 = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var activeScrollLocks = 0;
var listenerOptions = {
  capture: false,
  passive: false
};
function useScrollLock(_ref4) {
  var isEnabled = _ref4.isEnabled, _ref$accountForScroll = _ref4.accountForScrollbars, accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll;
  var originalStyles = (0, import_react199.useRef)({});
  var scrollTarget = (0, import_react199.useRef)(null);
  var addScrollLock = (0, import_react199.useCallback)(function(touchScrollTarget) {
    if (!canUseDOM2)
      return;
    var target = document.body;
    var targetStyle = target && target.style;
    if (accountForScrollbars) {
      STYLE_KEYS.forEach(function(key2) {
        var val = targetStyle && targetStyle[key2];
        originalStyles.current[key2] = val;
      });
    }
    if (accountForScrollbars && activeScrollLocks < 1) {
      var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;
      var clientWidth = document.body ? document.body.clientWidth : 0;
      var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
      Object.keys(LOCK_STYLES).forEach(function(key2) {
        var val = LOCK_STYLES[key2];
        if (targetStyle) {
          targetStyle[key2] = val;
        }
      });
      if (targetStyle) {
        targetStyle.paddingRight = "".concat(adjustedPadding, "px");
      }
    }
    if (target && isTouchDevice()) {
      target.addEventListener("touchmove", preventTouchMove, listenerOptions);
      if (touchScrollTarget) {
        touchScrollTarget.addEventListener("touchstart", preventInertiaScroll, listenerOptions);
        touchScrollTarget.addEventListener("touchmove", allowTouchMove, listenerOptions);
      }
    }
    activeScrollLocks += 1;
  }, [accountForScrollbars]);
  var removeScrollLock = (0, import_react199.useCallback)(function(touchScrollTarget) {
    if (!canUseDOM2)
      return;
    var target = document.body;
    var targetStyle = target && target.style;
    activeScrollLocks = Math.max(activeScrollLocks - 1, 0);
    if (accountForScrollbars && activeScrollLocks < 1) {
      STYLE_KEYS.forEach(function(key2) {
        var val = originalStyles.current[key2];
        if (targetStyle) {
          targetStyle[key2] = val;
        }
      });
    }
    if (target && isTouchDevice()) {
      target.removeEventListener("touchmove", preventTouchMove, listenerOptions);
      if (touchScrollTarget) {
        touchScrollTarget.removeEventListener("touchstart", preventInertiaScroll, listenerOptions);
        touchScrollTarget.removeEventListener("touchmove", allowTouchMove, listenerOptions);
      }
    }
  }, [accountForScrollbars]);
  (0, import_react199.useEffect)(function() {
    if (!isEnabled)
      return;
    var element = scrollTarget.current;
    addScrollLock(element);
    return function() {
      removeScrollLock(element);
    };
  }, [isEnabled, addScrollLock, removeScrollLock]);
  return function(element) {
    scrollTarget.current = element;
  };
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$1() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var blurSelectInput = function blurSelectInput2() {
  return document.activeElement && document.activeElement.blur();
};
var _ref2$1 = false ? {
  name: "1kfdb0e",
  styles: "position:fixed;left:0;bottom:0;right:0;top:0"
} : {
  name: "bp8cua-ScrollManager",
  styles: "position:fixed;left:0;bottom:0;right:0;top:0;label:ScrollManager;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbE1hbmFnZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStDVSIsImZpbGUiOiJTY3JvbGxNYW5hZ2VyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgUmVmQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU2Nyb2xsQ2FwdHVyZSBmcm9tICcuL3VzZVNjcm9sbENhcHR1cmUnO1xuaW1wb3J0IHVzZVNjcm9sbExvY2sgZnJvbSAnLi91c2VTY3JvbGxMb2NrJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcmVhZG9ubHkgY2hpbGRyZW46IChyZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PikgPT4gUmVhY3RFbGVtZW50O1xuICByZWFkb25seSBsb2NrRW5hYmxlZDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgY2FwdHVyZUVuYWJsZWQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG9uQm90dG9tQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Cb3R0b21MZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG4gIHJlYWRvbmx5IG9uVG9wQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Ub3BMZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG59XG5cbmNvbnN0IGJsdXJTZWxlY3RJbnB1dCA9ICgpID0+XG4gIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmJsdXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2Nyb2xsTWFuYWdlcih7XG4gIGNoaWxkcmVuLFxuICBsb2NrRW5hYmxlZCxcbiAgY2FwdHVyZUVuYWJsZWQgPSB0cnVlLFxuICBvbkJvdHRvbUFycml2ZSxcbiAgb25Cb3R0b21MZWF2ZSxcbiAgb25Ub3BBcnJpdmUsXG4gIG9uVG9wTGVhdmUsXG59OiBQcm9wcykge1xuICBjb25zdCBzZXRTY3JvbGxDYXB0dXJlVGFyZ2V0ID0gdXNlU2Nyb2xsQ2FwdHVyZSh7XG4gICAgaXNFbmFibGVkOiBjYXB0dXJlRW5hYmxlZCxcbiAgICBvbkJvdHRvbUFycml2ZSxcbiAgICBvbkJvdHRvbUxlYXZlLFxuICAgIG9uVG9wQXJyaXZlLFxuICAgIG9uVG9wTGVhdmUsXG4gIH0pO1xuICBjb25zdCBzZXRTY3JvbGxMb2NrVGFyZ2V0ID0gdXNlU2Nyb2xsTG9jayh7IGlzRW5hYmxlZDogbG9ja0VuYWJsZWQgfSk7XG5cbiAgY29uc3QgdGFyZ2V0UmVmOiBSZWZDYWxsYmFjazxIVE1MRWxlbWVudD4gPSAoZWxlbWVudCkgPT4ge1xuICAgIHNldFNjcm9sbENhcHR1cmVUYXJnZXQoZWxlbWVudCk7XG4gICAgc2V0U2Nyb2xsTG9ja1RhcmdldChlbGVtZW50KTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIHtsb2NrRW5hYmxlZCAmJiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBvbkNsaWNrPXtibHVyU2VsZWN0SW5wdXR9XG4gICAgICAgICAgY3NzPXt7IHBvc2l0aW9uOiAnZml4ZWQnLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwLCB0b3A6IDAgfX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICB7Y2hpbGRyZW4odGFyZ2V0UmVmKX1cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
function ScrollManager(_ref4) {
  var children = _ref4.children, lockEnabled = _ref4.lockEnabled, _ref$captureEnabled = _ref4.captureEnabled, captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled, onBottomArrive = _ref4.onBottomArrive, onBottomLeave = _ref4.onBottomLeave, onTopArrive = _ref4.onTopArrive, onTopLeave = _ref4.onTopLeave;
  var setScrollCaptureTarget = useScrollCapture({
    isEnabled: captureEnabled,
    onBottomArrive,
    onBottomLeave,
    onTopArrive,
    onTopLeave
  });
  var setScrollLockTarget = useScrollLock({
    isEnabled: lockEnabled
  });
  var targetRef = function targetRef2(element) {
    setScrollCaptureTarget(element);
    setScrollLockTarget(element);
  };
  return jsx(import_react199.Fragment, null, lockEnabled && jsx("div", {
    onClick: blurSelectInput,
    css: _ref2$1
  }), children(targetRef));
}
function _EMOTION_STRINGIFIED_CSS_ERROR__2() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}
var _ref22 = false ? {
  name: "1a0ro4n-requiredInput",
  styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%"
} : {
  name: "5kkxb2-requiredInput-RequiredInput",
  styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%;label:RequiredInput;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlcXVpcmVkSW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNJIiwiZmlsZSI6IlJlcXVpcmVkSW5wdXQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyBGb2N1c0V2ZW50SGFuZGxlciwgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbmNvbnN0IFJlcXVpcmVkSW5wdXQ6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgb25Gb2N1czogRm9jdXNFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD47XG59PiA9ICh7IG5hbWUsIG9uRm9jdXMgfSkgPT4gKFxuICA8aW5wdXRcbiAgICByZXF1aXJlZFxuICAgIG5hbWU9e25hbWV9XG4gICAgdGFiSW5kZXg9ey0xfVxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAncmVxdWlyZWRJbnB1dCcsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH19XG4gICAgLy8gUHJldmVudCBgU3dpdGNoaW5nIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWRgIGVycm9yXG4gICAgdmFsdWU9XCJcIlxuICAgIG9uQ2hhbmdlPXsoKSA9PiB7fX1cbiAgLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJlcXVpcmVkSW5wdXQ7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__2
};
var RequiredInput = function RequiredInput2(_ref4) {
  var name = _ref4.name, onFocus4 = _ref4.onFocus;
  return jsx("input", {
    required: true,
    name,
    tabIndex: -1,
    "aria-hidden": "true",
    onFocus: onFocus4,
    css: _ref22,
    value: "",
    onChange: function onChange2() {
    }
  });
};
var RequiredInput$1 = RequiredInput;
var formatGroupLabel = function formatGroupLabel2(group) {
  return group.label;
};
var getOptionLabel$1 = function getOptionLabel(option) {
  return option.label;
};
var getOptionValue$1 = function getOptionValue(option) {
  return option.value;
};
var isOptionDisabled = function isOptionDisabled2(option) {
  return !!option.isDisabled;
};
var defaultStyles = {
  clearIndicator: clearIndicatorCSS,
  container: containerCSS,
  control: css$1,
  dropdownIndicator: dropdownIndicatorCSS,
  group: groupCSS,
  groupHeading: groupHeadingCSS,
  indicatorsContainer: indicatorsContainerCSS,
  indicatorSeparator: indicatorSeparatorCSS,
  input: inputCSS,
  loadingIndicator: loadingIndicatorCSS,
  loadingMessage: loadingMessageCSS,
  menu: menuCSS,
  menuList: menuListCSS,
  menuPortal: menuPortalCSS,
  multiValue: multiValueCSS,
  multiValueLabel: multiValueLabelCSS,
  multiValueRemove: multiValueRemoveCSS,
  noOptionsMessage: noOptionsMessageCSS,
  option: optionCSS,
  placeholder: placeholderCSS,
  singleValue: css5,
  valueContainer: valueContainerCSS
};
var colors2 = {
  primary: "#2684FF",
  primary75: "#4C9AFF",
  primary50: "#B2D4FF",
  primary25: "#DEEBFF",
  danger: "#DE350B",
  dangerLight: "#FFBDAD",
  neutral0: "hsl(0, 0%, 100%)",
  neutral5: "hsl(0, 0%, 95%)",
  neutral10: "hsl(0, 0%, 90%)",
  neutral20: "hsl(0, 0%, 80%)",
  neutral30: "hsl(0, 0%, 70%)",
  neutral40: "hsl(0, 0%, 60%)",
  neutral50: "hsl(0, 0%, 50%)",
  neutral60: "hsl(0, 0%, 40%)",
  neutral70: "hsl(0, 0%, 30%)",
  neutral80: "hsl(0, 0%, 20%)",
  neutral90: "hsl(0, 0%, 10%)"
};
var borderRadius2 = 4;
var baseUnit = 4;
var controlHeight = 38;
var menuGutter = baseUnit * 2;
var spacing3 = {
  baseUnit,
  controlHeight,
  menuGutter
};
var defaultTheme = {
  borderRadius: borderRadius2,
  colors: colors2,
  spacing: spacing3
};
var defaultProps2 = {
  "aria-live": "polite",
  backspaceRemovesValue: true,
  blurInputOnSelect: isTouchCapable(),
  captureMenuScroll: !isTouchCapable(),
  classNames: {},
  closeMenuOnSelect: true,
  closeMenuOnScroll: false,
  components: {},
  controlShouldRenderValue: true,
  escapeClearsValue: false,
  filterOption: createFilter(),
  formatGroupLabel,
  getOptionLabel: getOptionLabel$1,
  getOptionValue: getOptionValue$1,
  isDisabled: false,
  isLoading: false,
  isMulti: false,
  isRtl: false,
  isSearchable: true,
  isOptionDisabled,
  loadingMessage: function loadingMessage() {
    return "Loading...";
  },
  maxMenuHeight: 300,
  minMenuHeight: 140,
  menuIsOpen: false,
  menuPlacement: "bottom",
  menuPosition: "absolute",
  menuShouldBlockScroll: false,
  menuShouldScrollIntoView: !isMobileDevice(),
  noOptionsMessage: function noOptionsMessage() {
    return "No options";
  },
  openMenuOnFocus: false,
  openMenuOnClick: true,
  options: [],
  pageSize: 5,
  placeholder: "Select...",
  screenReaderStatus: function screenReaderStatus(_ref4) {
    var count = _ref4.count;
    return "".concat(count, " result").concat(count !== 1 ? "s" : "", " available");
  },
  styles: {},
  tabIndex: 0,
  tabSelectsValue: true,
  unstyled: false
};
function toCategorizedOption(props, option, selectValue, index5) {
  var isDisabled3 = _isOptionDisabled(props, option, selectValue);
  var isSelected = _isOptionSelected(props, option, selectValue);
  var label = getOptionLabel2(props, option);
  var value = getOptionValue2(props, option);
  return {
    type: "option",
    data: option,
    isDisabled: isDisabled3,
    isSelected,
    label,
    value,
    index: index5
  };
}
function buildCategorizedOptions(props, selectValue) {
  return props.options.map(function(groupOrOption, groupOrOptionIndex) {
    if ("options" in groupOrOption) {
      var categorizedOptions = groupOrOption.options.map(function(option, optionIndex) {
        return toCategorizedOption(props, option, selectValue, optionIndex);
      }).filter(function(categorizedOption2) {
        return isFocusable3(props, categorizedOption2);
      });
      return categorizedOptions.length > 0 ? {
        type: "group",
        data: groupOrOption,
        options: categorizedOptions,
        index: groupOrOptionIndex
      } : void 0;
    }
    var categorizedOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);
    return isFocusable3(props, categorizedOption) ? categorizedOption : void 0;
  }).filter(notNullish);
}
function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
  return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {
    if (categorizedOption.type === "group") {
      optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function(option) {
        return option.data;
      })));
    } else {
      optionsAccumulator.push(categorizedOption.data);
    }
    return optionsAccumulator;
  }, []);
}
function buildFocusableOptions(props, selectValue) {
  return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue));
}
function isFocusable3(props, categorizedOption) {
  var _props$inputValue = props.inputValue, inputValue = _props$inputValue === void 0 ? "" : _props$inputValue;
  var data = categorizedOption.data, isSelected = categorizedOption.isSelected, label = categorizedOption.label, value = categorizedOption.value;
  return (!shouldHideSelectedOptions(props) || !isSelected) && _filterOption(props, {
    label,
    value,
    data
  }, inputValue);
}
function getNextFocusedValue(state2, nextSelectValue) {
  var focusedValue = state2.focusedValue, lastSelectValue = state2.selectValue;
  var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);
  if (lastFocusedIndex > -1) {
    var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);
    if (nextFocusedIndex > -1) {
      return focusedValue;
    } else if (lastFocusedIndex < nextSelectValue.length) {
      return nextSelectValue[lastFocusedIndex];
    }
  }
  return null;
}
function getNextFocusedOption(state2, options2) {
  var lastFocusedOption = state2.focusedOption;
  return lastFocusedOption && options2.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options2[0];
}
var getOptionLabel2 = function getOptionLabel3(props, data) {
  return props.getOptionLabel(data);
};
var getOptionValue2 = function getOptionValue3(props, data) {
  return props.getOptionValue(data);
};
function _isOptionDisabled(props, option, selectValue) {
  return typeof props.isOptionDisabled === "function" ? props.isOptionDisabled(option, selectValue) : false;
}
function _isOptionSelected(props, option, selectValue) {
  if (selectValue.indexOf(option) > -1)
    return true;
  if (typeof props.isOptionSelected === "function") {
    return props.isOptionSelected(option, selectValue);
  }
  var candidate = getOptionValue2(props, option);
  return selectValue.some(function(i2) {
    return getOptionValue2(props, i2) === candidate;
  });
}
function _filterOption(props, option, inputValue) {
  return props.filterOption ? props.filterOption(option, inputValue) : true;
}
var shouldHideSelectedOptions = function shouldHideSelectedOptions2(props) {
  var hideSelectedOptions = props.hideSelectedOptions, isMulti = props.isMulti;
  if (hideSelectedOptions === void 0)
    return isMulti;
  return hideSelectedOptions;
};
var instanceId = 1;
var Select2 = function(_Component) {
  _inherits(Select5, _Component);
  var _super = _createSuper(Select5);
  function Select5(_props) {
    var _this;
    _classCallCheck(this, Select5);
    _this = _super.call(this, _props);
    _this.state = {
      ariaSelection: null,
      focusedOption: null,
      focusedValue: null,
      inputIsHidden: false,
      isFocused: false,
      selectValue: [],
      clearFocusValueOnUpdate: false,
      prevWasFocused: false,
      inputIsHiddenAfterUpdate: void 0,
      prevProps: void 0
    };
    _this.blockOptionHover = false;
    _this.isComposing = false;
    _this.commonProps = void 0;
    _this.initialTouchX = 0;
    _this.initialTouchY = 0;
    _this.instancePrefix = "";
    _this.openAfterFocus = false;
    _this.scrollToFocusedOptionOnUpdate = false;
    _this.userIsDragging = void 0;
    _this.controlRef = null;
    _this.getControlRef = function(ref) {
      _this.controlRef = ref;
    };
    _this.focusedOptionRef = null;
    _this.getFocusedOptionRef = function(ref) {
      _this.focusedOptionRef = ref;
    };
    _this.menuListRef = null;
    _this.getMenuListRef = function(ref) {
      _this.menuListRef = ref;
    };
    _this.inputRef = null;
    _this.getInputRef = function(ref) {
      _this.inputRef = ref;
    };
    _this.focus = _this.focusInput;
    _this.blur = _this.blurInput;
    _this.onChange = function(newValue, actionMeta) {
      var _this$props = _this.props, onChange2 = _this$props.onChange, name = _this$props.name;
      actionMeta.name = name;
      _this.ariaOnChange(newValue, actionMeta);
      onChange2(newValue, actionMeta);
    };
    _this.setValue = function(newValue, action, option) {
      var _this$props2 = _this.props, closeMenuOnSelect = _this$props2.closeMenuOnSelect, isMulti = _this$props2.isMulti, inputValue = _this$props2.inputValue;
      _this.onInputChange("", {
        action: "set-value",
        prevInputValue: inputValue
      });
      if (closeMenuOnSelect) {
        _this.setState({
          inputIsHiddenAfterUpdate: !isMulti
        });
        _this.onMenuClose();
      }
      _this.setState({
        clearFocusValueOnUpdate: true
      });
      _this.onChange(newValue, {
        action,
        option
      });
    };
    _this.selectOption = function(newValue) {
      var _this$props3 = _this.props, blurInputOnSelect = _this$props3.blurInputOnSelect, isMulti = _this$props3.isMulti, name = _this$props3.name;
      var selectValue = _this.state.selectValue;
      var deselected = isMulti && _this.isOptionSelected(newValue, selectValue);
      var isDisabled3 = _this.isOptionDisabled(newValue, selectValue);
      if (deselected) {
        var candidate = _this.getOptionValue(newValue);
        _this.setValue(multiValueAsValue(selectValue.filter(function(i2) {
          return _this.getOptionValue(i2) !== candidate;
        })), "deselect-option", newValue);
      } else if (!isDisabled3) {
        if (isMulti) {
          _this.setValue(multiValueAsValue([].concat(_toConsumableArray(selectValue), [newValue])), "select-option", newValue);
        } else {
          _this.setValue(singleValueAsValue(newValue), "select-option");
        }
      } else {
        _this.ariaOnChange(singleValueAsValue(newValue), {
          action: "select-option",
          option: newValue,
          name
        });
        return;
      }
      if (blurInputOnSelect) {
        _this.blurInput();
      }
    };
    _this.removeValue = function(removedValue) {
      var isMulti = _this.props.isMulti;
      var selectValue = _this.state.selectValue;
      var candidate = _this.getOptionValue(removedValue);
      var newValueArray = selectValue.filter(function(i2) {
        return _this.getOptionValue(i2) !== candidate;
      });
      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
      _this.onChange(newValue, {
        action: "remove-value",
        removedValue
      });
      _this.focusInput();
    };
    _this.clearValue = function() {
      var selectValue = _this.state.selectValue;
      _this.onChange(valueTernary(_this.props.isMulti, [], null), {
        action: "clear",
        removedValues: selectValue
      });
    };
    _this.popValue = function() {
      var isMulti = _this.props.isMulti;
      var selectValue = _this.state.selectValue;
      var lastSelectedValue = selectValue[selectValue.length - 1];
      var newValueArray = selectValue.slice(0, selectValue.length - 1);
      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
      _this.onChange(newValue, {
        action: "pop-value",
        removedValue: lastSelectedValue
      });
    };
    _this.getValue = function() {
      return _this.state.selectValue;
    };
    _this.cx = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return classNames2.apply(void 0, [_this.props.classNamePrefix].concat(args));
    };
    _this.getOptionLabel = function(data) {
      return getOptionLabel2(_this.props, data);
    };
    _this.getOptionValue = function(data) {
      return getOptionValue2(_this.props, data);
    };
    _this.getStyles = function(key2, props) {
      var unstyled = _this.props.unstyled;
      var base = defaultStyles[key2](props, unstyled);
      base.boxSizing = "border-box";
      var custom = _this.props.styles[key2];
      return custom ? custom(base, props) : base;
    };
    _this.getClassNames = function(key2, props) {
      var _this$props$className, _this$props$className2;
      return (_this$props$className = (_this$props$className2 = _this.props.classNames)[key2]) === null || _this$props$className === void 0 ? void 0 : _this$props$className.call(_this$props$className2, props);
    };
    _this.getElementId = function(element) {
      return "".concat(_this.instancePrefix, "-").concat(element);
    };
    _this.getComponents = function() {
      return defaultComponents(_this.props);
    };
    _this.buildCategorizedOptions = function() {
      return buildCategorizedOptions(_this.props, _this.state.selectValue);
    };
    _this.getCategorizedOptions = function() {
      return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];
    };
    _this.buildFocusableOptions = function() {
      return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());
    };
    _this.getFocusableOptions = function() {
      return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];
    };
    _this.ariaOnChange = function(value, actionMeta) {
      _this.setState({
        ariaSelection: _objectSpread2({
          value
        }, actionMeta)
      });
    };
    _this.onMenuMouseDown = function(event) {
      if (event.button !== 0) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      _this.focusInput();
    };
    _this.onMenuMouseMove = function(event) {
      _this.blockOptionHover = false;
    };
    _this.onControlMouseDown = function(event) {
      if (event.defaultPrevented) {
        return;
      }
      var openMenuOnClick = _this.props.openMenuOnClick;
      if (!_this.state.isFocused) {
        if (openMenuOnClick) {
          _this.openAfterFocus = true;
        }
        _this.focusInput();
      } else if (!_this.props.menuIsOpen) {
        if (openMenuOnClick) {
          _this.openMenu("first");
        }
      } else {
        if (event.target.tagName !== "INPUT" && event.target.tagName !== "TEXTAREA") {
          _this.onMenuClose();
        }
      }
      if (event.target.tagName !== "INPUT" && event.target.tagName !== "TEXTAREA") {
        event.preventDefault();
      }
    };
    _this.onDropdownIndicatorMouseDown = function(event) {
      if (event && event.type === "mousedown" && event.button !== 0) {
        return;
      }
      if (_this.props.isDisabled)
        return;
      var _this$props4 = _this.props, isMulti = _this$props4.isMulti, menuIsOpen = _this$props4.menuIsOpen;
      _this.focusInput();
      if (menuIsOpen) {
        _this.setState({
          inputIsHiddenAfterUpdate: !isMulti
        });
        _this.onMenuClose();
      } else {
        _this.openMenu("first");
      }
      event.preventDefault();
    };
    _this.onClearIndicatorMouseDown = function(event) {
      if (event && event.type === "mousedown" && event.button !== 0) {
        return;
      }
      _this.clearValue();
      event.preventDefault();
      _this.openAfterFocus = false;
      if (event.type === "touchend") {
        _this.focusInput();
      } else {
        setTimeout(function() {
          return _this.focusInput();
        });
      }
    };
    _this.onScroll = function(event) {
      if (typeof _this.props.closeMenuOnScroll === "boolean") {
        if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
          _this.props.onMenuClose();
        }
      } else if (typeof _this.props.closeMenuOnScroll === "function") {
        if (_this.props.closeMenuOnScroll(event)) {
          _this.props.onMenuClose();
        }
      }
    };
    _this.onCompositionStart = function() {
      _this.isComposing = true;
    };
    _this.onCompositionEnd = function() {
      _this.isComposing = false;
    };
    _this.onTouchStart = function(_ref23) {
      var touches = _ref23.touches;
      var touch = touches && touches.item(0);
      if (!touch) {
        return;
      }
      _this.initialTouchX = touch.clientX;
      _this.initialTouchY = touch.clientY;
      _this.userIsDragging = false;
    };
    _this.onTouchMove = function(_ref32) {
      var touches = _ref32.touches;
      var touch = touches && touches.item(0);
      if (!touch) {
        return;
      }
      var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
      var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
      var moveThreshold = 5;
      _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
    };
    _this.onTouchEnd = function(event) {
      if (_this.userIsDragging)
        return;
      if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
        _this.blurInput();
      }
      _this.initialTouchX = 0;
      _this.initialTouchY = 0;
    };
    _this.onControlTouchEnd = function(event) {
      if (_this.userIsDragging)
        return;
      _this.onControlMouseDown(event);
    };
    _this.onClearIndicatorTouchEnd = function(event) {
      if (_this.userIsDragging)
        return;
      _this.onClearIndicatorMouseDown(event);
    };
    _this.onDropdownIndicatorTouchEnd = function(event) {
      if (_this.userIsDragging)
        return;
      _this.onDropdownIndicatorMouseDown(event);
    };
    _this.handleInputChange = function(event) {
      var prevInputValue = _this.props.inputValue;
      var inputValue = event.currentTarget.value;
      _this.setState({
        inputIsHiddenAfterUpdate: false
      });
      _this.onInputChange(inputValue, {
        action: "input-change",
        prevInputValue
      });
      if (!_this.props.menuIsOpen) {
        _this.onMenuOpen();
      }
    };
    _this.onInputFocus = function(event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
      _this.setState({
        inputIsHiddenAfterUpdate: false,
        isFocused: true
      });
      if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
        _this.openMenu("first");
      }
      _this.openAfterFocus = false;
    };
    _this.onInputBlur = function(event) {
      var prevInputValue = _this.props.inputValue;
      if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
        _this.inputRef.focus();
        return;
      }
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
      _this.onInputChange("", {
        action: "input-blur",
        prevInputValue
      });
      _this.onMenuClose();
      _this.setState({
        focusedValue: null,
        isFocused: false
      });
    };
    _this.onOptionHover = function(focusedOption) {
      if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
        return;
      }
      _this.setState({
        focusedOption
      });
    };
    _this.shouldHideSelectedOptions = function() {
      return shouldHideSelectedOptions(_this.props);
    };
    _this.onValueInputFocus = function(e) {
      e.preventDefault();
      e.stopPropagation();
      _this.focus();
    };
    _this.onKeyDown = function(event) {
      var _this$props5 = _this.props, isMulti = _this$props5.isMulti, backspaceRemovesValue = _this$props5.backspaceRemovesValue, escapeClearsValue = _this$props5.escapeClearsValue, inputValue = _this$props5.inputValue, isClearable = _this$props5.isClearable, isDisabled3 = _this$props5.isDisabled, menuIsOpen = _this$props5.menuIsOpen, onKeyDown = _this$props5.onKeyDown, tabSelectsValue = _this$props5.tabSelectsValue, openMenuOnFocus = _this$props5.openMenuOnFocus;
      var _this$state = _this.state, focusedOption = _this$state.focusedOption, focusedValue = _this$state.focusedValue, selectValue = _this$state.selectValue;
      if (isDisabled3)
        return;
      if (typeof onKeyDown === "function") {
        onKeyDown(event);
        if (event.defaultPrevented) {
          return;
        }
      }
      _this.blockOptionHover = true;
      switch (event.key) {
        case "ArrowLeft":
          if (!isMulti || inputValue)
            return;
          _this.focusValue("previous");
          break;
        case "ArrowRight":
          if (!isMulti || inputValue)
            return;
          _this.focusValue("next");
          break;
        case "Delete":
        case "Backspace":
          if (inputValue)
            return;
          if (focusedValue) {
            _this.removeValue(focusedValue);
          } else {
            if (!backspaceRemovesValue)
              return;
            if (isMulti) {
              _this.popValue();
            } else if (isClearable) {
              _this.clearValue();
            }
          }
          break;
        case "Tab":
          if (_this.isComposing)
            return;
          if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption || // don't capture the event if the menu opens on focus and the focused
          // option is already selected; it breaks the flow of navigation
          openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
            return;
          }
          _this.selectOption(focusedOption);
          break;
        case "Enter":
          if (event.keyCode === 229) {
            break;
          }
          if (menuIsOpen) {
            if (!focusedOption)
              return;
            if (_this.isComposing)
              return;
            _this.selectOption(focusedOption);
            break;
          }
          return;
        case "Escape":
          if (menuIsOpen) {
            _this.setState({
              inputIsHiddenAfterUpdate: false
            });
            _this.onInputChange("", {
              action: "menu-close",
              prevInputValue: inputValue
            });
            _this.onMenuClose();
          } else if (isClearable && escapeClearsValue) {
            _this.clearValue();
          }
          break;
        case " ":
          if (inputValue) {
            return;
          }
          if (!menuIsOpen) {
            _this.openMenu("first");
            break;
          }
          if (!focusedOption)
            return;
          _this.selectOption(focusedOption);
          break;
        case "ArrowUp":
          if (menuIsOpen) {
            _this.focusOption("up");
          } else {
            _this.openMenu("last");
          }
          break;
        case "ArrowDown":
          if (menuIsOpen) {
            _this.focusOption("down");
          } else {
            _this.openMenu("first");
          }
          break;
        case "PageUp":
          if (!menuIsOpen)
            return;
          _this.focusOption("pageup");
          break;
        case "PageDown":
          if (!menuIsOpen)
            return;
          _this.focusOption("pagedown");
          break;
        case "Home":
          if (!menuIsOpen)
            return;
          _this.focusOption("first");
          break;
        case "End":
          if (!menuIsOpen)
            return;
          _this.focusOption("last");
          break;
        default:
          return;
      }
      event.preventDefault();
    };
    _this.instancePrefix = "react-select-" + (_this.props.instanceId || ++instanceId);
    _this.state.selectValue = cleanValue(_props.value);
    if (_props.menuIsOpen && _this.state.selectValue.length) {
      var focusableOptions = _this.buildFocusableOptions();
      var optionIndex = focusableOptions.indexOf(_this.state.selectValue[0]);
      _this.state.focusedOption = focusableOptions[optionIndex];
    }
    return _this;
  }
  _createClass(Select5, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.startListeningComposition();
      this.startListeningToTouch();
      if (this.props.closeMenuOnScroll && document && document.addEventListener) {
        document.addEventListener("scroll", this.onScroll, true);
      }
      if (this.props.autoFocus) {
        this.focusInput();
      }
      if (this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef) {
        scrollIntoView(this.menuListRef, this.focusedOptionRef);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props6 = this.props, isDisabled3 = _this$props6.isDisabled, menuIsOpen = _this$props6.menuIsOpen;
      var isFocused = this.state.isFocused;
      if (
        // ensure focus is restored correctly when the control becomes enabled
        isFocused && !isDisabled3 && prevProps.isDisabled || // ensure focus is on the Input when the menu opens
        isFocused && menuIsOpen && !prevProps.menuIsOpen
      ) {
        this.focusInput();
      }
      if (isFocused && isDisabled3 && !prevProps.isDisabled) {
        this.setState({
          isFocused: false
        }, this.onMenuClose);
      } else if (!isFocused && !isDisabled3 && prevProps.isDisabled && this.inputRef === document.activeElement) {
        this.setState({
          isFocused: true
        });
      }
      if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
        scrollIntoView(this.menuListRef, this.focusedOptionRef);
        this.scrollToFocusedOptionOnUpdate = false;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.stopListeningComposition();
      this.stopListeningToTouch();
      document.removeEventListener("scroll", this.onScroll, true);
    }
    // ==============================
    // Consumer Handlers
    // ==============================
  }, {
    key: "onMenuOpen",
    value: function onMenuOpen() {
      this.props.onMenuOpen();
    }
  }, {
    key: "onMenuClose",
    value: function onMenuClose() {
      this.onInputChange("", {
        action: "menu-close",
        prevInputValue: this.props.inputValue
      });
      this.props.onMenuClose();
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(newValue, actionMeta) {
      this.props.onInputChange(newValue, actionMeta);
    }
    // ==============================
    // Methods
    // ==============================
  }, {
    key: "focusInput",
    value: function focusInput() {
      if (!this.inputRef)
        return;
      this.inputRef.focus();
    }
  }, {
    key: "blurInput",
    value: function blurInput() {
      if (!this.inputRef)
        return;
      this.inputRef.blur();
    }
    // aliased for consumers
  }, {
    key: "openMenu",
    value: function openMenu(focusOption) {
      var _this2 = this;
      var _this$state2 = this.state, selectValue = _this$state2.selectValue, isFocused = _this$state2.isFocused;
      var focusableOptions = this.buildFocusableOptions();
      var openAtIndex = focusOption === "first" ? 0 : focusableOptions.length - 1;
      if (!this.props.isMulti) {
        var selectedIndex = focusableOptions.indexOf(selectValue[0]);
        if (selectedIndex > -1) {
          openAtIndex = selectedIndex;
        }
      }
      this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
      this.setState({
        inputIsHiddenAfterUpdate: false,
        focusedValue: null,
        focusedOption: focusableOptions[openAtIndex]
      }, function() {
        return _this2.onMenuOpen();
      });
    }
  }, {
    key: "focusValue",
    value: function focusValue(direction2) {
      var _this$state3 = this.state, selectValue = _this$state3.selectValue, focusedValue = _this$state3.focusedValue;
      if (!this.props.isMulti)
        return;
      this.setState({
        focusedOption: null
      });
      var focusedIndex = selectValue.indexOf(focusedValue);
      if (!focusedValue) {
        focusedIndex = -1;
      }
      var lastIndex = selectValue.length - 1;
      var nextFocus = -1;
      if (!selectValue.length)
        return;
      switch (direction2) {
        case "previous":
          if (focusedIndex === 0) {
            nextFocus = 0;
          } else if (focusedIndex === -1) {
            nextFocus = lastIndex;
          } else {
            nextFocus = focusedIndex - 1;
          }
          break;
        case "next":
          if (focusedIndex > -1 && focusedIndex < lastIndex) {
            nextFocus = focusedIndex + 1;
          }
          break;
      }
      this.setState({
        inputIsHidden: nextFocus !== -1,
        focusedValue: selectValue[nextFocus]
      });
    }
  }, {
    key: "focusOption",
    value: function focusOption() {
      var direction2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "first";
      var pageSize = this.props.pageSize;
      var focusedOption = this.state.focusedOption;
      var options2 = this.getFocusableOptions();
      if (!options2.length)
        return;
      var nextFocus = 0;
      var focusedIndex = options2.indexOf(focusedOption);
      if (!focusedOption) {
        focusedIndex = -1;
      }
      if (direction2 === "up") {
        nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options2.length - 1;
      } else if (direction2 === "down") {
        nextFocus = (focusedIndex + 1) % options2.length;
      } else if (direction2 === "pageup") {
        nextFocus = focusedIndex - pageSize;
        if (nextFocus < 0)
          nextFocus = 0;
      } else if (direction2 === "pagedown") {
        nextFocus = focusedIndex + pageSize;
        if (nextFocus > options2.length - 1)
          nextFocus = options2.length - 1;
      } else if (direction2 === "last") {
        nextFocus = options2.length - 1;
      }
      this.scrollToFocusedOptionOnUpdate = true;
      this.setState({
        focusedOption: options2[nextFocus],
        focusedValue: null
      });
    }
  }, {
    key: "getTheme",
    value: (
      // ==============================
      // Getters
      // ==============================
      function getTheme4() {
        if (!this.props.theme) {
          return defaultTheme;
        }
        if (typeof this.props.theme === "function") {
          return this.props.theme(defaultTheme);
        }
        return _objectSpread2(_objectSpread2({}, defaultTheme), this.props.theme);
      }
    )
  }, {
    key: "getCommonProps",
    value: function getCommonProps() {
      var clearValue = this.clearValue, cx4 = this.cx, getStyles4 = this.getStyles, getClassNames = this.getClassNames, getValue2 = this.getValue, selectOption = this.selectOption, setValue = this.setValue, props = this.props;
      var isMulti = props.isMulti, isRtl = props.isRtl, options2 = props.options;
      var hasValue = this.hasValue();
      return {
        clearValue,
        cx: cx4,
        getStyles: getStyles4,
        getClassNames,
        getValue: getValue2,
        hasValue,
        isMulti,
        isRtl,
        options: options2,
        selectOption,
        selectProps: props,
        setValue,
        theme: this.getTheme()
      };
    }
  }, {
    key: "hasValue",
    value: function hasValue() {
      var selectValue = this.state.selectValue;
      return selectValue.length > 0;
    }
  }, {
    key: "hasOptions",
    value: function hasOptions() {
      return !!this.getFocusableOptions().length;
    }
  }, {
    key: "isClearable",
    value: function isClearable() {
      var _this$props7 = this.props, isClearable2 = _this$props7.isClearable, isMulti = _this$props7.isMulti;
      if (isClearable2 === void 0)
        return isMulti;
      return isClearable2;
    }
  }, {
    key: "isOptionDisabled",
    value: function isOptionDisabled3(option, selectValue) {
      return _isOptionDisabled(this.props, option, selectValue);
    }
  }, {
    key: "isOptionSelected",
    value: function isOptionSelected(option, selectValue) {
      return _isOptionSelected(this.props, option, selectValue);
    }
  }, {
    key: "filterOption",
    value: function filterOption(option, inputValue) {
      return _filterOption(this.props, option, inputValue);
    }
  }, {
    key: "formatOptionLabel",
    value: function formatOptionLabel(data, context2) {
      if (typeof this.props.formatOptionLabel === "function") {
        var _inputValue = this.props.inputValue;
        var _selectValue = this.state.selectValue;
        return this.props.formatOptionLabel(data, {
          context: context2,
          inputValue: _inputValue,
          selectValue: _selectValue
        });
      } else {
        return this.getOptionLabel(data);
      }
    }
  }, {
    key: "formatGroupLabel",
    value: function formatGroupLabel3(data) {
      return this.props.formatGroupLabel(data);
    }
    // ==============================
    // Mouse Handlers
    // ==============================
  }, {
    key: "startListeningComposition",
    value: (
      // ==============================
      // Composition Handlers
      // ==============================
      function startListeningComposition() {
        if (document && document.addEventListener) {
          document.addEventListener("compositionstart", this.onCompositionStart, false);
          document.addEventListener("compositionend", this.onCompositionEnd, false);
        }
      }
    )
  }, {
    key: "stopListeningComposition",
    value: function stopListeningComposition() {
      if (document && document.removeEventListener) {
        document.removeEventListener("compositionstart", this.onCompositionStart);
        document.removeEventListener("compositionend", this.onCompositionEnd);
      }
    }
  }, {
    key: "startListeningToTouch",
    value: (
      // ==============================
      // Touch Handlers
      // ==============================
      function startListeningToTouch() {
        if (document && document.addEventListener) {
          document.addEventListener("touchstart", this.onTouchStart, false);
          document.addEventListener("touchmove", this.onTouchMove, false);
          document.addEventListener("touchend", this.onTouchEnd, false);
        }
      }
    )
  }, {
    key: "stopListeningToTouch",
    value: function stopListeningToTouch() {
      if (document && document.removeEventListener) {
        document.removeEventListener("touchstart", this.onTouchStart);
        document.removeEventListener("touchmove", this.onTouchMove);
        document.removeEventListener("touchend", this.onTouchEnd);
      }
    }
  }, {
    key: "renderInput",
    value: (
      // ==============================
      // Renderers
      // ==============================
      function renderInput() {
        var _this$props8 = this.props, isDisabled3 = _this$props8.isDisabled, isSearchable = _this$props8.isSearchable, inputId = _this$props8.inputId, inputValue = _this$props8.inputValue, tabIndex = _this$props8.tabIndex, form = _this$props8.form, menuIsOpen = _this$props8.menuIsOpen, required = _this$props8.required;
        var _this$getComponents = this.getComponents(), Input8 = _this$getComponents.Input;
        var _this$state4 = this.state, inputIsHidden = _this$state4.inputIsHidden, ariaSelection = _this$state4.ariaSelection;
        var commonProps = this.commonProps;
        var id3 = inputId || this.getElementId("input");
        var ariaAttributes = _objectSpread2(_objectSpread2(_objectSpread2({
          "aria-autocomplete": "list",
          "aria-expanded": menuIsOpen,
          "aria-haspopup": true,
          "aria-errormessage": this.props["aria-errormessage"],
          "aria-invalid": this.props["aria-invalid"],
          "aria-label": this.props["aria-label"],
          "aria-labelledby": this.props["aria-labelledby"],
          "aria-required": required,
          role: "combobox"
        }, menuIsOpen && {
          "aria-controls": this.getElementId("listbox"),
          "aria-owns": this.getElementId("listbox")
        }), !isSearchable && {
          "aria-readonly": true
        }), this.hasValue() ? (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus" && {
          "aria-describedby": this.getElementId("live-region")
        } : {
          "aria-describedby": this.getElementId("placeholder")
        });
        if (!isSearchable) {
          return React34.createElement(DummyInput, _extends({
            id: id3,
            innerRef: this.getInputRef,
            onBlur: this.onInputBlur,
            onChange: noop4,
            onFocus: this.onInputFocus,
            disabled: isDisabled3,
            tabIndex,
            inputMode: "none",
            form,
            value: ""
          }, ariaAttributes));
        }
        return React34.createElement(Input8, _extends({}, commonProps, {
          autoCapitalize: "none",
          autoComplete: "off",
          autoCorrect: "off",
          id: id3,
          innerRef: this.getInputRef,
          isDisabled: isDisabled3,
          isHidden: inputIsHidden,
          onBlur: this.onInputBlur,
          onChange: this.handleInputChange,
          onFocus: this.onInputFocus,
          spellCheck: "false",
          tabIndex,
          form,
          type: "text",
          value: inputValue
        }, ariaAttributes));
      }
    )
  }, {
    key: "renderPlaceholderOrValue",
    value: function renderPlaceholderOrValue() {
      var _this3 = this;
      var _this$getComponents2 = this.getComponents(), MultiValue5 = _this$getComponents2.MultiValue, MultiValueContainer4 = _this$getComponents2.MultiValueContainer, MultiValueLabel4 = _this$getComponents2.MultiValueLabel, MultiValueRemove4 = _this$getComponents2.MultiValueRemove, SingleValue5 = _this$getComponents2.SingleValue, Placeholder5 = _this$getComponents2.Placeholder;
      var commonProps = this.commonProps;
      var _this$props9 = this.props, controlShouldRenderValue = _this$props9.controlShouldRenderValue, isDisabled3 = _this$props9.isDisabled, isMulti = _this$props9.isMulti, inputValue = _this$props9.inputValue, placeholder = _this$props9.placeholder;
      var _this$state5 = this.state, selectValue = _this$state5.selectValue, focusedValue = _this$state5.focusedValue, isFocused = _this$state5.isFocused;
      if (!this.hasValue() || !controlShouldRenderValue) {
        return inputValue ? null : React34.createElement(Placeholder5, _extends({}, commonProps, {
          key: "placeholder",
          isDisabled: isDisabled3,
          isFocused,
          innerProps: {
            id: this.getElementId("placeholder")
          }
        }), placeholder);
      }
      if (isMulti) {
        return selectValue.map(function(opt, index5) {
          var isOptionFocused = opt === focusedValue;
          var key2 = "".concat(_this3.getOptionLabel(opt), "-").concat(_this3.getOptionValue(opt));
          return React34.createElement(MultiValue5, _extends({}, commonProps, {
            components: {
              Container: MultiValueContainer4,
              Label: MultiValueLabel4,
              Remove: MultiValueRemove4
            },
            isFocused: isOptionFocused,
            isDisabled: isDisabled3,
            key: key2,
            index: index5,
            removeProps: {
              onClick: function onClick() {
                return _this3.removeValue(opt);
              },
              onTouchEnd: function onTouchEnd() {
                return _this3.removeValue(opt);
              },
              onMouseDown: function onMouseDown(e) {
                e.preventDefault();
              }
            },
            data: opt
          }), _this3.formatOptionLabel(opt, "value"));
        });
      }
      if (inputValue) {
        return null;
      }
      var singleValue = selectValue[0];
      return React34.createElement(SingleValue5, _extends({}, commonProps, {
        data: singleValue,
        isDisabled: isDisabled3
      }), this.formatOptionLabel(singleValue, "value"));
    }
  }, {
    key: "renderClearIndicator",
    value: function renderClearIndicator() {
      var _this$getComponents3 = this.getComponents(), ClearIndicator5 = _this$getComponents3.ClearIndicator;
      var commonProps = this.commonProps;
      var _this$props10 = this.props, isDisabled3 = _this$props10.isDisabled, isLoading = _this$props10.isLoading;
      var isFocused = this.state.isFocused;
      if (!this.isClearable() || !ClearIndicator5 || isDisabled3 || !this.hasValue() || isLoading) {
        return null;
      }
      var innerProps = {
        onMouseDown: this.onClearIndicatorMouseDown,
        onTouchEnd: this.onClearIndicatorTouchEnd,
        "aria-hidden": "true"
      };
      return React34.createElement(ClearIndicator5, _extends({}, commonProps, {
        innerProps,
        isFocused
      }));
    }
  }, {
    key: "renderLoadingIndicator",
    value: function renderLoadingIndicator() {
      var _this$getComponents4 = this.getComponents(), LoadingIndicator5 = _this$getComponents4.LoadingIndicator;
      var commonProps = this.commonProps;
      var _this$props11 = this.props, isDisabled3 = _this$props11.isDisabled, isLoading = _this$props11.isLoading;
      var isFocused = this.state.isFocused;
      if (!LoadingIndicator5 || !isLoading)
        return null;
      var innerProps = {
        "aria-hidden": "true"
      };
      return React34.createElement(LoadingIndicator5, _extends({}, commonProps, {
        innerProps,
        isDisabled: isDisabled3,
        isFocused
      }));
    }
  }, {
    key: "renderIndicatorSeparator",
    value: function renderIndicatorSeparator() {
      var _this$getComponents5 = this.getComponents(), DropdownIndicator5 = _this$getComponents5.DropdownIndicator, IndicatorSeparator5 = _this$getComponents5.IndicatorSeparator;
      if (!DropdownIndicator5 || !IndicatorSeparator5)
        return null;
      var commonProps = this.commonProps;
      var isDisabled3 = this.props.isDisabled;
      var isFocused = this.state.isFocused;
      return React34.createElement(IndicatorSeparator5, _extends({}, commonProps, {
        isDisabled: isDisabled3,
        isFocused
      }));
    }
  }, {
    key: "renderDropdownIndicator",
    value: function renderDropdownIndicator() {
      var _this$getComponents6 = this.getComponents(), DropdownIndicator5 = _this$getComponents6.DropdownIndicator;
      if (!DropdownIndicator5)
        return null;
      var commonProps = this.commonProps;
      var isDisabled3 = this.props.isDisabled;
      var isFocused = this.state.isFocused;
      var innerProps = {
        onMouseDown: this.onDropdownIndicatorMouseDown,
        onTouchEnd: this.onDropdownIndicatorTouchEnd,
        "aria-hidden": "true"
      };
      return React34.createElement(DropdownIndicator5, _extends({}, commonProps, {
        innerProps,
        isDisabled: isDisabled3,
        isFocused
      }));
    }
  }, {
    key: "renderMenu",
    value: function renderMenu() {
      var _this4 = this;
      var _this$getComponents7 = this.getComponents(), Group6 = _this$getComponents7.Group, GroupHeading5 = _this$getComponents7.GroupHeading, Menu7 = _this$getComponents7.Menu, MenuList7 = _this$getComponents7.MenuList, MenuPortal3 = _this$getComponents7.MenuPortal, LoadingMessage5 = _this$getComponents7.LoadingMessage, NoOptionsMessage5 = _this$getComponents7.NoOptionsMessage, Option5 = _this$getComponents7.Option;
      var commonProps = this.commonProps;
      var focusedOption = this.state.focusedOption;
      var _this$props12 = this.props, captureMenuScroll = _this$props12.captureMenuScroll, inputValue = _this$props12.inputValue, isLoading = _this$props12.isLoading, loadingMessage2 = _this$props12.loadingMessage, minMenuHeight = _this$props12.minMenuHeight, maxMenuHeight = _this$props12.maxMenuHeight, menuIsOpen = _this$props12.menuIsOpen, menuPlacement = _this$props12.menuPlacement, menuPosition = _this$props12.menuPosition, menuPortalTarget = _this$props12.menuPortalTarget, menuShouldBlockScroll = _this$props12.menuShouldBlockScroll, menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView, noOptionsMessage2 = _this$props12.noOptionsMessage, onMenuScrollToTop = _this$props12.onMenuScrollToTop, onMenuScrollToBottom = _this$props12.onMenuScrollToBottom;
      if (!menuIsOpen)
        return null;
      var render = function render2(props, id3) {
        var type = props.type, data = props.data, isDisabled3 = props.isDisabled, isSelected = props.isSelected, label = props.label, value = props.value;
        var isFocused = focusedOption === data;
        var onHover = isDisabled3 ? void 0 : function() {
          return _this4.onOptionHover(data);
        };
        var onSelect = isDisabled3 ? void 0 : function() {
          return _this4.selectOption(data);
        };
        var optionId = "".concat(_this4.getElementId("option"), "-").concat(id3);
        var innerProps = {
          id: optionId,
          onClick: onSelect,
          onMouseMove: onHover,
          onMouseOver: onHover,
          tabIndex: -1
        };
        return React34.createElement(Option5, _extends({}, commonProps, {
          innerProps,
          data,
          isDisabled: isDisabled3,
          isSelected,
          key: optionId,
          label,
          type,
          value,
          isFocused,
          innerRef: isFocused ? _this4.getFocusedOptionRef : void 0
        }), _this4.formatOptionLabel(props.data, "menu"));
      };
      var menuUI;
      if (this.hasOptions()) {
        menuUI = this.getCategorizedOptions().map(function(item) {
          if (item.type === "group") {
            var _data = item.data, options2 = item.options, groupIndex = item.index;
            var groupId = "".concat(_this4.getElementId("group"), "-").concat(groupIndex);
            var headingId = "".concat(groupId, "-heading");
            return React34.createElement(Group6, _extends({}, commonProps, {
              key: groupId,
              data: _data,
              options: options2,
              Heading: GroupHeading5,
              headingProps: {
                id: headingId,
                data: item.data
              },
              label: _this4.formatGroupLabel(item.data)
            }), item.options.map(function(option) {
              return render(option, "".concat(groupIndex, "-").concat(option.index));
            }));
          } else if (item.type === "option") {
            return render(item, "".concat(item.index));
          }
        });
      } else if (isLoading) {
        var message = loadingMessage2({
          inputValue
        });
        if (message === null)
          return null;
        menuUI = React34.createElement(LoadingMessage5, commonProps, message);
      } else {
        var _message = noOptionsMessage2({
          inputValue
        });
        if (_message === null)
          return null;
        menuUI = React34.createElement(NoOptionsMessage5, commonProps, _message);
      }
      var menuPlacementProps = {
        minMenuHeight,
        maxMenuHeight,
        menuPlacement,
        menuPosition,
        menuShouldScrollIntoView
      };
      var menuElement = React34.createElement(MenuPlacer, _extends({}, commonProps, menuPlacementProps), function(_ref4) {
        var ref = _ref4.ref, _ref4$placerProps = _ref4.placerProps, placement = _ref4$placerProps.placement, maxHeight = _ref4$placerProps.maxHeight;
        return React34.createElement(Menu7, _extends({}, commonProps, menuPlacementProps, {
          innerRef: ref,
          innerProps: {
            onMouseDown: _this4.onMenuMouseDown,
            onMouseMove: _this4.onMenuMouseMove,
            id: _this4.getElementId("listbox")
          },
          isLoading,
          placement
        }), React34.createElement(ScrollManager, {
          captureEnabled: captureMenuScroll,
          onTopArrive: onMenuScrollToTop,
          onBottomArrive: onMenuScrollToBottom,
          lockEnabled: menuShouldBlockScroll
        }, function(scrollTargetRef) {
          return React34.createElement(MenuList7, _extends({}, commonProps, {
            innerRef: function innerRef(instance) {
              _this4.getMenuListRef(instance);
              scrollTargetRef(instance);
            },
            isLoading,
            maxHeight,
            focusedOption
          }), menuUI);
        }));
      });
      return menuPortalTarget || menuPosition === "fixed" ? React34.createElement(MenuPortal3, _extends({}, commonProps, {
        appendTo: menuPortalTarget,
        controlElement: this.controlRef,
        menuPlacement,
        menuPosition
      }), menuElement) : menuElement;
    }
  }, {
    key: "renderFormField",
    value: function renderFormField() {
      var _this5 = this;
      var _this$props13 = this.props, delimiter2 = _this$props13.delimiter, isDisabled3 = _this$props13.isDisabled, isMulti = _this$props13.isMulti, name = _this$props13.name, required = _this$props13.required;
      var selectValue = this.state.selectValue;
      if (required && !this.hasValue() && !isDisabled3) {
        return React34.createElement(RequiredInput$1, {
          name,
          onFocus: this.onValueInputFocus
        });
      }
      if (!name || isDisabled3)
        return;
      if (isMulti) {
        if (delimiter2) {
          var value = selectValue.map(function(opt) {
            return _this5.getOptionValue(opt);
          }).join(delimiter2);
          return React34.createElement("input", {
            name,
            type: "hidden",
            value
          });
        } else {
          var input = selectValue.length > 0 ? selectValue.map(function(opt, i2) {
            return React34.createElement("input", {
              key: "i-".concat(i2),
              name,
              type: "hidden",
              value: _this5.getOptionValue(opt)
            });
          }) : React34.createElement("input", {
            name,
            type: "hidden",
            value: ""
          });
          return React34.createElement("div", null, input);
        }
      } else {
        var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : "";
        return React34.createElement("input", {
          name,
          type: "hidden",
          value: _value
        });
      }
    }
  }, {
    key: "renderLiveRegion",
    value: function renderLiveRegion() {
      var commonProps = this.commonProps;
      var _this$state6 = this.state, ariaSelection = _this$state6.ariaSelection, focusedOption = _this$state6.focusedOption, focusedValue = _this$state6.focusedValue, isFocused = _this$state6.isFocused, selectValue = _this$state6.selectValue;
      var focusableOptions = this.getFocusableOptions();
      return React34.createElement(LiveRegion$1, _extends({}, commonProps, {
        id: this.getElementId("live-region"),
        ariaSelection,
        focusedOption,
        focusedValue,
        isFocused,
        selectValue,
        focusableOptions
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$getComponents8 = this.getComponents(), Control5 = _this$getComponents8.Control, IndicatorsContainer5 = _this$getComponents8.IndicatorsContainer, SelectContainer5 = _this$getComponents8.SelectContainer, ValueContainer5 = _this$getComponents8.ValueContainer;
      var _this$props14 = this.props, className = _this$props14.className, id3 = _this$props14.id, isDisabled3 = _this$props14.isDisabled, menuIsOpen = _this$props14.menuIsOpen;
      var isFocused = this.state.isFocused;
      var commonProps = this.commonProps = this.getCommonProps();
      return React34.createElement(SelectContainer5, _extends({}, commonProps, {
        className,
        innerProps: {
          id: id3,
          onKeyDown: this.onKeyDown
        },
        isDisabled: isDisabled3,
        isFocused
      }), this.renderLiveRegion(), React34.createElement(Control5, _extends({}, commonProps, {
        innerRef: this.getControlRef,
        innerProps: {
          onMouseDown: this.onControlMouseDown,
          onTouchEnd: this.onControlTouchEnd
        },
        isDisabled: isDisabled3,
        isFocused,
        menuIsOpen
      }), React34.createElement(ValueContainer5, _extends({}, commonProps, {
        isDisabled: isDisabled3
      }), this.renderPlaceholderOrValue(), this.renderInput()), React34.createElement(IndicatorsContainer5, _extends({}, commonProps, {
        isDisabled: isDisabled3
      }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state2) {
      var prevProps = state2.prevProps, clearFocusValueOnUpdate = state2.clearFocusValueOnUpdate, inputIsHiddenAfterUpdate = state2.inputIsHiddenAfterUpdate, ariaSelection = state2.ariaSelection, isFocused = state2.isFocused, prevWasFocused = state2.prevWasFocused;
      var options2 = props.options, value = props.value, menuIsOpen = props.menuIsOpen, inputValue = props.inputValue, isMulti = props.isMulti;
      var selectValue = cleanValue(value);
      var newMenuOptionsState = {};
      if (prevProps && (value !== prevProps.value || options2 !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {
        var focusableOptions = menuIsOpen ? buildFocusableOptions(props, selectValue) : [];
        var focusedValue = clearFocusValueOnUpdate ? getNextFocusedValue(state2, selectValue) : null;
        var focusedOption = getNextFocusedOption(state2, focusableOptions);
        newMenuOptionsState = {
          selectValue,
          focusedOption,
          focusedValue,
          clearFocusValueOnUpdate: false
        };
      }
      var newInputIsHiddenState = inputIsHiddenAfterUpdate != null && props !== prevProps ? {
        inputIsHidden: inputIsHiddenAfterUpdate,
        inputIsHiddenAfterUpdate: void 0
      } : {};
      var newAriaSelection = ariaSelection;
      var hasKeptFocus = isFocused && prevWasFocused;
      if (isFocused && !hasKeptFocus) {
        newAriaSelection = {
          value: valueTernary(isMulti, selectValue, selectValue[0] || null),
          options: selectValue,
          action: "initial-input-focus"
        };
        hasKeptFocus = !prevWasFocused;
      }
      if ((ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus") {
        newAriaSelection = null;
      }
      return _objectSpread2(_objectSpread2(_objectSpread2({}, newMenuOptionsState), newInputIsHiddenState), {}, {
        prevProps: props,
        ariaSelection: newAriaSelection,
        prevWasFocused: hasKeptFocus
      });
    }
  }]);
  return Select5;
}(import_react199.Component);
Select2.defaultProps = defaultProps2;

// node_modules/react-select/dist/react-select.esm.js
var import_react_dom3 = __toESM(require_react_dom());
var StateManagedSelect = (0, import_react201.forwardRef)(function(props, ref) {
  var baseSelectProps = useStateManager(props);
  return React35.createElement(Select2, _extends({
    ref
  }, baseSelectProps));
});
var StateManagedSelect$1 = StateManagedSelect;

// node_modules/chakra-react-select/dist/esm/chakra-components/containers.js
var import_react203 = __toESM(require_react());

// node_modules/chakra-react-select/dist/esm/utils.js
var _excluded5 = ["className", "clearValue", "cx", "getStyles", "getClassNames", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue", "theme"];
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var cleanCommonProps3 = function cleanCommonProps4(props) {
  var className = props.className, clearValue = props.clearValue, cx4 = props.cx, getStyles4 = props.getStyles, getClassNames = props.getClassNames, getValue2 = props.getValue, hasValue = props.hasValue, isMulti = props.isMulti, isRtl = props.isRtl, options2 = props.options, selectOption = props.selectOption, selectProps = props.selectProps, setValue = props.setValue, theme3 = props.theme, innerProps = _objectWithoutPropertiesLoose2(props, _excluded5);
  return _extends2({}, innerProps);
};
var isSize = function isSize2(size4) {
  var isString5 = typeof size4 === "string";
  return isString5 && ["sm", "md", "lg"].includes(size4);
};
var getDefaultSize = function getDefaultSize2(size4) {
  if (isSize(size4)) {
    return size4;
  }
  if (size4 === "xs") {
    return "sm";
  }
  if (size4 === "xl") {
    return "lg";
  }
  return "md";
};
var useSize2 = function useSize3(size4) {
  var chakraTheme = useTheme2();
  var defaultSize = getDefaultSize(chakraTheme.components.Input.defaultProps.size);
  var definedSize = size4 != null ? size4 : defaultSize;
  var realSize = useBreakpointValue(typeof definedSize === "string" ? [definedSize] : definedSize, {
    fallback: "md"
  }) || defaultSize;
  return realSize;
};

// node_modules/chakra-react-select/dist/esm/chakra-components/containers.js
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var SelectContainer3 = function SelectContainer4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, innerProps = props.innerProps, isDisabled3 = props.isDisabled, isRtl = props.isRtl, hasValue = props.hasValue, chakraStyles = props.selectProps.chakraStyles;
  var initialSx = _extends3({
    position: "relative",
    direction: isRtl ? "rtl" : void 0
  }, isDisabled3 ? {
    cursor: "not-allowed"
  } : {});
  var sx = chakraStyles != null && chakraStyles.container ? chakraStyles.container(initialSx, props) : initialSx;
  return import_react203.default.createElement(Box, _extends3({}, innerProps, {
    className: cx4({
      "--is-disabled": isDisabled3,
      "--is-rtl": isRtl,
      "--has-value": hasValue
    }, className),
    sx
  }), children);
};
var ValueContainer3 = function ValueContainer4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, isMulti = props.isMulti, hasValue = props.hasValue, innerProps = props.innerProps, _props$selectProps = props.selectProps, chakraStyles = _props$selectProps.chakraStyles, sizeProp = _props$selectProps.size, variant = _props$selectProps.variant, focusBorderColor = _props$selectProps.focusBorderColor, errorBorderColor = _props$selectProps.errorBorderColor, controlShouldRenderValue = _props$selectProps.controlShouldRenderValue;
  var size4 = useSize2(sizeProp);
  var inputStyles = useMultiStyleConfig("Input", {
    size: size4,
    variant,
    focusBorderColor,
    errorBorderColor
  });
  var initialSx = {
    display: isMulti && hasValue && controlShouldRenderValue ? "flex" : "grid",
    alignItems: "center",
    flex: 1,
    paddingY: "2px",
    paddingX: inputStyles.field.px,
    flexWrap: "wrap",
    WebkitOverflowScrolling: "touch",
    position: "relative",
    overflow: "hidden"
  };
  var sx = chakraStyles != null && chakraStyles.valueContainer ? chakraStyles.valueContainer(initialSx, props) : initialSx;
  return import_react203.default.createElement(Box, _extends3({}, innerProps, {
    className: cx4({
      "value-container": true,
      "value-container--is-multi": isMulti,
      "value-container--has-value": hasValue
    }, className),
    sx
  }), children);
};
var IndicatorsContainer3 = function IndicatorsContainer4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, innerProps = props.innerProps, chakraStyles = props.selectProps.chakraStyles;
  var initialSx = {
    display: "flex",
    alignItems: "center",
    alignSelf: "stretch",
    flexShrink: 0
  };
  var sx = chakraStyles != null && chakraStyles.indicatorsContainer ? chakraStyles.indicatorsContainer(initialSx, props) : initialSx;
  return import_react203.default.createElement(Box, _extends3({}, innerProps, {
    className: cx4({
      indicators: true
    }, className),
    sx
  }), children);
};

// node_modules/chakra-react-select/dist/esm/chakra-components/control.js
var import_react204 = __toESM(require_react());
var _excluded6 = ["height", "h"];
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var Control3 = function Control4(props) {
  var className = props.className, cx4 = props.cx, children = props.children, innerRef = props.innerRef, innerProps = props.innerProps, isDisabled3 = props.isDisabled, isFocused = props.isFocused, menuIsOpen = props.menuIsOpen, _props$selectProps = props.selectProps, chakraStyles = _props$selectProps.chakraStyles, sizeProp = _props$selectProps.size, variant = _props$selectProps.variant, focusBorderColor = _props$selectProps.focusBorderColor, errorBorderColor = _props$selectProps.errorBorderColor, isInvalid = _props$selectProps.isInvalid, isReadOnly = _props$selectProps.isReadOnly;
  var size4 = useSize2(sizeProp);
  var _useMultiStyleConfig = useMultiStyleConfig("Input", {
    size: size4,
    variant,
    focusBorderColor,
    errorBorderColor
  }), _useMultiStyleConfig$ = _useMultiStyleConfig.field, height = _useMultiStyleConfig$.height, h = _useMultiStyleConfig$.h, fieldStyles = _objectWithoutPropertiesLoose3(_useMultiStyleConfig$, _excluded6);
  var minH = height || h;
  var initialSx = _extends4({}, fieldStyles, {
    position: "relative",
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    flexWrap: "wrap",
    padding: 0,
    overflow: "hidden",
    height: "auto",
    minH
  }, isDisabled3 ? {
    pointerEvents: "none"
  } : {});
  var sx = chakraStyles != null && chakraStyles.control ? chakraStyles.control(initialSx, props) : initialSx;
  return import_react204.default.createElement(Box, _extends4({
    ref: innerRef,
    className: cx4({
      control: true,
      "control--is-disabled": isDisabled3,
      "control--is-focused": isFocused,
      "control--menu-is-open": menuIsOpen
    }, className),
    sx
  }, innerProps, {
    "data-focus": isFocused ? true : void 0,
    "data-focus-visible": isFocused ? true : void 0,
    "data-invalid": isInvalid ? true : void 0,
    "data-disabled": isDisabled3 ? true : void 0,
    "aria-readonly": isReadOnly ? true : void 0
  }), children);
};
var IndicatorSeparator3 = function IndicatorSeparator4(props) {
  var className = props.className, cx4 = props.cx, _props$selectProps2 = props.selectProps, chakraStyles = _props$selectProps2.chakraStyles, useBasicStyles = _props$selectProps2.useBasicStyles, variant = _props$selectProps2.variant;
  var initialSx = _extends4({
    opacity: 1
  }, useBasicStyles || variant !== "outline" ? {
    display: "none"
  } : {});
  var sx = chakraStyles != null && chakraStyles.indicatorSeparator ? chakraStyles.indicatorSeparator(initialSx, props) : initialSx;
  return import_react204.default.createElement(Divider, {
    className: cx4({
      "indicator-separator": true
    }, className),
    sx,
    orientation: "vertical"
  });
};
var DownChevron3 = function DownChevron4(props) {
  return import_react204.default.createElement(Icon, props, import_react204.default.createElement("path", {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }));
};
var DropdownIndicator3 = function DropdownIndicator4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, innerProps = props.innerProps, _props$selectProps3 = props.selectProps, chakraStyles = _props$selectProps3.chakraStyles, useBasicStyles = _props$selectProps3.useBasicStyles, sizeProp = _props$selectProps3.size, focusBorderColor = _props$selectProps3.focusBorderColor, errorBorderColor = _props$selectProps3.errorBorderColor, variant = _props$selectProps3.variant;
  var size4 = useSize2(sizeProp);
  var inputStyles = useMultiStyleConfig("Input", {
    size: size4,
    variant,
    focusBorderColor,
    errorBorderColor
  });
  var iconSizes = {
    sm: "16px",
    md: "20px",
    lg: "24px"
  };
  var iconSize = iconSizes[size4];
  var initialSx = _extends4({}, inputStyles.addon, {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    height: "100%",
    borderRadius: 0,
    borderWidth: 0,
    fontSize: iconSize
  }, useBasicStyles && {
    background: "transparent",
    padding: 0,
    width: 6,
    marginRight: 2,
    marginLeft: 1,
    cursor: "inherit"
  });
  var sx = chakraStyles != null && chakraStyles.dropdownIndicator ? chakraStyles.dropdownIndicator(initialSx, props) : initialSx;
  var initialIconStyles = {
    height: "1em",
    width: "1em"
  };
  var iconSx = chakraStyles != null && chakraStyles.downChevron ? chakraStyles.downChevron(initialIconStyles, props) : initialIconStyles;
  return import_react204.default.createElement(Box, _extends4({}, innerProps, {
    className: cx4({
      indicator: true,
      "dropdown-indicator": true
    }, className),
    sx
  }), children || import_react204.default.createElement(DownChevron3, {
    sx: iconSx
  }));
};
var CrossIcon3 = function CrossIcon4(props) {
  return import_react204.default.createElement(Icon, _extends4({
    focusable: "false",
    "aria-hidden": true
  }, props), import_react204.default.createElement("path", {
    fill: "currentColor",
    d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
  }));
};
var ClearIndicator3 = function ClearIndicator4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, innerProps = props.innerProps, _props$selectProps4 = props.selectProps, chakraStyles = _props$selectProps4.chakraStyles, sizeProp = _props$selectProps4.size;
  var size4 = useSize2(sizeProp);
  var closeButtonStyles = useStyleConfig("CloseButton", {
    size: size4
  });
  var initialSx = _extends4({}, closeButtonStyles, {
    marginX: 1,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    cursor: "pointer"
  });
  var sx = chakraStyles != null && chakraStyles.clearIndicator ? chakraStyles.clearIndicator(initialSx, props) : initialSx;
  var initialIconStyles = {
    width: "1em",
    height: "1em"
  };
  var iconSx = chakraStyles != null && chakraStyles.crossIcon ? chakraStyles.crossIcon(initialIconStyles, props) : initialIconStyles;
  return import_react204.default.createElement(Box, _extends4({
    role: "button",
    className: cx4({
      indicator: true,
      "clear-indicator": true
    }, className),
    sx,
    "aria-label": "Clear selected options"
  }, innerProps), children || import_react204.default.createElement(CrossIcon3, {
    sx: iconSx
  }));
};
var LoadingIndicator3 = function LoadingIndicator4(props) {
  var className = props.className, cx4 = props.cx, innerProps = props.innerProps, _props$selectProps5 = props.selectProps, chakraStyles = _props$selectProps5.chakraStyles, sizeProp = _props$selectProps5.size, color5 = props.color, emptyColor = props.emptyColor, speed = props.speed, thickness = props.thickness, propsSpinnerSize = props.spinnerSize;
  var size4 = useSize2(sizeProp);
  var spinnerSizes = {
    sm: "xs",
    md: "sm",
    lg: "md"
  };
  var spinnerSize = spinnerSizes[size4];
  var initialSx = {
    marginRight: 3
  };
  var sx = chakraStyles != null && chakraStyles.loadingIndicator ? chakraStyles.loadingIndicator(initialSx, props) : initialSx;
  return import_react204.default.createElement(Spinner, _extends4({
    className: cx4({
      indicator: true,
      "loading-indicator": true
    }, className),
    sx
  }, innerProps, {
    size: propsSpinnerSize || spinnerSize,
    color: color5,
    emptyColor,
    speed,
    thickness
  }));
};
var control_default = Control3;

// node_modules/chakra-react-select/dist/esm/chakra-components/input.js
var import_react205 = __toESM(require_react());
var _excluded7 = ["innerRef", "isDisabled", "isHidden", "inputClassName"];
function _extends5() {
  _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var Input5 = function Input6(props) {
  var className = props.className, cx4 = props.cx, value = props.value, _props$selectProps = props.selectProps, chakraStyles = _props$selectProps.chakraStyles, isReadOnly = _props$selectProps.isReadOnly, isRequired = _props$selectProps.isRequired;
  var _cleanCommonProps = cleanCommonProps3(props), innerRef = _cleanCommonProps.innerRef, isDisabled3 = _cleanCommonProps.isDisabled, isHidden3 = _cleanCommonProps.isHidden, inputClassName = _cleanCommonProps.inputClassName, innerProps = _objectWithoutPropertiesLoose4(_cleanCommonProps, _excluded7);
  var spacingSx = {
    gridArea: "1 / 2",
    minW: "2px",
    border: 0,
    margin: 0,
    outline: 0,
    padding: 0
  };
  var initialContainerSx = {
    flex: "1 1 auto",
    display: "inline-grid",
    gridArea: "1 / 1 / 2 / 3",
    gridTemplateColumns: "0 min-content",
    color: "inherit",
    marginX: "0.125rem",
    paddingY: "0.125rem",
    visibility: isDisabled3 ? "hidden" : "visible",
    // Force css to recompute when value change due to @emotion bug.
    // We can remove it whenever the bug is fixed.
    transform: value ? "translateZ(0)" : "",
    _after: _extends5({
      content: 'attr(data-value) " "',
      visibility: "hidden",
      whiteSpace: "pre",
      padding: 0
    }, spacingSx)
  };
  var containerSx = chakraStyles != null && chakraStyles.inputContainer ? chakraStyles.inputContainer(initialContainerSx, props) : initialContainerSx;
  var initialInputSx = _extends5({
    background: 0,
    opacity: isHidden3 ? 0 : 1,
    width: "100%"
  }, spacingSx);
  var inputSx = chakraStyles != null && chakraStyles.input ? chakraStyles.input(initialInputSx, props) : initialInputSx;
  return import_react205.default.createElement(Box, {
    className: cx4({
      "input-container": true
    }, className),
    "data-value": value || "",
    sx: containerSx
  }, import_react205.default.createElement(chakra.input, _extends5({
    className: cx4({
      input: true
    }, inputClassName),
    ref: innerRef,
    sx: inputSx,
    disabled: isDisabled3,
    readOnly: isReadOnly ? true : void 0,
    "aria-readonly": isReadOnly ? true : void 0,
    "aria-required": isRequired ? true : void 0
  }, innerProps)));
};
var input_default = Input5;

// node_modules/chakra-react-select/dist/esm/chakra-components/menu.js
var import_react206 = __toESM(require_react());
function _extends6() {
  _extends6 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
var alignToControl2 = function alignToControl3(placement) {
  var placementToCSSProp = {
    bottom: "top",
    top: "bottom"
  };
  return placement ? placementToCSSProp[placement] : "top";
};
var Menu4 = function Menu5(props) {
  var _initialSx;
  var className = props.className, cx4 = props.cx, children = props.children, innerProps = props.innerProps, innerRef = props.innerRef, placement = props.placement, chakraStyles = props.selectProps.chakraStyles;
  var initialSx = (_initialSx = {
    position: "absolute"
  }, _initialSx[alignToControl2(placement)] = "100%", _initialSx.marginY = "8px", _initialSx.width = "100%", _initialSx.zIndex = 1, _initialSx);
  var sx = chakraStyles != null && chakraStyles.menu ? chakraStyles.menu(initialSx, props) : initialSx;
  return import_react206.default.createElement(Menu, null, import_react206.default.createElement(Box, _extends6({}, innerProps, {
    ref: innerRef,
    className: cx4({
      menu: true
    }, className),
    sx
  }), children));
};
var menu_default = Menu4;
var MenuList5 = function MenuList6(props) {
  var _menuStyles$list;
  var className = props.className, cx4 = props.cx, innerRef = props.innerRef, children = props.children, maxHeight = props.maxHeight, isMulti = props.isMulti, innerProps = props.innerProps, _props$selectProps = props.selectProps, chakraStyles = _props$selectProps.chakraStyles, sizeProp = _props$selectProps.size, variant = _props$selectProps.variant, focusBorderColor = _props$selectProps.focusBorderColor, errorBorderColor = _props$selectProps.errorBorderColor;
  var menuStyles = useMultiStyleConfig("Menu");
  var size4 = useSize2(sizeProp);
  var inputStyles = useMultiStyleConfig("Input", {
    size: size4,
    variant,
    focusBorderColor,
    errorBorderColor
  });
  var fieldStyles = inputStyles.field;
  var initialSx = _extends6({}, menuStyles.list, {
    minW: "100%",
    maxHeight: maxHeight + "px",
    overflowY: "auto",
    // This is hacky, but it works. May be removed in the future
    "--input-border-radius": fieldStyles == null ? void 0 : fieldStyles["--input-border-radius"],
    borderRadius: (fieldStyles == null ? void 0 : fieldStyles.borderRadius) || ((_menuStyles$list = menuStyles.list) == null ? void 0 : _menuStyles$list.borderRadius),
    position: "relative",
    // required for offset[Height, Top] > keyboard scroll
    WebkitOverflowScrolling: "touch"
  });
  var sx = chakraStyles != null && chakraStyles.menuList ? chakraStyles.menuList(initialSx, props) : initialSx;
  return import_react206.default.createElement(Box, _extends6({}, innerProps, {
    className: cx4({
      "menu-list": true,
      "menu-list--is-multi": isMulti
    }, className),
    sx,
    ref: innerRef
  }), children);
};
var LoadingMessage3 = function LoadingMessage4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, innerProps = props.innerProps, _props$selectProps2 = props.selectProps, chakraStyles = _props$selectProps2.chakraStyles, sizeProp = _props$selectProps2.size;
  var size4 = useSize2(sizeProp);
  var verticalPaddings = {
    sm: "6px",
    md: "8px",
    lg: "10px"
  };
  var initialSx = {
    color: "chakra-subtle-text",
    textAlign: "center",
    paddingY: verticalPaddings[size4],
    fontSize: size4
  };
  var sx = chakraStyles != null && chakraStyles.loadingMessage ? chakraStyles.loadingMessage(initialSx, props) : initialSx;
  return import_react206.default.createElement(Box, _extends6({}, innerProps, {
    className: cx4({
      "menu-notice": true,
      "menu-notice--loading": true
    }, className),
    sx
  }), children);
};
var NoOptionsMessage3 = function NoOptionsMessage4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, innerProps = props.innerProps, _props$selectProps3 = props.selectProps, chakraStyles = _props$selectProps3.chakraStyles, sizeProp = _props$selectProps3.size;
  var size4 = useSize2(sizeProp);
  var verticalPaddings = {
    sm: "6px",
    md: "8px",
    lg: "10px"
  };
  var initialSx = {
    color: "chakra-subtle-text",
    textAlign: "center",
    paddingY: verticalPaddings[size4],
    fontSize: size4
  };
  var sx = chakraStyles != null && chakraStyles.noOptionsMessage ? chakraStyles.noOptionsMessage(initialSx, props) : initialSx;
  return import_react206.default.createElement(Box, _extends6({}, innerProps, {
    className: cx4({
      "menu-notice": true,
      "menu-notice--no-options": true
    }, className),
    sx
  }), children);
};
var Group4 = function Group5(props) {
  var children = props.children, className = props.className, cx4 = props.cx, theme3 = props.theme, getStyles4 = props.getStyles, Heading3 = props.Heading, headingProps = props.headingProps, label = props.label, selectProps = props.selectProps, innerProps = props.innerProps, getClassNames = props.getClassNames;
  var chakraStyles = selectProps.chakraStyles;
  var sx = chakraStyles != null && chakraStyles.group ? chakraStyles.group({}, props) : {};
  return import_react206.default.createElement(Box, _extends6({}, innerProps, {
    className: cx4({
      group: true
    }, className),
    sx
  }), import_react206.default.createElement(Heading3, _extends6({}, headingProps, {
    selectProps,
    cx: cx4,
    theme: theme3,
    getStyles: getStyles4,
    getClassNames
  }), label), import_react206.default.createElement(Box, null, children));
};
var GroupHeading3 = function GroupHeading4(props) {
  var cx4 = props.cx, className = props.className, children = props.children, _props$selectProps4 = props.selectProps, chakraStyles = _props$selectProps4.chakraStyles, sizeProp = _props$selectProps4.size, hasStickyGroupHeaders = _props$selectProps4.hasStickyGroupHeaders;
  var menuStyles = useMultiStyleConfig("Menu");
  var size4 = useSize2(sizeProp);
  var fontSizes = {
    sm: "xs",
    md: "sm",
    lg: "md"
  };
  var paddings = {
    sm: "0.4rem 0.8rem",
    md: "0.5rem 1rem",
    lg: "0.6rem 1.2rem"
  };
  var initialSx = _extends6({}, menuStyles.groupTitle, {
    fontSize: fontSizes[size4],
    padding: paddings[size4],
    margin: 0,
    borderBottomWidth: hasStickyGroupHeaders ? "1px" : 0,
    position: hasStickyGroupHeaders ? "sticky" : "static",
    top: -2,
    bg: menuStyles.list.bg,
    zIndex: 1
  });
  var sx = chakraStyles != null && chakraStyles.groupHeading ? chakraStyles.groupHeading(initialSx, props) : initialSx;
  return import_react206.default.createElement(Box, {
    className: cx4({
      "group-heading": true
    }, className),
    sx
  }, children);
};
var CheckIcon5 = function CheckIcon6(props) {
  return import_react206.default.createElement("svg", _extends6({
    viewBox: "0 0 14 14",
    width: "1em",
    height: "1em"
  }, props), import_react206.default.createElement("polygon", {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }));
};
var Option3 = function Option4(props) {
  var className = props.className, cx4 = props.cx, innerRef = props.innerRef, innerProps = props.innerProps, children = props.children, isFocused = props.isFocused, isDisabled3 = props.isDisabled, isSelected = props.isSelected, _props$selectProps5 = props.selectProps, chakraStyles = _props$selectProps5.chakraStyles, sizeProp = _props$selectProps5.size, isMulti = _props$selectProps5.isMulti, hideSelectedOptions = _props$selectProps5.hideSelectedOptions, selectedOptionStyle = _props$selectProps5.selectedOptionStyle, selectedOptionColorScheme = _props$selectProps5.selectedOptionColorScheme;
  var size4 = useSize2(sizeProp);
  var menuItemStyles = useMultiStyleConfig("Menu").item;
  var paddings = {
    sm: "0.3rem 0.6rem",
    md: "0.4rem 0.8rem",
    lg: "0.5rem 1rem"
  };
  var selectedBg = useColorModeValue(selectedOptionColorScheme + ".500", selectedOptionColorScheme + ".300");
  var selectedColor = useColorModeValue("white", "black");
  var showCheckIcon = selectedOptionStyle === "check" && (!isMulti || hideSelectedOptions === false);
  var shouldHighlight = selectedOptionStyle === "color" && isSelected;
  var initialSx = _extends6({}, menuItemStyles, {
    display: "flex",
    alignItems: "center",
    width: "100%",
    textAlign: "start",
    fontSize: size4,
    padding: paddings[size4]
  }, isFocused && menuItemStyles._focus, shouldHighlight && {
    bg: selectedBg,
    color: selectedColor,
    _active: {
      bg: selectedBg
    }
  }, isDisabled3 && menuItemStyles._disabled, isDisabled3 && {
    _active: {}
  });
  var sx = chakraStyles != null && chakraStyles.option ? chakraStyles.option(initialSx, props) : initialSx;
  return import_react206.default.createElement(Box, _extends6({}, innerProps, {
    role: "button",
    className: cx4({
      option: true,
      "option--is-disabled": isDisabled3,
      "option--is-focused": isFocused,
      "option--is-selected": isSelected
    }, className),
    sx,
    ref: innerRef,
    "data-disabled": isDisabled3 ? true : void 0,
    "aria-disabled": isDisabled3 ? true : void 0
  }), showCheckIcon && import_react206.default.createElement(MenuIcon, {
    fontSize: "0.8em",
    marginEnd: "0.75rem",
    opacity: isSelected ? 1 : 0
  }, import_react206.default.createElement(CheckIcon5, null)), children);
};

// node_modules/chakra-react-select/dist/esm/chakra-components/multi-value.js
var import_react207 = __toESM(require_react());
function _extends7() {
  _extends7 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
var hasColorScheme = function hasColorScheme2(option) {
  return typeof option === "object" && option !== null && "colorScheme" in option && typeof option.colorScheme === "string";
};
var hasVariant = function hasVariant2(option) {
  return typeof option === "object" && option !== null && "variant" in option && typeof option.variant === "string";
};
var hasIsFixed = function hasIsFixed2(option) {
  return typeof option === "object" && option !== null && "isFixed" in option && typeof option.isFixed === "boolean";
};
var MultiValue3 = function MultiValue4(props) {
  var children = props.children, className = props.className, components4 = props.components, cx4 = props.cx, data = props.data, innerProps = props.innerProps, isDisabled3 = props.isDisabled, isFocused = props.isFocused, removeProps3 = props.removeProps, selectProps = props.selectProps, cropWithEllipsis = props.cropWithEllipsis;
  var Container3 = components4.Container, Label2 = components4.Label, Remove = components4.Remove;
  var chakraStyles = selectProps.chakraStyles, colorScheme = selectProps.colorScheme, tagVariant = selectProps.tagVariant, sizeProp = selectProps.size;
  var size4 = useSize2(sizeProp);
  var optionColorScheme = "";
  var optionVariant = "";
  var optionIsFixed = false;
  if (hasColorScheme(data)) {
    optionColorScheme = data.colorScheme;
  }
  if (hasVariant(data)) {
    optionVariant = data.variant;
  }
  if (hasIsFixed(data)) {
    optionIsFixed = data.isFixed;
  }
  var tagStyles = useMultiStyleConfig("Tag", {
    size: size4,
    colorScheme: optionColorScheme || colorScheme,
    variant: optionVariant || tagVariant || (optionIsFixed ? "solid" : "subtle")
  });
  var containerInitialSx = _extends7({}, tagStyles.container, {
    display: "flex",
    alignItems: "center",
    minWidth: 0,
    // resolves flex/text-overflow bug
    margin: "0.125rem"
  });
  var containerSx = chakraStyles != null && chakraStyles.multiValue ? chakraStyles.multiValue(containerInitialSx, props) : containerInitialSx;
  var labelInitialSx = _extends7({}, tagStyles.label, {
    overflow: "hidden",
    textOverflow: cropWithEllipsis || cropWithEllipsis === void 0 ? "ellipsis" : void 0,
    whiteSpace: "nowrap"
  });
  var labelSx = chakraStyles != null && chakraStyles.multiValueLabel ? chakraStyles.multiValueLabel(labelInitialSx, props) : labelInitialSx;
  var removeInitialSx = _extends7({}, tagStyles.closeButton, {
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  });
  var removeSx = chakraStyles != null && chakraStyles.multiValueRemove ? chakraStyles.multiValueRemove(removeInitialSx, props) : removeInitialSx;
  return import_react207.default.createElement(Container3, {
    data,
    innerProps: _extends7({
      className: cx4({
        "multi-value": true,
        "multi-value--is-disabled": isDisabled3
      }, className)
    }, innerProps),
    sx: containerSx,
    selectProps
  }, import_react207.default.createElement(Label2, {
    data,
    innerProps: {
      className: cx4({
        "multi-value__label": true
      }, className)
    },
    sx: labelSx,
    selectProps
  }, children), import_react207.default.createElement(Remove, {
    data,
    innerProps: _extends7({
      className: cx4({
        "multi-value__remove": true
      }, className),
      "aria-label": "Remove " + (children || "option")
    }, removeProps3),
    sx: removeSx,
    selectProps,
    isFocused
  }));
};
var MultiValueContainer2 = function MultiValueContainer3(props) {
  var children = props.children, innerProps = props.innerProps, sx = props.sx;
  return import_react207.default.createElement(chakra.span, _extends7({}, innerProps, {
    sx
  }), children);
};
var MultiValueLabel2 = function MultiValueLabel3(props) {
  var children = props.children, innerProps = props.innerProps, sx = props.sx;
  return import_react207.default.createElement(chakra.span, _extends7({}, innerProps, {
    sx
  }), children);
};
var TagCloseIcon2 = function TagCloseIcon3(props) {
  return import_react207.default.createElement(Icon, _extends7({
    verticalAlign: "inherit",
    viewBox: "0 0 512 512"
  }, props), import_react207.default.createElement("path", {
    fill: "currentColor",
    d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"
  }));
};
var MultiValueRemove2 = function MultiValueRemove3(props) {
  var children = props.children, innerProps = props.innerProps, isFocused = props.isFocused, data = props.data, sx = props.sx;
  if (hasIsFixed(data) && data.isFixed) {
    return null;
  }
  return import_react207.default.createElement(Box, _extends7({}, innerProps, {
    role: "button",
    sx,
    "data-focus": isFocused ? true : void 0,
    "data-focus-visible": isFocused ? true : void 0
  }), children || import_react207.default.createElement(TagCloseIcon2, null));
};
var multi_value_default = MultiValue3;

// node_modules/chakra-react-select/dist/esm/chakra-components/placeholder.js
var import_react208 = __toESM(require_react());
function _extends8() {
  _extends8 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
var Placeholder3 = function Placeholder4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, innerProps = props.innerProps, chakraStyles = props.selectProps.chakraStyles;
  var initialSx = {
    gridArea: "1 / 1 / 2 / 3",
    color: "chakra-placeholder-color",
    mx: "0.125rem",
    userSelect: "none"
  };
  var sx = chakraStyles != null && chakraStyles.placeholder ? chakraStyles.placeholder(initialSx, props) : initialSx;
  return import_react208.default.createElement(Box, _extends8({}, innerProps, {
    className: cx4({
      placeholder: true
    }, className),
    sx
  }), children);
};
var placeholder_default = Placeholder3;

// node_modules/chakra-react-select/dist/esm/chakra-components/single-value.js
var import_react209 = __toESM(require_react());
function _extends9() {
  _extends9 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
var SingleValue3 = function SingleValue4(props) {
  var children = props.children, className = props.className, cx4 = props.cx, isDisabled3 = props.isDisabled, innerProps = props.innerProps, chakraStyles = props.selectProps.chakraStyles;
  var initialSx = {
    gridArea: "1 / 1 / 2 / 3",
    mx: "0.125rem",
    maxWidth: "100%",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  };
  var sx = chakraStyles != null && chakraStyles.singleValue ? chakraStyles.singleValue(initialSx, props) : initialSx;
  return import_react209.default.createElement(Box, _extends9({
    className: cx4({
      "single-value": true,
      "single-value--is-disabled": isDisabled3
    }, className),
    sx
  }, innerProps), children);
};
var single_value_default = SingleValue3;

// node_modules/chakra-react-select/dist/esm/chakra-components/index.js
var chakraComponents = {
  ClearIndicator: ClearIndicator3,
  Control: control_default,
  DropdownIndicator: DropdownIndicator3,
  Group: Group4,
  GroupHeading: GroupHeading3,
  IndicatorSeparator: IndicatorSeparator3,
  IndicatorsContainer: IndicatorsContainer3,
  Input: input_default,
  LoadingIndicator: LoadingIndicator3,
  LoadingMessage: LoadingMessage3,
  Menu: menu_default,
  MenuList: MenuList5,
  MultiValue: multi_value_default,
  MultiValueContainer: MultiValueContainer2,
  MultiValueLabel: MultiValueLabel2,
  MultiValueRemove: MultiValueRemove2,
  NoOptionsMessage: NoOptionsMessage3,
  Option: Option3,
  Placeholder: placeholder_default,
  SelectContainer: SelectContainer3,
  SingleValue: single_value_default,
  ValueContainer: ValueContainer3
};
var chakra_components_default = chakraComponents;

// node_modules/chakra-react-select/dist/esm/use-chakra-select-props.js
var _excluded8 = ["components", "theme", "size", "colorScheme", "isDisabled", "isInvalid", "isReadOnly", "isRequired", "inputId", "tagVariant", "selectedOptionStyle", "selectedOptionColorScheme", "selectedOptionColor", "variant", "focusBorderColor", "errorBorderColor", "chakraStyles", "onFocus", "onBlur", "menuIsOpen"];
function _extends10() {
  _extends10 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var useChakraSelectProps = function useChakraSelectProps2(_ref4) {
  var _props$ariaInvalid;
  var _ref$components = _ref4.components, components4 = _ref$components === void 0 ? {} : _ref$components, theme3 = _ref4.theme, size4 = _ref4.size, _ref$colorScheme = _ref4.colorScheme, colorScheme = _ref$colorScheme === void 0 ? "gray" : _ref$colorScheme, isDisabled3 = _ref4.isDisabled, isInvalid = _ref4.isInvalid, isReadOnly = _ref4.isReadOnly, isRequired = _ref4.isRequired, inputId = _ref4.inputId, tagVariant = _ref4.tagVariant, _ref$selectedOptionSt = _ref4.selectedOptionStyle, selectedOptionStyle = _ref$selectedOptionSt === void 0 ? "color" : _ref$selectedOptionSt, selectedOptionColorScheme = _ref4.selectedOptionColorScheme, selectedOptionColor = _ref4.selectedOptionColor, variant = _ref4.variant, focusBorderColor = _ref4.focusBorderColor, errorBorderColor = _ref4.errorBorderColor, _ref$chakraStyles = _ref4.chakraStyles, chakraStyles = _ref$chakraStyles === void 0 ? {} : _ref$chakraStyles, onFocus4 = _ref4.onFocus, onBlur3 = _ref4.onBlur, menuIsOpen = _ref4.menuIsOpen, props = _objectWithoutPropertiesLoose5(_ref4, _excluded8);
  var chakraTheme = useTheme2();
  var defaultVariant = chakraTheme.components.Input.defaultProps.variant;
  var inputProps = useFormControl({
    id: inputId,
    isDisabled: isDisabled3,
    isInvalid,
    isRequired,
    isReadOnly,
    onFocus: onFocus4,
    onBlur: onBlur3
  });
  var realMenuIsOpen = menuIsOpen != null ? menuIsOpen : inputProps.readOnly ? false : void 0;
  var realSelectedOptionStyle = selectedOptionStyle;
  var selectedOptionStyleOptions = ["color", "check"];
  if (!selectedOptionStyleOptions.includes(selectedOptionStyle)) {
    realSelectedOptionStyle = "color";
  }
  var realSelectedOptionColorScheme = selectedOptionColorScheme || selectedOptionColor || "blue";
  if (typeof realSelectedOptionColorScheme !== "string") {
    realSelectedOptionColorScheme = "blue";
  }
  var select = _extends10({
    // Allow overriding of custom components
    components: _extends10({}, chakra_components_default, components4),
    // Custom select props
    colorScheme,
    size: size4,
    tagVariant,
    selectedOptionStyle: realSelectedOptionStyle,
    selectedOptionColorScheme: realSelectedOptionColorScheme,
    variant: variant != null ? variant : defaultVariant,
    chakraStyles,
    focusBorderColor,
    errorBorderColor,
    // Extract custom props from form control
    onFocus: inputProps.onFocus,
    onBlur: inputProps.onBlur,
    isDisabled: inputProps.disabled,
    isInvalid: !!inputProps["aria-invalid"],
    inputId: inputProps.id,
    isReadOnly: inputProps.readOnly,
    menuIsOpen: realMenuIsOpen
  }, props, {
    // aria-invalid can be passed to react-select, so we allow that to
    // override the `isInvalid` prop
    "aria-invalid": (_props$ariaInvalid = props["aria-invalid"]) != null ? _props$ariaInvalid : inputProps["aria-invalid"]
  });
  return select;
};
var use_chakra_select_props_default = useChakraSelectProps;

// node_modules/chakra-react-select/dist/esm/select/select.js
function _extends11() {
  _extends11 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
var Select3 = (0, import_react210.forwardRef)(function(props, ref) {
  var chakraSelectProps = use_chakra_select_props_default(props);
  return import_react210.default.createElement(StateManagedSelect$1, _extends11({
    ref
  }, chakraSelectProps));
});
var select_default = Select3;

// node_modules/chakra-react-select/dist/esm/select/creatable-select.js
var import_react214 = __toESM(require_react());

// node_modules/react-select/creatable/dist/react-select-creatable.esm.js
var React44 = __toESM(require_react());
var import_react212 = __toESM(require_react());

// node_modules/react-select/dist/useCreatable-4a2d7323.esm.js
var import_react211 = __toESM(require_react());
var _excluded9 = ["allowCreateWhileLoading", "createOptionPosition", "formatCreateLabel", "isValidNewOption", "getNewOptionData", "onCreateOption", "options", "onChange"];
var compareOption = function compareOption2() {
  var inputValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var option = arguments.length > 1 ? arguments[1] : void 0;
  var accessors = arguments.length > 2 ? arguments[2] : void 0;
  var candidate = String(inputValue).toLowerCase();
  var optionValue = String(accessors.getOptionValue(option)).toLowerCase();
  var optionLabel = String(accessors.getOptionLabel(option)).toLowerCase();
  return optionValue === candidate || optionLabel === candidate;
};
var builtins = {
  formatCreateLabel: function formatCreateLabel(inputValue) {
    return 'Create "'.concat(inputValue, '"');
  },
  isValidNewOption: function isValidNewOption(inputValue, selectValue, selectOptions, accessors) {
    return !(!inputValue || selectValue.some(function(option) {
      return compareOption(inputValue, option, accessors);
    }) || selectOptions.some(function(option) {
      return compareOption(inputValue, option, accessors);
    }));
  },
  getNewOptionData: function getNewOptionData(inputValue, optionLabel) {
    return {
      label: optionLabel,
      value: inputValue,
      __isNew__: true
    };
  }
};
function useCreatable(_ref4) {
  var _ref$allowCreateWhile = _ref4.allowCreateWhileLoading, allowCreateWhileLoading = _ref$allowCreateWhile === void 0 ? false : _ref$allowCreateWhile, _ref$createOptionPosi = _ref4.createOptionPosition, createOptionPosition = _ref$createOptionPosi === void 0 ? "last" : _ref$createOptionPosi, _ref$formatCreateLabe = _ref4.formatCreateLabel, formatCreateLabel2 = _ref$formatCreateLabe === void 0 ? builtins.formatCreateLabel : _ref$formatCreateLabe, _ref$isValidNewOption = _ref4.isValidNewOption, isValidNewOption2 = _ref$isValidNewOption === void 0 ? builtins.isValidNewOption : _ref$isValidNewOption, _ref$getNewOptionData = _ref4.getNewOptionData, getNewOptionData2 = _ref$getNewOptionData === void 0 ? builtins.getNewOptionData : _ref$getNewOptionData, onCreateOption = _ref4.onCreateOption, _ref$options = _ref4.options, propsOptions = _ref$options === void 0 ? [] : _ref$options, propsOnChange = _ref4.onChange, restSelectProps = _objectWithoutProperties(_ref4, _excluded9);
  var _restSelectProps$getO = restSelectProps.getOptionValue, getOptionValue$12 = _restSelectProps$getO === void 0 ? getOptionValue$1 : _restSelectProps$getO, _restSelectProps$getO2 = restSelectProps.getOptionLabel, getOptionLabel$12 = _restSelectProps$getO2 === void 0 ? getOptionLabel$1 : _restSelectProps$getO2, inputValue = restSelectProps.inputValue, isLoading = restSelectProps.isLoading, isMulti = restSelectProps.isMulti, value = restSelectProps.value, name = restSelectProps.name;
  var newOption = (0, import_react211.useMemo)(function() {
    return isValidNewOption2(inputValue, cleanValue(value), propsOptions, {
      getOptionValue: getOptionValue$12,
      getOptionLabel: getOptionLabel$12
    }) ? getNewOptionData2(inputValue, formatCreateLabel2(inputValue)) : void 0;
  }, [formatCreateLabel2, getNewOptionData2, getOptionLabel$12, getOptionValue$12, inputValue, isValidNewOption2, propsOptions, value]);
  var options2 = (0, import_react211.useMemo)(function() {
    return (allowCreateWhileLoading || !isLoading) && newOption ? createOptionPosition === "first" ? [newOption].concat(_toConsumableArray(propsOptions)) : [].concat(_toConsumableArray(propsOptions), [newOption]) : propsOptions;
  }, [allowCreateWhileLoading, createOptionPosition, isLoading, newOption, propsOptions]);
  var onChange2 = (0, import_react211.useCallback)(function(newValue, actionMeta) {
    if (actionMeta.action !== "select-option") {
      return propsOnChange(newValue, actionMeta);
    }
    var valueArray = Array.isArray(newValue) ? newValue : [newValue];
    if (valueArray[valueArray.length - 1] === newOption) {
      if (onCreateOption)
        onCreateOption(inputValue);
      else {
        var newOptionData = getNewOptionData2(inputValue, inputValue);
        var newActionMeta = {
          action: "create-option",
          name,
          option: newOptionData
        };
        propsOnChange(valueTernary(isMulti, [].concat(_toConsumableArray(cleanValue(value)), [newOptionData]), newOptionData), newActionMeta);
      }
      return;
    }
    propsOnChange(newValue, actionMeta);
  }, [getNewOptionData2, inputValue, isMulti, name, newOption, onCreateOption, propsOnChange, value]);
  return _objectSpread2(_objectSpread2({}, restSelectProps), {}, {
    options: options2,
    onChange: onChange2
  });
}

// node_modules/react-select/creatable/dist/react-select-creatable.esm.js
var import_react_dom4 = __toESM(require_react_dom());
var CreatableSelect = (0, import_react212.forwardRef)(function(props, ref) {
  var creatableProps = useStateManager(props);
  var selectProps = useCreatable(creatableProps);
  return React44.createElement(Select2, _extends({
    ref
  }, selectProps));
});
var CreatableSelect$1 = CreatableSelect;

// node_modules/chakra-react-select/dist/esm/select/creatable-select.js
function _extends12() {
  _extends12 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
var CreatableSelect2 = (0, import_react214.forwardRef)(function(props, ref) {
  var chakraSelectProps = use_chakra_select_props_default(props);
  return import_react214.default.createElement(CreatableSelect$1, _extends12({
    ref
  }, chakraSelectProps));
});
var creatable_select_default = CreatableSelect2;

// node_modules/chakra-react-select/dist/esm/select/async-select.js
var import_react218 = __toESM(require_react());

// node_modules/react-select/async/dist/react-select-async.esm.js
var React46 = __toESM(require_react());
var import_react216 = __toESM(require_react());

// node_modules/react-select/dist/useAsync-85924129.esm.js
var import_react215 = __toESM(require_react());
var _excluded10 = ["defaultOptions", "cacheOptions", "loadOptions", "options", "isLoading", "onInputChange", "filterOption"];
function useAsync(_ref4) {
  var _ref$defaultOptions = _ref4.defaultOptions, propsDefaultOptions = _ref$defaultOptions === void 0 ? false : _ref$defaultOptions, _ref$cacheOptions = _ref4.cacheOptions, cacheOptions = _ref$cacheOptions === void 0 ? false : _ref$cacheOptions, propsLoadOptions = _ref4.loadOptions;
  _ref4.options;
  var _ref$isLoading = _ref4.isLoading, propsIsLoading = _ref$isLoading === void 0 ? false : _ref$isLoading, propsOnInputChange = _ref4.onInputChange, _ref$filterOption = _ref4.filterOption, filterOption = _ref$filterOption === void 0 ? null : _ref$filterOption, restSelectProps = _objectWithoutProperties(_ref4, _excluded10);
  var propsInputValue = restSelectProps.inputValue;
  var lastRequest = (0, import_react215.useRef)(void 0);
  var mounted = (0, import_react215.useRef)(false);
  var _useState = (0, import_react215.useState)(Array.isArray(propsDefaultOptions) ? propsDefaultOptions : void 0), _useState2 = _slicedToArray(_useState, 2), defaultOptions5 = _useState2[0], setDefaultOptions = _useState2[1];
  var _useState3 = (0, import_react215.useState)(typeof propsInputValue !== "undefined" ? propsInputValue : ""), _useState4 = _slicedToArray(_useState3, 2), stateInputValue = _useState4[0], setStateInputValue = _useState4[1];
  var _useState5 = (0, import_react215.useState)(propsDefaultOptions === true), _useState6 = _slicedToArray(_useState5, 2), isLoading = _useState6[0], setIsLoading = _useState6[1];
  var _useState7 = (0, import_react215.useState)(void 0), _useState8 = _slicedToArray(_useState7, 2), loadedInputValue = _useState8[0], setLoadedInputValue = _useState8[1];
  var _useState9 = (0, import_react215.useState)([]), _useState10 = _slicedToArray(_useState9, 2), loadedOptions = _useState10[0], setLoadedOptions = _useState10[1];
  var _useState11 = (0, import_react215.useState)(false), _useState12 = _slicedToArray(_useState11, 2), passEmptyOptions = _useState12[0], setPassEmptyOptions = _useState12[1];
  var _useState13 = (0, import_react215.useState)({}), _useState14 = _slicedToArray(_useState13, 2), optionsCache = _useState14[0], setOptionsCache = _useState14[1];
  var _useState15 = (0, import_react215.useState)(void 0), _useState16 = _slicedToArray(_useState15, 2), prevDefaultOptions = _useState16[0], setPrevDefaultOptions = _useState16[1];
  var _useState17 = (0, import_react215.useState)(void 0), _useState18 = _slicedToArray(_useState17, 2), prevCacheOptions = _useState18[0], setPrevCacheOptions = _useState18[1];
  if (cacheOptions !== prevCacheOptions) {
    setOptionsCache({});
    setPrevCacheOptions(cacheOptions);
  }
  if (propsDefaultOptions !== prevDefaultOptions) {
    setDefaultOptions(Array.isArray(propsDefaultOptions) ? propsDefaultOptions : void 0);
    setPrevDefaultOptions(propsDefaultOptions);
  }
  (0, import_react215.useEffect)(function() {
    mounted.current = true;
    return function() {
      mounted.current = false;
    };
  }, []);
  var loadOptions = (0, import_react215.useCallback)(function(inputValue, callback) {
    if (!propsLoadOptions)
      return callback();
    var loader = propsLoadOptions(inputValue, callback);
    if (loader && typeof loader.then === "function") {
      loader.then(callback, function() {
        return callback();
      });
    }
  }, [propsLoadOptions]);
  (0, import_react215.useEffect)(function() {
    if (propsDefaultOptions === true) {
      loadOptions(stateInputValue, function(options3) {
        if (!mounted.current)
          return;
        setDefaultOptions(options3 || []);
        setIsLoading(!!lastRequest.current);
      });
    }
  }, []);
  var onInputChange = (0, import_react215.useCallback)(function(newValue, actionMeta) {
    var inputValue = handleInputChange(newValue, actionMeta, propsOnInputChange);
    if (!inputValue) {
      lastRequest.current = void 0;
      setStateInputValue("");
      setLoadedInputValue("");
      setLoadedOptions([]);
      setIsLoading(false);
      setPassEmptyOptions(false);
      return;
    }
    if (cacheOptions && optionsCache[inputValue]) {
      setStateInputValue(inputValue);
      setLoadedInputValue(inputValue);
      setLoadedOptions(optionsCache[inputValue]);
      setIsLoading(false);
      setPassEmptyOptions(false);
    } else {
      var request = lastRequest.current = {};
      setStateInputValue(inputValue);
      setIsLoading(true);
      setPassEmptyOptions(!loadedInputValue);
      loadOptions(inputValue, function(options3) {
        if (!mounted)
          return;
        if (request !== lastRequest.current)
          return;
        lastRequest.current = void 0;
        setIsLoading(false);
        setLoadedInputValue(inputValue);
        setLoadedOptions(options3 || []);
        setPassEmptyOptions(false);
        setOptionsCache(options3 ? _objectSpread2(_objectSpread2({}, optionsCache), {}, _defineProperty({}, inputValue, options3)) : optionsCache);
      });
    }
  }, [cacheOptions, loadOptions, loadedInputValue, optionsCache, propsOnInputChange]);
  var options2 = passEmptyOptions ? [] : stateInputValue && loadedInputValue ? loadedOptions : defaultOptions5 || [];
  return _objectSpread2(_objectSpread2({}, restSelectProps), {}, {
    options: options2,
    isLoading: isLoading || propsIsLoading,
    onInputChange,
    filterOption
  });
}

// node_modules/react-select/async/dist/react-select-async.esm.js
var import_react_dom5 = __toESM(require_react_dom());
var AsyncSelect = (0, import_react216.forwardRef)(function(props, ref) {
  var stateManagedProps = useAsync(props);
  var selectProps = useStateManager(stateManagedProps);
  return React46.createElement(Select2, _extends({
    ref
  }, selectProps));
});
var AsyncSelect$1 = AsyncSelect;

// node_modules/chakra-react-select/dist/esm/select/async-select.js
function _extends13() {
  _extends13 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
var AsyncSelect2 = (0, import_react218.forwardRef)(function(props, ref) {
  var chakraSelectProps = use_chakra_select_props_default(props);
  return import_react218.default.createElement(AsyncSelect$1, _extends13({
    ref
  }, chakraSelectProps));
});
var async_select_default = AsyncSelect2;

// node_modules/chakra-react-select/dist/esm/select/async-creatable-select.js
var import_react221 = __toESM(require_react());

// node_modules/react-select/async-creatable/dist/react-select-async-creatable.esm.js
var React48 = __toESM(require_react());
var import_react219 = __toESM(require_react());
var import_react_dom6 = __toESM(require_react_dom());
var AsyncCreatableSelect = (0, import_react219.forwardRef)(function(props, ref) {
  var stateManagerProps = useAsync(props);
  var creatableProps = useStateManager(stateManagerProps);
  var selectProps = useCreatable(creatableProps);
  return React48.createElement(Select2, _extends({
    ref
  }, selectProps));
});
var AsyncCreatableSelect$1 = AsyncCreatableSelect;

// node_modules/chakra-react-select/dist/esm/select/async-creatable-select.js
function _extends14() {
  _extends14 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
var AsyncCreatableSelect2 = (0, import_react221.forwardRef)(function(props, ref) {
  var chakraSelectProps = use_chakra_select_props_default(props);
  return import_react221.default.createElement(AsyncCreatableSelect$1, _extends14({
    ref
  }, chakraSelectProps));
});
var async_creatable_select_default = AsyncCreatableSelect2;

// node_modules/@northlight/ui/dist/es/northlight.js
var import_ramda = __toESM(require_ramda());

// node_modules/@react-stately/utils/dist/import.mjs
var import_react222 = __toESM(require_react(), 1);
function $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue2, onChange2) {
  let [stateValue, setStateValue] = (0, import_react222.useState)(value || defaultValue2);
  let isControlledRef = (0, import_react222.useRef)(value !== void 0);
  let isControlled = value !== void 0;
  (0, import_react222.useEffect)(() => {
    let wasControlled = isControlledRef.current;
    if (wasControlled !== isControlled)
      console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
    isControlledRef.current = isControlled;
  }, [
    isControlled
  ]);
  let currentValue = isControlled ? value : stateValue;
  let setValue = (0, import_react222.useCallback)((value2, ...args) => {
    let onChangeCaller = (value3, ...onChangeArgs) => {
      if (onChange2) {
        if (!Object.is(currentValue, value3))
          onChange2(value3, ...onChangeArgs);
      }
      if (!isControlled)
        currentValue = value3;
    };
    if (typeof value2 === "function") {
      console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
      let updateFunction = (oldValue, ...functionArgs) => {
        let interceptedValue = value2(isControlled ? currentValue : oldValue, ...functionArgs);
        onChangeCaller(interceptedValue, ...args);
        if (!isControlled)
          return interceptedValue;
        return oldValue;
      };
      setStateValue(updateFunction);
    } else {
      if (!isControlled)
        setStateValue(value2);
      onChangeCaller(value2, ...args);
    }
  }, [
    isControlled,
    currentValue,
    onChange2
  ]);
  return [
    currentValue,
    setValue
  ];
}

// node_modules/@react-aria/utils/dist/import.mjs
var import_react224 = __toESM(require_react(), 1);

// node_modules/@react-aria/ssr/dist/import.mjs
var import_react223 = __toESM(require_react(), 1);
var $b5e257d569688ac6$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
};
var $b5e257d569688ac6$var$SSRContext = (0, import_react223.default).createContext($b5e257d569688ac6$var$defaultContext);
var $b5e257d569688ac6$var$IsSSRContext = (0, import_react223.default).createContext(false);
var $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $b5e257d569688ac6$var$componentIds = /* @__PURE__ */ new WeakMap();
function $b5e257d569688ac6$var$useCounter(isDisabled3 = false) {
  let ctx = (0, import_react223.useContext)($b5e257d569688ac6$var$SSRContext);
  let ref = (0, import_react223.useRef)(null);
  if (ref.current === null && !isDisabled3) {
    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, import_react223.default).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
    if (currentOwner) {
      let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
      if (prevComponentValue == null)
        $b5e257d569688ac6$var$componentIds.set(currentOwner, {
          id: ctx.current,
          state: currentOwner.memoizedState
        });
      else if (currentOwner.memoizedState !== prevComponentValue.state) {
        ctx.current = prevComponentValue.id;
        $b5e257d569688ac6$var$componentIds.delete(currentOwner);
      }
    }
    ref.current = ++ctx.current;
  }
  return ref.current;
}
function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
  let ctx = (0, import_react223.useContext)($b5e257d569688ac6$var$SSRContext);
  if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM)
    console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  let counter3 = $b5e257d569688ac6$var$useCounter(!!defaultId);
  let prefix4 = ctx === $b5e257d569688ac6$var$defaultContext && false ? "react-aria" : `react-aria${ctx.prefix}`;
  return defaultId || `${prefix4}-${counter3}`;
}
function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
  let id3 = (0, import_react223.default).useId();
  let [didSSR] = (0, import_react223.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
  let prefix4 = didSSR || false ? "react-aria" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
  return defaultId || `${prefix4}-${id3}`;
}
var $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, import_react223.default)["useId"] === "function" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
function $b5e257d569688ac6$var$getSnapshot() {
  return false;
}
function $b5e257d569688ac6$var$getServerSnapshot() {
  return true;
}
function $b5e257d569688ac6$var$subscribe(onStoreChange) {
  return () => {
  };
}
function $b5e257d569688ac6$export$535bd6ca7f90a273() {
  if (typeof (0, import_react223.default)["useSyncExternalStore"] === "function")
    return (0, import_react223.default)["useSyncExternalStore"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
  return (0, import_react223.useContext)($b5e257d569688ac6$var$IsSSRContext);
}

// node_modules/clsx/dist/clsx.mjs
function r2(e) {
  var t3, f, n3 = "";
  if ("string" == typeof e || "number" == typeof e)
    n3 += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o2 = e.length;
      for (t3 = 0; t3 < o2; t3++)
        e[t3] && (f = r2(e[t3])) && (n3 && (n3 += " "), n3 += f);
    } else
      for (f in e)
        e[f] && (n3 && (n3 += " "), n3 += f);
  return n3;
}
function clsx() {
  for (var e, t3, f = 0, n3 = "", o2 = arguments.length; f < o2; f++)
    (e = arguments[f]) && (t3 = r2(e)) && (n3 && (n3 += " "), n3 += t3);
  return n3;
}
var clsx_default = clsx;

// node_modules/@react-aria/utils/dist/import.mjs
var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? (0, import_react224.default).useLayoutEffect : () => {
};
function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn2) {
  const ref = (0, import_react224.useRef)(null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    ref.current = fn2;
  }, [
    fn2
  ]);
  return (0, import_react224.useCallback)((...args) => {
    const f = ref.current;
    return f === null || f === void 0 ? void 0 : f(...args);
  }, []);
}
function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue2) {
  let [value, setValue] = (0, import_react224.useState)(defaultValue2);
  let effect5 = (0, import_react224.useRef)(null);
  let nextRef = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(() => {
    if (!effect5.current)
      return;
    let newValue = effect5.current.next();
    if (newValue.done) {
      effect5.current = null;
      return;
    }
    if (value === newValue.value)
      nextRef();
    else
      setValue(newValue.value);
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (effect5.current)
      nextRef();
  });
  let queue = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((fn2) => {
    effect5.current = fn2(value);
    nextRef();
  });
  return [
    value,
    queue
  ];
}
var $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $bdb11010cef70236$var$idsUpdaterMap = /* @__PURE__ */ new Map();
function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = (0, import_react224.useState)(defaultId);
  let nextId = (0, import_react224.useRef)(null);
  let res = (0, $b5e257d569688ac6$export$619500959fc48b26)(value);
  let updateValue = (0, import_react224.useCallback)((val) => {
    nextId.current = val;
  }, []);
  if ($bdb11010cef70236$var$canUseDOM)
    $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let r3 = res;
    return () => {
      $bdb11010cef70236$var$idsUpdaterMap.delete(r3);
    };
  }, [
    res
  ]);
  (0, import_react224.useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      nextId.current = null;
      setValue(newId);
    }
  });
  return res;
}
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB)
    return idA;
  let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id3 = $bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = (0, $1dbecbe27a04f9af$export$14d238f342723f25)(id3);
  let updateId = (0, import_react224.useCallback)(() => {
    setResolvedId(function* () {
      yield id3;
      yield document.getElementById(id3) ? id3 : void 0;
    });
  }, [
    id3,
    setResolvedId
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [
    id3,
    updateId,
    ...depArray
  ]);
  return resolvedId;
}
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks)
      if (typeof callback === "function")
        callback(...args);
  };
}
var $431fbd86ca7dc216$export$b204af158042fbac = (el) => {
  var _el_ownerDocument;
  return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
};
var $431fbd86ca7dc216$export$f21a1ffae260145a = (el) => {
  if (el && "window" in el && el.window === el)
    return el;
  const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
  return doc.defaultView || window;
};
function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  let result = {
    ...args[0]
  };
  for (let i2 = 1; i2 < args.length; i2++) {
    let props = args[i2];
    for (let key2 in props) {
      let a2 = result[key2];
      let b2 = props[key2];
      if (typeof a2 === "function" && typeof b2 === "function" && // This is a lot faster than a regex.
      key2[0] === "o" && key2[1] === "n" && key2.charCodeAt(2) >= /* 'A' */
      65 && key2.charCodeAt(2) <= /* 'Z' */
      90)
        result[key2] = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(a2, b2);
      else if ((key2 === "className" || key2 === "UNSAFE_className") && typeof a2 === "string" && typeof b2 === "string")
        result[key2] = (0, clsx_default)(a2, b2);
      else if (key2 === "id" && a2 && b2)
        result.id = (0, $bdb11010cef70236$export$cd8c9cb68f842629)(a2, b2);
      else
        result[key2] = b2 !== void 0 ? b2 : a2;
    }
  }
  return result;
}
var $65484d02dcb7eb3e$var$DOMPropNames = /* @__PURE__ */ new Set([
  "id"
]);
var $65484d02dcb7eb3e$var$labelablePropNames = /* @__PURE__ */ new Set([
  "aria-label",
  "aria-labelledby",
  "aria-describedby",
  "aria-details"
]);
var $65484d02dcb7eb3e$var$linkPropNames = /* @__PURE__ */ new Set([
  "href",
  "target",
  "rel",
  "download",
  "ping",
  "referrerPolicy"
]);
var $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let { labelable, isLink, propNames: propNames2 } = opts;
  let filteredProps = {};
  for (const prop2 in props)
    if (Object.prototype.hasOwnProperty.call(props, prop2) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop2) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop2) || isLink && $65484d02dcb7eb3e$var$linkPropNames.has(prop2) || (propNames2 === null || propNames2 === void 0 ? void 0 : propNames2.has(prop2)) || $65484d02dcb7eb3e$var$propRe.test(prop2)))
      filteredProps[prop2] = props[prop2];
  return filteredProps;
}
function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if ($7215afc6de606d6b$var$supportsPreventScroll())
    element.focus({
      preventScroll: true
    });
  else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      let focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element) {
  let parent = element.parentNode;
  let scrollableElements = [];
  let rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth)
      scrollableElements.push({
        element: parent,
        scrollTop: parent.scrollTop,
        scrollLeft: parent.scrollLeft
      });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement)
    scrollableElements.push({
      element: rootScrollingElement,
      scrollTop: rootScrollingElement.scrollTop,
      scrollLeft: rootScrollingElement.scrollLeft
    });
  return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let { element, scrollTop, scrollLeft } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}
function $c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null)
    return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$export$9ac100e40613ea10() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function $c87311424ea30a05$export$186c6964ca17d99() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function $c87311424ea30a05$export$7bef049ce92e4224() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function $c87311424ea30a05$export$fedb369cb70207f1() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
}
function $c87311424ea30a05$export$78551043582a6a98() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
}
function $c87311424ea30a05$export$6446a186d09e379e() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function $c87311424ea30a05$export$a11b0059900ceec8() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
}
function $c87311424ea30a05$export$b7d78993b74f766d() {
  return $c87311424ea30a05$var$testUserAgent(/Firefox/i);
}
var $ea8dcbcb9ea1b556$var$RouterContext = (0, import_react224.createContext)({
  isNative: true,
  open: $ea8dcbcb9ea1b556$var$openSyntheticLink
});
function $ea8dcbcb9ea1b556$export$95185d699e05d4d7(target, modifiers, setOpening = true) {
  var _window_event_type, _window_event;
  let { metaKey, ctrlKey, altKey, shiftKey } = modifiers;
  if ((0, $c87311424ea30a05$export$b7d78993b74f766d)() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith("key")) && target.target === "_blank") {
    if ((0, $c87311424ea30a05$export$9ac100e40613ea10)())
      metaKey = true;
    else
      ctrlKey = true;
  }
  let event = (0, $c87311424ea30a05$export$78551043582a6a98)() && (0, $c87311424ea30a05$export$9ac100e40613ea10)() && !(0, $c87311424ea30a05$export$7bef049ce92e4224)() && true ? new KeyboardEvent("keydown", {
    keyIdentifier: "Enter",
    metaKey,
    ctrlKey,
    altKey,
    shiftKey
  }) : new MouseEvent("click", {
    metaKey,
    ctrlKey,
    altKey,
    shiftKey,
    bubbles: true,
    cancelable: true
  });
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = setOpening;
  (0, $7215afc6de606d6b$export$de79e2c695e052f3)(target);
  target.dispatchEvent(event);
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
}
$ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
function $ea8dcbcb9ea1b556$var$getSyntheticLink(target, open) {
  if (target instanceof HTMLAnchorElement)
    open(target);
  else if (target.hasAttribute("data-href")) {
    let link = document.createElement("a");
    link.href = target.getAttribute("data-href");
    if (target.hasAttribute("data-target"))
      link.target = target.getAttribute("data-target");
    if (target.hasAttribute("data-rel"))
      link.rel = target.getAttribute("data-rel");
    if (target.hasAttribute("data-download"))
      link.download = target.getAttribute("data-download");
    if (target.hasAttribute("data-ping"))
      link.ping = target.getAttribute("data-ping");
    if (target.hasAttribute("data-referrer-policy"))
      link.referrerPolicy = target.getAttribute("data-referrer-policy");
    target.appendChild(link);
    open(link);
    target.removeChild(link);
  }
}
function $ea8dcbcb9ea1b556$var$openSyntheticLink(target, modifiers) {
  $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link) => $ea8dcbcb9ea1b556$export$95185d699e05d4d7(link, modifiers));
}
var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
var $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined")
    return;
  function isTransitionEvent(event) {
    return "propertyName" in event;
  }
  let onTransitionStart = (e) => {
    if (!isTransitionEvent(e) || !e.target)
      return;
    let transitions2 = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions2) {
      transitions2 = /* @__PURE__ */ new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions2);
      e.target.addEventListener("transitioncancel", onTransitionEnd, {
        once: true
      });
    }
    transitions2.add(e.propertyName);
  };
  let onTransitionEnd = (e) => {
    if (!isTransitionEvent(e) || !e.target)
      return;
    let properties2 = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties2)
      return;
    properties2.delete(e.propertyName);
    if (properties2.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb2 of $bbed8b41f857bcc0$var$transitionCallbacks)
        cb2();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading")
    $bbed8b41f857bcc0$var$setupGlobalEvents();
  else
    document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn2) {
  requestAnimationFrame(() => {
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0)
      fn2();
    else
      $bbed8b41f857bcc0$var$transitionCallbacks.add(fn2);
  });
}
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, import_react224.useRef)(/* @__PURE__ */ new Map());
  let addGlobalListener = (0, import_react224.useCallback)((eventTarget, type, listener, options2) => {
    let fn2 = (options2 === null || options2 === void 0 ? void 0 : options2.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type,
      eventTarget,
      fn: fn2,
      options: options2
    });
    eventTarget.addEventListener(type, listener, options2);
  }, []);
  let removeGlobalListener = (0, import_react224.useCallback)((eventTarget, type, listener, options2) => {
    var _globalListeners_current_get;
    let fn2 = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn2, options2);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, import_react224.useCallback)(() => {
    globalListeners.current.forEach((value, key2) => {
      removeGlobalListener(value.eventTarget, value.type, key2, value.options);
    });
  }, [
    removeGlobalListener
  ]);
  (0, import_react224.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [
    removeAllGlobalListeners
  ]);
  return {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}
function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let { id: id3, "aria-label": label, "aria-labelledby": labelledBy } = props;
  id3 = (0, $bdb11010cef70236$export$f680877a34711e37)(id3);
  if (labelledBy && label) {
    let ids2 = /* @__PURE__ */ new Set([
      id3,
      ...labelledBy.trim().split(/\s+/)
    ]);
    labelledBy = [
      ...ids2
    ].join(" ");
  } else if (labelledBy)
    labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  if (!label && !labelledBy && defaultLabel)
    label = defaultLabel;
  return {
    id: id3,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}
function $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, import_react224.useRef)(null);
  return (0, import_react224.useMemo)(() => ({
    get current() {
      return objRef.current;
    },
    set current(value) {
      objRef.current = value;
      if (typeof forwardedRef === "function")
        forwardedRef(value);
      else if (forwardedRef)
        forwardedRef.current = value;
    }
  }), [
    forwardedRef
  ]);
}
function $4f58c5f72bcf79f7$export$496315a1608d9602(effect5, dependencies) {
  const isInitialMount = (0, import_react224.useRef)(true);
  const lastDeps = (0, import_react224.useRef)(null);
  (0, import_react224.useEffect)(() => {
    isInitialMount.current = true;
    return () => {
      isInitialMount.current = false;
    };
  }, []);
  (0, import_react224.useEffect)(() => {
    if (isInitialMount.current)
      isInitialMount.current = false;
    else if (!lastDeps.current || dependencies.some((dep, i2) => !Object.is(dep, lastDeps[i2])))
      effect5();
    lastDeps.current = dependencies;
  }, dependencies);
}
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context2, ref) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context2 && context2.ref && ref) {
      context2.ref.current = ref.current;
      return () => {
        if (context2.ref)
          context2.ref.current = null;
      };
    }
  });
}
function $62d8ded9296f3872$export$cfa2225e87938781(node3, checkForOverflow) {
  let scrollableNode = node3;
  if ($62d8ded9296f3872$export$2bb74740c4e19def(scrollableNode, checkForOverflow))
    scrollableNode = scrollableNode.parentElement;
  while (scrollableNode && !$62d8ded9296f3872$export$2bb74740c4e19def(scrollableNode, checkForOverflow))
    scrollableNode = scrollableNode.parentElement;
  return scrollableNode || document.scrollingElement || document.documentElement;
}
function $62d8ded9296f3872$export$2bb74740c4e19def(node3, checkForOverflow) {
  let style = window.getComputedStyle(node3);
  let isScrollable2 = /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
  if (isScrollable2 && checkForOverflow)
    isScrollable2 = node3.scrollHeight !== node3.clientHeight || node3.scrollWidth !== node3.clientWidth;
  return isScrollable2;
}
var $5df64b3807dc15ee$var$visualViewport = typeof document !== "undefined" && window.visualViewport;
var $ef06256079686ba0$var$descriptionId = 0;
var $ef06256079686ba0$var$descriptionNodes = /* @__PURE__ */ new Map();
function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id3, setId] = (0, import_react224.useState)();
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (!description)
      return;
    let desc = $ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id4 = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
      setId(id4);
      let node3 = document.createElement("div");
      node3.id = id4;
      node3.style.display = "none";
      node3.textContent = description;
      document.body.appendChild(node3);
      desc = {
        refCount: 0,
        element: node3
      };
      $ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else
      setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (desc && --desc.refCount === 0) {
        desc.element.remove();
        $ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [
    description
  ]);
  return {
    "aria-describedby": description ? id3 : void 0
  };
}
function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options2) {
  let handleEvent = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(handler);
  let isDisabled3 = handler == null;
  (0, import_react224.useEffect)(() => {
    if (isDisabled3 || !ref.current)
      return;
    let element = ref.current;
    element.addEventListener(event, handleEvent, options2);
    return () => {
      element.removeEventListener(event, handleEvent, options2);
    };
  }, [
    ref,
    event,
    options2,
    isDisabled3,
    handleEvent
  ]);
}
function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let { borderTopWidth, borderLeftWidth } = getComputedStyle(scrollView);
  let borderAdjustedX = scrollView.scrollLeft + parseInt(borderLeftWidth, 10);
  let borderAdjustedY = scrollView.scrollTop + parseInt(borderTopWidth, 10);
  let maxX = borderAdjustedX + scrollView.clientWidth;
  let maxY = borderAdjustedY + scrollView.clientHeight;
  if (offsetX <= x)
    x = offsetX - parseInt(borderLeftWidth, 10);
  else if (offsetX + width > maxX)
    x += offsetX + width - maxX;
  if (offsetY <= borderAdjustedY)
    y = offsetY - parseInt(borderTopWidth, 10);
  else if (offsetY + height > maxY)
    y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop2 = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop2];
    if (child.offsetParent === ancestor)
      break;
    else if (child.offsetParent.contains(ancestor)) {
      sum -= ancestor[prop2];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}
function $2f04cbc44ee30ce0$export$c826860796309d1b(targetElement, opts) {
  if (document.contains(targetElement)) {
    let root = document.scrollingElement || document.documentElement;
    let isScrollPrevented = window.getComputedStyle(root).overflow === "hidden";
    if (!isScrollPrevented) {
      var _targetElement_scrollIntoView;
      let { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();
      targetElement === null || targetElement === void 0 ? void 0 : (_targetElement_scrollIntoView = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView === void 0 ? void 0 : _targetElement_scrollIntoView.call(targetElement, {
        block: "nearest"
      });
      let { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();
      if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {
        var _opts_containingElement_scrollIntoView, _opts_containingElement, _targetElement_scrollIntoView1;
        opts === null || opts === void 0 ? void 0 : (_opts_containingElement = opts.containingElement) === null || _opts_containingElement === void 0 ? void 0 : (_opts_containingElement_scrollIntoView = _opts_containingElement.scrollIntoView) === null || _opts_containingElement_scrollIntoView === void 0 ? void 0 : _opts_containingElement_scrollIntoView.call(_opts_containingElement, {
          block: "center",
          inline: "center"
        });
        (_targetElement_scrollIntoView1 = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView1 === void 0 ? void 0 : _targetElement_scrollIntoView1.call(targetElement, {
          block: "nearest"
        });
      }
    } else {
      let scrollParent = (0, $62d8ded9296f3872$export$cfa2225e87938781)(targetElement);
      while (targetElement && scrollParent && targetElement !== root && scrollParent !== root) {
        $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollParent, targetElement);
        targetElement = scrollParent;
        scrollParent = (0, $62d8ded9296f3872$export$cfa2225e87938781)(targetElement);
      }
    }
  }
}
function $6a7db85432448f7f$export$60278871457622de(event) {
  if (event.mozInputSource === 0 && event.isTrusted)
    return true;
  if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType)
    return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  return !(0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}
function $5a387cc49350e6db$export$722debc0e56fea39(value, isEqual4) {
  let lastValue = (0, import_react224.useRef)(null);
  if (value && lastValue.current && isEqual4(value, lastValue.current))
    value = lastValue.current;
  lastValue.current = value;
  return value;
}
function $99facab73266f662$export$5add1d006293d136(ref, initialValue, onReset) {
  let resetValue = (0, import_react224.useRef)(initialValue);
  let handleReset = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(() => {
    if (onReset)
      onReset(resetValue.current);
  });
  (0, import_react224.useEffect)(() => {
    var _ref_current;
    let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
    form === null || form === void 0 ? void 0 : form.addEventListener("reset", handleReset);
    return () => {
      form === null || form === void 0 ? void 0 : form.removeEventListener("reset", handleReset);
    };
  }, [
    ref,
    handleReset
  ]);
}

// node_modules/@react-aria/focus/dist/import.mjs
var import_react226 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/import.mjs
var import_react225 = __toESM(require_react(), 1);

// node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js
function _class_apply_descriptor_get(receiver, descriptor) {
  if (descriptor.get)
    return descriptor.get.call(receiver);
  return descriptor.value;
}

// node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js
function _class_extract_field_descriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver))
    throw new TypeError("attempted to " + action + " private field on non-instance");
  return privateMap.get(receiver);
}

// node_modules/@swc/helpers/esm/_class_private_field_get.js
function _class_private_field_get(receiver, privateMap) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
  return _class_apply_descriptor_get(receiver, descriptor);
}

// node_modules/@swc/helpers/esm/_check_private_redeclaration.js
function _check_private_redeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}

// node_modules/@swc/helpers/esm/_class_private_field_init.js
function _class_private_field_init(obj, privateMap, value) {
  _check_private_redeclaration(obj, privateMap);
  privateMap.set(obj, value);
}

// node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js
function _class_apply_descriptor_set(receiver, descriptor, value) {
  if (descriptor.set)
    descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}

// node_modules/@swc/helpers/esm/_class_private_field_set.js
function _class_private_field_set(receiver, privateMap, value) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
  _class_apply_descriptor_set(receiver, descriptor, value);
  return value;
}

// node_modules/@react-aria/interactions/dist/import.mjs
var $14c0b72509d70225$var$state = "default";
var $14c0b72509d70225$var$savedUserSelect = "";
var $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state === "default") {
      const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(target);
      $14c0b72509d70225$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;
      documentObject.documentElement.style.webkitUserSelect = "none";
    }
    $14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = "none";
  }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state !== "disabled")
      return;
    $14c0b72509d70225$var$state = "restoring";
    setTimeout(() => {
      (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
        if ($14c0b72509d70225$var$state === "restoring") {
          const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(target);
          if (documentObject.documentElement.style.webkitUserSelect === "none")
            documentObject.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
          $14c0b72509d70225$var$savedUserSelect = "";
          $14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
      if (target.style.userSelect === "none")
        target.style.userSelect = targetOldUserSelect;
      if (target.getAttribute("style") === "")
        target.removeAttribute("style");
      $14c0b72509d70225$var$modifiedElementMap.delete(target);
    }
  }
}
var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, import_react225.default).createContext({
  register: () => {
  }
});
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  let context2 = (0, import_react225.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context2) {
    let { register, ...contextProps } = context2;
    props = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
    register();
  }
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context2, props.ref);
  return props;
}
var $f6c31cce2adf654f$var$_shouldStopPropagation = /* @__PURE__ */ new WeakMap();
var $f6c31cce2adf654f$var$PressEvent = class {
  continuePropagation() {
    (0, _class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);
  }
  get shouldStopPropagation() {
    return (0, _class_private_field_get)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);
  }
  constructor(type, pointerType, originalEvent) {
    (0, _class_private_field_init)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {
      writable: true,
      value: void 0
    });
    (0, _class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);
    this.type = type;
    this.pointerType = pointerType;
    this.target = originalEvent.currentTarget;
    this.shiftKey = originalEvent.shiftKey;
    this.metaKey = originalEvent.metaKey;
    this.ctrlKey = originalEvent.ctrlKey;
    this.altKey = originalEvent.altKey;
  }
};
var $f6c31cce2adf654f$var$LINK_CLICKED = Symbol("linkClicked");
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress,
    onPressChange,
    onPressStart,
    onPressEnd,
    onPressUp,
    isDisabled: isDisabled3,
    isPressed: isPressedProp,
    preventFocusOnPress,
    shouldCancelOnPointerExit,
    allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let [isPressed, setPressed] = (0, import_react225.useState)(false);
  let ref = (0, import_react225.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    isTriggeringEvent: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let { addGlobalListener, removeAllGlobalListeners } = (0, $03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  let triggerPressStart = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state2 = ref.current;
    if (isDisabled3 || state2.didFirePressStart)
      return false;
    let shouldStopPropagation = true;
    state2.isTriggeringEvent = true;
    if (onPressStart) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressstart", pointerType, originalEvent);
      onPressStart(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange)
      onPressChange(true);
    state2.isTriggeringEvent = false;
    state2.didFirePressStart = true;
    setPressed(true);
    return shouldStopPropagation;
  });
  let triggerPressEnd = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, wasPressed = true) => {
    let state2 = ref.current;
    if (!state2.didFirePressStart)
      return false;
    state2.ignoreClickAfterPress = true;
    state2.didFirePressStart = false;
    state2.isTriggeringEvent = true;
    let shouldStopPropagation = true;
    if (onPressEnd) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressend", pointerType, originalEvent);
      onPressEnd(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange)
      onPressChange(false);
    setPressed(false);
    if (onPress && wasPressed && !isDisabled3) {
      let event = new $f6c31cce2adf654f$var$PressEvent("press", pointerType, originalEvent);
      onPress(event);
      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);
    }
    state2.isTriggeringEvent = false;
    return shouldStopPropagation;
  });
  let triggerPressUp = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state2 = ref.current;
    if (isDisabled3)
      return false;
    if (onPressUp) {
      state2.isTriggeringEvent = true;
      let event = new $f6c31cce2adf654f$var$PressEvent("pressup", pointerType, originalEvent);
      onPressUp(event);
      state2.isTriggeringEvent = false;
      return event.shouldStopPropagation;
    }
    return true;
  });
  let cancel = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    let state2 = ref.current;
    if (state2.isPressed && state2.target) {
      if (state2.isOverTarget && state2.pointerType != null)
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state2.target, e), state2.pointerType, false);
      state2.isPressed = false;
      state2.isOverTarget = false;
      state2.activePointerId = null;
      state2.pointerType = null;
      removeAllGlobalListeners();
      if (!allowTextSelectionOnPress)
        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state2.target);
    }
  });
  let cancelOnPointerExit = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    if (shouldCancelOnPointerExit)
      cancel(e);
  });
  let pressProps = (0, import_react225.useMemo)(() => {
    let state2 = ref.current;
    let pressProps2 = {
      onKeyDown(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
          var _state_metaKeyEvents;
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key))
            e.preventDefault();
          let shouldStopPropagation = true;
          if (!state2.isPressed && !e.repeat) {
            state2.target = e.currentTarget;
            state2.isPressed = true;
            shouldStopPropagation = triggerPressStart(e, "keyboard");
            let originalTarget = e.currentTarget;
            let pressUp = (e2) => {
              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e2, originalTarget) && !e2.repeat && originalTarget.contains(e2.target) && state2.target)
                triggerPressUp($f6c31cce2adf654f$var$createEvent(state2.target, e2), "keyboard");
            };
            addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "keyup", (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(pressUp, onKeyUp), true);
          }
          if (shouldStopPropagation)
            e.stopPropagation();
          if (e.metaKey && (0, $c87311424ea30a05$export$9ac100e40613ea10)())
            (_state_metaKeyEvents = state2.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);
        } else if (e.key === "Meta")
          state2.metaKeyEvents = /* @__PURE__ */ new Map();
      },
      onClick(e) {
        if (e && !e.currentTarget.contains(e.target))
          return;
        if (e && e.button === 0 && !state2.isTriggeringEvent && !(0, $ea8dcbcb9ea1b556$export$95185d699e05d4d7).isOpening) {
          let shouldStopPropagation = true;
          if (isDisabled3)
            e.preventDefault();
          if (!state2.ignoreClickAfterPress && !state2.ignoreEmulatedMouseEvents && !state2.isPressed && (state2.pointerType === "virtual" || (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent))) {
            if (!isDisabled3 && !preventFocusOnPress)
              (0, $7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
            let stopPressStart = triggerPressStart(e, "virtual");
            let stopPressUp = triggerPressUp(e, "virtual");
            let stopPressEnd = triggerPressEnd(e, "virtual");
            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;
          }
          state2.ignoreEmulatedMouseEvents = false;
          state2.ignoreClickAfterPress = false;
          if (shouldStopPropagation)
            e.stopPropagation();
        }
      }
    };
    let onKeyUp = (e) => {
      var _state_metaKeyEvents;
      if (state2.isPressed && state2.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state2.target)) {
        var _state_metaKeyEvents1;
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key))
          e.preventDefault();
        let target = e.target;
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state2.target, e), "keyboard", state2.target.contains(target));
        removeAllGlobalListeners();
        if (e.key !== "Enter" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state2.target) && state2.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {
          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;
          (0, $ea8dcbcb9ea1b556$export$95185d699e05d4d7)(state2.target, e, false);
        }
        state2.isPressed = false;
        (_state_metaKeyEvents1 = state2.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);
      } else if (e.key === "Meta" && ((_state_metaKeyEvents = state2.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {
        var _state_target;
        let events2 = state2.metaKeyEvents;
        state2.metaKeyEvents = void 0;
        for (let event of events2.values())
          (_state_target = state2.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent("keyup", event));
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps2.onPointerDown = (e) => {
        if (e.button !== 0 || !e.currentTarget.contains(e.target))
          return;
        if ((0, $6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent)) {
          state2.pointerType = "virtual";
          return;
        }
        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
          e.preventDefault();
        state2.pointerType = e.pointerType;
        let shouldStopPropagation = true;
        if (!state2.isPressed) {
          state2.isPressed = true;
          state2.isOverTarget = true;
          state2.activePointerId = e.pointerId;
          state2.target = e.currentTarget;
          if (!isDisabled3 && !preventFocusOnPress)
            (0, $7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
          if (!allowTextSelectionOnPress)
            (0, $14c0b72509d70225$export$16a4697467175487)(state2.target);
          shouldStopPropagation = triggerPressStart(e, state2.pointerType);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointermove", onPointerMove, false);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointerup", onPointerUp, false);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointercancel", onPointerCancel, false);
        }
        if (shouldStopPropagation)
          e.stopPropagation();
      };
      pressProps2.onMouseDown = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        if (e.button === 0) {
          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
            e.preventDefault();
          e.stopPropagation();
        }
      };
      pressProps2.onPointerUp = (e) => {
        if (!e.currentTarget.contains(e.target) || state2.pointerType === "virtual")
          return;
        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget))
          triggerPressUp(e, state2.pointerType || e.pointerType);
      };
      let onPointerMove = (e) => {
        if (e.pointerId !== state2.activePointerId)
          return;
        if (state2.target && $f6c31cce2adf654f$var$isOverTarget(e, state2.target)) {
          if (!state2.isOverTarget && state2.pointerType != null) {
            state2.isOverTarget = true;
            triggerPressStart($f6c31cce2adf654f$var$createEvent(state2.target, e), state2.pointerType);
          }
        } else if (state2.target && state2.isOverTarget && state2.pointerType != null) {
          state2.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state2.target, e), state2.pointerType, false);
          cancelOnPointerExit(e);
        }
      };
      let onPointerUp = (e) => {
        if (e.pointerId === state2.activePointerId && state2.isPressed && e.button === 0 && state2.target) {
          if ($f6c31cce2adf654f$var$isOverTarget(e, state2.target) && state2.pointerType != null)
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state2.target, e), state2.pointerType);
          else if (state2.isOverTarget && state2.pointerType != null)
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state2.target, e), state2.pointerType, false);
          state2.isPressed = false;
          state2.isOverTarget = false;
          state2.activePointerId = null;
          state2.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress)
            (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state2.target);
        }
      };
      let onPointerCancel = (e) => {
        cancel(e);
      };
      pressProps2.onDragStart = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        cancel(e);
      };
    } else {
      pressProps2.onMouseDown = (e) => {
        if (e.button !== 0 || !e.currentTarget.contains(e.target))
          return;
        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
          e.preventDefault();
        if (state2.ignoreEmulatedMouseEvents) {
          e.stopPropagation();
          return;
        }
        state2.isPressed = true;
        state2.isOverTarget = true;
        state2.target = e.currentTarget;
        state2.pointerType = (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) ? "virtual" : "mouse";
        if (!isDisabled3 && !preventFocusOnPress)
          (0, $7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
        let shouldStopPropagation = triggerPressStart(e, state2.pointerType);
        if (shouldStopPropagation)
          e.stopPropagation();
        addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "mouseup", onMouseUp, false);
      };
      pressProps2.onMouseEnter = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        let shouldStopPropagation = true;
        if (state2.isPressed && !state2.ignoreEmulatedMouseEvents && state2.pointerType != null) {
          state2.isOverTarget = true;
          shouldStopPropagation = triggerPressStart(e, state2.pointerType);
        }
        if (shouldStopPropagation)
          e.stopPropagation();
      };
      pressProps2.onMouseLeave = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        let shouldStopPropagation = true;
        if (state2.isPressed && !state2.ignoreEmulatedMouseEvents && state2.pointerType != null) {
          state2.isOverTarget = false;
          shouldStopPropagation = triggerPressEnd(e, state2.pointerType, false);
          cancelOnPointerExit(e);
        }
        if (shouldStopPropagation)
          e.stopPropagation();
      };
      pressProps2.onMouseUp = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        if (!state2.ignoreEmulatedMouseEvents && e.button === 0)
          triggerPressUp(e, state2.pointerType || "mouse");
      };
      let onMouseUp = (e) => {
        if (e.button !== 0)
          return;
        state2.isPressed = false;
        removeAllGlobalListeners();
        if (state2.ignoreEmulatedMouseEvents) {
          state2.ignoreEmulatedMouseEvents = false;
          return;
        }
        if (state2.target && $f6c31cce2adf654f$var$isOverTarget(e, state2.target) && state2.pointerType != null)
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state2.target, e), state2.pointerType);
        else if (state2.target && state2.isOverTarget && state2.pointerType != null)
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state2.target, e), state2.pointerType, false);
        state2.isOverTarget = false;
      };
      pressProps2.onTouchStart = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch)
          return;
        state2.activePointerId = touch.identifier;
        state2.ignoreEmulatedMouseEvents = true;
        state2.isOverTarget = true;
        state2.isPressed = true;
        state2.target = e.currentTarget;
        state2.pointerType = "touch";
        if (!isDisabled3 && !preventFocusOnPress)
          (0, $7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
        if (!allowTextSelectionOnPress)
          (0, $14c0b72509d70225$export$16a4697467175487)(state2.target);
        let shouldStopPropagation = triggerPressStart(e, state2.pointerType);
        if (shouldStopPropagation)
          e.stopPropagation();
        addGlobalListener((0, $431fbd86ca7dc216$export$f21a1ffae260145a)(e.currentTarget), "scroll", onScroll, true);
      };
      pressProps2.onTouchMove = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        if (!state2.isPressed) {
          e.stopPropagation();
          return;
        }
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state2.activePointerId);
        let shouldStopPropagation = true;
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state2.isOverTarget && state2.pointerType != null) {
            state2.isOverTarget = true;
            shouldStopPropagation = triggerPressStart(e, state2.pointerType);
          }
        } else if (state2.isOverTarget && state2.pointerType != null) {
          state2.isOverTarget = false;
          shouldStopPropagation = triggerPressEnd(e, state2.pointerType, false);
          cancelOnPointerExit(e);
        }
        if (shouldStopPropagation)
          e.stopPropagation();
      };
      pressProps2.onTouchEnd = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        if (!state2.isPressed) {
          e.stopPropagation();
          return;
        }
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state2.activePointerId);
        let shouldStopPropagation = true;
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state2.pointerType != null) {
          triggerPressUp(e, state2.pointerType);
          shouldStopPropagation = triggerPressEnd(e, state2.pointerType);
        } else if (state2.isOverTarget && state2.pointerType != null)
          shouldStopPropagation = triggerPressEnd(e, state2.pointerType, false);
        if (shouldStopPropagation)
          e.stopPropagation();
        state2.isPressed = false;
        state2.activePointerId = null;
        state2.isOverTarget = false;
        state2.ignoreEmulatedMouseEvents = true;
        if (state2.target && !allowTextSelectionOnPress)
          (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state2.target);
        removeAllGlobalListeners();
      };
      pressProps2.onTouchCancel = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        e.stopPropagation();
        if (state2.isPressed)
          cancel(e);
      };
      let onScroll = (e) => {
        if (state2.isPressed && e.target.contains(state2.target))
          cancel({
            currentTarget: state2.target,
            shiftKey: false,
            ctrlKey: false,
            metaKey: false,
            altKey: false
          });
      };
      pressProps2.onDragStart = (e) => {
        if (!e.currentTarget.contains(e.target))
          return;
        cancel(e);
      };
    }
    return pressProps2;
  }, [
    addGlobalListener,
    isDisabled3,
    preventFocusOnPress,
    removeAllGlobalListeners,
    allowTextSelectionOnPress,
    cancel,
    cancelOnPointerExit,
    triggerPressEnd,
    triggerPressStart,
    triggerPressUp
  ]);
  (0, import_react225.useEffect)(() => {
    return () => {
      var _ref_current_target;
      if (!allowTextSelectionOnPress)
        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_ref_current_target = ref.current.target) !== null && _ref_current_target !== void 0 ? _ref_current_target : void 0);
    };
  }, [
    allowTextSelectionOnPress
  ]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, pressProps)
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const { key: key2, code } = event;
  const element = currentTarget;
  const role = element.getAttribute("role");
  return (key2 === "Enter" || key2 === " " || key2 === "Spacebar" || code === "Space") && !(element instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key2) || element instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element).HTMLTextAreaElement || element.isContentEditable) && // Links should only trigger with Enter key
  !((role === "link" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key2 !== "Enter");
}
function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const { targetTouches } = event;
  if (targetTouches.length > 0)
    return targetTouches[0];
  return null;
}
function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;
  for (let i2 = 0; i2 < changedTouches.length; i2++) {
    const touch = changedTouches[i2];
    if (touch.identifier === pointerId)
      return touch;
  }
  return null;
}
function $f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}
function $f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = 0;
  let offsetY = 0;
  if (point.width !== void 0)
    offsetX = point.width / 2;
  else if (point.radiusX !== void 0)
    offsetX = point.radiusX;
  if (point.height !== void 0)
    offsetY = point.height / 2;
  else if (point.radiusY !== void 0)
    offsetY = point.radiusY;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function $f6c31cce2adf654f$var$areRectanglesOverlapping(a2, b2) {
  if (a2.left > b2.right || b2.left > a2.right)
    return false;
  if (a2.top > b2.bottom || b2.top > a2.bottom)
    return false;
  return true;
}
function $f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function $f6c31cce2adf654f$var$shouldPreventDefault(target) {
  return !(target instanceof HTMLElement) || !target.hasAttribute("draggable");
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key2) {
  if (target instanceof HTMLInputElement)
    return !$f6c31cce2adf654f$var$isValidInputKey(target, key2);
  if (target instanceof HTMLButtonElement)
    return target.type !== "submit" && target.type !== "reset";
  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target))
    return false;
  return true;
}
var $f6c31cce2adf654f$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key2) {
  return target.type === "checkbox" || target.type === "radio" ? key2 === " " : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
var $3b117e43dc0ca95d$export$27c701ed9e449e99 = (0, import_react225.default).forwardRef(({ children, ...props }, ref) => {
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let { pressProps } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    ...props,
    ref
  });
  let child = (0, import_react225.default).Children.only(children);
  return (0, import_react225.default).cloneElement(
    child,
    // @ts-ignore
    {
      ref,
      ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(child.props, pressProps)
    }
  );
});
var $f1ab8c75478c6f73$export$3351871ee4b288b8 = (0, import_react225.default).forwardRef(({ children, ...props }, ref) => {
  let isRegistered = (0, import_react225.useRef)(false);
  let prevContext = (0, import_react225.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref));
  let context2 = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(prevContext || {}, {
    ...props,
    ref,
    register() {
      isRegistered.current = true;
      if (prevContext)
        prevContext.register();
    }
  });
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(prevContext, ref);
  (0, import_react225.useEffect)(() => {
    if (!isRegistered.current) {
      console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
      isRegistered.current = true;
    }
  }, []);
  return (0, import_react225.default).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context2
  }, children);
});
var $8a9cb279dc87e130$export$905e7fc544a71f36 = class {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {
  }
  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
};
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur3) {
  let stateRef = (0, import_react225.useRef)({
    isFocused: false,
    observer: null
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state2 = stateRef.current;
    return () => {
      if (state2.observer) {
        state2.observer.disconnect();
        state2.observer = null;
      }
    };
  }, []);
  let dispatchBlur = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    onBlur3 === null || onBlur3 === void 0 ? void 0 : onBlur3(e);
  });
  return (0, import_react225.useCallback)((e) => {
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = (e2) => {
        stateRef.current.isFocused = false;
        if (target.disabled)
          dispatchBlur(new $8a9cb279dc87e130$export$905e7fc544a71f36("blur", e2));
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          var _stateRef_current_observer;
          (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
          target.dispatchEvent(new FocusEvent("blur", {
            relatedTarget: relatedTargetEl
          }));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true,
            relatedTarget: relatedTargetEl
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  }, [
    dispatchBlur
  ]);
}
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let { isDisabled: isDisabled3, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
  const onBlur3 = (0, import_react225.useCallback)((e) => {
    if (e.target === e.currentTarget) {
      if (onBlurProp)
        onBlurProp(e);
      if (onFocusChange)
        onFocusChange(false);
      return true;
    }
  }, [
    onBlurProp,
    onFocusChange
  ]);
  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur3);
  const onFocus4 = (0, import_react225.useCallback)((e) => {
    if (e.target === e.currentTarget && document.activeElement === e.target) {
      if (onFocusProp)
        onFocusProp(e);
      if (onFocusChange)
        onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [
    onFocusChange,
    onFocusProp,
    onSyntheticFocus
  ]);
  return {
    focusProps: {
      onFocus: !isDisabled3 && (onFocusProp || onFocusChange || onBlurProp) ? onFocus4 : void 0,
      onBlur: !isDisabled3 && (onBlurProp || onFocusChange) ? onBlur3 : void 0
    }
  };
}
var $507fabe10e71c6fb$var$currentModality = null;
var $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
var $507fabe10e71c6fb$export$d90243b58daecda7 = /* @__PURE__ */ new Map();
var $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
var $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
var $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality2, e) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers)
    handler(modality2, e);
}
function $507fabe10e71c6fb$var$isValidKey(e) {
  return !(e.metaKey || !(0, $c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if ($507fabe10e71c6fb$var$isValidKey(e)) {
    $507fabe10e71c6fb$var$currentModality = "keyboard";
    $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e) {
  $507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function $507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, $6a7db85432448f7f$export$60278871457622de)(e)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e) {
  if (e.target === window || e.target === document)
    return;
  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = "virtual";
    $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) {
  if (typeof window === "undefined" || $507fabe10e71c6fb$export$d90243b58daecda7.get((0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element)))
    return;
  const windowObject2 = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element);
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element);
  let focus2 = windowObject2.HTMLElement.prototype.focus;
  windowObject2.HTMLElement.prototype.focus = function() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus2.apply(this, arguments);
  };
  documentObject.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject2.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject2.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    documentObject.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  windowObject2.addEventListener("beforeunload", () => {
    $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element);
  }, {
    once: true
  });
  $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject2, {
    focus: focus2
  });
}
var $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element, loadListener) => {
  const windowObject2 = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element);
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element);
  if (loadListener)
    documentObject.removeEventListener("DOMContentLoaded", loadListener);
  if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject2))
    return;
  windowObject2.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject2).focus;
  documentObject.removeEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject2.removeEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject2.removeEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.removeEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    documentObject.removeEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject2);
};
function $507fabe10e71c6fb$export$2f1888112f558a7d(element) {
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element);
  let loadListener;
  if (documentObject.readyState !== "loading")
    $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
  else {
    loadListener = () => {
      $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
    };
    documentObject.addEventListener("DOMContentLoaded", loadListener);
  }
  return () => $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element, loadListener);
}
if (typeof document !== "undefined")
  $507fabe10e71c6fb$export$2f1888112f558a7d();
function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return $507fabe10e71c6fb$var$currentModality !== "pointer";
}
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}
function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality2) {
  $507fabe10e71c6fb$var$currentModality = modality2;
  $507fabe10e71c6fb$var$triggerChangeHandlers(modality2, null);
}
var $507fabe10e71c6fb$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality2, e) {
  var _e_target;
  const IHTMLInputElement = typeof window !== "undefined" ? (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLInputElement : HTMLInputElement;
  const IHTMLTextAreaElement = typeof window !== "undefined" ? (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLTextAreaElement : HTMLTextAreaElement;
  const IHTMLElement = typeof window !== "undefined" ? (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLElement : HTMLElement;
  const IKeyboardEvent = typeof window !== "undefined" ? (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).KeyboardEvent : KeyboardEvent;
  isTextInput = isTextInput || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLInputElement && !$507fabe10e71c6fb$var$nonTextInputTypes.has(e === null || e === void 0 ? void 0 : (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.type) || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLTextAreaElement || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLElement && (e === null || e === void 0 ? void 0 : e.target.isContentEditable);
  return !(isTextInput && modality2 === "keyboard" && e instanceof IKeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn2, deps, opts) {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0, import_react225.useEffect)(() => {
    let handler = (modality2, e) => {
      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(!!(opts === null || opts === void 0 ? void 0 : opts.isTextInput), modality2, e))
        return;
      fn2($507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, deps);
}
function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let { isDisabled: isDisabled3, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
  let state2 = (0, import_react225.useRef)({
    isFocusWithin: false
  });
  let onBlur3 = (0, import_react225.useCallback)((e) => {
    if (state2.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state2.current.isFocusWithin = false;
      if (onBlurWithin)
        onBlurWithin(e);
      if (onFocusWithinChange)
        onFocusWithinChange(false);
    }
  }, [
    onBlurWithin,
    onFocusWithinChange,
    state2
  ]);
  let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur3);
  let onFocus4 = (0, import_react225.useCallback)((e) => {
    if (!state2.current.isFocusWithin && document.activeElement === e.target) {
      if (onFocusWithin)
        onFocusWithin(e);
      if (onFocusWithinChange)
        onFocusWithinChange(true);
      state2.current.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  }, [
    onFocusWithin,
    onFocusWithinChange,
    onSyntheticFocus
  ]);
  if (isDisabled3)
    return {
      focusWithinProps: {
        // These should not have been null, that would conflict in mergeProps
        onFocus: void 0,
        onBlur: void 0
      }
    };
  return {
    focusWithinProps: {
      onFocus: onFocus4,
      onBlur: onBlur3
    }
  };
}
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler)
    return void 0;
  let shouldStopPropagation = true;
  return (e) => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        shouldStopPropagation = false;
      }
    };
    handler(event);
    if (shouldStopPropagation)
      e.stopPropagation();
  };
}
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}

// node_modules/@react-aria/focus/dist/import.mjs
function $6a99195332edec8b$export$80f3e147d781571c(element) {
  const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element);
  if ((0, $507fabe10e71c6fb$export$630ff653c5ada6a9)() === "virtual") {
    let lastFocusedElement = ownerDocument.activeElement;
    (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
      if (ownerDocument.activeElement === lastFocusedElement && element.isConnected)
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element);
    });
  } else
    (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element);
}
function $645f2e67b85a24c9$var$isStyleVisible(element) {
  const windowObject2 = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element);
  if (!(element instanceof windowObject2.HTMLElement) && !(element instanceof windowObject2.SVGElement))
    return false;
  let { display, visibility } = element.style;
  let isVisible2 = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible2) {
    const { getComputedStyle: getComputedStyle6 } = element.ownerDocument.defaultView;
    let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle6(element);
    isVisible2 = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible2;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
  return element.nodeName !== "#comment" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
}
var $9bf71ea28793e738$var$FocusContext = (0, import_react226.default).createContext(null);
var $9bf71ea28793e738$var$activeScope = null;
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let { children, contain, restoreFocus, autoFocus } = props;
  let startRef = (0, import_react226.useRef)(null);
  let endRef = (0, import_react226.useRef)(null);
  let scopeRef = (0, import_react226.useRef)([]);
  let { parentNode } = (0, import_react226.useContext)($9bf71ea28793e738$var$FocusContext) || {};
  let node3 = (0, import_react226.useMemo)(() => new $9bf71ea28793e738$var$TreeNode({
    scopeRef
  }), [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
      if (activeNode)
        parent = activeNode;
    }
    parent.addChild(node3);
    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node3);
  }, [
    node3,
    parentNode
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let node4 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (node4)
      node4.contain = !!contain;
  }, [
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    var _startRef_current;
    let node4 = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;
    let nodes = [];
    while (node4 && node4 !== endRef.current) {
      nodes.push(node4);
      node4 = node4.nextSibling;
    }
    scopeRef.current = nodes;
  }, [
    children
  ]);
  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  (0, import_react226.useEffect)(() => {
    const activeElement = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0).activeElement;
    let scope = null;
    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
      for (let node4 of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse())
        if (node4.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node4.scopeRef.current))
          scope = node4;
      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef))
        $9bf71ea28793e738$var$activeScope = scope.scopeRef;
    }
  }, [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;
      var _focusScopeTree_getTreeNode_parent_scopeRef;
      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;
      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope)))
        $9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
    };
  }, [
    scopeRef
  ]);
  let focusManager = (0, import_react226.useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
  let value = (0, import_react226.useMemo)(() => ({
    focusManager,
    parentNode: node3
  }), [
    node3,
    focusManager
  ]);
  return (0, import_react226.default).createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value
  }, (0, import_react226.default).createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, (0, import_react226.default).createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$export$10c5169755ce7bd7() {
  var _useContext;
  return (_useContext = (0, import_react226.useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let { from: from2, tabbable, wrap: wrap6, accept } = opts;
      let node3 = from2 || (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope[0]).activeElement;
      let sentinel = scope[0].previousElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node3, scope) ? node3 : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap6) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let { from: from2, tabbable, wrap: wrap6, accept } = opts;
      let node3 = from2 || (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope[0]).activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node3, scope) ? node3 : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap6) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
var $9bf71ea28793e738$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[contenteditable]"
];
var $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
var $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.contain)
      return false;
    scope = scope.parent;
  }
  return true;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0, import_react226.useRef)();
  let raf = (0, import_react226.useRef)();
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    if (!contain) {
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = void 0;
      }
      return;
    }
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef))
        return;
      let focusedElement = ownerDocument.activeElement;
      let scope2 = scopeRef.current;
      if (!scope2 || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope2))
        return;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope2);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable: true
      }, scope2);
      if (!focusedElement)
        return;
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope2[scope2.length - 1].nextElementSibling : scope2[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement)
        $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus4 = (e) => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = e.target;
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
        if (focusedNode.current)
          focusedNode.current.focus();
        else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current)
          $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef))
        focusedNode.current = e.target;
    };
    let onBlur3 = (e) => {
      if (raf.current)
        cancelAnimationFrame(raf.current);
      raf.current = requestAnimationFrame(() => {
        if (ownerDocument.activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(ownerDocument.activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          if (ownerDocument.body.contains(e.target)) {
            var _focusedNode_current;
            focusedNode.current = e.target;
            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();
          } else if ($9bf71ea28793e738$var$activeScope.current)
            $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
        }
      });
    };
    ownerDocument.addEventListener("keydown", onKeyDown, false);
    ownerDocument.addEventListener("focusin", onFocus4, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.addEventListener("focusin", onFocus4, false));
    scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.addEventListener("focusout", onBlur3, false));
    return () => {
      ownerDocument.removeEventListener("keydown", onKeyDown, false);
      ownerDocument.removeEventListener("focusin", onFocus4, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.removeEventListener("focusin", onFocus4, false));
      scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.removeEventListener("focusout", onBlur3, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      if (raf.current)
        cancelAnimationFrame(raf.current);
    };
  }, [
    raf
  ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element) {
  return $9bf71ea28793e738$var$isElementInChildScope(element);
}
function $9bf71ea28793e738$var$isElementInScope(element, scope) {
  if (!element)
    return false;
  if (!scope)
    return false;
  return scope.some((node3) => node3.contains(element));
}
function $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {
  if (element instanceof Element && element.closest("[data-react-aria-top-layer]"))
    return true;
  for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {
    if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current))
      return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  var _focusScopeTree_getTreeNode;
  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
  while (parent) {
    if (parent.scopeRef === ancestor)
      return true;
    parent = parent.parent;
  }
  return false;
}
function $9bf71ea28793e738$var$focusElement(element, scroll3 = false) {
  if (element != null && !scroll3)
    try {
      (0, $6a99195332edec8b$export$80f3e147d781571c)(element);
    } catch (err) {
    }
  else if (element != null)
    try {
      element.focus();
    } catch (err) {
    }
}
function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
  let sentinel = scope[0].previousElementSibling;
  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
    tabbable
  }, scope);
  walker.currentNode = sentinel;
  let nextNode = walker.nextNode();
  if (tabbable && !nextNode) {
    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
      tabbable: false
    }, scope);
    walker.currentNode = sentinel;
    nextNode = walker.nextNode();
  }
  $9bf71ea28793e738$var$focusElement(nextNode);
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = (0, import_react226.default).useRef(autoFocus);
  (0, import_react226.useEffect)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
      if (!$9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, $9bf71ea28793e738$var$activeScope.current) && scopeRef.current)
        $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, [
    scopeRef
  ]);
}
function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (restore || contain)
      return;
    let scope = scopeRef.current;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    let onFocus4 = (e) => {
      let target = e.target;
      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current))
        $9bf71ea28793e738$var$activeScope = scopeRef;
      else if (!$9bf71ea28793e738$var$isElementInAnyScope(target))
        $9bf71ea28793e738$var$activeScope = null;
    };
    ownerDocument.addEventListener("focusin", onFocus4, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.addEventListener("focusin", onFocus4, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus4, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.removeEventListener("focusin", onFocus4, false));
    };
  }, [
    scopeRef,
    restore,
    contain
  ]);
}
function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.nodeToRestore)
      return false;
    scope = scope.parent;
  }
  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  const nodeToRestoreRef = (0, import_react226.useRef)(typeof document !== "undefined" ? (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0).activeElement : null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    if (!restoreFocus || contain)
      return;
    let onFocus4 = () => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current))
        $9bf71ea28793e738$var$activeScope = scopeRef;
    };
    ownerDocument.addEventListener("focusin", onFocus4, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.addEventListener("focusin", onFocus4, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus4, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.removeEventListener("focusin", onFocus4, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus)
      return;
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef))
        return;
      let focusedElement = ownerDocument.activeElement;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current))
        return;
      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode)
        return;
      let nodeToRestore = treeNode.nodeToRestore;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {
        tabbable: true
      });
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {
        nodeToRestore = void 0;
        treeNode.nodeToRestore = void 0;
      }
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        do
          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
        while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement)
          $9bf71ea28793e738$var$focusElement(nextElement, true);
        else if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore))
          focusedElement.blur();
        else
          $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain)
      ownerDocument.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain)
        ownerDocument.removeEventListener("keydown", onKeyDown, true);
    };
  }, [
    scopeRef,
    restoreFocus,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus)
      return;
    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (!treeNode)
      return;
    var _nodeToRestoreRef_current;
    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : void 0;
    return () => {
      let treeNode2 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode2)
        return;
      let nodeToRestore = treeNode2.nodeToRestore;
      if (restoreFocus && nodeToRestore && // eslint-disable-next-line react-hooks/exhaustive-deps
      ($9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current) || ownerDocument.activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
        requestAnimationFrame(() => {
          if (ownerDocument.activeElement === ownerDocument.body) {
            let treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.nodeToRestore && treeNode3.nodeToRestore.isConnected) {
                $9bf71ea28793e738$var$focusElement(treeNode3.nodeToRestore);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
            treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.scopeRef && treeNode3.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode3.scopeRef)) {
                $9bf71ea28793e738$var$focusFirstInScope(treeNode3.scopeRef.current, true);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
          }
        });
      }
    };
  }, [
    scopeRef,
    restoreFocus
  ]);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = (0, $431fbd86ca7dc216$export$b204af158042fbac)(root).createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node3) {
      var _opts_from;
      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node3))
        return NodeFilter.FILTER_REJECT;
      if (node3.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node3) && (!scope || $9bf71ea28793e738$var$isElementInScope(node3, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node3)))
        return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from)
    walker.currentNode = opts.from;
  return walker;
}
function $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions5 = {}) {
  return {
    focusNext(opts = {}) {
      let root = ref.current;
      if (!root)
        return null;
      let { from: from2, tabbable = defaultOptions5.tabbable, wrap: wrap6 = defaultOptions5.wrap, accept = defaultOptions5.accept } = opts;
      let node3 = from2 || (0, $431fbd86ca7dc216$export$b204af158042fbac)(root).activeElement;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable,
        accept
      });
      if (root.contains(node3))
        walker.currentNode = node3;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap6) {
        walker.currentNode = root;
        nextNode = walker.nextNode();
      }
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = defaultOptions5) {
      let root = ref.current;
      if (!root)
        return null;
      let { from: from2, tabbable = defaultOptions5.tabbable, wrap: wrap6 = defaultOptions5.wrap, accept = defaultOptions5.accept } = opts;
      let node3 = from2 || (0, $431fbd86ca7dc216$export$b204af158042fbac)(root).activeElement;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable,
        accept
      });
      if (root.contains(node3))
        walker.currentNode = node3;
      else {
        let next2 = $9bf71ea28793e738$var$last(walker);
        if (next2)
          $9bf71ea28793e738$var$focusElement(next2, true);
        return next2 !== null && next2 !== void 0 ? next2 : null;
      }
      let previousNode = walker.previousNode();
      if (!previousNode && wrap6) {
        walker.currentNode = root;
        let lastNode = $9bf71ea28793e738$var$last(walker);
        if (!lastNode)
          return null;
        previousNode = lastNode;
      }
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode !== null && previousNode !== void 0 ? previousNode : null;
    },
    focusFirst(opts = defaultOptions5) {
      let root = ref.current;
      if (!root)
        return null;
      let { tabbable = defaultOptions5.tabbable, accept = defaultOptions5.accept } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable,
        accept
      });
      let nextNode = walker.nextNode();
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = defaultOptions5) {
      let root = ref.current;
      if (!root)
        return null;
      let { tabbable = defaultOptions5.tabbable, accept = defaultOptions5.accept } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable,
        accept
      });
      let next2 = $9bf71ea28793e738$var$last(walker);
      if (next2)
        $9bf71ea28793e738$var$focusElement(next2, true);
      return next2 !== null && next2 !== void 0 ? next2 : null;
    }
  };
}
function $9bf71ea28793e738$var$last(walker) {
  let next2 = void 0;
  let last2;
  do {
    last2 = walker.lastChild();
    if (last2)
      next2 = last2;
  } while (last2);
  return next2;
}
var $9bf71ea28793e738$var$Tree = class _$9bf71ea28793e738$var$Tree {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
    if (!parentNode)
      return;
    let node3 = new $9bf71ea28793e738$var$TreeNode({
      scopeRef
    });
    parentNode.addChild(node3);
    node3.parent = parentNode;
    this.fastMap.set(scopeRef, node3);
    if (nodeToRestore)
      node3.nodeToRestore = nodeToRestore;
  }
  addNode(node3) {
    this.fastMap.set(node3.scopeRef, node3);
  }
  removeTreeNode(scopeRef) {
    if (scopeRef === null)
      return;
    let node3 = this.fastMap.get(scopeRef);
    if (!node3)
      return;
    let parentNode = node3.parent;
    for (let current of this.traverse())
      if (current !== node3 && node3.nodeToRestore && current.nodeToRestore && node3.scopeRef && node3.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node3.scopeRef.current))
        current.nodeToRestore = node3.nodeToRestore;
    let children = node3.children;
    if (parentNode) {
      parentNode.removeChild(node3);
      if (children.size > 0)
        children.forEach((child) => parentNode && parentNode.addChild(child));
    }
    this.fastMap.delete(node3.scopeRef);
  }
  // Pre Order Depth First
  *traverse(node3 = this.root) {
    if (node3.scopeRef != null)
      yield node3;
    if (node3.children.size > 0)
      for (let child of node3.children)
        yield* this.traverse(child);
  }
  clone() {
    var _node_parent;
    let newTree = new _$9bf71ea28793e738$var$Tree();
    var _node_parent_scopeRef;
    for (let node3 of this.traverse())
      newTree.addTreeNode(node3.scopeRef, (_node_parent_scopeRef = (_node_parent = node3.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node3.nodeToRestore);
    return newTree;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map();
    this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    });
    this.fastMap.set(null, this.root);
  }
};
var $9bf71ea28793e738$var$TreeNode = class {
  addChild(node3) {
    this.children.add(node3);
    node3.parent = this;
  }
  removeChild(node3) {
    this.children.delete(node3);
    node3.parent = void 0;
  }
  constructor(props) {
    this.children = /* @__PURE__ */ new Set();
    this.contain = false;
    this.scopeRef = props.scopeRef;
  }
};
var $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();
function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let { autoFocus = false, isTextInput, within: within2 } = props;
  let state2 = (0, import_react226.useRef)({
    isFocused: false,
    isFocusVisible: autoFocus || (0, $507fabe10e71c6fb$export$b9b3dfddab17db27)()
  });
  let [isFocused, setFocused] = (0, import_react226.useState)(false);
  let [isFocusVisibleState, setFocusVisible] = (0, import_react226.useState)(() => state2.current.isFocused && state2.current.isFocusVisible);
  let updateState = (0, import_react226.useCallback)(() => setFocusVisible(state2.current.isFocused && state2.current.isFocusVisible), []);
  let onFocusChange = (0, import_react226.useCallback)((isFocused2) => {
    state2.current.isFocused = isFocused2;
    setFocused(isFocused2);
    updateState();
  }, [
    updateState
  ]);
  (0, $507fabe10e71c6fb$export$ec71b4b83ac08ec3)((isFocusVisible2) => {
    state2.current.isFocusVisible = isFocusVisible2;
    updateState();
  }, [], {
    isTextInput
  });
  let { focusProps } = (0, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
    isDisabled: within2,
    onFocusChange
  });
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    isDisabled: !within2,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused,
    isFocusVisible: isFocusVisibleState,
    focusProps: within2 ? focusWithinProps : focusProps
  };
}
var $e6afbd83fe6ebbd2$var$FocusableContext = (0, import_react226.default).createContext(null);
function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
  let context2 = (0, import_react226.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context2, ref);
  let { ref: _, ...otherProps } = context2;
  return otherProps;
}
function $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {
  let { children, ...otherProps } = props;
  let objRef = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let context2 = {
    ...otherProps,
    ref: objRef
  };
  return (0, import_react226.default).createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {
    value: context2
  }, children);
}
var $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = (0, import_react226.default).forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);
function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = (0, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6)(props);
  let { keyboardProps } = (0, $46d819fcbaf35654$export$8f71654801c2f7cd)(props);
  let interactions = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusProps, keyboardProps);
  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0, import_react226.useRef)(props.autoFocus);
  (0, import_react226.useEffect)(() => {
    if (autoFocusRef.current && domRef.current)
      (0, $6a99195332edec8b$export$80f3e147d781571c)(domRef.current);
    autoFocusRef.current = false;
  }, [
    domRef
  ]);
  return {
    focusableProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)({
      ...interactions,
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : void 0
    }, interactionProps)
  };
}

// node_modules/react-hook-form/dist/index.esm.mjs
var import_react227 = __toESM(require_react(), 1);
var isCheckBoxInput = (element) => element.type === "checkbox";
var isDateObject = (value) => value instanceof Date;
var isNullOrUndefined = (value) => value == null;
var isObjectType = (value) => typeof value === "object";
var isObject3 = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
var getEventValue = (event) => isObject3(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
var isNameInFieldArray = (names2, name) => names2.has(getNodeParentName(name));
var isPlainObject = (tempObject) => {
  const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
  return isObject3(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
};
var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
function cloneObject(data) {
  let copy3;
  const isArray3 = Array.isArray(data);
  if (data instanceof Date) {
    copy3 = new Date(data);
  } else if (data instanceof Set) {
    copy3 = new Set(data);
  } else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) && (isArray3 || isObject3(data))) {
    copy3 = isArray3 ? [] : {};
    if (!isArray3 && !isPlainObject(data)) {
      copy3 = data;
    } else {
      for (const key2 in data) {
        if (data.hasOwnProperty(key2)) {
          copy3[key2] = cloneObject(data[key2]);
        }
      }
    }
  } else {
    return data;
  }
  return copy3;
}
var compact3 = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
var isUndefined2 = (val) => val === void 0;
var get3 = (object2, path2, defaultValue2) => {
  if (!path2 || !isObject3(object2)) {
    return defaultValue2;
  }
  const result = compact3(path2.split(/[,[\].]+?/)).reduce((result2, key2) => isNullOrUndefined(result2) ? result2 : result2[key2], object2);
  return isUndefined2(result) || result === object2 ? isUndefined2(object2[path2]) ? defaultValue2 : object2[path2] : result;
};
var isBoolean = (value) => typeof value === "boolean";
var EVENTS = {
  BLUR: "blur",
  FOCUS_OUT: "focusout",
  CHANGE: "change"
};
var VALIDATION_MODE = {
  onBlur: "onBlur",
  onChange: "onChange",
  onSubmit: "onSubmit",
  onTouched: "onTouched",
  all: "all"
};
var INPUT_VALIDATION_RULES = {
  max: "max",
  min: "min",
  maxLength: "maxLength",
  minLength: "minLength",
  pattern: "pattern",
  required: "required",
  validate: "validate"
};
var HookFormContext = import_react227.default.createContext(null);
var useFormContext = () => import_react227.default.useContext(HookFormContext);
var FormProvider = (props) => {
  const { children, ...data } = props;
  return import_react227.default.createElement(HookFormContext.Provider, { value: data }, children);
};
var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
  const result = {
    defaultValues: control._defaultValues
  };
  for (const key2 in formState) {
    Object.defineProperty(result, key2, {
      get: () => {
        const _key = key2;
        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
        }
        localProxyFormState && (localProxyFormState[_key] = true);
        return formState[_key];
      }
    });
  }
  return result;
};
var isEmptyObject3 = (value) => isObject3(value) && !Object.keys(value).length;
var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
  updateFormState(formStateData);
  const { name, ...formState } = formStateData;
  return isEmptyObject3(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key2) => _proxyFormState[key2] === (!isRoot || VALIDATION_MODE.all));
};
var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
var shouldSubscribeByName = (name, signalName, exact) => !name || !signalName || name === signalName || convertToArrayPayload(name).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
function useSubscribe(props) {
  const _props = import_react227.default.useRef(props);
  _props.current = props;
  import_react227.default.useEffect(() => {
    const subscription = !props.disabled && _props.current.subject && _props.current.subject.subscribe({
      next: _props.current.next
    });
    return () => {
      subscription && subscription.unsubscribe();
    };
  }, [props.disabled]);
}
function useFormState(props) {
  const methods = useFormContext();
  const { control = methods.control, disabled, name, exact } = props || {};
  const [formState, updateFormState] = import_react227.default.useState(control._formState);
  const _mounted = import_react227.default.useRef(true);
  const _localProxyFormState = import_react227.default.useRef({
    isDirty: false,
    isLoading: false,
    dirtyFields: false,
    touchedFields: false,
    isValidating: false,
    isValid: false,
    errors: false
  });
  const _name = import_react227.default.useRef(name);
  _name.current = name;
  useSubscribe({
    disabled,
    next: (value) => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) && updateFormState({
      ...control._formState,
      ...value
    }),
    subject: control._subjects.state
  });
  import_react227.default.useEffect(() => {
    _mounted.current = true;
    _localProxyFormState.current.isValid && control._updateValid(true);
    return () => {
      _mounted.current = false;
    };
  }, [control]);
  return getProxyFormState(formState, control, _localProxyFormState.current, false);
}
var isString3 = (value) => typeof value === "string";
var generateWatchOutput = (names2, _names, formValues, isGlobal, defaultValue2) => {
  if (isString3(names2)) {
    isGlobal && _names.watch.add(names2);
    return get3(formValues, names2, defaultValue2);
  }
  if (Array.isArray(names2)) {
    return names2.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get3(formValues, fieldName)));
  }
  isGlobal && (_names.watchAll = true);
  return formValues;
};
function useWatch(props) {
  const methods = useFormContext();
  const { control = methods.control, name, defaultValue: defaultValue2, disabled, exact } = props || {};
  const _name = import_react227.default.useRef(name);
  _name.current = name;
  useSubscribe({
    disabled,
    subject: control._subjects.values,
    next: (formState) => {
      if (shouldSubscribeByName(_name.current, formState.name, exact)) {
        updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue2)));
      }
    }
  });
  const [value, updateValue] = import_react227.default.useState(control._getWatch(name, defaultValue2));
  import_react227.default.useEffect(() => control._removeUnmounted());
  return value;
}
var isKey = (value) => /^\w*$/.test(value);
var stringToPath = (input) => compact3(input.replace(/["|']|\]/g, "").split(/\.|\[/));
var set = (object2, path2, value) => {
  let index5 = -1;
  const tempPath = isKey(path2) ? [path2] : stringToPath(path2);
  const length3 = tempPath.length;
  const lastIndex = length3 - 1;
  while (++index5 < length3) {
    const key2 = tempPath[index5];
    let newValue = value;
    if (index5 !== lastIndex) {
      const objValue = object2[key2];
      newValue = isObject3(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index5 + 1]) ? [] : {};
    }
    object2[key2] = newValue;
    object2 = object2[key2];
  }
  return object2;
};
function useController(props) {
  const methods = useFormContext();
  const { name, disabled, control = methods.control, shouldUnregister } = props;
  const isArrayField = isNameInFieldArray(control._names.array, name);
  const value = useWatch({
    control,
    name,
    defaultValue: get3(control._formValues, name, get3(control._defaultValues, name, props.defaultValue)),
    exact: true
  });
  const formState = useFormState({
    control,
    name
  });
  const _registerProps = import_react227.default.useRef(control.register(name, {
    ...props.rules,
    value,
    ...isBoolean(props.disabled) ? { disabled: props.disabled } : {}
  }));
  import_react227.default.useEffect(() => {
    const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;
    const updateMounted = (name2, value2) => {
      const field = get3(control._fields, name2);
      if (field) {
        field._f.mount = value2;
      }
    };
    updateMounted(name, true);
    if (_shouldUnregisterField) {
      const value2 = cloneObject(get3(control._options.defaultValues, name));
      set(control._defaultValues, name, value2);
      if (isUndefined2(get3(control._formValues, name))) {
        set(control._formValues, name, value2);
      }
    }
    return () => {
      (isArrayField ? _shouldUnregisterField && !control._state.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);
    };
  }, [name, control, isArrayField, shouldUnregister]);
  import_react227.default.useEffect(() => {
    if (get3(control._fields, name)) {
      control._updateDisabledField({
        disabled,
        fields: control._fields,
        name,
        value: get3(control._fields, name)._f.value
      });
    }
  }, [disabled, name, control]);
  return {
    field: {
      name,
      value,
      ...isBoolean(disabled) || formState.disabled ? { disabled: formState.disabled || disabled } : {},
      onChange: import_react227.default.useCallback((event) => _registerProps.current.onChange({
        target: {
          value: getEventValue(event),
          name
        },
        type: EVENTS.CHANGE
      }), [name]),
      onBlur: import_react227.default.useCallback(() => _registerProps.current.onBlur({
        target: {
          value: get3(control._formValues, name),
          name
        },
        type: EVENTS.BLUR
      }), [name, control]),
      ref: (elm) => {
        const field = get3(control._fields, name);
        if (field && elm) {
          field._f.ref = {
            focus: () => elm.focus(),
            select: () => elm.select(),
            setCustomValidity: (message) => elm.setCustomValidity(message),
            reportValidity: () => elm.reportValidity()
          };
        }
      }
    },
    formState,
    fieldState: Object.defineProperties({}, {
      invalid: {
        enumerable: true,
        get: () => !!get3(formState.errors, name)
      },
      isDirty: {
        enumerable: true,
        get: () => !!get3(formState.dirtyFields, name)
      },
      isTouched: {
        enumerable: true,
        get: () => !!get3(formState.touchedFields, name)
      },
      error: {
        enumerable: true,
        get: () => get3(formState.errors, name)
      }
    })
  };
}
var Controller = (props) => props.render(useController(props));
var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
  ...errors[name],
  types: {
    ...errors[name] && errors[name].types ? errors[name].types : {},
    [type]: message || true
  }
} : {};
var generateId = () => {
  const d = typeof performance === "undefined" ? Date.now() : performance.now() * 1e3;
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c2) => {
    const r3 = (Math.random() * 16 + d) % 16 | 0;
    return (c2 == "x" ? r3 : r3 & 3 | 8).toString(16);
  });
};
var getFocusFieldName = (name, index5, options2 = {}) => options2.shouldFocus || isUndefined2(options2.shouldFocus) ? options2.focusName || `${name}.${isUndefined2(options2.focusIndex) ? index5 : options2.focusIndex}.` : "";
var getValidationModes = (mode2) => ({
  isOnSubmit: !mode2 || mode2 === VALIDATION_MODE.onSubmit,
  isOnBlur: mode2 === VALIDATION_MODE.onBlur,
  isOnChange: mode2 === VALIDATION_MODE.onChange,
  isOnAll: mode2 === VALIDATION_MODE.all,
  isOnTouch: mode2 === VALIDATION_MODE.onTouched
});
var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
var iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
  for (const key2 of fieldsNames || Object.keys(fields)) {
    const field = get3(fields, key2);
    if (field) {
      const { _f: _f3, ...currentField } = field;
      if (_f3) {
        if (_f3.refs && _f3.refs[0] && action(_f3.refs[0], key2) && !abortEarly) {
          break;
        } else if (_f3.ref && action(_f3.ref, _f3.name) && !abortEarly) {
          break;
        } else {
          iterateFieldsByAction(currentField, action);
        }
      } else if (isObject3(currentField)) {
        iterateFieldsByAction(currentField, action);
      }
    }
  }
};
var updateFieldArrayRootError = (errors, error2, name) => {
  const fieldArrayErrors = compact3(get3(errors, name));
  set(fieldArrayErrors, "root", error2[name]);
  set(errors, name, fieldArrayErrors);
  return errors;
};
var isFileInput = (element) => element.type === "file";
var isFunction5 = (value) => typeof value === "function";
var isHTMLElement6 = (value) => {
  if (!isWeb) {
    return false;
  }
  const owner = value ? value.ownerDocument : 0;
  return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
};
var isMessage = (value) => isString3(value);
var isRadioInput = (element) => element.type === "radio";
var isRegex = (value) => value instanceof RegExp;
var defaultResult = {
  value: false,
  isValid: false
};
var validResult = { value: true, isValid: true };
var getCheckboxValue = (options2) => {
  if (Array.isArray(options2)) {
    if (options2.length > 1) {
      const values2 = options2.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
      return { value: values2, isValid: !!values2.length };
    }
    return options2[0].checked && !options2[0].disabled ? (
      // @ts-expect-error expected to work in the browser
      options2[0].attributes && !isUndefined2(options2[0].attributes.value) ? isUndefined2(options2[0].value) || options2[0].value === "" ? validResult : { value: options2[0].value, isValid: true } : validResult
    ) : defaultResult;
  }
  return defaultResult;
};
var defaultReturn = {
  isValid: false,
  value: null
};
var getRadioValue = (options2) => Array.isArray(options2) ? options2.reduce((previous, option) => option && option.checked && !option.disabled ? {
  isValid: true,
  value: option.value
} : previous, defaultReturn) : defaultReturn;
function getValidateError(result, ref, type = "validate") {
  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
    return {
      type,
      message: isMessage(result) ? result : "",
      ref
    };
  }
}
var getValueAndMessage = (validationData) => isObject3(validationData) && !isRegex(validationData) ? validationData : {
  value: validationData,
  message: ""
};
var validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
  const { ref, refs, required, maxLength, minLength, min: min3, max: max3, pattern, validate: validate2, name, valueAsNumber, mount, disabled } = field._f;
  const inputValue = get3(formValues, name);
  if (!mount || disabled) {
    return {};
  }
  const inputRef = refs ? refs[0] : ref;
  const setCustomValidity = (message) => {
    if (shouldUseNativeValidation && inputRef.reportValidity) {
      inputRef.setCustomValidity(isBoolean(message) ? "" : message || "");
      inputRef.reportValidity();
    }
  };
  const error2 = {};
  const isRadio = isRadioInput(ref);
  const isCheckBox = isCheckBoxInput(ref);
  const isRadioOrCheckbox2 = isRadio || isCheckBox;
  const isEmpty3 = (valueAsNumber || isFileInput(ref)) && isUndefined2(ref.value) && isUndefined2(inputValue) || isHTMLElement6(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error2);
  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
    const message = exceedMax ? maxLengthMessage : minLengthMessage;
    error2[name] = {
      type: exceedMax ? maxType : minType,
      message,
      ref,
      ...appendErrorsCurry(exceedMax ? maxType : minType, message)
    };
  };
  if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty3 || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
    const { value, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
    if (value) {
      error2[name] = {
        type: INPUT_VALIDATION_RULES.required,
        message,
        ref: inputRef,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message);
        return error2;
      }
    }
  }
  if (!isEmpty3 && (!isNullOrUndefined(min3) || !isNullOrUndefined(max3))) {
    let exceedMax;
    let exceedMin;
    const maxOutput = getValueAndMessage(max3);
    const minOutput = getValueAndMessage(min3);
    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
      const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
      if (!isNullOrUndefined(maxOutput.value)) {
        exceedMax = valueNumber > maxOutput.value;
      }
      if (!isNullOrUndefined(minOutput.value)) {
        exceedMin = valueNumber < minOutput.value;
      }
    } else {
      const valueDate = ref.valueAsDate || new Date(inputValue);
      const convertTimeToDate = (time2) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time2);
      const isTime = ref.type == "time";
      const isWeek = ref.type == "week";
      if (isString3(maxOutput.value) && inputValue) {
        exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
      }
      if (isString3(minOutput.value) && inputValue) {
        exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
      }
    }
    if (exceedMax || exceedMin) {
      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error2[name].message);
        return error2;
      }
    }
  }
  if ((maxLength || minLength) && !isEmpty3 && (isString3(inputValue) || isFieldArray && Array.isArray(inputValue))) {
    const maxLengthOutput = getValueAndMessage(maxLength);
    const minLengthOutput = getValueAndMessage(minLength);
    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
    if (exceedMax || exceedMin) {
      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error2[name].message);
        return error2;
      }
    }
  }
  if (pattern && !isEmpty3 && isString3(inputValue)) {
    const { value: patternValue, message } = getValueAndMessage(pattern);
    if (isRegex(patternValue) && !inputValue.match(patternValue)) {
      error2[name] = {
        type: INPUT_VALIDATION_RULES.pattern,
        message,
        ref,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message);
        return error2;
      }
    }
  }
  if (validate2) {
    if (isFunction5(validate2)) {
      const result = await validate2(inputValue, formValues);
      const validateError = getValidateError(result, inputRef);
      if (validateError) {
        error2[name] = {
          ...validateError,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(validateError.message);
          return error2;
        }
      }
    } else if (isObject3(validate2)) {
      let validationResult = {};
      for (const key2 in validate2) {
        if (!isEmptyObject3(validationResult) && !validateAllFieldCriteria) {
          break;
        }
        const validateError = getValidateError(await validate2[key2](inputValue, formValues), inputRef, key2);
        if (validateError) {
          validationResult = {
            ...validateError,
            ...appendErrorsCurry(key2, validateError.message)
          };
          setCustomValidity(validateError.message);
          if (validateAllFieldCriteria) {
            error2[name] = validationResult;
          }
        }
      }
      if (!isEmptyObject3(validationResult)) {
        error2[name] = {
          ref: inputRef,
          ...validationResult
        };
        if (!validateAllFieldCriteria) {
          return error2;
        }
      }
    }
  }
  setCustomValidity(true);
  return error2;
};
var appendAt = (data, value) => [
  ...data,
  ...convertToArrayPayload(value)
];
var fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => void 0) : void 0;
function insert(data, index5, value) {
  return [
    ...data.slice(0, index5),
    ...convertToArrayPayload(value),
    ...data.slice(index5)
  ];
}
var moveArrayAt = (data, from2, to) => {
  if (!Array.isArray(data)) {
    return [];
  }
  if (isUndefined2(data[to])) {
    data[to] = void 0;
  }
  data.splice(to, 0, data.splice(from2, 1)[0]);
  return data;
};
var prependAt = (data, value) => [
  ...convertToArrayPayload(value),
  ...convertToArrayPayload(data)
];
function removeAtIndexes(data, indexes) {
  let i2 = 0;
  const temp = [...data];
  for (const index5 of indexes) {
    temp.splice(index5 - i2, 1);
    i2++;
  }
  return compact3(temp).length ? temp : [];
}
var removeArrayAt = (data, index5) => isUndefined2(index5) ? [] : removeAtIndexes(data, convertToArrayPayload(index5).sort((a2, b2) => a2 - b2));
var swapArrayAt = (data, indexA, indexB) => {
  [data[indexA], data[indexB]] = [data[indexB], data[indexA]];
};
function baseGet(object2, updatePath) {
  const length3 = updatePath.slice(0, -1).length;
  let index5 = 0;
  while (index5 < length3) {
    object2 = isUndefined2(object2) ? index5++ : object2[updatePath[index5++]];
  }
  return object2;
}
function isEmptyArray2(obj) {
  for (const key2 in obj) {
    if (obj.hasOwnProperty(key2) && !isUndefined2(obj[key2])) {
      return false;
    }
  }
  return true;
}
function unset(object2, path2) {
  const paths = Array.isArray(path2) ? path2 : isKey(path2) ? [path2] : stringToPath(path2);
  const childObject = paths.length === 1 ? object2 : baseGet(object2, paths);
  const index5 = paths.length - 1;
  const key2 = paths[index5];
  if (childObject) {
    delete childObject[key2];
  }
  if (index5 !== 0 && (isObject3(childObject) && isEmptyObject3(childObject) || Array.isArray(childObject) && isEmptyArray2(childObject))) {
    unset(object2, paths.slice(0, -1));
  }
  return object2;
}
var updateAt = (fieldValues, index5, value) => {
  fieldValues[index5] = value;
  return fieldValues;
};
function useFieldArray(props) {
  const methods = useFormContext();
  const { control = methods.control, name, keyName = "id", shouldUnregister } = props;
  const [fields, setFields] = import_react227.default.useState(control._getFieldArray(name));
  const ids2 = import_react227.default.useRef(control._getFieldArray(name).map(generateId));
  const _fieldIds = import_react227.default.useRef(fields);
  const _name = import_react227.default.useRef(name);
  const _actioned = import_react227.default.useRef(false);
  _name.current = name;
  _fieldIds.current = fields;
  control._names.array.add(name);
  props.rules && control.register(name, props.rules);
  useSubscribe({
    next: ({ values: values2, name: fieldArrayName }) => {
      if (fieldArrayName === _name.current || !fieldArrayName) {
        const fieldValues = get3(values2, _name.current);
        if (Array.isArray(fieldValues)) {
          setFields(fieldValues);
          ids2.current = fieldValues.map(generateId);
        }
      }
    },
    subject: control._subjects.array
  });
  const updateValues = import_react227.default.useCallback((updatedFieldArrayValues) => {
    _actioned.current = true;
    control._updateFieldArray(name, updatedFieldArrayValues);
  }, [control, name]);
  const append3 = (value, options2) => {
    const appendValue = convertToArrayPayload(cloneObject(value));
    const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);
    control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options2);
    ids2.current = appendAt(ids2.current, appendValue.map(generateId));
    updateValues(updatedFieldArrayValues);
    setFields(updatedFieldArrayValues);
    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {
      argA: fillEmptyArray(value)
    });
  };
  const prepend = (value, options2) => {
    const prependValue = convertToArrayPayload(cloneObject(value));
    const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);
    control._names.focus = getFocusFieldName(name, 0, options2);
    ids2.current = prependAt(ids2.current, prependValue.map(generateId));
    updateValues(updatedFieldArrayValues);
    setFields(updatedFieldArrayValues);
    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {
      argA: fillEmptyArray(value)
    });
  };
  const remove2 = (index5) => {
    const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index5);
    ids2.current = removeArrayAt(ids2.current, index5);
    updateValues(updatedFieldArrayValues);
    setFields(updatedFieldArrayValues);
    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {
      argA: index5
    });
  };
  const insert$1 = (index5, value, options2) => {
    const insertValue = convertToArrayPayload(cloneObject(value));
    const updatedFieldArrayValues = insert(control._getFieldArray(name), index5, insertValue);
    control._names.focus = getFocusFieldName(name, index5, options2);
    ids2.current = insert(ids2.current, index5, insertValue.map(generateId));
    updateValues(updatedFieldArrayValues);
    setFields(updatedFieldArrayValues);
    control._updateFieldArray(name, updatedFieldArrayValues, insert, {
      argA: index5,
      argB: fillEmptyArray(value)
    });
  };
  const swap = (indexA, indexB) => {
    const updatedFieldArrayValues = control._getFieldArray(name);
    swapArrayAt(updatedFieldArrayValues, indexA, indexB);
    swapArrayAt(ids2.current, indexA, indexB);
    updateValues(updatedFieldArrayValues);
    setFields(updatedFieldArrayValues);
    control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {
      argA: indexA,
      argB: indexB
    }, false);
  };
  const move = (from2, to) => {
    const updatedFieldArrayValues = control._getFieldArray(name);
    moveArrayAt(updatedFieldArrayValues, from2, to);
    moveArrayAt(ids2.current, from2, to);
    updateValues(updatedFieldArrayValues);
    setFields(updatedFieldArrayValues);
    control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {
      argA: from2,
      argB: to
    }, false);
  };
  const update = (index5, value) => {
    const updateValue = cloneObject(value);
    const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index5, updateValue);
    ids2.current = [...updatedFieldArrayValues].map((item, i2) => !item || i2 === index5 ? generateId() : ids2.current[i2]);
    updateValues(updatedFieldArrayValues);
    setFields([...updatedFieldArrayValues]);
    control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {
      argA: index5,
      argB: updateValue
    }, true, false);
  };
  const replace3 = (value) => {
    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));
    ids2.current = updatedFieldArrayValues.map(generateId);
    updateValues([...updatedFieldArrayValues]);
    setFields([...updatedFieldArrayValues]);
    control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);
  };
  import_react227.default.useEffect(() => {
    control._state.action = false;
    isWatched(name, control._names) && control._subjects.state.next({
      ...control._formState
    });
    if (_actioned.current && (!getValidationModes(control._options.mode).isOnSubmit || control._formState.isSubmitted)) {
      if (control._options.resolver) {
        control._executeSchema([name]).then((result) => {
          const error2 = get3(result.errors, name);
          const existingError = get3(control._formState.errors, name);
          if (existingError ? !error2 && existingError.type || error2 && (existingError.type !== error2.type || existingError.message !== error2.message) : error2 && error2.type) {
            error2 ? set(control._formState.errors, name, error2) : unset(control._formState.errors, name);
            control._subjects.state.next({
              errors: control._formState.errors
            });
          }
        });
      } else {
        const field = get3(control._fields, name);
        if (field && field._f && !(getValidationModes(control._options.reValidateMode).isOnSubmit && getValidationModes(control._options.mode).isOnSubmit)) {
          validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error2) => !isEmptyObject3(error2) && control._subjects.state.next({
            errors: updateFieldArrayRootError(control._formState.errors, error2, name)
          }));
        }
      }
    }
    control._subjects.values.next({
      name,
      values: { ...control._formValues }
    });
    control._names.focus && iterateFieldsByAction(control._fields, (ref, key2) => {
      if (control._names.focus && key2.startsWith(control._names.focus) && ref.focus) {
        ref.focus();
        return 1;
      }
      return;
    });
    control._names.focus = "";
    control._updateValid();
    _actioned.current = false;
  }, [fields, name, control]);
  import_react227.default.useEffect(() => {
    !get3(control._formValues, name) && control._updateFieldArray(name);
    return () => {
      (control._options.shouldUnregister || shouldUnregister) && control.unregister(name);
    };
  }, [name, control, keyName, shouldUnregister]);
  return {
    swap: import_react227.default.useCallback(swap, [updateValues, name, control]),
    move: import_react227.default.useCallback(move, [updateValues, name, control]),
    prepend: import_react227.default.useCallback(prepend, [updateValues, name, control]),
    append: import_react227.default.useCallback(append3, [updateValues, name, control]),
    remove: import_react227.default.useCallback(remove2, [updateValues, name, control]),
    insert: import_react227.default.useCallback(insert$1, [updateValues, name, control]),
    update: import_react227.default.useCallback(update, [updateValues, name, control]),
    replace: import_react227.default.useCallback(replace3, [updateValues, name, control]),
    fields: import_react227.default.useMemo(() => fields.map((field, index5) => ({
      ...field,
      [keyName]: ids2.current[index5] || generateId()
    })), [fields, keyName])
  };
}
var createSubject = () => {
  let _observers = [];
  const next2 = (value) => {
    for (const observer of _observers) {
      observer.next && observer.next(value);
    }
  };
  const subscribe = (observer) => {
    _observers.push(observer);
    return {
      unsubscribe: () => {
        _observers = _observers.filter((o2) => o2 !== observer);
      }
    };
  };
  const unsubscribe = () => {
    _observers = [];
  };
  return {
    get observers() {
      return _observers;
    },
    next: next2,
    subscribe,
    unsubscribe
  };
};
var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
function deepEqual(object1, object2) {
  if (isPrimitive(object1) || isPrimitive(object2)) {
    return object1 === object2;
  }
  if (isDateObject(object1) && isDateObject(object2)) {
    return object1.getTime() === object2.getTime();
  }
  const keys1 = Object.keys(object1);
  const keys22 = Object.keys(object2);
  if (keys1.length !== keys22.length) {
    return false;
  }
  for (const key2 of keys1) {
    const val1 = object1[key2];
    if (!keys22.includes(key2)) {
      return false;
    }
    if (key2 !== "ref") {
      const val2 = object2[key2];
      if (isDateObject(val1) && isDateObject(val2) || isObject3(val1) && isObject3(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {
        return false;
      }
    }
  }
  return true;
}
var isMultipleSelect = (element) => element.type === `select-multiple`;
var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
var live = (ref) => isHTMLElement6(ref) && ref.isConnected;
var objectHasFunction = (data) => {
  for (const key2 in data) {
    if (isFunction5(data[key2])) {
      return true;
    }
  }
  return false;
};
function markFieldsDirty(data, fields = {}) {
  const isParentNodeArray = Array.isArray(data);
  if (isObject3(data) || isParentNodeArray) {
    for (const key2 in data) {
      if (Array.isArray(data[key2]) || isObject3(data[key2]) && !objectHasFunction(data[key2])) {
        fields[key2] = Array.isArray(data[key2]) ? [] : {};
        markFieldsDirty(data[key2], fields[key2]);
      } else if (!isNullOrUndefined(data[key2])) {
        fields[key2] = true;
      }
    }
  }
  return fields;
}
function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
  const isParentNodeArray = Array.isArray(data);
  if (isObject3(data) || isParentNodeArray) {
    for (const key2 in data) {
      if (Array.isArray(data[key2]) || isObject3(data[key2]) && !objectHasFunction(data[key2])) {
        if (isUndefined2(formValues) || isPrimitive(dirtyFieldsFromValues[key2])) {
          dirtyFieldsFromValues[key2] = Array.isArray(data[key2]) ? markFieldsDirty(data[key2], []) : { ...markFieldsDirty(data[key2]) };
        } else {
          getDirtyFieldsFromDefaultValues(data[key2], isNullOrUndefined(formValues) ? {} : formValues[key2], dirtyFieldsFromValues[key2]);
        }
      } else {
        dirtyFieldsFromValues[key2] = !deepEqual(data[key2], formValues[key2]);
      }
    }
  }
  return dirtyFieldsFromValues;
}
var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined2(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString3(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
function getFieldValue(_f3) {
  const ref = _f3.ref;
  if (_f3.refs ? _f3.refs.every((ref2) => ref2.disabled) : ref.disabled) {
    return;
  }
  if (isFileInput(ref)) {
    return ref.files;
  }
  if (isRadioInput(ref)) {
    return getRadioValue(_f3.refs).value;
  }
  if (isMultipleSelect(ref)) {
    return [...ref.selectedOptions].map(({ value }) => value);
  }
  if (isCheckBoxInput(ref)) {
    return getCheckboxValue(_f3.refs).value;
  }
  return getFieldValueAs(isUndefined2(ref.value) ? _f3.ref.value : ref.value, _f3);
}
var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
  const fields = {};
  for (const name of fieldsNames) {
    const field = get3(_fields, name);
    field && set(fields, name, field._f);
  }
  return {
    criteriaMode,
    names: [...fieldsNames],
    fields,
    shouldUseNativeValidation
  };
};
var getRuleValue = (rule) => isUndefined2(rule) ? rule : isRegex(rule) ? rule.source : isObject3(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
var hasValidation = (options2) => options2.mount && (options2.required || options2.min || options2.max || options2.maxLength || options2.minLength || options2.pattern || options2.validate);
function schemaErrorLookup(errors, _fields, name) {
  const error2 = get3(errors, name);
  if (error2 || isKey(name)) {
    return {
      error: error2,
      name
    };
  }
  const names2 = name.split(".");
  while (names2.length) {
    const fieldName = names2.join(".");
    const field = get3(_fields, fieldName);
    const foundError = get3(errors, fieldName);
    if (field && !Array.isArray(field) && name !== fieldName) {
      return { name };
    }
    if (foundError && foundError.type) {
      return {
        name: fieldName,
        error: foundError
      };
    }
    names2.pop();
  }
  return {
    name
  };
}
var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode2) => {
  if (mode2.isOnAll) {
    return false;
  } else if (!isSubmitted && mode2.isOnTouch) {
    return !(isTouched || isBlurEvent);
  } else if (isSubmitted ? reValidateMode.isOnBlur : mode2.isOnBlur) {
    return !isBlurEvent;
  } else if (isSubmitted ? reValidateMode.isOnChange : mode2.isOnChange) {
    return isBlurEvent;
  }
  return true;
};
var unsetEmptyArray = (ref, name) => !compact3(get3(ref, name)).length && unset(ref, name);
var defaultOptions3 = {
  mode: VALIDATION_MODE.onSubmit,
  reValidateMode: VALIDATION_MODE.onChange,
  shouldFocusError: true
};
function createFormControl(props = {}, flushRootRender) {
  let _options = {
    ...defaultOptions3,
    ...props
  };
  let _formState = {
    submitCount: 0,
    isDirty: false,
    isLoading: isFunction5(_options.defaultValues),
    isValidating: false,
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    touchedFields: {},
    dirtyFields: {},
    errors: _options.errors || {},
    disabled: _options.disabled || false
  };
  let _fields = {};
  let _defaultValues = isObject3(_options.values) || isObject3(_options.defaultValues) ? cloneObject(_options.values || _options.defaultValues) || {} : {};
  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
  let _state = {
    action: false,
    mount: false,
    watch: false
  };
  let _names = {
    mount: /* @__PURE__ */ new Set(),
    unMount: /* @__PURE__ */ new Set(),
    array: /* @__PURE__ */ new Set(),
    watch: /* @__PURE__ */ new Set()
  };
  let delayErrorCallback;
  let timer = 0;
  const _proxyFormState = {
    isDirty: false,
    dirtyFields: false,
    touchedFields: false,
    isValidating: false,
    isValid: false,
    errors: false
  };
  const _subjects = {
    values: createSubject(),
    array: createSubject(),
    state: createSubject()
  };
  const validationModeBeforeSubmit = getValidationModes(_options.mode);
  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
  const debounce2 = (callback) => (wait) => {
    clearTimeout(timer);
    timer = setTimeout(callback, wait);
  };
  const _updateValid = async (shouldUpdateValid) => {
    if (_proxyFormState.isValid || shouldUpdateValid) {
      const isValid = _options.resolver ? isEmptyObject3((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);
      if (isValid !== _formState.isValid) {
        _subjects.state.next({
          isValid
        });
      }
    }
  };
  const _updateIsValidating = (value) => _proxyFormState.isValidating && _subjects.state.next({
    isValidating: value
  });
  const _updateFieldArray = (name, values2 = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
    if (args && method) {
      _state.action = true;
      if (shouldUpdateFieldsAndState && Array.isArray(get3(_fields, name))) {
        const fieldValues = method(get3(_fields, name), args.argA, args.argB);
        shouldSetValues && set(_fields, name, fieldValues);
      }
      if (shouldUpdateFieldsAndState && Array.isArray(get3(_formState.errors, name))) {
        const errors = method(get3(_formState.errors, name), args.argA, args.argB);
        shouldSetValues && set(_formState.errors, name, errors);
        unsetEmptyArray(_formState.errors, name);
      }
      if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get3(_formState.touchedFields, name))) {
        const touchedFields = method(get3(_formState.touchedFields, name), args.argA, args.argB);
        shouldSetValues && set(_formState.touchedFields, name, touchedFields);
      }
      if (_proxyFormState.dirtyFields) {
        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
      }
      _subjects.state.next({
        name,
        isDirty: _getDirty(name, values2),
        dirtyFields: _formState.dirtyFields,
        errors: _formState.errors,
        isValid: _formState.isValid
      });
    } else {
      set(_formValues, name, values2);
    }
  };
  const updateErrors = (name, error2) => {
    set(_formState.errors, name, error2);
    _subjects.state.next({
      errors: _formState.errors
    });
  };
  const _setErrors = (errors) => {
    _formState.errors = errors;
    _subjects.state.next({
      errors: _formState.errors,
      isValid: false
    });
  };
  const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
    const field = get3(_fields, name);
    if (field) {
      const defaultValue2 = get3(_formValues, name, isUndefined2(value) ? get3(_defaultValues, name) : value);
      isUndefined2(defaultValue2) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue2 : getFieldValue(field._f)) : setFieldValue(name, defaultValue2);
      _state.mount && _updateValid();
    }
  };
  const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
    let shouldUpdateField = false;
    let isPreviousDirty = false;
    const output = {
      name
    };
    const disabledField = !!(get3(_fields, name) && get3(_fields, name)._f.disabled);
    if (!isBlurEvent || shouldDirty) {
      if (_proxyFormState.isDirty) {
        isPreviousDirty = _formState.isDirty;
        _formState.isDirty = output.isDirty = _getDirty();
        shouldUpdateField = isPreviousDirty !== output.isDirty;
      }
      const isCurrentFieldPristine = disabledField || deepEqual(get3(_defaultValues, name), fieldValue);
      isPreviousDirty = !!(!disabledField && get3(_formState.dirtyFields, name));
      isCurrentFieldPristine || disabledField ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
      output.dirtyFields = _formState.dirtyFields;
      shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
    }
    if (isBlurEvent) {
      const isPreviousFieldTouched = get3(_formState.touchedFields, name);
      if (!isPreviousFieldTouched) {
        set(_formState.touchedFields, name, isBlurEvent);
        output.touchedFields = _formState.touchedFields;
        shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
      }
    }
    shouldUpdateField && shouldRender && _subjects.state.next(output);
    return shouldUpdateField ? output : {};
  };
  const shouldRenderByError = (name, isValid, error2, fieldState) => {
    const previousFieldError = get3(_formState.errors, name);
    const shouldUpdateValid = _proxyFormState.isValid && isBoolean(isValid) && _formState.isValid !== isValid;
    if (props.delayError && error2) {
      delayErrorCallback = debounce2(() => updateErrors(name, error2));
      delayErrorCallback(props.delayError);
    } else {
      clearTimeout(timer);
      delayErrorCallback = null;
      error2 ? set(_formState.errors, name, error2) : unset(_formState.errors, name);
    }
    if ((error2 ? !deepEqual(previousFieldError, error2) : previousFieldError) || !isEmptyObject3(fieldState) || shouldUpdateValid) {
      const updatedFormState = {
        ...fieldState,
        ...shouldUpdateValid && isBoolean(isValid) ? { isValid } : {},
        errors: _formState.errors,
        name
      };
      _formState = {
        ..._formState,
        ...updatedFormState
      };
      _subjects.state.next(updatedFormState);
    }
    _updateIsValidating(false);
  };
  const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
  const executeSchemaAndUpdateState = async (names2) => {
    const { errors } = await _executeSchema(names2);
    if (names2) {
      for (const name of names2) {
        const error2 = get3(errors, name);
        error2 ? set(_formState.errors, name, error2) : unset(_formState.errors, name);
      }
    } else {
      _formState.errors = errors;
    }
    return errors;
  };
  const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context2 = {
    valid: true
  }) => {
    for (const name in fields) {
      const field = fields[name];
      if (field) {
        const { _f: _f3, ...fieldValue } = field;
        if (_f3) {
          const isFieldArrayRoot = _names.array.has(_f3.name);
          const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
          if (fieldError[_f3.name]) {
            context2.valid = false;
            if (shouldOnlyCheckValid) {
              break;
            }
          }
          !shouldOnlyCheckValid && (get3(fieldError, _f3.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f3.name) : set(_formState.errors, _f3.name, fieldError[_f3.name]) : unset(_formState.errors, _f3.name));
        }
        fieldValue && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context2);
      }
    }
    return context2.valid;
  };
  const _removeUnmounted = () => {
    for (const name of _names.unMount) {
      const field = get3(_fields, name);
      field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
    }
    _names.unMount = /* @__PURE__ */ new Set();
  };
  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));
  const _getWatch = (names2, defaultValue2, isGlobal) => generateWatchOutput(names2, _names, {
    ..._state.mount ? _formValues : isUndefined2(defaultValue2) ? _defaultValues : isString3(names2) ? { [names2]: defaultValue2 } : defaultValue2
  }, isGlobal, defaultValue2);
  const _getFieldArray = (name) => compact3(get3(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get3(_defaultValues, name, []) : []));
  const setFieldValue = (name, value, options2 = {}) => {
    const field = get3(_fields, name);
    let fieldValue = value;
    if (field) {
      const fieldReference = field._f;
      if (fieldReference) {
        !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
        fieldValue = isHTMLElement6(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
        if (isMultipleSelect(fieldReference.ref)) {
          [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
        } else if (fieldReference.refs) {
          if (isCheckBoxInput(fieldReference.ref)) {
            fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
          } else {
            fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
          }
        } else if (isFileInput(fieldReference.ref)) {
          fieldReference.ref.value = "";
        } else {
          fieldReference.ref.value = fieldValue;
          if (!fieldReference.ref.type) {
            _subjects.values.next({
              name,
              values: { ..._formValues }
            });
          }
        }
      }
    }
    (options2.shouldDirty || options2.shouldTouch) && updateTouchAndDirty(name, fieldValue, options2.shouldTouch, options2.shouldDirty, true);
    options2.shouldValidate && trigger2(name);
  };
  const setValues3 = (name, value, options2) => {
    for (const fieldKey in value) {
      const fieldValue = value[fieldKey];
      const fieldName = `${name}.${fieldKey}`;
      const field = get3(_fields, fieldName);
      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues3(fieldName, fieldValue, options2) : setFieldValue(fieldName, fieldValue, options2);
    }
  };
  const setValue = (name, value, options2 = {}) => {
    const field = get3(_fields, name);
    const isFieldArray = _names.array.has(name);
    const cloneValue = cloneObject(value);
    set(_formValues, name, cloneValue);
    if (isFieldArray) {
      _subjects.array.next({
        name,
        values: { ..._formValues }
      });
      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options2.shouldDirty) {
        _subjects.state.next({
          name,
          dirtyFields: getDirtyFields(_defaultValues, _formValues),
          isDirty: _getDirty(name, cloneValue)
        });
      }
    } else {
      field && !field._f && !isNullOrUndefined(cloneValue) ? setValues3(name, cloneValue, options2) : setFieldValue(name, cloneValue, options2);
    }
    isWatched(name, _names) && _subjects.state.next({ ..._formState });
    _subjects.values.next({
      name,
      values: { ..._formValues }
    });
    !_state.mount && flushRootRender();
  };
  const onChange2 = async (event) => {
    const target = event.target;
    let name = target.name;
    let isFieldValueUpdated = true;
    const field = get3(_fields, name);
    const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
    const _updateIsFieldValueUpdated = (fieldValue) => {
      isFieldValueUpdated = Number.isNaN(fieldValue) || fieldValue === get3(_formValues, name, fieldValue);
    };
    if (field) {
      let error2;
      let isValid;
      const fieldValue = getCurrentFieldValue();
      const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get3(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get3(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
      const watched = isWatched(name, _names, isBlurEvent);
      set(_formValues, name, fieldValue);
      if (isBlurEvent) {
        field._f.onBlur && field._f.onBlur(event);
        delayErrorCallback && delayErrorCallback(0);
      } else if (field._f.onChange) {
        field._f.onChange(event);
      }
      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
      const shouldRender = !isEmptyObject3(fieldState) || watched;
      !isBlurEvent && _subjects.values.next({
        name,
        type: event.type,
        values: { ..._formValues }
      });
      if (shouldSkipValidation) {
        _proxyFormState.isValid && _updateValid();
        return shouldRender && _subjects.state.next({ name, ...watched ? {} : fieldState });
      }
      !isBlurEvent && watched && _subjects.state.next({ ..._formState });
      _updateIsValidating(true);
      if (_options.resolver) {
        const { errors } = await _executeSchema([name]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
          const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
          error2 = errorLookupResult.error;
          name = errorLookupResult.name;
          isValid = isEmptyObject3(errors);
        }
      } else {
        error2 = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          if (error2) {
            isValid = false;
          } else if (_proxyFormState.isValid) {
            isValid = await executeBuiltInValidation(_fields, true);
          }
        }
      }
      if (isFieldValueUpdated) {
        field._f.deps && trigger2(field._f.deps);
        shouldRenderByError(name, isValid, error2, fieldState);
      }
    }
  };
  const _focusInput = (ref, key2) => {
    if (get3(_formState.errors, key2) && ref.focus) {
      ref.focus();
      return 1;
    }
    return;
  };
  const trigger2 = async (name, options2 = {}) => {
    let isValid;
    let validationResult;
    const fieldNames = convertToArrayPayload(name);
    _updateIsValidating(true);
    if (_options.resolver) {
      const errors = await executeSchemaAndUpdateState(isUndefined2(name) ? name : fieldNames);
      isValid = isEmptyObject3(errors);
      validationResult = name ? !fieldNames.some((name2) => get3(errors, name2)) : isValid;
    } else if (name) {
      validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
        const field = get3(_fields, fieldName);
        return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
      }))).every(Boolean);
      !(!validationResult && !_formState.isValid) && _updateValid();
    } else {
      validationResult = isValid = await executeBuiltInValidation(_fields);
    }
    _subjects.state.next({
      ...!isString3(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : { name },
      ..._options.resolver || !name ? { isValid } : {},
      errors: _formState.errors,
      isValidating: false
    });
    options2.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
    return validationResult;
  };
  const getValues = (fieldNames) => {
    const values2 = {
      ..._defaultValues,
      ..._state.mount ? _formValues : {}
    };
    return isUndefined2(fieldNames) ? values2 : isString3(fieldNames) ? get3(values2, fieldNames) : fieldNames.map((name) => get3(values2, name));
  };
  const getFieldState = (name, formState) => ({
    invalid: !!get3((formState || _formState).errors, name),
    isDirty: !!get3((formState || _formState).dirtyFields, name),
    isTouched: !!get3((formState || _formState).touchedFields, name),
    error: get3((formState || _formState).errors, name)
  });
  const clearErrors = (name) => {
    name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
    _subjects.state.next({
      errors: name ? _formState.errors : {}
    });
  };
  const setError = (name, error2, options2) => {
    const ref = (get3(_fields, name, { _f: {} })._f || {}).ref;
    set(_formState.errors, name, {
      ...error2,
      ref
    });
    _subjects.state.next({
      name,
      errors: _formState.errors,
      isValid: false
    });
    options2 && options2.shouldFocus && ref && ref.focus && ref.focus();
  };
  const watch = (name, defaultValue2) => isFunction5(name) ? _subjects.values.subscribe({
    next: (payload) => name(_getWatch(void 0, defaultValue2), payload)
  }) : _getWatch(name, defaultValue2, true);
  const unregister = (name, options2 = {}) => {
    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
      _names.mount.delete(fieldName);
      _names.array.delete(fieldName);
      if (!options2.keepValue) {
        unset(_fields, fieldName);
        unset(_formValues, fieldName);
      }
      !options2.keepError && unset(_formState.errors, fieldName);
      !options2.keepDirty && unset(_formState.dirtyFields, fieldName);
      !options2.keepTouched && unset(_formState.touchedFields, fieldName);
      !_options.shouldUnregister && !options2.keepDefaultValue && unset(_defaultValues, fieldName);
    }
    _subjects.values.next({
      values: { ..._formValues }
    });
    _subjects.state.next({
      ..._formState,
      ...!options2.keepDirty ? {} : { isDirty: _getDirty() }
    });
    !options2.keepIsValid && _updateValid();
  };
  const _updateDisabledField = ({ disabled, name, field, fields, value }) => {
    if (isBoolean(disabled)) {
      const inputValue = disabled ? void 0 : isUndefined2(value) ? getFieldValue(field ? field._f : get3(fields, name)._f) : value;
      set(_formValues, name, inputValue);
      updateTouchAndDirty(name, inputValue, false, false, true);
    }
  };
  const register = (name, options2 = {}) => {
    let field = get3(_fields, name);
    const disabledIsDefined = isBoolean(options2.disabled);
    set(_fields, name, {
      ...field || {},
      _f: {
        ...field && field._f ? field._f : { ref: { name } },
        name,
        mount: true,
        ...options2
      }
    });
    _names.mount.add(name);
    if (field) {
      _updateDisabledField({
        field,
        disabled: options2.disabled,
        name,
        value: options2.value
      });
    } else {
      updateValidAndValue(name, true, options2.value);
    }
    return {
      ...disabledIsDefined ? { disabled: options2.disabled } : {},
      ..._options.progressive ? {
        required: !!options2.required,
        min: getRuleValue(options2.min),
        max: getRuleValue(options2.max),
        minLength: getRuleValue(options2.minLength),
        maxLength: getRuleValue(options2.maxLength),
        pattern: getRuleValue(options2.pattern)
      } : {},
      name,
      onChange: onChange2,
      onBlur: onChange2,
      ref: (ref) => {
        if (ref) {
          register(name, options2);
          field = get3(_fields, name);
          const fieldRef = isUndefined2(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
          const refs = field._f.refs || [];
          if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
            return;
          }
          set(_fields, name, {
            _f: {
              ...field._f,
              ...radioOrCheckbox ? {
                refs: [
                  ...refs.filter(live),
                  fieldRef,
                  ...Array.isArray(get3(_defaultValues, name)) ? [{}] : []
                ],
                ref: { type: fieldRef.type, name }
              } : { ref: fieldRef }
            }
          });
          updateValidAndValue(name, false, void 0, fieldRef);
        } else {
          field = get3(_fields, name, {});
          if (field._f) {
            field._f.mount = false;
          }
          (_options.shouldUnregister || options2.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
        }
      }
    };
  };
  const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
  const _disableForm = (disabled) => {
    if (isBoolean(disabled)) {
      _subjects.state.next({ disabled });
      iterateFieldsByAction(_fields, (ref, name) => {
        let requiredDisabledState = disabled;
        const currentField = get3(_fields, name);
        if (currentField && isBoolean(currentField._f.disabled)) {
          requiredDisabledState || (requiredDisabledState = currentField._f.disabled);
        }
        ref.disabled = requiredDisabledState;
      }, 0, false);
    }
  };
  const handleSubmit = (onValid, onInvalid) => async (e) => {
    let onValidError = void 0;
    if (e) {
      e.preventDefault && e.preventDefault();
      e.persist && e.persist();
    }
    let fieldValues = cloneObject(_formValues);
    _subjects.state.next({
      isSubmitting: true
    });
    if (_options.resolver) {
      const { errors, values: values2 } = await _executeSchema();
      _formState.errors = errors;
      fieldValues = values2;
    } else {
      await executeBuiltInValidation(_fields);
    }
    unset(_formState.errors, "root");
    if (isEmptyObject3(_formState.errors)) {
      _subjects.state.next({
        errors: {}
      });
      try {
        await onValid(fieldValues, e);
      } catch (error2) {
        onValidError = error2;
      }
    } else {
      if (onInvalid) {
        await onInvalid({ ..._formState.errors }, e);
      }
      _focusError();
      setTimeout(_focusError);
    }
    _subjects.state.next({
      isSubmitted: true,
      isSubmitting: false,
      isSubmitSuccessful: isEmptyObject3(_formState.errors) && !onValidError,
      submitCount: _formState.submitCount + 1,
      errors: _formState.errors
    });
    if (onValidError) {
      throw onValidError;
    }
  };
  const resetField = (name, options2 = {}) => {
    if (get3(_fields, name)) {
      if (isUndefined2(options2.defaultValue)) {
        setValue(name, cloneObject(get3(_defaultValues, name)));
      } else {
        setValue(name, options2.defaultValue);
        set(_defaultValues, name, cloneObject(options2.defaultValue));
      }
      if (!options2.keepTouched) {
        unset(_formState.touchedFields, name);
      }
      if (!options2.keepDirty) {
        unset(_formState.dirtyFields, name);
        _formState.isDirty = options2.defaultValue ? _getDirty(name, cloneObject(get3(_defaultValues, name))) : _getDirty();
      }
      if (!options2.keepError) {
        unset(_formState.errors, name);
        _proxyFormState.isValid && _updateValid();
      }
      _subjects.state.next({ ..._formState });
    }
  };
  const _reset = (formValues, keepStateOptions = {}) => {
    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
    const cloneUpdatedValues = cloneObject(updatedValues);
    const values2 = formValues && !isEmptyObject3(formValues) ? cloneUpdatedValues : _defaultValues;
    if (!keepStateOptions.keepDefaultValues) {
      _defaultValues = updatedValues;
    }
    if (!keepStateOptions.keepValues) {
      if (keepStateOptions.keepDirtyValues) {
        for (const fieldName of _names.mount) {
          get3(_formState.dirtyFields, fieldName) ? set(values2, fieldName, get3(_formValues, fieldName)) : setValue(fieldName, get3(values2, fieldName));
        }
      } else {
        if (isWeb && isUndefined2(formValues)) {
          for (const name of _names.mount) {
            const field = get3(_fields, name);
            if (field && field._f) {
              const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
              if (isHTMLElement6(fieldReference)) {
                const form = fieldReference.closest("form");
                if (form) {
                  form.reset();
                  break;
                }
              }
            }
          }
        }
        _fields = {};
      }
      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values2);
      _subjects.array.next({
        values: { ...values2 }
      });
      _subjects.values.next({
        values: { ...values2 }
      });
    }
    _names = {
      mount: /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set(),
      watchAll: false,
      focus: ""
    };
    !_state.mount && flushRootRender();
    _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
    _state.watch = !!props.shouldUnregister;
    _subjects.state.next({
      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),
      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
      dirtyFields: keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : {},
      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
      errors: keepStateOptions.keepErrors ? _formState.errors : {},
      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
      isSubmitting: false
    });
  };
  const reset = (formValues, keepStateOptions) => _reset(isFunction5(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
  const setFocus = (name, options2 = {}) => {
    const field = get3(_fields, name);
    const fieldReference = field && field._f;
    if (fieldReference) {
      const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
      if (fieldRef.focus) {
        fieldRef.focus();
        options2.shouldSelect && fieldRef.select();
      }
    }
  };
  const _updateFormState = (updatedFormState) => {
    _formState = {
      ..._formState,
      ...updatedFormState
    };
  };
  const _resetDefaultValues = () => isFunction5(_options.defaultValues) && _options.defaultValues().then((values2) => {
    reset(values2, _options.resetOptions);
    _subjects.state.next({
      isLoading: false
    });
  });
  return {
    control: {
      register,
      unregister,
      getFieldState,
      handleSubmit,
      setError,
      _executeSchema,
      _getWatch,
      _getDirty,
      _updateValid,
      _removeUnmounted,
      _updateFieldArray,
      _updateDisabledField,
      _getFieldArray,
      _reset,
      _resetDefaultValues,
      _updateFormState,
      _disableForm,
      _subjects,
      _proxyFormState,
      _setErrors,
      get _fields() {
        return _fields;
      },
      get _formValues() {
        return _formValues;
      },
      get _state() {
        return _state;
      },
      set _state(value) {
        _state = value;
      },
      get _defaultValues() {
        return _defaultValues;
      },
      get _names() {
        return _names;
      },
      set _names(value) {
        _names = value;
      },
      get _formState() {
        return _formState;
      },
      set _formState(value) {
        _formState = value;
      },
      get _options() {
        return _options;
      },
      set _options(value) {
        _options = {
          ..._options,
          ...value
        };
      }
    },
    trigger: trigger2,
    register,
    handleSubmit,
    watch,
    setValue,
    getValues,
    reset,
    resetField,
    clearErrors,
    unregister,
    setError,
    setFocus,
    getFieldState
  };
}
function useForm(props = {}) {
  const _formControl = import_react227.default.useRef();
  const _values = import_react227.default.useRef();
  const [formState, updateFormState] = import_react227.default.useState({
    isDirty: false,
    isValidating: false,
    isLoading: isFunction5(props.defaultValues),
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    submitCount: 0,
    dirtyFields: {},
    touchedFields: {},
    errors: props.errors || {},
    disabled: props.disabled || false,
    defaultValues: isFunction5(props.defaultValues) ? void 0 : props.defaultValues
  });
  if (!_formControl.current) {
    _formControl.current = {
      ...createFormControl(props, () => updateFormState((formState2) => ({ ...formState2 }))),
      formState
    };
  }
  const control = _formControl.current.control;
  control._options = props;
  useSubscribe({
    subject: control._subjects.state,
    next: (value) => {
      if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {
        updateFormState({ ...control._formState });
      }
    }
  });
  import_react227.default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
  import_react227.default.useEffect(() => {
    if (control._proxyFormState.isDirty) {
      const isDirty = control._getDirty();
      if (isDirty !== formState.isDirty) {
        control._subjects.state.next({
          isDirty
        });
      }
    }
  }, [control, formState.isDirty]);
  import_react227.default.useEffect(() => {
    if (props.values && !deepEqual(props.values, _values.current)) {
      control._reset(props.values, control._options.resetOptions);
      _values.current = props.values;
      updateFormState((state2) => ({ ...state2 }));
    } else {
      control._resetDefaultValues();
    }
  }, [props.values, control]);
  import_react227.default.useEffect(() => {
    if (props.errors) {
      control._setErrors(props.errors);
    }
  }, [props.errors, control]);
  import_react227.default.useEffect(() => {
    if (!control._state.mount) {
      control._updateValid();
      control._state.mount = true;
    }
    if (control._state.watch) {
      control._state.watch = false;
      control._subjects.state.next({ ...control._formState });
    }
    control._removeUnmounted();
  });
  import_react227.default.useEffect(() => {
    props.shouldUnregister && control._subjects.values.next({
      values: control._getWatch()
    });
  }, [props.shouldUnregister, control]);
  _formControl.current.formState = getProxyFormState(formState, control);
  return _formControl.current;
}

// node_modules/@northlight/icons/dist/es/icons.mjs
var React51 = __toESM(require_react(), 1);
var __defProp$7W = Object.defineProperty;
var __getOwnPropSymbols$7W = Object.getOwnPropertySymbols;
var __hasOwnProp$7W = Object.prototype.hasOwnProperty;
var __propIsEnum$7W = Object.prototype.propertyIsEnumerable;
var __defNormalProp$7W = (obj, key2, value) => key2 in obj ? __defProp$7W(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$7W = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$7W.call(b2, prop2))
      __defNormalProp$7W(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$7W)
    for (var prop2 of __getOwnPropSymbols$7W(b2)) {
      if (__propIsEnum$7W.call(b2, prop2))
        __defNormalProp$7W(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$7W = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$7W.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$7W)
    for (var prop2 of __getOwnPropSymbols$7W(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$7W.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgAlertCircleSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$7W(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$7W({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1Zm1 7a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0V8Zm-1 7a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$7S = Object.defineProperty;
var __getOwnPropSymbols$7S = Object.getOwnPropertySymbols;
var __hasOwnProp$7S = Object.prototype.hasOwnProperty;
var __propIsEnum$7S = Object.prototype.propertyIsEnumerable;
var __defNormalProp$7S = (obj, key2, value) => key2 in obj ? __defProp$7S(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$7S = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$7S.call(b2, prop2))
      __defNormalProp$7S(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$7S)
    for (var prop2 of __getOwnPropSymbols$7S(b2)) {
      if (__propIsEnum$7S.call(b2, prop2))
        __defNormalProp$7S(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$7S = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$7S.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$7S)
    for (var prop2 of __getOwnPropSymbols$7S(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$7S.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgAlertTriangleSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$7S(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$7S({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M12.813 1.668a2 2 0 0 0-1.626 0c-.4.178-.659.49-.84.746-.177.25-.367.579-.576.94l-8.267 14.28c-.21.362-.4.692-.53.971-.132.285-.274.666-.229 1.102a2 2 0 0 0 .813 1.41c.355.258.757.326 1.069.355.306.028.687.028 1.106.028h16.534c.419 0 .8 0 1.106-.028.312-.029.714-.097 1.069-.354a2 2 0 0 0 .813-1.41c.045-.437-.097-.818-.229-1.103-.13-.28-.32-.609-.53-.971L14.23 3.354c-.21-.361-.4-.69-.577-.94-.18-.255-.44-.568-.84-.746ZM13 9a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0V9Zm-1 7a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$78 = Object.defineProperty;
var __getOwnPropSymbols$78 = Object.getOwnPropertySymbols;
var __hasOwnProp$78 = Object.prototype.hasOwnProperty;
var __propIsEnum$78 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$78 = (obj, key2, value) => key2 in obj ? __defProp$78(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$78 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$78.call(b2, prop2))
      __defNormalProp$78(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$78)
    for (var prop2 of __getOwnPropSymbols$78(b2)) {
      if (__propIsEnum$78.call(b2, prop2))
        __defNormalProp$78(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$78 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$78.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$78)
    for (var prop2 of __getOwnPropSymbols$78(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$78.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgBellSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$78(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$78({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M8.604 20.338a1 1 0 0 1 1.412-.088c.53.468 1.223.75 1.984.75.761 0 1.455-.282 1.984-.75a1 1 0 1 1 1.323 1.5A4.984 4.984 0 0 1 12 23a4.984 4.984 0 0 1-3.308-1.25 1 1 0 0 1-.088-1.412ZM7.05 3.05A7 7 0 0 1 19 8c0 2.913.732 4.844 1.5 6.077l.011.02c.358.573.64 1.027.83 1.358.096.165.183.325.247.466.032.071.068.158.096.252.024.079.068.246.051.45-.01.136-.039.37-.173.611a1.482 1.482 0 0 1-.428.47c-.25.186-.538.229-.634.243h-.004a4.619 4.619 0 0 1-.483.04c-.336.013-.8.013-1.377.013H5.364c-.577 0-1.041 0-1.376-.013a4.618 4.618 0 0 1-.484-.04H3.5a1.405 1.405 0 0 1-.634-.242 1.48 1.48 0 0 1-.428-.47 1.482 1.482 0 0 1-.173-.613c-.017-.203.027-.37.05-.449.029-.094.065-.18.097-.251a5.66 5.66 0 0 1 .247-.467c.19-.33.472-.785.83-1.359l.012-.019C4.268 12.844 5 10.913 5 8a7 7 0 0 1 2.05-4.95Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$6W = Object.defineProperty;
var __getOwnPropSymbols$6W = Object.getOwnPropertySymbols;
var __hasOwnProp$6W = Object.prototype.hasOwnProperty;
var __propIsEnum$6W = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6W = (obj, key2, value) => key2 in obj ? __defProp$6W(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6W = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6W.call(b2, prop2))
      __defNormalProp$6W(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6W)
    for (var prop2 of __getOwnPropSymbols$6W(b2)) {
      if (__propIsEnum$6W.call(b2, prop2))
        __defNormalProp$6W(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6W = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6W.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6W)
    for (var prop2 of __getOwnPropSymbols$6W(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6W.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgBrightnessSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6W(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6W({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        d: "M15.933 1.641a1 1 0 0 0-1.866 0l-1.179 3.064c-.3.781-.395 1.007-.524 1.188a2 2 0 0 1-.47.471c-.182.13-.408.224-1.189.524L7.641 8.067a1 1 0 0 0 0 1.866l3.064 1.179c.781.3 1.007.395 1.188.524.182.13.341.289.471.47.13.182.224.408.524 1.189l1.179 3.064a1 1 0 0 0 1.866 0l1.179-3.064c.3-.781.395-1.007.524-1.188a2.04 2.04 0 0 1 .47-.471c.182-.13.407-.224 1.189-.524l3.064-1.179a1 1 0 0 0 0-1.866l-3.064-1.179c-.782-.3-1.007-.395-1.188-.524a1.997 1.997 0 0 1-.471-.47c-.13-.182-.224-.408-.524-1.189l-1.179-3.064ZM7.394 12.553a1 1 0 0 0-1.788 0l-.785 1.569c-.282.565-.368.727-.473.863a2.003 2.003 0 0 1-.363.363c-.136.104-.298.19-.863.473l-1.57.785a1 1 0 0 0 0 1.788l1.57.785c.565.282.727.369.863.473.136.105.258.227.363.363.105.136.19.298.473.863l.785 1.57a1 1 0 0 0 1.788 0l.785-1.57c.282-.565.368-.727.473-.863.105-.136.227-.258.363-.363.136-.105.298-.19.863-.473l1.57-.785a1 1 0 0 0 0-1.788l-1.57-.785c-.565-.282-.727-.368-.863-.473a2.003 2.003 0 0 1-.363-.363c-.105-.136-.19-.298-.473-.863l-.785-1.57Z"
      }
    )
  );
};
var __defProp$6R = Object.defineProperty;
var __getOwnPropSymbols$6R = Object.getOwnPropertySymbols;
var __hasOwnProp$6R = Object.prototype.hasOwnProperty;
var __propIsEnum$6R = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6R = (obj, key2, value) => key2 in obj ? __defProp$6R(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6R = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6R.call(b2, prop2))
      __defNormalProp$6R(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6R)
    for (var prop2 of __getOwnPropSymbols$6R(b2)) {
      if (__propIsEnum$6R.call(b2, prop2))
        __defNormalProp$6R(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6R = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6R.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6R)
    for (var prop2 of __getOwnPropSymbols$6R(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6R.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgBusinessContactDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6R(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6R({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M18.684 19.438A4.001 4.001 0 0 0 15 17H9a4.001 4.001 0 0 0-3.684 2.438",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M12 13.5a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z"
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Z"
      }
    )
  );
};
var __defProp$6O = Object.defineProperty;
var __getOwnPropSymbols$6O = Object.getOwnPropertySymbols;
var __hasOwnProp$6O = Object.prototype.hasOwnProperty;
var __propIsEnum$6O = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6O = (obj, key2, value) => key2 in obj ? __defProp$6O(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6O = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6O.call(b2, prop2))
      __defNormalProp$6O(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6O)
    for (var prop2 of __getOwnPropSymbols$6O(b2)) {
      if (__propIsEnum$6O.call(b2, prop2))
        __defNormalProp$6O(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6O = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6O.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6O)
    for (var prop2 of __getOwnPropSymbols$6O(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6O.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgCDeleteSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6O(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6O({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1ZM8 11a1 1 0 1 0 0 2h8a1 1 0 1 0 0-2H8Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$6x = Object.defineProperty;
var __getOwnPropSymbols$6x = Object.getOwnPropertySymbols;
var __hasOwnProp$6x = Object.prototype.hasOwnProperty;
var __propIsEnum$6x = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6x = (obj, key2, value) => key2 in obj ? __defProp$6x(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6x = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6x.call(b2, prop2))
      __defNormalProp$6x(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6x)
    for (var prop2 of __getOwnPropSymbols$6x(b2)) {
      if (__propIsEnum$6x.call(b2, prop2))
        __defNormalProp$6x(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6x = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6x.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6x)
    for (var prop2 of __getOwnPropSymbols$6x(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6x.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgCalendarDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6x(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6x({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M21 10H3",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M16 2v4M8 2v4m-.2 16h8.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C21 19.72 21 18.88 21 17.2V8.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C18.72 4 17.88 4 16.2 4H7.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C3 6.28 3 7.12 3 8.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C5.28 22 6.12 22 7.8 22Z"
      }
    )
  );
};
var __defProp$6i = Object.defineProperty;
var __getOwnPropSymbols$6i = Object.getOwnPropertySymbols;
var __hasOwnProp$6i = Object.prototype.hasOwnProperty;
var __propIsEnum$6i = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6i = (obj, key2, value) => key2 in obj ? __defProp$6i(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6i = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6i.call(b2, prop2))
      __defNormalProp$6i(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6i)
    for (var prop2 of __getOwnPropSymbols$6i(b2)) {
      if (__propIsEnum$6i.call(b2, prop2))
        __defNormalProp$6i(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6i = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6i.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6i)
    for (var prop2 of __getOwnPropSymbols$6i(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6i.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgCheckCircleSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6i(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6i({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1Zm5.207 8.707a1 1 0 0 0-1.414-1.414L10.5 13.586l-2.293-2.293a1 1 0 0 0-1.414 1.414l3 3a1 1 0 0 0 1.414 0l6-6Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$6f = Object.defineProperty;
var __getOwnPropSymbols$6f = Object.getOwnPropertySymbols;
var __hasOwnProp$6f = Object.prototype.hasOwnProperty;
var __propIsEnum$6f = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6f = (obj, key2, value) => key2 in obj ? __defProp$6f(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6f = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6f.call(b2, prop2))
      __defNormalProp$6f(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6f)
    for (var prop2 of __getOwnPropSymbols$6f(b2)) {
      if (__propIsEnum$6f.call(b2, prop2))
        __defNormalProp$6f(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6f = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6f.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6f)
    for (var prop2 of __getOwnPropSymbols$6f(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6f.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgCheckDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6f(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6f({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M20 6 9 17l-5-5"
      }
    )
  );
};
var __defProp$6e = Object.defineProperty;
var __getOwnPropSymbols$6e = Object.getOwnPropertySymbols;
var __hasOwnProp$6e = Object.prototype.hasOwnProperty;
var __propIsEnum$6e = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6e = (obj, key2, value) => key2 in obj ? __defProp$6e(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6e = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6e.call(b2, prop2))
      __defNormalProp$6e(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6e)
    for (var prop2 of __getOwnPropSymbols$6e(b2)) {
      if (__propIsEnum$6e.call(b2, prop2))
        __defNormalProp$6e(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6e = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6e.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6e)
    for (var prop2 of __getOwnPropSymbols$6e(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6e.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgCheckSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6e(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6e({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M20.707 5.293a1 1 0 0 1 0 1.414l-11 11a1 1 0 0 1-1.414 0l-5-5a1 1 0 1 1 1.414-1.414L9 15.586 19.293 5.293a1 1 0 0 1 1.414 0Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$6d = Object.defineProperty;
var __getOwnPropSymbols$6d = Object.getOwnPropertySymbols;
var __hasOwnProp$6d = Object.prototype.hasOwnProperty;
var __propIsEnum$6d = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6d = (obj, key2, value) => key2 in obj ? __defProp$6d(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6d = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6d.call(b2, prop2))
      __defNormalProp$6d(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6d)
    for (var prop2 of __getOwnPropSymbols$6d(b2)) {
      if (__propIsEnum$6d.call(b2, prop2))
        __defNormalProp$6d(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6d = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6d.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6d)
    for (var prop2 of __getOwnPropSymbols$6d(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6d.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgChevronDownDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6d(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6d({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "m6 9 6 6 6-6"
      }
    )
  );
};
var __defProp$6c = Object.defineProperty;
var __getOwnPropSymbols$6c = Object.getOwnPropertySymbols;
var __hasOwnProp$6c = Object.prototype.hasOwnProperty;
var __propIsEnum$6c = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6c = (obj, key2, value) => key2 in obj ? __defProp$6c(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6c = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6c.call(b2, prop2))
      __defNormalProp$6c(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6c)
    for (var prop2 of __getOwnPropSymbols$6c(b2)) {
      if (__propIsEnum$6c.call(b2, prop2))
        __defNormalProp$6c(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6c = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6c.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6c)
    for (var prop2 of __getOwnPropSymbols$6c(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6c.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgChevronDownSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6c(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6c({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M5.293 8.293a1 1 0 0 1 1.414 0L12 13.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$6a = Object.defineProperty;
var __getOwnPropSymbols$6a = Object.getOwnPropertySymbols;
var __hasOwnProp$6a = Object.prototype.hasOwnProperty;
var __propIsEnum$6a = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6a = (obj, key2, value) => key2 in obj ? __defProp$6a(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6a = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6a.call(b2, prop2))
      __defNormalProp$6a(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6a)
    for (var prop2 of __getOwnPropSymbols$6a(b2)) {
      if (__propIsEnum$6a.call(b2, prop2))
        __defNormalProp$6a(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6a = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6a.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6a)
    for (var prop2 of __getOwnPropSymbols$6a(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6a.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgChevronLeftSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$6a(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$6a({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M15.707 5.293a1 1 0 0 1 0 1.414L10.414 12l5.293 5.293a1 1 0 0 1-1.414 1.414l-6-6a1 1 0 0 1 0-1.414l6-6a1 1 0 0 1 1.414 0Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$68 = Object.defineProperty;
var __getOwnPropSymbols$68 = Object.getOwnPropertySymbols;
var __hasOwnProp$68 = Object.prototype.hasOwnProperty;
var __propIsEnum$68 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$68 = (obj, key2, value) => key2 in obj ? __defProp$68(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$68 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$68.call(b2, prop2))
      __defNormalProp$68(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$68)
    for (var prop2 of __getOwnPropSymbols$68(b2)) {
      if (__propIsEnum$68.call(b2, prop2))
        __defNormalProp$68(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$68 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$68.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$68)
    for (var prop2 of __getOwnPropSymbols$68(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$68.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgChevronRightSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$68(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$68({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M8.293 5.293a1 1 0 0 1 1.414 0l6 6a1 1 0 0 1 0 1.414l-6 6a1 1 0 0 1-1.414-1.414L13.586 12 8.293 6.707a1 1 0 0 1 0-1.414Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$65 = Object.defineProperty;
var __getOwnPropSymbols$65 = Object.getOwnPropertySymbols;
var __hasOwnProp$65 = Object.prototype.hasOwnProperty;
var __propIsEnum$65 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$65 = (obj, key2, value) => key2 in obj ? __defProp$65(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$65 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$65.call(b2, prop2))
      __defNormalProp$65(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$65)
    for (var prop2 of __getOwnPropSymbols$65(b2)) {
      if (__propIsEnum$65.call(b2, prop2))
        __defNormalProp$65(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$65 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$65.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$65)
    for (var prop2 of __getOwnPropSymbols$65(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$65.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgChevronUpDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$65(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$65({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "m18 15-6-6-6 6"
      }
    )
  );
};
var __defProp$64 = Object.defineProperty;
var __getOwnPropSymbols$64 = Object.getOwnPropertySymbols;
var __hasOwnProp$64 = Object.prototype.hasOwnProperty;
var __propIsEnum$64 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$64 = (obj, key2, value) => key2 in obj ? __defProp$64(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$64 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$64.call(b2, prop2))
      __defNormalProp$64(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$64)
    for (var prop2 of __getOwnPropSymbols$64(b2)) {
      if (__propIsEnum$64.call(b2, prop2))
        __defNormalProp$64(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$64 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$64.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$64)
    for (var prop2 of __getOwnPropSymbols$64(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$64.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgChevronUpSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$64(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$64({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M11.293 8.293a1 1 0 0 1 1.414 0l6 6a1 1 0 0 1-1.414 1.414L12 10.414l-5.293 5.293a1 1 0 0 1-1.414-1.414l6-6Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$5V = Object.defineProperty;
var __getOwnPropSymbols$5V = Object.getOwnPropertySymbols;
var __hasOwnProp$5V = Object.prototype.hasOwnProperty;
var __propIsEnum$5V = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5V = (obj, key2, value) => key2 in obj ? __defProp$5V(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$5V = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$5V.call(b2, prop2))
      __defNormalProp$5V(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$5V)
    for (var prop2 of __getOwnPropSymbols$5V(b2)) {
      if (__propIsEnum$5V.call(b2, prop2))
        __defNormalProp$5V(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$5V = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$5V.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$5V)
    for (var prop2 of __getOwnPropSymbols$5V(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$5V.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgColorsDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$5V(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$5V({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M12 20.472a6 6 0 1 0 5.58-10.262",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M6.42 10.21a6 6 0 1 0 7.16 3.58M18 8A6 6 0 1 1 6 8a6 6 0 0 1 12 0Z"
      }
    )
  );
};
var __defProp$5N = Object.defineProperty;
var __getOwnPropSymbols$5N = Object.getOwnPropertySymbols;
var __hasOwnProp$5N = Object.prototype.hasOwnProperty;
var __propIsEnum$5N = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5N = (obj, key2, value) => key2 in obj ? __defProp$5N(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$5N = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$5N.call(b2, prop2))
      __defNormalProp$5N(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$5N)
    for (var prop2 of __getOwnPropSymbols$5N(b2)) {
      if (__propIsEnum$5N.call(b2, prop2))
        __defNormalProp$5N(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$5N = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$5N.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$5N)
    for (var prop2 of __getOwnPropSymbols$5N(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$5N.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgCopyDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$5N(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$5N({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M10.5 2.003c-.675.009-1.08.048-1.408.215a2 2 0 0 0-.874.874c-.167.328-.206.733-.215 1.408M19.5 2.003c.675.009 1.08.048 1.408.215a2 2 0 0 1 .874.874c.167.328.206.733.215 1.408m0 9c-.009.675-.048 1.08-.215 1.408a2 2 0 0 1-.874.874c-.328.167-.733.206-1.408.215M22 8v2m-8-8h2",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M2 11.2c0-1.12 0-1.68.218-2.108a2 2 0 0 1 .874-.874C3.52 8 4.08 8 5.2 8h7.6c1.12 0 1.68 0 2.108.218a2 2 0 0 1 .874.874C16 9.52 16 10.08 16 11.2v7.6c0 1.12 0 1.68-.218 2.108a2 2 0 0 1-.874.874C14.48 22 13.92 22 12.8 22H5.2c-1.12 0-1.68 0-2.108-.218a2 2 0 0 1-.874-.874C2 20.48 2 19.92 2 18.8v-7.6Z"
      }
    )
  );
};
var __defProp$5k = Object.defineProperty;
var __getOwnPropSymbols$5k = Object.getOwnPropertySymbols;
var __hasOwnProp$5k = Object.prototype.hasOwnProperty;
var __propIsEnum$5k = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5k = (obj, key2, value) => key2 in obj ? __defProp$5k(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$5k = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$5k.call(b2, prop2))
      __defNormalProp$5k(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$5k)
    for (var prop2 of __getOwnPropSymbols$5k(b2)) {
      if (__propIsEnum$5k.call(b2, prop2))
        __defNormalProp$5k(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$5k = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$5k.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$5k)
    for (var prop2 of __getOwnPropSymbols$5k(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$5k.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgDotsMatrixSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$5k(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$5k({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M10 5a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm7-14a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0ZM3 5a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$5h = Object.defineProperty;
var __getOwnPropSymbols$5h = Object.getOwnPropertySymbols;
var __hasOwnProp$5h = Object.prototype.hasOwnProperty;
var __propIsEnum$5h = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5h = (obj, key2, value) => key2 in obj ? __defProp$5h(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$5h = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$5h.call(b2, prop2))
      __defNormalProp$5h(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$5h)
    for (var prop2 of __getOwnPropSymbols$5h(b2)) {
      if (__propIsEnum$5h.call(b2, prop2))
        __defNormalProp$5h(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$5h = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$5h.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$5h)
    for (var prop2 of __getOwnPropSymbols$5h(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$5h.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgDownloadDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$5h(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$5h({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M21 15v1.2c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V15",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "m17 10-5 5m0 0-5-5m5 5V3"
      }
    )
  );
};
var __defProp$5f = Object.defineProperty;
var __getOwnPropSymbols$5f = Object.getOwnPropertySymbols;
var __hasOwnProp$5f = Object.prototype.hasOwnProperty;
var __propIsEnum$5f = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5f = (obj, key2, value) => key2 in obj ? __defProp$5f(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$5f = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$5f.call(b2, prop2))
      __defNormalProp$5f(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$5f)
    for (var prop2 of __getOwnPropSymbols$5f(b2)) {
      if (__propIsEnum$5f.call(b2, prop2))
        __defNormalProp$5f(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$5f = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$5f.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$5f)
    for (var prop2 of __getOwnPropSymbols$5f(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$5f.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgDragDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$5f(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$5f({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M3 8.5h18m-18 7h18"
      }
    )
  );
};
var __defProp$5b = Object.defineProperty;
var __getOwnPropSymbols$5b = Object.getOwnPropertySymbols;
var __hasOwnProp$5b = Object.prototype.hasOwnProperty;
var __propIsEnum$5b = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5b = (obj, key2, value) => key2 in obj ? __defProp$5b(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$5b = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$5b.call(b2, prop2))
      __defNormalProp$5b(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$5b)
    for (var prop2 of __getOwnPropSymbols$5b(b2)) {
      if (__propIsEnum$5b.call(b2, prop2))
        __defNormalProp$5b(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$5b = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$5b.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$5b)
    for (var prop2 of __getOwnPropSymbols$5b(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$5b.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgEditBoxDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$5b(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$5b({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M11 4H6.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C2 6.28 2 7.12 2 8.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C4.28 22 5.12 22 6.8 22h8.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C20 19.72 20 18.88 20 17.2V13",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M8 14.325c0-.489 0-.733.055-.963a2 2 0 0 1 .24-.579c.123-.201.296-.374.642-.72L18.5 2.5a2.121 2.121 0 0 1 3 3l-9.563 9.563c-.346.346-.519.519-.72.642-.18.11-.375.19-.579.24-.23.055-.474.055-.963.055H8v-1.675Z"
      }
    )
  );
};
var __defProp$59 = Object.defineProperty;
var __getOwnPropSymbols$59 = Object.getOwnPropertySymbols;
var __hasOwnProp$59 = Object.prototype.hasOwnProperty;
var __propIsEnum$59 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$59 = (obj, key2, value) => key2 in obj ? __defProp$59(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$59 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$59.call(b2, prop2))
      __defNormalProp$59(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$59)
    for (var prop2 of __getOwnPropSymbols$59(b2)) {
      if (__propIsEnum$59.call(b2, prop2))
        __defNormalProp$59(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$59 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$59.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$59)
    for (var prop2 of __getOwnPropSymbols$59(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$59.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgEditDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$59(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$59({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M21 21h-8",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "m2.5 21.5 5.55-2.134c.354-.137.532-.205.698-.294.147-.08.288-.17.42-.273.149-.116.283-.25.552-.52L21 7a2.828 2.828 0 1 0-4-4L5.72 14.28c-.269.269-.403.403-.519.552a2.996 2.996 0 0 0-.273.42c-.089.166-.157.344-.294.699L2.5 21.5Zm0 0 2.058-5.351c.147-.383.221-.574.347-.662a.5.5 0 0 1 .38-.08c.15.028.295.173.585.463l2.26 2.26c.29.29.435.435.464.586a.5.5 0 0 1-.08.379c-.089.126-.28.2-.663.347L2.5 21.5Z"
      }
    )
  );
};
var __defProp$4T = Object.defineProperty;
var __getOwnPropSymbols$4T = Object.getOwnPropertySymbols;
var __hasOwnProp$4T = Object.prototype.hasOwnProperty;
var __propIsEnum$4T = Object.prototype.propertyIsEnumerable;
var __defNormalProp$4T = (obj, key2, value) => key2 in obj ? __defProp$4T(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$4T = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$4T.call(b2, prop2))
      __defNormalProp$4T(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$4T)
    for (var prop2 of __getOwnPropSymbols$4T(b2)) {
      if (__propIsEnum$4T.call(b2, prop2))
        __defNormalProp$4T(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$4T = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$4T.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$4T)
    for (var prop2 of __getOwnPropSymbols$4T(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$4T.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgFileBlankDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$4T(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$4T({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M14 2.27V6.4c0 .56 0 .84.109 1.054a1 1 0 0 0 .437.437C14.76 8 15.04 8 15.6 8h4.13",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M4 6.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C6.28 2 7.12 2 8.8 2h3.212c.733 0 1.1 0 1.446.083.306.073.598.195.867.36.303.185.562.444 1.08.963l3.19 3.188c.518.519.777.778.963 1.081a3 3 0 0 1 .36.867c.082.346.082.712.082 1.446V17.2c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C17.72 22 16.88 22 15.2 22H8.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C4 19.72 4 18.88 4 17.2V6.8Z"
      }
    )
  );
};
var __defProp$3_ = Object.defineProperty;
var __getOwnPropSymbols$3_ = Object.getOwnPropertySymbols;
var __hasOwnProp$3_ = Object.prototype.hasOwnProperty;
var __propIsEnum$3_ = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3_ = (obj, key2, value) => key2 in obj ? __defProp$3_(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$3_ = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$3_.call(b2, prop2))
      __defNormalProp$3_(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$3_)
    for (var prop2 of __getOwnPropSymbols$3_(b2)) {
      if (__propIsEnum$3_.call(b2, prop2))
        __defNormalProp$3_(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$3_ = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$3_.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$3_)
    for (var prop2 of __getOwnPropSymbols$3_(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$3_.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgHelpCircleSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$3_(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$3_({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11S18.075 1 12 1Zm-1.093 7.271a2 2 0 0 1 3.013 1.727V10c0 .47-.365.958-1.055 1.418a6.05 6.05 0 0 1-1.262.634 1 1 0 0 0 .633 1.897l.169-.061a8.05 8.05 0 0 0 1.57-.806c.81-.54 1.944-1.55 1.945-3.081a4 4 0 0 0-7.773-1.333 1 1 0 0 0 1.886.664 2 2 0 0 1 .874-1.06ZM12 16a1 1 0 1 0 0 2h.01a1 1 0 0 0 0-2H12Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$3W = Object.defineProperty;
var __getOwnPropSymbols$3W = Object.getOwnPropertySymbols;
var __hasOwnProp$3W = Object.prototype.hasOwnProperty;
var __propIsEnum$3W = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3W = (obj, key2, value) => key2 in obj ? __defProp$3W(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$3W = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$3W.call(b2, prop2))
      __defNormalProp$3W(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$3W)
    for (var prop2 of __getOwnPropSymbols$3W(b2)) {
      if (__propIsEnum$3W.call(b2, prop2))
        __defNormalProp$3W(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$3W = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$3W.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$3W)
    for (var prop2 of __getOwnPropSymbols$3W(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$3W.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgHourglassSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$3W(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$3W({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M6.568 1c-.252 0-.498 0-.706.017a2.022 2.022 0 0 0-.77.201 2 2 0 0 0-.874.874 2.021 2.021 0 0 0-.2.77C4 3.07 4 3.316 4 3.568v2.19c0 .407 0 .765.083 1.114a3 3 0 0 0 .36.867c.186.306.44.559.728.846L8.586 12 5.17 15.415c-.288.287-.542.54-.729.846a3.001 3.001 0 0 0-.359.867c-.084.349-.083.707-.083 1.114v2.19c0 .252 0 .498.017.706.019.229.063.499.201.77a2 2 0 0 0 .874.874c.272.138.541.182.77.201.208.017.454.017.706.017h10.864c.252 0 .498 0 .706-.017a2.03 2.03 0 0 0 .77-.201 2 2 0 0 0 .874-.874c.138-.271.183-.541.201-.77.017-.208.017-.454.017-.706v-2.19c0-.407 0-.765-.083-1.114a3.001 3.001 0 0 0-.359-.867c-.187-.306-.441-.559-.73-.846L15.415 12l3.415-3.415c.288-.287.542-.54.729-.846a3 3 0 0 0 .36-.867C20 6.523 20 6.165 20 5.758v-2.19c0-.252 0-.498-.017-.706a2.022 2.022 0 0 0-.2-.77 2 2 0 0 0-.875-.874 2.022 2.022 0 0 0-.77-.201C17.93 1 17.684 1 17.432 1H6.568Zm10.788 6.23-3.302 3.301c-.172.173-.259.26-.36.322a.998.998 0 0 1-.289.12c-.115.027-.237.027-.482.027h-1.846c-.245 0-.367 0-.482-.028a.998.998 0 0 1-.289-.12c-.1-.061-.187-.148-.36-.32L6.644 7.23c-.38-.38-.45-.458-.497-.536a1 1 0 0 1-.12-.289C6.008 6.317 6 6.211 6 5.675V3.6c0-.297 0-.459.01-.575l.002-.014h.013C6.14 3 6.304 3 6.6 3h10.8c.297 0 .459 0 .576.01l.013.001v.014c.01.116.011.278.011.575v2.075c0 .536-.006.642-.027.73a.998.998 0 0 1-.12.29c-.048.077-.118.156-.497.535ZM9 17.5a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$3N = Object.defineProperty;
var __getOwnPropSymbols$3N = Object.getOwnPropertySymbols;
var __hasOwnProp$3N = Object.prototype.hasOwnProperty;
var __propIsEnum$3N = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3N = (obj, key2, value) => key2 in obj ? __defProp$3N(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$3N = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$3N.call(b2, prop2))
      __defNormalProp$3N(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$3N)
    for (var prop2 of __getOwnPropSymbols$3N(b2)) {
      if (__propIsEnum$3N.call(b2, prop2))
        __defNormalProp$3N(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$3N = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$3N.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$3N)
    for (var prop2 of __getOwnPropSymbols$3N(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$3N.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgImage03Duo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$3N(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$3N({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M8 11a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "m4.272 20.728 6.597-6.597c.396-.396.594-.594.822-.668a1 1 0 0 1 .618 0c.228.074.426.272.822.668L14 15m0 0 5.684 5.684M14 15l2.869-2.869c.396-.396.594-.594.822-.668a1 1 0 0 1 .618 0c.228.074.426.272.822.668L22 15M6.8 21h10.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C22 18.72 22 17.88 22 16.2V7.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C19.72 3 18.88 3 17.2 3H6.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C2 5.28 2 6.12 2 7.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C4.28 21 5.12 21 6.8 21Z"
      }
    )
  );
};
var __defProp$3M = Object.defineProperty;
var __getOwnPropSymbols$3M = Object.getOwnPropertySymbols;
var __hasOwnProp$3M = Object.prototype.hasOwnProperty;
var __propIsEnum$3M = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3M = (obj, key2, value) => key2 in obj ? __defProp$3M(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$3M = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$3M.call(b2, prop2))
      __defNormalProp$3M(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$3M)
    for (var prop2 of __getOwnPropSymbols$3M(b2)) {
      if (__propIsEnum$3M.call(b2, prop2))
        __defNormalProp$3M(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$3M = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$3M.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$3M)
    for (var prop2 of __getOwnPropSymbols$3M(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$3M.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgImage03Solid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$3M(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$3M({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M8 6a3 3 0 1 0 0 6 3 3 0 0 0 0-6Z",
        clipRule: "evenodd"
      }
    ),
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M17.241 2H6.76c-.805 0-1.47 0-2.01.044-.563.046-1.08.145-1.565.392a4 4 0 0 0-1.748 1.748c-.247.485-.346 1.002-.392 1.564C1 6.29 1 6.954 1 7.758v8.483c0 .805 0 1.47.044 2.01.046.563.145 1.08.392 1.565a4 4 0 0 0 1.748 1.748c.485.247 1.002.346 1.564.392.119.01.243.017.374.023l.022.002c.214.019.48.019.75.019h12.212c.27 0 .536 0 .75-.019l.022-.002c.13-.006.255-.014.374-.023.562-.046 1.079-.145 1.564-.392a4 4 0 0 0 1.748-1.748c.247-.485.346-1.002.392-1.564.044-.541.044-1.206.044-2.01V7.758c0-.805 0-1.47-.044-2.01-.046-.563-.145-1.08-.392-1.565a4 4 0 0 0-1.748-1.748c-.485-.247-1.002-.346-1.564-.392C18.71 2 18.046 2 17.242 2ZM21 12.586V7.8c0-.857 0-1.439-.038-1.889-.035-.438-.1-.663-.18-.819a2 2 0 0 0-.874-.874c-.156-.08-.38-.145-.819-.18C18.639 4 18.057 4 17.2 4H6.8c-.857 0-1.439 0-1.889.038-.438.035-.663.1-.819.18a2 2 0 0 0-.874.874c-.08.156-.145.38-.18.819C3 6.361 3 6.943 3 7.8v8.4c0 .857 0 1.439.038 1.889.035.438.1.663.18.819a2 2 0 0 0 .739.798c.058-.088.116-.158.158-.209.138-.165.326-.352.517-.544l5.552-5.551c.179-.179.352-.353.512-.488.174-.148.396-.308.686-.402a2 2 0 0 1 1.236 0c.29.094.512.254.687.402.159.135.332.31.511.488l.184.184 2.184-2.184a9.18 9.18 0 0 1 .511-.488c.175-.148.397-.308.687-.402a2 2 0 0 1 1.236 0c.29.094.512.254.687.402.159.135.332.31.51.488L21 12.586Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$2j = Object.defineProperty;
var __getOwnPropSymbols$2j = Object.getOwnPropertySymbols;
var __hasOwnProp$2j = Object.prototype.hasOwnProperty;
var __propIsEnum$2j = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2j = (obj, key2, value) => key2 in obj ? __defProp$2j(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2j = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2j.call(b2, prop2))
      __defNormalProp$2j(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2j)
    for (var prop2 of __getOwnPropSymbols$2j(b2)) {
      if (__propIsEnum$2j.call(b2, prop2))
        __defNormalProp$2j(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$2j = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2j.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2j)
    for (var prop2 of __getOwnPropSymbols$2j(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2j.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgPlusSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$2j(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$2j({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        d: "M13 5a1 1 0 1 0-2 0v6H5a1 1 0 1 0 0 2h6v6a1 1 0 1 0 2 0v-6h6a1 1 0 1 0 0-2h-6V5Z"
      }
    )
  );
};
var __defProp$1H = Object.defineProperty;
var __getOwnPropSymbols$1H = Object.getOwnPropertySymbols;
var __hasOwnProp$1H = Object.prototype.hasOwnProperty;
var __propIsEnum$1H = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1H = (obj, key2, value) => key2 in obj ? __defProp$1H(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1H = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1H.call(b2, prop2))
      __defNormalProp$1H(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1H)
    for (var prop2 of __getOwnPropSymbols$1H(b2)) {
      if (__propIsEnum$1H.call(b2, prop2))
        __defNormalProp$1H(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1H = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1H.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1H)
    for (var prop2 of __getOwnPropSymbols$1H(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1H.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgSearchDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$1H(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$1H({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M16 11a5 5 0 0 0-5-5",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "m21 21-4.35-4.35M19 11a8 8 0 1 1-16 0 8 8 0 0 1 16 0Z"
      }
    )
  );
};
var __defProp$16 = Object.defineProperty;
var __getOwnPropSymbols$16 = Object.getOwnPropertySymbols;
var __hasOwnProp$16 = Object.prototype.hasOwnProperty;
var __propIsEnum$16 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$16 = (obj, key2, value) => key2 in obj ? __defProp$16(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$16 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$16.call(b2, prop2))
      __defNormalProp$16(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$16)
    for (var prop2 of __getOwnPropSymbols$16(b2)) {
      if (__propIsEnum$16.call(b2, prop2))
        __defNormalProp$16(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$16 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$16.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$16)
    for (var prop2 of __getOwnPropSymbols$16(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$16.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgStatusWorkingSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$16(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$16({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        d: "m19.54 5.675-.108.406C16.553 2.457 11.379 1.389 7.25 3.773a9.488 9.488 0 0 0-4.698 7.229 1 1 0 0 0 1.989.211A7.502 7.502 0 0 1 17.645 7.06l-.344-.092a1 1 0 1 0-.517 1.932l2.732.732a1 1 0 0 0 1.225-.707l.732-2.732a1 1 0 1 0-1.932-.518Zm1.02 6.224a1 1 0 0 1 .888 1.1 9.488 9.488 0 0 1-4.698 7.228c-4.129 2.384-9.303 1.316-12.182-2.308l-.109.406a1 1 0 1 1-1.932-.518l.733-2.732a1 1 0 0 1 1.224-.707l2.732.732a1 1 0 1 1-.517 1.932l-.345-.092a7.503 7.503 0 0 0 13.105-4.153 1 1 0 0 1 1.1-.889Z"
      }
    ),
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        d: "M13 7.5a1 1 0 0 0-2 0V12a1 1 0 0 0 .486.857l2.5 1.5a1 1 0 1 0 1.028-1.714L13 11.433V7.5Z"
      }
    )
  );
};
var __defProp$F = Object.defineProperty;
var __getOwnPropSymbols$F = Object.getOwnPropertySymbols;
var __hasOwnProp$F = Object.prototype.hasOwnProperty;
var __propIsEnum$F = Object.prototype.propertyIsEnumerable;
var __defNormalProp$F = (obj, key2, value) => key2 in obj ? __defProp$F(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$F = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$F.call(b2, prop2))
      __defNormalProp$F(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$F)
    for (var prop2 of __getOwnPropSymbols$F(b2)) {
      if (__propIsEnum$F.call(b2, prop2))
        __defNormalProp$F(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$F = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$F.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$F)
    for (var prop2 of __getOwnPropSymbols$F(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$F.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgTrashDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$F(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$F({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M16 6v-.8c0-1.12 0-1.68-.218-2.108a2 2 0 0 0-.874-.874C14.48 2 13.92 2 12.8 2h-1.6c-1.12 0-1.68 0-2.108.218a2 2 0 0 0-.874.874C8 3.52 8 4.08 8 5.2V6",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M3 6h18m-2 0v11.2c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C16.72 22 15.88 22 14.2 22H9.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C5 19.72 5 18.88 5 17.2V6"
      }
    )
  );
};
var __defProp$E = Object.defineProperty;
var __getOwnPropSymbols$E = Object.getOwnPropertySymbols;
var __hasOwnProp$E = Object.prototype.hasOwnProperty;
var __propIsEnum$E = Object.prototype.propertyIsEnumerable;
var __defNormalProp$E = (obj, key2, value) => key2 in obj ? __defProp$E(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$E = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$E.call(b2, prop2))
      __defNormalProp$E(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$E)
    for (var prop2 of __getOwnPropSymbols$E(b2)) {
      if (__propIsEnum$E.call(b2, prop2))
        __defNormalProp$E(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$E = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$E.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$E)
    for (var prop2 of __getOwnPropSymbols$E(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$E.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgTrashFullDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$E(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$E({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M16 6v-.8c0-1.12 0-1.68-.218-2.108a2 2 0 0 0-.874-.874C14.48 2 13.92 2 12.8 2h-1.6c-1.12 0-1.68 0-2.108.218a2 2 0 0 0-.874.874C8 3.52 8 4.08 8 5.2V6m2 5.5v5m4-5v5",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M3 6h18m-2 0v11.2c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C16.72 22 15.88 22 14.2 22H9.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C5 19.72 5 18.88 5 17.2V6"
      }
    )
  );
};
var __defProp$y = Object.defineProperty;
var __getOwnPropSymbols$y = Object.getOwnPropertySymbols;
var __hasOwnProp$y = Object.prototype.hasOwnProperty;
var __propIsEnum$y = Object.prototype.propertyIsEnumerable;
var __defNormalProp$y = (obj, key2, value) => key2 in obj ? __defProp$y(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$y = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$y.call(b2, prop2))
      __defNormalProp$y(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$y)
    for (var prop2 of __getOwnPropSymbols$y(b2)) {
      if (__propIsEnum$y.call(b2, prop2))
        __defNormalProp$y(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$y = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$y.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$y)
    for (var prop2 of __getOwnPropSymbols$y(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$y.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgUploadCloudSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$y(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$y({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M9 21a9 9 0 1 1 6.742-14.962A7.5 7.5 0 1 1 16.5 21H9Zm-1.707-7.293a1 1 0 0 0 1.414 0L11 11.414V17a1 1 0 1 0 2 0v-5.586l2.293 2.293a1 1 0 0 0 1.414-1.414l-4-4a1 1 0 0 0-1.414 0l-4 4a1 1 0 0 0 0 1.414Z",
        clipRule: "evenodd"
      }
    )
  );
};
var __defProp$x = Object.defineProperty;
var __getOwnPropSymbols$x = Object.getOwnPropertySymbols;
var __hasOwnProp$x = Object.prototype.hasOwnProperty;
var __propIsEnum$x = Object.prototype.propertyIsEnumerable;
var __defNormalProp$x = (obj, key2, value) => key2 in obj ? __defProp$x(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$x = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$x.call(b2, prop2))
      __defNormalProp$x(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$x)
    for (var prop2 of __getOwnPropSymbols$x(b2)) {
      if (__propIsEnum$x.call(b2, prop2))
        __defNormalProp$x(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$x = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$x.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$x)
    for (var prop2 of __getOwnPropSymbols$x(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$x.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgUserSquareDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$x(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$x({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M4 21.82c0-.81.005-1.24.077-1.6a4 4 0 0 1 3.143-3.143C7.606 17 8.07 17 9 17h6c.93 0 1.394 0 1.78.077a4 4 0 0 1 3.143 3.143c.072.36.077.79.077 1.6",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M12 13.5a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z"
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M2 6.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C4.28 2 5.12 2 6.8 2h10.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C22 4.28 22 5.12 22 6.8v10.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C19.72 22 18.88 22 17.2 22H6.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C2 19.72 2 18.88 2 17.2V6.8Z"
      }
    )
  );
};
var __defProp$4 = Object.defineProperty;
var __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;
var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
var __propIsEnum$4 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$4 = (obj, key2, value) => key2 in obj ? __defProp$4(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$4 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$4.call(b2, prop2))
      __defNormalProp$4(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$4)
    for (var prop2 of __getOwnPropSymbols$4(b2)) {
      if (__propIsEnum$4.call(b2, prop2))
        __defNormalProp$4(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$4 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$4.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$4)
    for (var prop2 of __getOwnPropSymbols$4(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$4.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgXCloseSolid = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$4(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$4({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        fill: "currentColor",
        d: "M18.707 6.707a1 1 0 0 0-1.414-1.414L12 10.586 6.707 5.293a1 1 0 0 0-1.414 1.414L10.586 12l-5.293 5.293a1 1 0 1 0 1.414 1.414L12 13.414l5.293 5.293a1 1 0 0 0 1.414-1.414L13.414 12l5.293-5.293Z"
      }
    )
  );
};
var __defProp$3 = Object.defineProperty;
var __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;
var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
var __propIsEnum$3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3 = (obj, key2, value) => key2 in obj ? __defProp$3(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$3 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$3.call(b2, prop2))
      __defNormalProp$3(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$3)
    for (var prop2 of __getOwnPropSymbols$3(b2)) {
      if (__propIsEnum$3.call(b2, prop2))
        __defNormalProp$3(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$3 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$3.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$3)
    for (var prop2 of __getOwnPropSymbols$3(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$3.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SvgZoomInDuo = (_a9) => {
  var _b5 = _a9, {
    title,
    titleId
  } = _b5, props = __objRest$3(_b5, [
    "title",
    "titleId"
  ]);
  return React51.createElement(
    "svg",
    __spreadValues$3({
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      fill: "none",
      "aria-labelledby": titleId
    }, props),
    title ? React51.createElement("title", { id: titleId }, title) : null,
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "m21 21-4.35-4.35",
        opacity: 0.4
      }
    ),
    React51.createElement(
      "path",
      {
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M11 8v6m-3-3h6m5 0a8 8 0 1 1-16 0 8 8 0 0 1 16 0Z"
      }
    )
  );
};

// node_modules/@hookform/resolvers/dist/resolvers.mjs
var t2 = function(e, t3, i2) {
  if (e && "reportValidity" in e) {
    var n3 = get3(i2, t3);
    e.setCustomValidity(n3 && n3.message || ""), e.reportValidity();
  }
};
var i = function(r3, e) {
  var i2 = function(i3) {
    var n4 = e.fields[i3];
    n4 && n4.ref && "reportValidity" in n4.ref ? t2(n4.ref, i3, r3) : n4.refs && n4.refs.forEach(function(e2) {
      return t2(e2, i3, r3);
    });
  };
  for (var n3 in e.fields)
    i2(n3);
};
var n = function(t3, n3) {
  n3.shouldUseNativeValidation && i(t3, n3);
  var f = {};
  for (var a2 in t3) {
    var s = get3(n3.fields, a2), u = Object.assign(t3[a2] || {}, { ref: s && s.ref });
    if (o(n3.names || Object.keys(t3), a2)) {
      var c2 = Object.assign({}, get3(f, a2));
      set(c2, "root", u), set(f, a2, c2);
    } else
      set(f, a2, u);
  }
  return f;
};
var o = function(r3, e) {
  return r3.some(function(r4) {
    return r4.startsWith(e + ".");
  });
};

// node_modules/@hookform/resolvers/joi/dist/joi.mjs
var n2 = function(n3, o2, a2) {
  return void 0 === o2 && (o2 = { abortEarly: false }), void 0 === a2 && (a2 = {}), function(i2, s, u) {
    try {
      var c2 = function() {
        return l.error ? { values: {}, errors: n((n4 = l.error, o3 = !u.shouldUseNativeValidation && "all" === u.criteriaMode, n4.details.length ? n4.details.reduce(function(r3, t3) {
          var n5 = t3.path.join(".");
          if (r3[n5] || (r3[n5] = { message: t3.message, type: t3.type }), o3) {
            var a3 = r3[n5].types, i3 = a3 && a3[t3.type];
            r3[n5] = appendErrors(n5, o3, r3, t3.type, i3 ? [].concat(i3, t3.message) : t3.message);
          }
          return r3;
        }, {}) : {}), u) } : (u.shouldUseNativeValidation && i({}, u), { errors: {}, values: l.value });
        var n4, o3;
      }, v = Object.assign({}, o2, { context: s }), l = {}, f = function() {
        if ("sync" === a2.mode)
          l = n3.validate(i2, v);
        else {
          var e = function(e2, r3) {
            try {
              var t3 = e2();
            } catch (e3) {
              return r3(e3);
            }
            return t3 && t3.then ? t3.then(void 0, r3) : t3;
          }(function() {
            return Promise.resolve(n3.validateAsync(i2, v)).then(function(e2) {
              l.value = e2;
            });
          }, function(e2) {
            l.error = e2;
          });
          if (e && e.then)
            return e.then(function() {
            });
        }
      }();
      return Promise.resolve(f && f.then ? f.then(c2) : c2());
    } catch (e) {
      return Promise.reject(e);
    }
  };
};

// node_modules/@react-aria/checkbox/dist/import.mjs
var import_react230 = __toESM(require_react(), 1);

// node_modules/@react-aria/form/dist/import.mjs
var import_react228 = __toESM(require_react(), 1);
function $e93e671b31057976$export$b8473d3665f3a75a(props, state2, ref) {
  let { validationBehavior, focus: focus2 } = props;
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (validationBehavior === "native" && (ref === null || ref === void 0 ? void 0 : ref.current)) {
      let errorMessage = state2.realtimeValidation.isInvalid ? state2.realtimeValidation.validationErrors.join(" ") || "Invalid value." : "";
      ref.current.setCustomValidity(errorMessage);
      if (!ref.current.hasAttribute("title"))
        ref.current.title = "";
      if (!state2.realtimeValidation.isInvalid)
        state2.updateValidation($e93e671b31057976$var$getNativeValidity(ref.current));
    }
  });
  let onReset = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(() => {
    state2.resetValidation();
  });
  let onInvalid = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    var _ref_current;
    if (!state2.displayValidation.isInvalid)
      state2.commitValidation();
    let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
    if (!e.defaultPrevented && ref && form && $e93e671b31057976$var$getFirstInvalidInput(form) === ref.current) {
      var _ref_current1;
      if (focus2)
        focus2();
      else
        (_ref_current1 = ref.current) === null || _ref_current1 === void 0 ? void 0 : _ref_current1.focus();
      (0, $507fabe10e71c6fb$export$8397ddfc504fdb9a)("keyboard");
    }
    e.preventDefault();
  });
  let onChange2 = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(() => {
    state2.commitValidation();
  });
  (0, import_react228.useEffect)(() => {
    let input = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!input)
      return;
    let form = input.form;
    input.addEventListener("invalid", onInvalid);
    input.addEventListener("change", onChange2);
    form === null || form === void 0 ? void 0 : form.addEventListener("reset", onReset);
    return () => {
      input.removeEventListener("invalid", onInvalid);
      input.removeEventListener("change", onChange2);
      form === null || form === void 0 ? void 0 : form.removeEventListener("reset", onReset);
    };
  }, [
    ref,
    onInvalid,
    onChange2,
    onReset,
    validationBehavior
  ]);
}
function $e93e671b31057976$var$getValidity(input) {
  let validity = input.validity;
  return {
    badInput: validity.badInput,
    customError: validity.customError,
    patternMismatch: validity.patternMismatch,
    rangeOverflow: validity.rangeOverflow,
    rangeUnderflow: validity.rangeUnderflow,
    stepMismatch: validity.stepMismatch,
    tooLong: validity.tooLong,
    tooShort: validity.tooShort,
    typeMismatch: validity.typeMismatch,
    valueMissing: validity.valueMissing,
    valid: validity.valid
  };
}
function $e93e671b31057976$var$getNativeValidity(input) {
  return {
    isInvalid: !input.validity.valid,
    validationDetails: $e93e671b31057976$var$getValidity(input),
    validationErrors: input.validationMessage ? [
      input.validationMessage
    ] : []
  };
}
function $e93e671b31057976$var$getFirstInvalidInput(form) {
  for (let i2 = 0; i2 < form.elements.length; i2++) {
    let element = form.elements[i2];
    if (!element.validity.valid)
      return element;
  }
  return null;
}

// node_modules/@react-stately/form/dist/import.mjs
var import_react229 = __toESM(require_react(), 1);
var $e5be200c675c3b3a$export$aca958c65c314e6c = {
  badInput: false,
  customError: false,
  patternMismatch: false,
  rangeOverflow: false,
  rangeUnderflow: false,
  stepMismatch: false,
  tooLong: false,
  tooShort: false,
  typeMismatch: false,
  valueMissing: false,
  valid: true
};
var $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE = {
  ...$e5be200c675c3b3a$export$aca958c65c314e6c,
  customError: true,
  valid: false
};
var $e5be200c675c3b3a$export$dad6ae84456c676a = {
  isInvalid: false,
  validationDetails: $e5be200c675c3b3a$export$aca958c65c314e6c,
  validationErrors: []
};
var $e5be200c675c3b3a$export$571b5131b7e65c11 = (0, import_react229.createContext)({});
var $e5be200c675c3b3a$export$a763b9476acd3eb = "__formValidationState" + Date.now();
function $e5be200c675c3b3a$export$fc1a364ae1f3ff10(props) {
  if (props[$e5be200c675c3b3a$export$a763b9476acd3eb]) {
    let { realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation } = props[$e5be200c675c3b3a$export$a763b9476acd3eb];
    return {
      realtimeValidation,
      displayValidation,
      updateValidation,
      resetValidation,
      commitValidation
    };
  }
  return $e5be200c675c3b3a$var$useFormValidationStateImpl(props);
}
function $e5be200c675c3b3a$var$useFormValidationStateImpl(props) {
  let { isInvalid, validationState, name, value, builtinValidation, validate: validate2, validationBehavior = "aria" } = props;
  if (validationState)
    isInvalid || (isInvalid = validationState === "invalid");
  let controlledError = isInvalid ? {
    isInvalid: true,
    validationErrors: [],
    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
  } : null;
  let clientError = (0, import_react229.useMemo)(() => $e5be200c675c3b3a$var$getValidationResult($e5be200c675c3b3a$var$runValidate(validate2, value)), [
    validate2,
    value
  ]);
  if (builtinValidation === null || builtinValidation === void 0 ? void 0 : builtinValidation.validationDetails.valid)
    builtinValidation = null;
  let serverErrors = (0, import_react229.useContext)($e5be200c675c3b3a$export$571b5131b7e65c11);
  let serverErrorMessages = (0, import_react229.useMemo)(() => {
    if (name)
      return Array.isArray(name) ? name.flatMap((name2) => $e5be200c675c3b3a$var$asArray(serverErrors[name2])) : $e5be200c675c3b3a$var$asArray(serverErrors[name]);
    return [];
  }, [
    serverErrors,
    name
  ]);
  let [lastServerErrors, setLastServerErrors] = (0, import_react229.useState)(serverErrors);
  let [isServerErrorCleared, setServerErrorCleared] = (0, import_react229.useState)(false);
  if (serverErrors !== lastServerErrors) {
    setLastServerErrors(serverErrors);
    setServerErrorCleared(false);
  }
  let serverError = (0, import_react229.useMemo)(() => $e5be200c675c3b3a$var$getValidationResult(isServerErrorCleared ? [] : serverErrorMessages), [
    isServerErrorCleared,
    serverErrorMessages
  ]);
  let nextValidation = (0, import_react229.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let [currentValidity, setCurrentValidity] = (0, import_react229.useState)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let lastError = (0, import_react229.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let commitValidation = () => {
    if (!commitQueued)
      return;
    setCommitQueued(false);
    let error2 = clientError || builtinValidation || nextValidation.current;
    if (!$e5be200c675c3b3a$var$isEqualValidation(error2, lastError.current)) {
      lastError.current = error2;
      setCurrentValidity(error2);
    }
  };
  let [commitQueued, setCommitQueued] = (0, import_react229.useState)(false);
  (0, import_react229.useEffect)(commitValidation);
  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || $e5be200c675c3b3a$export$dad6ae84456c676a;
  let displayValidation = validationBehavior === "native" ? controlledError || serverError || currentValidity : controlledError || serverError || clientError || builtinValidation || currentValidity;
  return {
    realtimeValidation,
    displayValidation,
    updateValidation(value2) {
      if (validationBehavior === "aria" && !$e5be200c675c3b3a$var$isEqualValidation(currentValidity, value2))
        setCurrentValidity(value2);
      else
        nextValidation.current = value2;
    },
    resetValidation() {
      let error2 = $e5be200c675c3b3a$export$dad6ae84456c676a;
      if (!$e5be200c675c3b3a$var$isEqualValidation(error2, lastError.current)) {
        lastError.current = error2;
        setCurrentValidity(error2);
      }
      if (validationBehavior === "native")
        setCommitQueued(false);
      setServerErrorCleared(true);
    },
    commitValidation() {
      if (validationBehavior === "native")
        setCommitQueued(true);
      setServerErrorCleared(true);
    }
  };
}
function $e5be200c675c3b3a$var$asArray(v) {
  if (!v)
    return [];
  return Array.isArray(v) ? v : [
    v
  ];
}
function $e5be200c675c3b3a$var$runValidate(validate2, value) {
  if (typeof validate2 === "function") {
    let e = validate2(value);
    if (e && typeof e !== "boolean")
      return $e5be200c675c3b3a$var$asArray(e);
  }
  return [];
}
function $e5be200c675c3b3a$var$getValidationResult(errors) {
  return errors.length ? {
    isInvalid: true,
    validationErrors: errors,
    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
  } : null;
}
function $e5be200c675c3b3a$var$isEqualValidation(a2, b2) {
  if (a2 === b2)
    return true;
  return a2 && b2 && a2.isInvalid === b2.isInvalid && a2.validationErrors.length === b2.validationErrors.length && a2.validationErrors.every((a3, i2) => a3 === b2.validationErrors[i2]) && Object.entries(a2.validationDetails).every(([k, v]) => b2.validationDetails[k] === v);
}
function $e5be200c675c3b3a$export$75ee7c75d68f5b0e(...results) {
  let errors = /* @__PURE__ */ new Set();
  let isInvalid = false;
  let validationDetails = {
    ...$e5be200c675c3b3a$export$aca958c65c314e6c
  };
  for (let v of results) {
    var _validationDetails, _key;
    for (let e of v.validationErrors)
      errors.add(e);
    isInvalid || (isInvalid = v.isInvalid);
    for (let key2 in validationDetails)
      (_validationDetails = validationDetails)[_key = key2] || (_validationDetails[_key] = v.validationDetails[key2]);
  }
  validationDetails.valid = !isInvalid;
  return {
    isInvalid,
    validationErrors: [
      ...errors
    ],
    validationDetails
  };
}

// node_modules/@react-aria/toggle/dist/import.mjs
function $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state2, ref) {
  let { isDisabled: isDisabled3 = false, isReadOnly = false, value, name, children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, validationState = "valid", isInvalid } = props;
  let onChange2 = (e) => {
    e.stopPropagation();
    state2.setSelected(e.target.checked);
  };
  let hasChildren = children != null;
  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
  if (!hasChildren && !hasAriaLabel)
    console.warn("If you do not provide children, you must specify an aria-label for accessibility");
  let { pressProps, isPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled3
  });
  let { pressProps: labelProps, isPressed: isLabelPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled3 || isReadOnly,
    onPress() {
      state2.toggle();
    }
  });
  let { focusableProps } = (0, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
  let interactions = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps);
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  (0, $99facab73266f662$export$5add1d006293d136)(ref, state2.isSelected, state2.setSelected);
  return {
    labelProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
      onClick: (e) => e.preventDefault()
    }),
    inputProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      "aria-invalid": isInvalid || validationState === "invalid" || void 0,
      "aria-errormessage": props["aria-errormessage"],
      "aria-controls": props["aria-controls"],
      "aria-readonly": isReadOnly || void 0,
      onChange: onChange2,
      disabled: isDisabled3,
      ...value == null ? {} : {
        value
      },
      name,
      type: "checkbox",
      ...interactions
    }),
    isSelected: state2.isSelected,
    isPressed: isPressed || isLabelPressed,
    isDisabled: isDisabled3,
    isReadOnly,
    isInvalid: isInvalid || validationState === "invalid"
  };
}

// node_modules/@react-aria/label/dist/import.mjs
function $d191a55c9702f145$export$8467354a121f1b9f(props) {
  let { id: id3, label, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, labelElementType = "label" } = props;
  id3 = (0, $bdb11010cef70236$export$f680877a34711e37)(id3);
  let labelId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let labelProps = {};
  if (label) {
    ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === "label" ? id3 : void 0
    };
  } else if (!ariaLabelledby && !ariaLabel)
    console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility");
  let fieldProps = (0, $313b98861ee5dd6c$export$d6875122194c7b44)({
    id: id3,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby
  });
  return {
    labelProps,
    fieldProps
  };
}
function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
  let { description, errorMessage, isInvalid, validationState } = props;
  let { labelProps, fieldProps } = (0, $d191a55c9702f145$export$8467354a121f1b9f)(props);
  let descriptionId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)([
    Boolean(description),
    Boolean(errorMessage),
    isInvalid,
    validationState
  ]);
  let errorMessageId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)([
    Boolean(description),
    Boolean(errorMessage),
    isInvalid,
    validationState
  ]);
  fieldProps = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, {
    "aria-describedby": [
      descriptionId,
      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
      errorMessageId,
      props["aria-describedby"]
    ].filter(Boolean).join(" ") || void 0
  });
  return {
    labelProps,
    fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}

// node_modules/@react-stately/toggle/dist/import.mjs
function $3017fa7ffdddec74$export$8042c6c013fd5226(props = {}) {
  let { isReadOnly } = props;
  let [isSelected, setSelected] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isSelected, props.defaultSelected || false, props.onChange);
  function updateSelected(value) {
    if (!isReadOnly)
      setSelected(value);
  }
  function toggleState() {
    if (!isReadOnly)
      setSelected(!isSelected);
  }
  return {
    isSelected,
    setSelected: updateSelected,
    toggle: toggleState
  };
}

// node_modules/@react-aria/checkbox/dist/import.mjs
function $406796ff087fe49b$export$e375f10ce42261c5(props, state2, inputRef) {
  let validationState = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: state2.isSelected
  });
  let { isInvalid, validationErrors, validationDetails } = validationState.displayValidation;
  let { labelProps, inputProps, isSelected, isPressed, isDisabled: isDisabled3, isReadOnly } = (0, $d2c8e2b0480f3f34$export$cbe85ee05b554577)({
    ...props,
    isInvalid
  }, state2, inputRef);
  (0, $e93e671b31057976$export$b8473d3665f3a75a)(props, validationState, inputRef);
  let { isIndeterminate, isRequired, validationBehavior = "aria" } = props;
  (0, import_react230.useEffect)(() => {
    if (inputRef.current)
      inputRef.current.indeterminate = !!isIndeterminate;
  });
  return {
    labelProps,
    inputProps: {
      ...inputProps,
      checked: isSelected,
      "aria-required": isRequired && validationBehavior === "aria" || void 0,
      required: isRequired && validationBehavior === "native"
    },
    isSelected,
    isPressed,
    isDisabled: isDisabled3,
    isReadOnly,
    isInvalid,
    validationErrors,
    validationDetails
  };
}
var $1ae600c947479353$export$ec98120685d4f57d = /* @__PURE__ */ new WeakMap();
function $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state2) {
  let { isDisabled: isDisabled3, name, validationBehavior = "aria" } = props;
  let { isInvalid, validationErrors, validationDetails } = state2.displayValidation;
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $2baaea4c71418dea$export$294aa081a6c6f55d)({
    ...props,
    // Checkbox group is not an HTML input element so it
    // shouldn't be labeled by a <label> element.
    labelElementType: "span",
    isInvalid,
    errorMessage: props.errorMessage || validationErrors
  });
  (0, $1ae600c947479353$export$ec98120685d4f57d).set(state2, {
    name,
    descriptionId: descriptionProps.id,
    errorMessageId: errorMessageProps.id,
    validationBehavior
  });
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    onBlurWithin: props.onBlur,
    onFocusWithin: props.onFocus,
    onFocusWithinChange: props.onFocusChange
  });
  return {
    groupProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      role: "group",
      "aria-disabled": isDisabled3 || void 0,
      ...fieldProps,
      ...focusWithinProps
    }),
    labelProps,
    descriptionProps,
    errorMessageProps,
    isInvalid,
    validationErrors,
    validationDetails
  };
}
function $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state2, inputRef) {
  const toggleState = (0, $3017fa7ffdddec74$export$8042c6c013fd5226)({
    isReadOnly: props.isReadOnly || state2.isReadOnly,
    isSelected: state2.isSelected(props.value),
    onChange(isSelected) {
      if (isSelected)
        state2.addValue(props.value);
      else
        state2.removeValue(props.value);
      if (props.onChange)
        props.onChange(isSelected);
    }
  });
  let { name, descriptionId, errorMessageId, validationBehavior } = (0, $1ae600c947479353$export$ec98120685d4f57d).get(state2);
  var _props_validationBehavior;
  validationBehavior = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : validationBehavior;
  let { realtimeValidation } = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: toggleState.isSelected,
    // Server validation is handled at the group level.
    name: void 0,
    validationBehavior: "aria"
  });
  let nativeValidation = (0, import_react230.useRef)((0, $e5be200c675c3b3a$export$dad6ae84456c676a));
  let updateValidation = () => {
    state2.setInvalid(props.value, realtimeValidation.isInvalid ? realtimeValidation : nativeValidation.current);
  };
  (0, import_react230.useEffect)(updateValidation);
  let combinedRealtimeValidation = state2.realtimeValidation.isInvalid ? state2.realtimeValidation : realtimeValidation;
  let displayValidation = validationBehavior === "native" ? state2.displayValidation : combinedRealtimeValidation;
  var _props_isRequired;
  let res = (0, $406796ff087fe49b$export$e375f10ce42261c5)({
    ...props,
    isReadOnly: props.isReadOnly || state2.isReadOnly,
    isDisabled: props.isDisabled || state2.isDisabled,
    name: props.name || name,
    isRequired: (_props_isRequired = props.isRequired) !== null && _props_isRequired !== void 0 ? _props_isRequired : state2.isRequired,
    validationBehavior,
    [(0, $e5be200c675c3b3a$export$a763b9476acd3eb)]: {
      realtimeValidation: combinedRealtimeValidation,
      displayValidation,
      resetValidation: state2.resetValidation,
      commitValidation: state2.commitValidation,
      updateValidation(v) {
        nativeValidation.current = v;
        updateValidation();
      }
    }
  }, toggleState, inputRef);
  return {
    ...res,
    inputProps: {
      ...res.inputProps,
      "aria-describedby": [
        props["aria-describedby"],
        state2.isInvalid ? errorMessageId : null,
        descriptionId
      ].filter(Boolean).join(" ") || void 0
    }
  };
}

// node_modules/@react-aria/i18n/dist/real-module.mjs
var import_react231 = __toESM(require_react(), 1);

// node_modules/@internationalized/string/dist/import.mjs
var $5b160d28a433310d$var$localeSymbol = Symbol.for("react-aria.i18n.locale");
var $5b160d28a433310d$var$stringsSymbol = Symbol.for("react-aria.i18n.strings");
var $5b160d28a433310d$var$cachedGlobalStrings = void 0;
var $5b160d28a433310d$export$c17fa47878dc55b6 = class _$5b160d28a433310d$export$c17fa47878dc55b6 {
  /** Returns a localized string for the given key and locale. */
  getStringForLocale(key2, locale) {
    let strings = this.getStringsForLocale(locale);
    let string2 = strings[key2];
    if (!string2)
      throw new Error(`Could not find intl message ${key2} in ${locale} locale`);
    return string2;
  }
  /** Returns all localized strings for the given locale. */
  getStringsForLocale(locale) {
    let strings = this.strings[locale];
    if (!strings) {
      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
      this.strings[locale] = strings;
    }
    return strings;
  }
  static getGlobalDictionaryForPackage(packageName) {
    if (typeof window === "undefined")
      return null;
    let locale = window[$5b160d28a433310d$var$localeSymbol];
    if ($5b160d28a433310d$var$cachedGlobalStrings === void 0) {
      let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];
      if (!globalStrings)
        return null;
      $5b160d28a433310d$var$cachedGlobalStrings = {};
      for (let pkg2 in globalStrings)
        $5b160d28a433310d$var$cachedGlobalStrings[pkg2] = new _$5b160d28a433310d$export$c17fa47878dc55b6({
          [locale]: globalStrings[pkg2]
        }, locale);
    }
    let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];
    if (!dictionary)
      throw new Error(`Strings for package "${packageName}" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);
    return dictionary;
  }
  constructor(messages, defaultLocale = "en-US") {
    this.strings = {
      ...messages
    };
    this.defaultLocale = defaultLocale;
  }
};
function $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
  if (strings[locale])
    return strings[locale];
  let language = $5b160d28a433310d$var$getLanguage(locale);
  if (strings[language])
    return strings[language];
  for (let key2 in strings) {
    if (key2.startsWith(language + "-"))
      return strings[key2];
  }
  return strings[defaultLocale];
}
function $5b160d28a433310d$var$getLanguage(locale) {
  if (Intl.Locale)
    return new Intl.Locale(locale).language;
  return locale.split("-")[0];
}
var $6db58dc88e78b024$var$pluralRulesCache = /* @__PURE__ */ new Map();
var $6db58dc88e78b024$var$numberFormatCache = /* @__PURE__ */ new Map();
var $6db58dc88e78b024$export$2f817fcdc4b89ae0 = class {
  /** Formats a localized string for the given key with the provided variables. */
  format(key2, variables) {
    let message = this.strings.getStringForLocale(key2, this.locale);
    return typeof message === "function" ? message(variables, this) : message;
  }
  plural(count, options2, type = "cardinal") {
    let opt = options2["=" + count];
    if (opt)
      return typeof opt === "function" ? opt() : opt;
    let key2 = this.locale + ":" + type;
    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key2);
    if (!pluralRules) {
      pluralRules = new Intl.PluralRules(this.locale, {
        type
      });
      $6db58dc88e78b024$var$pluralRulesCache.set(key2, pluralRules);
    }
    let selected = pluralRules.select(count);
    opt = options2[selected] || options2.other;
    return typeof opt === "function" ? opt() : opt;
  }
  number(value) {
    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);
    if (!numberFormat) {
      numberFormat = new Intl.NumberFormat(this.locale);
      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);
    }
    return numberFormat.format(value);
  }
  select(options2, value) {
    let opt = options2[value] || options2.other;
    return typeof opt === "function" ? opt() : opt;
  }
  constructor(locale, strings) {
    this.locale = locale;
    this.strings = strings;
  }
};

// node_modules/@internationalized/date/dist/import.mjs
function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {
  return amount - numerator * Math.floor(amount / numerator);
}
var $3b62074eb05584b2$var$EPOCH = 1721426;
function $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {
  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);
  let y1 = year - 1;
  let monthOffset = -2;
  if (month <= 2)
    monthOffset = 0;
  else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year))
    monthOffset = -1;
  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
}
function $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {
  return era === "BC" ? 1 - year : year;
}
function $3b62074eb05584b2$export$4475b7e617eb123c(year) {
  let era = "AD";
  if (year <= 0) {
    era = "BC";
    year = 1 - year;
  }
  return [
    era,
    year
  ];
}
var $3b62074eb05584b2$var$daysInMonth = {
  standard: [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
  ],
  leapyear: [
    31,
    29,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
  ]
};
var $3b62074eb05584b2$export$80ee6245ec4f29ec = class {
  fromJulianDay(jd) {
    let jd0 = jd;
    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;
    let quadricent = Math.floor(depoch / 146097);
    let dqc = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);
    let cent = Math.floor(dqc / 36524);
    let dcent = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);
    let quad = Math.floor(dcent / 1461);
    let dquad = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);
    let yindex = Math.floor(dquad / 365);
    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);
    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);
    let leapAdj = 2;
    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1))
      leapAdj = 0;
    else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year))
      leapAdj = 1;
    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);
  }
  toJulianDay(date) {
    return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);
  }
  getDaysInMonth(date) {
    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? "leapyear" : "standard"][date.month - 1];
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getMonthsInYear(date) {
    return 12;
  }
  getDaysInYear(date) {
    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getYearsInEra(date) {
    return 9999;
  }
  getEras() {
    return [
      "BC",
      "AD"
    ];
  }
  isInverseEra(date) {
    return date.era === "BC";
  }
  balanceDate(date) {
    if (date.year <= 0) {
      date.era = date.era === "BC" ? "AD" : "BC";
      date.year = 1 - date.year;
    }
  }
  constructor() {
    this.identifier = "gregory";
  }
};
var $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {
  "001": 1,
  AD: 1,
  AE: 6,
  AF: 6,
  AI: 1,
  AL: 1,
  AM: 1,
  AN: 1,
  AR: 1,
  AT: 1,
  AU: 1,
  AX: 1,
  AZ: 1,
  BA: 1,
  BE: 1,
  BG: 1,
  BH: 6,
  BM: 1,
  BN: 1,
  BY: 1,
  CH: 1,
  CL: 1,
  CM: 1,
  CN: 1,
  CR: 1,
  CY: 1,
  CZ: 1,
  DE: 1,
  DJ: 6,
  DK: 1,
  DZ: 6,
  EC: 1,
  EE: 1,
  EG: 6,
  ES: 1,
  FI: 1,
  FJ: 1,
  FO: 1,
  FR: 1,
  GB: 1,
  GE: 1,
  GF: 1,
  GP: 1,
  GR: 1,
  HR: 1,
  HU: 1,
  IE: 1,
  IQ: 6,
  IR: 6,
  IS: 1,
  IT: 1,
  JO: 6,
  KG: 1,
  KW: 6,
  KZ: 1,
  LB: 1,
  LI: 1,
  LK: 1,
  LT: 1,
  LU: 1,
  LV: 1,
  LY: 6,
  MC: 1,
  MD: 1,
  ME: 1,
  MK: 1,
  MN: 1,
  MQ: 1,
  MV: 5,
  MY: 1,
  NL: 1,
  NO: 1,
  NZ: 1,
  OM: 6,
  PL: 1,
  QA: 6,
  RE: 1,
  RO: 1,
  RS: 1,
  RU: 1,
  SD: 6,
  SE: 1,
  SI: 1,
  SK: 1,
  SM: 1,
  SY: 6,
  TJ: 1,
  TM: 1,
  TR: 1,
  UA: 1,
  UY: 1,
  UZ: 1,
  VA: 1,
  VN: 1,
  XK: 1
};
function $14e0f24ef4ac5c92$export$ea39ec197993aef0(a2, b2) {
  b2 = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b2, a2.calendar);
  return a2.era === b2.era && a2.year === b2.year && a2.month === b2.month && a2.day === b2.day;
}
function $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a2, b2) {
  b2 = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b2, a2.calendar);
  a2 = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a2);
  b2 = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b2);
  return a2.era === b2.era && a2.year === b2.year && a2.month === b2.month;
}
function $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a2, b2) {
  return a2.calendar.identifier === b2.calendar.identifier && a2.era === b2.era && a2.year === b2.year && a2.month === b2.month && a2.day === b2.day;
}
function $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {
  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));
}
function $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {
  let julian = date.calendar.toJulianDay(date);
  let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;
  if (dayOfWeek < 0)
    dayOfWeek += 7;
  return dayOfWeek;
}
function $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {
  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);
}
function $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {
  return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));
}
function $14e0f24ef4ac5c92$export$68781ddf31c0090f(a2, b2) {
  return a2.calendar.toJulianDay(a2) - b2.calendar.toJulianDay(b2);
}
function $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a2, b2) {
  return $14e0f24ef4ac5c92$var$timeToMs(a2) - $14e0f24ef4ac5c92$var$timeToMs(b2);
}
function $14e0f24ef4ac5c92$var$timeToMs(a2) {
  return a2.hour * 36e5 + a2.minute * 6e4 + a2.second * 1e3 + a2.millisecond;
}
var $14e0f24ef4ac5c92$var$localTimeZone = null;
function $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {
  if ($14e0f24ef4ac5c92$var$localTimeZone == null)
    $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
  return $14e0f24ef4ac5c92$var$localTimeZone;
}
function $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {
  return date.subtract({
    days: date.day - 1
  });
}
function $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {
  return date.add({
    days: date.calendar.getDaysInMonth(date) - date.day
  });
}
function $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {
  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({
    months: date.month - 1
  }));
}
function $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {
  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({
    months: date.calendar.getMonthsInYear(date) - date.month
  }));
}
function $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {
  if (date.calendar.getMinimumMonthInYear)
    return date.calendar.getMinimumMonthInYear(date);
  return 1;
}
function $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {
  if (date.calendar.getMinimumDayInMonth)
    return date.calendar.getMinimumDayInMonth(date);
  return 1;
}
function $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {
  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
  return date.subtract({
    days: dayOfWeek
  });
}
function $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {
  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({
    days: 6
  });
}
var $14e0f24ef4ac5c92$var$cachedRegions = /* @__PURE__ */ new Map();
function $14e0f24ef4ac5c92$var$getRegion(locale) {
  if (Intl.Locale) {
    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);
    if (!region) {
      region = new Intl.Locale(locale).maximize().region;
      if (region)
        $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);
    }
    return region;
  }
  let part = locale.split("-")[1];
  return part === "u" ? void 0 : part;
}
function $14e0f24ef4ac5c92$var$getWeekStart(locale) {
  let region = $14e0f24ef4ac5c92$var$getRegion(locale);
  return region ? (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0 : 0;
}
function $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {
  let days = date.calendar.getDaysInMonth(date);
  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);
}
function $14e0f24ef4ac5c92$export$5c333a116e949cdd(a2, b2) {
  if (a2 && b2)
    return a2.compare(b2) <= 0 ? a2 : b2;
  return a2 || b2;
}
function $14e0f24ef4ac5c92$export$a75f2bff57811055(a2, b2) {
  if (a2 && b2)
    return a2.compare(b2) >= 0 ? a2 : b2;
  return a2 || b2;
}
function $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {
  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
  let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);
  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
}
function $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
  let date = /* @__PURE__ */ new Date();
  date.setUTCHours(hour, minute, second, millisecond);
  date.setUTCFullYear(year, month - 1, day);
  return date.getTime();
}
function $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {
  if (timeZone === "UTC")
    return 0;
  if (ms > 0 && timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)())
    return new Date(ms).getTimezoneOffset() * -6e4;
  let { year, month, day, hour, minute, second } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);
  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);
  return utc - Math.floor(ms / 1e3) * 1e3;
}
var $11d87f3f76e88657$var$formattersByTimeZone = /* @__PURE__ */ new Map();
function $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {
  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);
  if (!formatter) {
    formatter = new Intl.DateTimeFormat("en-US", {
      timeZone,
      hour12: false,
      era: "short",
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "numeric",
      minute: "numeric",
      second: "numeric"
    });
    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);
  }
  let parts = formatter.formatToParts(new Date(ms));
  let namedParts = {};
  for (let part of parts)
    if (part.type !== "literal")
      namedParts[part.type] = part.value;
  return {
    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253
    year: namedParts.era === "BC" || namedParts.era === "B" ? -namedParts.year + 1 : +namedParts.year,
    month: +namedParts.month,
    day: +namedParts.day,
    hour: namedParts.hour === "24" ? 0 : +namedParts.hour,
    minute: +namedParts.minute,
    second: +namedParts.second
  };
}
var $11d87f3f76e88657$var$DAYMILLIS = 864e5;
function $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {
  let found = earlier === later ? [
    earlier
  ] : [
    earlier,
    later
  ];
  return found.filter((absolute) => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));
}
function $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {
  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);
  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
}
function $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = "compatible") {
  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);
  if (timeZone === "UTC")
    return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === "compatible") {
    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
    let date2 = /* @__PURE__ */ new Date();
    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);
    date2.setFullYear(year, dateTime.month - 1, dateTime.day);
    date2.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
    return date2.getTime();
  }
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
  if (valid.length === 1)
    return valid[0];
  if (valid.length > 1)
    switch (disambiguation) {
      case "compatible":
      case "earlier":
        return valid[0];
      case "later":
        return valid[valid.length - 1];
      case "reject":
        throw new RangeError("Multiple possible absolute times found");
    }
  switch (disambiguation) {
    case "earlier":
      return Math.min(ms - offsetBefore, ms - offsetAfter);
    case "compatible":
    case "later":
      return Math.max(ms - offsetBefore, ms - offsetAfter);
    case "reject":
      throw new RangeError("No such absolute time found");
  }
}
function $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = "compatible") {
  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
}
function $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {
  let offset3 = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);
  let date = new Date(ms + offset3);
  let year = date.getUTCFullYear();
  let month = date.getUTCMonth() + 1;
  let day = date.getUTCDate();
  let hour = date.getUTCHours();
  let minute = date.getUTCMinutes();
  let second = date.getUTCSeconds();
  let millisecond = date.getUTCMilliseconds();
  return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset3, hour, minute, second, millisecond);
}
function $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {
  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
}
function $11d87f3f76e88657$export$b21e0b124e224484(date, time2) {
  let hour = 0, minute = 0, second = 0, millisecond = 0;
  if ("timeZone" in date)
    ({ hour, minute, second, millisecond } = date);
  else if ("hour" in date && !time2)
    return date;
  if (time2)
    ({ hour, minute, second, millisecond } = time2);
  return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
}
function $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {
  if (date.calendar.identifier === calendar.identifier)
    return date;
  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
  let copy3 = date.copy();
  copy3.calendar = calendar;
  copy3.era = calendarDate.era;
  copy3.year = calendarDate.year;
  copy3.month = calendarDate.month;
  copy3.day = calendarDate.day;
  (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy3);
  return copy3;
}
function $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {
  if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {
    if (date.timeZone === timeZone)
      return date;
    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);
  }
  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);
  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);
}
function $11d87f3f76e88657$export$83aac07b4c37b25(date) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
  return new Date(ms);
}
function $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
}
var $735220c2d4774dd3$var$ONE_HOUR = 36e5;
function $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {
  let mutableDate = date.copy();
  let days = "hour" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;
  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);
  if (mutableDate.calendar.balanceYearMonth)
    mutableDate.calendar.balanceYearMonth(mutableDate, date);
  mutableDate.month += duration.months || 0;
  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);
  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);
  mutableDate.day += (duration.weeks || 0) * 7;
  mutableDate.day += duration.days || 0;
  mutableDate.day += days;
  $735220c2d4774dd3$var$balanceDay(mutableDate);
  if (mutableDate.calendar.balanceDate)
    mutableDate.calendar.balanceDate(mutableDate);
  if (mutableDate.year < 1) {
    mutableDate.year = 1;
    mutableDate.month = 1;
    mutableDate.day = 1;
  }
  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);
  if (mutableDate.year > maxYear) {
    var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;
    let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);
    mutableDate.year = maxYear;
    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);
    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);
  }
  if (mutableDate.month < 1) {
    mutableDate.month = 1;
    mutableDate.day = 1;
  }
  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);
  if (mutableDate.month > maxMonth) {
    mutableDate.month = maxMonth;
    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);
  }
  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));
  return mutableDate;
}
function $735220c2d4774dd3$var$addYears(date, years) {
  var _date_calendar_isInverseEra, _date_calendar;
  if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date))
    years = -years;
  date.year += years;
}
function $735220c2d4774dd3$var$balanceYearMonth(date) {
  while (date.month < 1) {
    $735220c2d4774dd3$var$addYears(date, -1);
    date.month += date.calendar.getMonthsInYear(date);
  }
  let monthsInYear = 0;
  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {
    date.month -= monthsInYear;
    $735220c2d4774dd3$var$addYears(date, 1);
  }
}
function $735220c2d4774dd3$var$balanceDay(date) {
  while (date.day < 1) {
    date.month--;
    $735220c2d4774dd3$var$balanceYearMonth(date);
    date.day += date.calendar.getDaysInMonth(date);
  }
  while (date.day > date.calendar.getDaysInMonth(date)) {
    date.day -= date.calendar.getDaysInMonth(date);
    date.month++;
    $735220c2d4774dd3$var$balanceYearMonth(date);
  }
}
function $735220c2d4774dd3$var$constrainMonthDay(date) {
  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
}
function $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {
  if (date.calendar.constrainDate)
    date.calendar.constrainDate(date);
  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
  $735220c2d4774dd3$var$constrainMonthDay(date);
}
function $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {
  let inverseDuration = {};
  for (let key2 in duration)
    if (typeof duration[key2] === "number")
      inverseDuration[key2] = -duration[key2];
  return inverseDuration;
}
function $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {
  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {
  let mutableDate = date.copy();
  if (fields.era != null)
    mutableDate.era = fields.era;
  if (fields.year != null)
    mutableDate.year = fields.year;
  if (fields.month != null)
    mutableDate.month = fields.month;
  if (fields.day != null)
    mutableDate.day = fields.day;
  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);
  return mutableDate;
}
function $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {
  let mutableValue = value.copy();
  if (fields.hour != null)
    mutableValue.hour = fields.hour;
  if (fields.minute != null)
    mutableValue.minute = fields.minute;
  if (fields.second != null)
    mutableValue.second = fields.second;
  if (fields.millisecond != null)
    mutableValue.millisecond = fields.millisecond;
  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);
  return mutableValue;
}
function $735220c2d4774dd3$var$balanceTime(time2) {
  time2.second += Math.floor(time2.millisecond / 1e3);
  time2.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time2.millisecond, 1e3);
  time2.minute += Math.floor(time2.second / 60);
  time2.second = $735220c2d4774dd3$var$nonNegativeMod(time2.second, 60);
  time2.hour += Math.floor(time2.minute / 60);
  time2.minute = $735220c2d4774dd3$var$nonNegativeMod(time2.minute, 60);
  let days = Math.floor(time2.hour / 24);
  time2.hour = $735220c2d4774dd3$var$nonNegativeMod(time2.hour, 24);
  return days;
}
function $735220c2d4774dd3$export$7555de1e070510cb(time2) {
  time2.millisecond = Math.max(0, Math.min(time2.millisecond, 1e3));
  time2.second = Math.max(0, Math.min(time2.second, 59));
  time2.minute = Math.max(0, Math.min(time2.minute, 59));
  time2.hour = Math.max(0, Math.min(time2.hour, 23));
}
function $735220c2d4774dd3$var$nonNegativeMod(a2, b2) {
  let result = a2 % b2;
  if (result < 0)
    result += b2;
  return result;
}
function $735220c2d4774dd3$var$addTimeFields(time2, duration) {
  time2.hour += duration.hours || 0;
  time2.minute += duration.minutes || 0;
  time2.second += duration.seconds || 0;
  time2.millisecond += duration.milliseconds || 0;
  return $735220c2d4774dd3$var$balanceTime(time2);
}
function $735220c2d4774dd3$export$7ed87b6bc2506470(time2, duration) {
  let res = time2.copy();
  $735220c2d4774dd3$var$addTimeFields(res, duration);
  return res;
}
function $735220c2d4774dd3$export$fe34d3a381cd7501(time2, duration) {
  return $735220c2d4774dd3$export$7ed87b6bc2506470(time2, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options2) {
  let mutable = value.copy();
  switch (field) {
    case "era": {
      let eras = value.calendar.getEras();
      let eraIndex = eras.indexOf(value.era);
      if (eraIndex < 0)
        throw new Error("Invalid era: " + value.era);
      eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options2 === null || options2 === void 0 ? void 0 : options2.round);
      mutable.era = eras[eraIndex];
      $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
      break;
    }
    case "year":
      var _mutable_calendar_isInverseEra, _mutable_calendar;
      if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable))
        amount = -amount;
      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options2 === null || options2 === void 0 ? void 0 : options2.round);
      if (mutable.year === -Infinity)
        mutable.year = 1;
      if (mutable.calendar.balanceYearMonth)
        mutable.calendar.balanceYearMonth(mutable, value);
      break;
    case "month":
      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    case "day":
      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    default:
      throw new Error("Unsupported field " + field);
  }
  if (value.calendar.balanceDate)
    value.calendar.balanceDate(mutable);
  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
  return mutable;
}
function $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options2) {
  let mutable = value.copy();
  switch (field) {
    case "hour": {
      let hours = value.hour;
      let min3 = 0;
      let max3 = 23;
      if ((options2 === null || options2 === void 0 ? void 0 : options2.hourCycle) === 12) {
        let isPM = hours >= 12;
        min3 = isPM ? 12 : 0;
        max3 = isPM ? 23 : 11;
      }
      mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min3, max3, options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    }
    case "minute":
      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    case "second":
      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    case "millisecond":
      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options2 === null || options2 === void 0 ? void 0 : options2.round);
      break;
    default:
      throw new Error("Unsupported field " + field);
  }
  return mutable;
}
function $735220c2d4774dd3$var$cycleValue(value, amount, min3, max3, round3 = false) {
  if (round3) {
    value += Math.sign(amount);
    if (value < min3)
      value = max3;
    let div = Math.abs(amount);
    if (amount > 0)
      value = Math.ceil(value / div) * div;
    else
      value = Math.floor(value / div) * div;
    if (value > max3)
      value = min3;
  } else {
    value += amount;
    if (value < min3)
      value = max3 - (min3 - value - 1);
    else if (value > max3)
      value = min3 + (value - max3 - 1);
  }
  return value;
}
function $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {
  let ms;
  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {
    let res2 = $735220c2d4774dd3$export$e16d8520af44a096((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {
      years: duration.years,
      months: duration.months,
      weeks: duration.weeks,
      days: duration.days
    });
    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res2, dateTime.timeZone);
  } else
    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
  ms += duration.milliseconds || 0;
  ms += (duration.seconds || 0) * 1e3;
  ms += (duration.minutes || 0) * 6e4;
  ms += (duration.hours || 0) * 36e5;
  let res = (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);
  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(res, dateTime.calendar);
}
function $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {
  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options2) {
  switch (field) {
    case "hour": {
      let min3 = 0;
      let max3 = 23;
      if ((options2 === null || options2 === void 0 ? void 0 : options2.hourCycle) === 12) {
        let isPM = dateTime.hour >= 12;
        min3 = isPM ? 12 : 0;
        max3 = isPM ? 23 : 11;
      }
      let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);
      let minDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
        hour: min3
      }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
      let minAbsolute = [
        (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, "earlier"),
        (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, "later")
      ].filter((ms2) => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms2, dateTime.timeZone).day === minDate.day)[0];
      let maxDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
        hour: max3
      }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
      let maxAbsolute = [
        (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, "earlier"),
        (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, "later")
      ].filter((ms2) => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms2, dateTime.timeZone).day === maxDate.day).pop();
      let ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
      let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);
      let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;
      ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options2 === null || options2 === void 0 ? void 0 : options2.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;
      return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
    }
    case "minute":
    case "second":
    case "millisecond":
      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options2);
    case "era":
    case "year":
    case "month":
    case "day": {
      let res = $735220c2d4774dd3$export$d52ced6badfb9a4c((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options2);
      let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);
      return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
    }
    default:
      throw new Error("Unsupported field " + field);
  }
}
function $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);
  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);
  if (res.compare(plainDateTime) === 0)
    return dateTime;
  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);
  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
}
var $fae977aafc393c5c$var$DATE_RE = /^(\d{4})-(\d{2})-(\d{2})$/;
var $fae977aafc393c5c$var$requiredDurationTimeGroups = [
  "hours",
  "minutes",
  "seconds"
];
var $fae977aafc393c5c$var$requiredDurationGroups = [
  "years",
  "months",
  "weeks",
  "days",
  ...$fae977aafc393c5c$var$requiredDurationTimeGroups
];
function $fae977aafc393c5c$export$6b862160d295c8e(value) {
  let m3 = value.match($fae977aafc393c5c$var$DATE_RE);
  if (!m3)
    throw new Error("Invalid ISO 8601 date string: " + value);
  let date = new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)($fae977aafc393c5c$var$parseNumber(m3[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m3[2], 1, 12), 1);
  date.day = $fae977aafc393c5c$var$parseNumber(m3[3], 0, date.calendar.getDaysInMonth(date));
  return date;
}
function $fae977aafc393c5c$var$parseNumber(value, min3, max3) {
  let val = Number(value);
  if (val < min3 || val > max3)
    throw new RangeError(`Value out of range: ${min3} <= ${val} <= ${max3}`);
  return val;
}
function $fae977aafc393c5c$export$f59dee82248f5ad4(time2) {
  return `${String(time2.hour).padStart(2, "0")}:${String(time2.minute).padStart(2, "0")}:${String(time2.second).padStart(2, "0")}${time2.millisecond ? String(time2.millisecond / 1e3).slice(1) : ""}`;
}
function $fae977aafc393c5c$export$60dfd74aa96791bd(date) {
  let gregorianDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
  return `${String(gregorianDate.year).padStart(4, "0")}-${String(gregorianDate.month).padStart(2, "0")}-${String(gregorianDate.day).padStart(2, "0")}`;
}
function $fae977aafc393c5c$export$4223de14708adc63(date) {
  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;
}
function $fae977aafc393c5c$var$offsetToString(offset3) {
  let sign = Math.sign(offset3) < 0 ? "-" : "+";
  offset3 = Math.abs(offset3);
  let offsetHours = Math.floor(offset3 / 36e5);
  let offsetMinutes = offset3 % 36e5 / 6e4;
  return `${sign}${String(offsetHours).padStart(2, "0")}:${String(offsetMinutes).padStart(2, "0")}`;
}
function $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {
  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;
}
function $35ea8db9cb2ccb90$var$shiftArgs(args) {
  let calendar = typeof args[0] === "object" ? args.shift() : new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();
  let era;
  if (typeof args[0] === "string")
    era = args.shift();
  else {
    let eras = calendar.getEras();
    era = eras[eras.length - 1];
  }
  let year = args.shift();
  let month = args.shift();
  let day = args.shift();
  return [
    calendar,
    era,
    year,
    month,
    day
  ];
}
var $35ea8db9cb2ccb90$var$_type = /* @__PURE__ */ new WeakMap();
var $35ea8db9cb2ccb90$export$99faa760c7908e4f = class _$35ea8db9cb2ccb90$export$99faa760c7908e4f {
  /** Returns a copy of this date. */
  copy() {
    if (this.era)
      return new _$35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);
    else
      return new _$35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
  }
  /** Returns a new `CalendarDate` with the given duration added to it. */
  add(duration) {
    return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);
  }
  /** Returns a new `CalendarDate` with the given duration subtracted from it. */
  subtract(duration) {
    return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);
  }
  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
  set(fields) {
    return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);
  }
  /**
  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */
  cycle(field, amount, options2) {
    return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options2);
  }
  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
  toDate(timeZone) {
    return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);
  }
  /** Converts the date to an ISO 8601 formatted string. */
  toString() {
    return (0, $fae977aafc393c5c$export$60dfd74aa96791bd)(this);
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
  compare(b2) {
    return (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b2);
  }
  constructor(...args) {
    (0, _class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type, {
      writable: true,
      value: void 0
    });
    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
  }
};
var $35ea8db9cb2ccb90$var$_type1 = /* @__PURE__ */ new WeakMap();
var $35ea8db9cb2ccb90$export$680ea196effce5f = class _$35ea8db9cb2ccb90$export$680ea196effce5f {
  /** Returns a copy of this time. */
  copy() {
    return new _$35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `Time` with the given duration added to it. */
  add(duration) {
    return (0, $735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);
  }
  /** Returns a new `Time` with the given duration subtracted from it. */
  subtract(duration) {
    return (0, $735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);
  }
  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */
  set(fields) {
    return (0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);
  }
  /**
  * Returns a new `Time` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */
  cycle(field, amount, options2) {
    return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options2);
  }
  /** Converts the time to an ISO 8601 formatted string. */
  toString() {
    return (0, $fae977aafc393c5c$export$f59dee82248f5ad4)(this);
  }
  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */
  compare(b2) {
    return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b2);
  }
  constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {
    (0, _class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type1, {
      writable: true,
      value: void 0
    });
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond;
    (0, $735220c2d4774dd3$export$7555de1e070510cb)(this);
  }
};
var $35ea8db9cb2ccb90$var$_type2 = /* @__PURE__ */ new WeakMap();
var $35ea8db9cb2ccb90$export$ca871e8dbb80966f = class _$35ea8db9cb2ccb90$export$ca871e8dbb80966f {
  /** Returns a copy of this date. */
  copy() {
    if (this.era)
      return new _$35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
    else
      return new _$35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `CalendarDateTime` with the given duration added to it. */
  add(duration) {
    return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);
  }
  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
  subtract(duration) {
    return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);
  }
  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
  set(fields) {
    return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)((0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);
  }
  /**
  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */
  cycle(field, amount, options2) {
    switch (field) {
      case "era":
      case "year":
      case "month":
      case "day":
        return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options2);
      default:
        return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options2);
    }
  }
  /** Converts the date to a native JavaScript Date object in the given time zone. */
  toDate(timeZone, disambiguation) {
    return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);
  }
  /** Converts the date to an ISO 8601 formatted string. */
  toString() {
    return (0, $fae977aafc393c5c$export$4223de14708adc63)(this);
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
  compare(b2) {
    let res = (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b2);
    if (res === 0)
      return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, (0, $11d87f3f76e88657$export$b21e0b124e224484)(b2));
    return res;
  }
  constructor(...args) {
    (0, _class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type2, {
      writable: true,
      value: void 0
    });
    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = args.shift() || 0;
    this.minute = args.shift() || 0;
    this.second = args.shift() || 0;
    this.millisecond = args.shift() || 0;
    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
  }
};
var $35ea8db9cb2ccb90$var$_type3 = /* @__PURE__ */ new WeakMap();
var $35ea8db9cb2ccb90$export$d3b7288e7994edea = class _$35ea8db9cb2ccb90$export$d3b7288e7994edea {
  /** Returns a copy of this date. */
  copy() {
    if (this.era)
      return new _$35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
    else
      return new _$35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `ZonedDateTime` with the given duration added to it. */
  add(duration) {
    return (0, $735220c2d4774dd3$export$96b1d28349274637)(this, duration);
  }
  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
  subtract(duration) {
    return (0, $735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);
  }
  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
  set(fields, disambiguation) {
    return (0, $735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);
  }
  /**
  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */
  cycle(field, amount, options2) {
    return (0, $735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options2);
  }
  /** Converts the date to a native JavaScript Date object. */
  toDate() {
    return (0, $11d87f3f76e88657$export$83aac07b4c37b25)(this);
  }
  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
  toString() {
    return (0, $fae977aafc393c5c$export$bf79f1ebf4b18792)(this);
  }
  /** Converts the date to an ISO 8601 formatted string in UTC. */
  toAbsoluteString() {
    return this.toDate().toISOString();
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
  compare(b2) {
    return this.toDate().getTime() - (0, $11d87f3f76e88657$export$84c95a83c799e074)(b2, this.timeZone).toDate().getTime();
  }
  constructor(...args) {
    (0, _class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type3, {
      writable: true,
      value: void 0
    });
    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    let timeZone = args.shift();
    let offset3 = args.shift();
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    this.timeZone = timeZone;
    this.offset = offset3;
    this.hour = args.shift() || 0;
    this.minute = args.shift() || 0;
    this.second = args.shift() || 0;
    this.millisecond = args.shift() || 0;
    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
  }
};
var $62225008020f0a13$var$ERA_START_DATES = [
  [
    1868,
    9,
    8
  ],
  [
    1912,
    7,
    30
  ],
  [
    1926,
    12,
    25
  ],
  [
    1989,
    1,
    8
  ],
  [
    2019,
    5,
    1
  ]
];
var $62225008020f0a13$var$ERA_END_DATES = [
  [
    1912,
    7,
    29
  ],
  [
    1926,
    12,
    24
  ],
  [
    1989,
    1,
    7
  ],
  [
    2019,
    4,
    30
  ]
];
var $62225008020f0a13$var$ERA_ADDENDS = [
  1867,
  1911,
  1925,
  1988,
  2018
];
var $62225008020f0a13$var$ERA_NAMES = [
  "meiji",
  "taisho",
  "showa",
  "heisei",
  "reiwa"
];
function $62225008020f0a13$var$findEraFromGregorianDate(date) {
  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(([year, month, day]) => {
    if (date.year < year)
      return true;
    if (date.year === year && date.month < month)
      return true;
    if (date.year === year && date.month === month && date.day < day)
      return true;
    return false;
  });
  if (idx === -1)
    return $62225008020f0a13$var$ERA_START_DATES.length - 1;
  if (idx === 0)
    return 0;
  return idx - 1;
}
function $62225008020f0a13$var$toGregorian(date) {
  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];
  if (!eraAddend)
    throw new Error("Unknown era: " + date.era);
  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);
}
var $62225008020f0a13$export$b746ab2b60cdffbf = class extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);
  }
  toJulianDay(date) {
    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));
  }
  balanceDate(date) {
    let gregorianDate = $62225008020f0a13$var$toGregorian(date);
    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);
    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {
      date.era = $62225008020f0a13$var$ERA_NAMES[era];
      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];
    }
    this.constrainDate(date);
  }
  constrainDate(date) {
    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    let end2 = $62225008020f0a13$var$ERA_END_DATES[idx];
    if (end2 != null) {
      let [endYear, endMonth, endDay] = end2;
      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];
      date.year = Math.max(1, Math.min(maxYear, date.year));
      if (date.year === maxYear) {
        date.month = Math.min(endMonth, date.month);
        if (date.month === endMonth)
          date.day = Math.min(endDay, date.day);
      }
    }
    if (date.year === 1 && idx >= 0) {
      let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];
      date.month = Math.max(startMonth, date.month);
      if (date.month === startMonth)
        date.day = Math.max(startDay, date.day);
    }
  }
  getEras() {
    return $62225008020f0a13$var$ERA_NAMES;
  }
  getYearsInEra(date) {
    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    let cur = $62225008020f0a13$var$ERA_START_DATES[era];
    let next2 = $62225008020f0a13$var$ERA_START_DATES[era + 1];
    if (next2 == null)
      return 9999 - cur[0] + 1;
    let years = next2[0] - cur[0];
    if (date.month < next2[1] || date.month === next2[1] && date.day < next2[2])
      years++;
    return years;
  }
  getDaysInMonth(date) {
    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));
  }
  getMinimumMonthInYear(date) {
    let start2 = $62225008020f0a13$var$getMinimums(date);
    return start2 ? start2[1] : 1;
  }
  getMinimumDayInMonth(date) {
    let start2 = $62225008020f0a13$var$getMinimums(date);
    return start2 && date.month === start2[1] ? start2[2] : 1;
  }
  constructor(...args) {
    super(...args);
    this.identifier = "japanese";
  }
};
function $62225008020f0a13$var$getMinimums(date) {
  if (date.year === 1) {
    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    return $62225008020f0a13$var$ERA_START_DATES[idx];
  }
}
var $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;
var $8d73d47422ca7302$export$42d20a78301dee44 = class extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {
  fromJulianDay(jd) {
    let gregorianDate = super.fromJulianDay(jd);
    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);
  }
  toJulianDay(date) {
    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));
  }
  getEras() {
    return [
      "BE"
    ];
  }
  getDaysInMonth(date) {
    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));
  }
  balanceDate() {
  }
  constructor(...args) {
    super(...args);
    this.identifier = "buddhist";
  }
};
function $8d73d47422ca7302$var$toGregorian(date) {
  let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);
  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);
}
var $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;
function $5f31bd6f0c8940b2$var$gregorianYear(date) {
  return date.era === "minguo" ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
}
function $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {
  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
  if (y > 0)
    return [
      "minguo",
      y
    ];
  else
    return [
      "before_minguo",
      1 - y
    ];
}
var $5f31bd6f0c8940b2$export$65e01080afcb0799 = class extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    let extendedYear = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);
    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);
  }
  toJulianDay(date) {
    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));
  }
  getEras() {
    return [
      "before_minguo",
      "minguo"
    ];
  }
  balanceDate(date) {
    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));
    date.era = era;
    date.year = year;
  }
  isInverseEra(date) {
    return date.era === "before_minguo";
  }
  getDaysInMonth(date) {
    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));
  }
  getYearsInEra(date) {
    return date.era === "before_minguo" ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
  }
  constructor(...args) {
    super(...args);
    this.identifier = "roc";
  }
};
function $5f31bd6f0c8940b2$var$toGregorian(date) {
  let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date));
  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);
}
var $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321;
function $f3ed2e4472ae7e25$var$isLeapYear(year) {
  let y0 = year > 0 ? year - 474 : year - 473;
  let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;
  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;
}
function $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {
  let y0 = year > 0 ? year - 474 : year - 473;
  let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;
  let offset3 = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;
  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset3 + day;
}
var $f3ed2e4472ae7e25$export$37fccdbfd14c5939 = class {
  fromJulianDay(jd) {
    let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);
    let n2820 = Math.floor(d0 / 1029983);
    let d1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(d0, 1029983);
    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);
    let year = 474 + 2820 * n2820 + y2820;
    if (year <= 0)
      year--;
    let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;
    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);
    let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);
  }
  toJulianDay(date) {
    return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);
  }
  getMonthsInYear() {
    return 12;
  }
  getDaysInMonth(date) {
    if (date.month <= 6)
      return 31;
    if (date.month <= 11)
      return 30;
    return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;
  }
  getEras() {
    return [
      "AP"
    ];
  }
  getYearsInEra() {
    return 9377;
  }
  constructor() {
    this.identifier = "persian";
  }
};
var $82c358003bdda0a8$var$INDIAN_ERA_START = 78;
var $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;
var $82c358003bdda0a8$export$39f31c639fa15726 = class extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;
    let yDay = jd - (0, $3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);
    let leapMonth;
    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {
      indianYear--;
      leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;
      yDay += leapMonth + 155 + 90 + 10;
    } else {
      leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;
      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;
    }
    let indianMonth;
    let indianDay;
    if (yDay < leapMonth) {
      indianMonth = 1;
      indianDay = yDay + 1;
    } else {
      let mDay = yDay - leapMonth;
      if (mDay < 155) {
        indianMonth = Math.floor(mDay / 31) + 2;
        indianDay = mDay % 31 + 1;
      } else {
        mDay -= 155;
        indianMonth = Math.floor(mDay / 30) + 7;
        indianDay = mDay % 30 + 1;
      }
    }
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);
  }
  toJulianDay(date) {
    let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;
    let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear);
    let leapMonth;
    let jd;
    if ((0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {
      leapMonth = 31;
      jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);
    } else {
      leapMonth = 30;
      jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);
    }
    if (date.month === 1)
      return jd + date.day - 1;
    jd += leapMonth + Math.min(date.month - 2, 5) * 31;
    if (date.month >= 8)
      jd += (date.month - 7) * 30;
    jd += date.day - 1;
    return jd;
  }
  getDaysInMonth(date) {
    if (date.month === 1 && (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START))
      return 31;
    if (date.month >= 2 && date.month <= 6)
      return 31;
    return 30;
  }
  getYearsInEra() {
    return 9919;
  }
  getEras() {
    return [
      "saka"
    ];
  }
  balanceDate() {
  }
  constructor(...args) {
    super(...args);
    this.identifier = "indian";
  }
};
var $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440;
var $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439;
var $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;
var $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;
var $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;
function $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {
  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;
}
function $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {
  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);
  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);
  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;
  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);
}
function $f2f3e0e3a817edbd$var$isLeapYear(year) {
  return (14 + 11 * year) % 30 < 11;
}
var $f2f3e0e3a817edbd$export$2066795aadd37bfc = class {
  fromJulianDay(jd) {
    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);
  }
  toJulianDay(date) {
    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);
  }
  getDaysInMonth(date) {
    let length3 = 29 + date.month % 2;
    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year))
      length3++;
    return length3;
  }
  getMonthsInYear() {
    return 12;
  }
  getDaysInYear(date) {
    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;
  }
  getYearsInEra() {
    return 9665;
  }
  getEras() {
    return [
      "AH"
    ];
  }
  constructor() {
    this.identifier = "islamic-civil";
  }
};
var $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 = class extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {
  fromJulianDay(jd) {
    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);
  }
  toJulianDay(date) {
    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);
  }
  constructor(...args) {
    super(...args);
    this.identifier = "islamic-tbla";
  }
};
var $f2f3e0e3a817edbd$var$UMALQURA_DATA = "qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=";
var $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;
var $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;
function $f2f3e0e3a817edbd$var$umalquraYearStart(year) {
  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
}
function $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {
  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;
  let mask = 1 << 11 - (month - 1);
  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0)
    return 29;
  else
    return 30;
}
function $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {
  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);
  for (let i2 = 1; i2 < month; i2++)
    day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i2);
  return day;
}
function $f2f3e0e3a817edbd$var$umalquraYearLength(year) {
  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
}
var $f2f3e0e3a817edbd$export$5baab4758c231076 = class extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {
  fromJulianDay(jd) {
    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;
    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);
    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);
    if (days < startDays || days > endDays)
      return super.fromJulianDay(jd);
    else {
      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;
      let m3 = 1;
      let d = 1;
      while (d > 0) {
        y++;
        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;
        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);
        if (d === yearLength) {
          m3 = 12;
          break;
        } else if (d < yearLength) {
          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m3);
          m3 = 1;
          while (d > monthLength) {
            d -= monthLength;
            m3++;
            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m3);
          }
          break;
        }
      }
      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m3, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m3) + 1);
    }
  }
  toJulianDay(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END)
      return super.toJulianDay(date);
    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);
  }
  getDaysInMonth(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END)
      return super.getDaysInMonth(date);
    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);
  }
  getDaysInYear(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END)
      return super.getDaysInYear(date);
    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);
  }
  constructor() {
    super();
    this.identifier = "islamic-umalqura";
    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH)
      $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), (c2) => c2.charCodeAt(0)).buffer);
    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {
      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);
      let yearStart = 0;
      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {
        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;
        for (let i2 = 1; i2 <= 12; i2++)
          yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i2);
      }
    }
  }
};
var $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;
var $7c5f6fbf42389787$var$HOUR_PARTS = 1080;
var $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;
var $7c5f6fbf42389787$var$MONTH_DAYS = 29;
var $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;
var $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;
function $7c5f6fbf42389787$var$isLeapYear(year) {
  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;
}
function $7c5f6fbf42389787$var$hebrewDelay1(year) {
  let months2 = Math.floor((235 * year - 234) / 19);
  let parts = 12084 + 13753 * months2;
  let day = months2 * 29 + Math.floor(parts / 25920);
  if ((0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3)
    day += 1;
  return day;
}
function $7c5f6fbf42389787$var$hebrewDelay2(year) {
  let last2 = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);
  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);
  let next2 = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);
  if (next2 - present === 356)
    return 2;
  if (present - last2 === 382)
    return 1;
  return 0;
}
function $7c5f6fbf42389787$var$startOfYear(year) {
  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);
}
function $7c5f6fbf42389787$var$getDaysInYear(year) {
  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);
}
function $7c5f6fbf42389787$var$getYearType(year) {
  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);
  if (yearLength > 380)
    yearLength -= 30;
  switch (yearLength) {
    case 353:
      return 0;
    case 354:
      return 1;
    case 355:
      return 2;
  }
}
function $7c5f6fbf42389787$var$getDaysInMonth(year, month) {
  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year))
    month++;
  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13)
    return 29;
  let yearType = $7c5f6fbf42389787$var$getYearType(year);
  if (month === 2)
    return yearType === 2 ? 30 : 29;
  if (month === 3)
    return yearType === 0 ? 29 : 30;
  if (month === 6)
    return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;
  return 30;
}
var $7c5f6fbf42389787$export$ca405048b8fb5af = class {
  fromJulianDay(jd) {
    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;
    let m3 = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS;
    let year = Math.floor((19 * m3 + 234) / 235) + 1;
    let ys = $7c5f6fbf42389787$var$startOfYear(year);
    let dayOfYear = Math.floor(d - ys);
    while (dayOfYear < 1) {
      year--;
      ys = $7c5f6fbf42389787$var$startOfYear(year);
      dayOfYear = Math.floor(d - ys);
    }
    let month = 1;
    let monthStart = 0;
    while (monthStart < dayOfYear) {
      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);
      month++;
    }
    month--;
    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);
    let day = dayOfYear - monthStart;
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);
  }
  toJulianDay(date) {
    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);
    for (let month = 1; month < date.month; month++)
      jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);
    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;
  }
  getDaysInMonth(date) {
    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);
  }
  getMonthsInYear(date) {
    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;
  }
  getDaysInYear(date) {
    return $7c5f6fbf42389787$var$getDaysInYear(date.year);
  }
  getYearsInEra() {
    return 9999;
  }
  getEras() {
    return [
      "AM"
    ];
  }
  balanceYearMonth(date, previousDate) {
    if (previousDate.year !== date.year) {
      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6)
        date.month--;
      else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6)
        date.month++;
    }
  }
  constructor() {
    this.identifier = "hebrew";
  }
};
var $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;
var $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;
var $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;
function $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {
  return epoch + 365 * year + Math.floor(year / 4) + 30 * (month - 1) + day - 1;
}
function $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {
  let year = Math.floor(4 * (jd - epoch) / 1461);
  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);
  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);
  return [
    year,
    month,
    day
  ];
}
function $b956b2d7a6cf451f$var$getLeapDay(year) {
  return Math.floor(year % 4 / 3);
}
function $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {
  if (month % 13 !== 0)
    return 30;
  else
    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;
}
var $b956b2d7a6cf451f$export$26ba6eab5e20cd7d = class {
  fromJulianDay(jd) {
    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
    let era = "AM";
    if (year <= 0) {
      era = "AA";
      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    }
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);
  }
  toJulianDay(date) {
    let year = date.year;
    if (date.era === "AA")
      year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);
  }
  getDaysInMonth(date) {
    return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);
  }
  getMonthsInYear() {
    return 13;
  }
  getDaysInYear(date) {
    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);
  }
  getYearsInEra(date) {
    return date.era === "AA" ? 9999 : 9991;
  }
  getEras() {
    return [
      "AA",
      "AM"
    ];
  }
  constructor() {
    this.identifier = "ethiopic";
  }
};
var $b956b2d7a6cf451f$export$d72e0c37005a4914 = class extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
  fromJulianDay(jd) {
    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
    year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, "AA", year, month, day);
  }
  getEras() {
    return [
      "AA"
    ];
  }
  getYearsInEra() {
    return 9999;
  }
  constructor(...args) {
    super(...args);
    this.identifier = "ethioaa";
  }
};
var $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 = class extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
  fromJulianDay(jd) {
    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);
    let era = "CE";
    if (year <= 0) {
      era = "BCE";
      year = 1 - year;
    }
    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);
  }
  toJulianDay(date) {
    let year = date.year;
    if (date.era === "BCE")
      year = 1 - year;
    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);
  }
  getDaysInMonth(date) {
    let year = date.year;
    if (date.era === "BCE")
      year = 1 - year;
    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);
  }
  isInverseEra(date) {
    return date.era === "BCE";
  }
  balanceDate(date) {
    if (date.year <= 0) {
      date.era = date.era === "BCE" ? "CE" : "BCE";
      date.year = 1 - date.year;
    }
  }
  getEras() {
    return [
      "BCE",
      "CE"
    ];
  }
  getYearsInEra(date) {
    return date.era === "BCE" ? 9999 : 9715;
  }
  constructor(...args) {
    super(...args);
    this.identifier = "coptic";
  }
};
function $64244302c3013299$export$dd0bbc9b26defe37(name) {
  switch (name) {
    case "buddhist":
      return new (0, $8d73d47422ca7302$export$42d20a78301dee44)();
    case "ethiopic":
      return new (0, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();
    case "ethioaa":
      return new (0, $b956b2d7a6cf451f$export$d72e0c37005a4914)();
    case "coptic":
      return new (0, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();
    case "hebrew":
      return new (0, $7c5f6fbf42389787$export$ca405048b8fb5af)();
    case "indian":
      return new (0, $82c358003bdda0a8$export$39f31c639fa15726)();
    case "islamic-civil":
      return new (0, $f2f3e0e3a817edbd$export$2066795aadd37bfc)();
    case "islamic-tbla":
      return new (0, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();
    case "islamic-umalqura":
      return new (0, $f2f3e0e3a817edbd$export$5baab4758c231076)();
    case "japanese":
      return new (0, $62225008020f0a13$export$b746ab2b60cdffbf)();
    case "persian":
      return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();
    case "roc":
      return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();
    case "gregory":
    default:
      return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();
  }
}
var $fb18d541ea1ad717$var$formatterCache = /* @__PURE__ */ new Map();
var $fb18d541ea1ad717$export$ad991b66133851cf = class {
  /** Formats a date as a string according to the locale and format options passed to the constructor. */
  format(value) {
    return this.formatter.format(value);
  }
  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */
  formatToParts(value) {
    return this.formatter.formatToParts(value);
  }
  /** Formats a date range as a string. */
  formatRange(start2, end2) {
    if (typeof this.formatter.formatRange === "function")
      return this.formatter.formatRange(start2, end2);
    if (end2 < start2)
      throw new RangeError("End date must be >= start date");
    return `${this.formatter.format(start2)} – ${this.formatter.format(end2)}`;
  }
  /** Formats a date range as an array of parts. */
  formatRangeToParts(start2, end2) {
    if (typeof this.formatter.formatRangeToParts === "function")
      return this.formatter.formatRangeToParts(start2, end2);
    if (end2 < start2)
      throw new RangeError("End date must be >= start date");
    let startParts = this.formatter.formatToParts(start2);
    let endParts = this.formatter.formatToParts(end2);
    return [
      ...startParts.map((p) => ({
        ...p,
        source: "startRange"
      })),
      {
        type: "literal",
        value: " – ",
        source: "shared"
      },
      ...endParts.map((p) => ({
        ...p,
        source: "endRange"
      }))
    ];
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */
  resolvedOptions() {
    let resolvedOptions = this.formatter.resolvedOptions();
    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
      if (!this.resolvedHourCycle)
        this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
      resolvedOptions.hourCycle = this.resolvedHourCycle;
      resolvedOptions.hour12 = this.resolvedHourCycle === "h11" || this.resolvedHourCycle === "h12";
    }
    if (resolvedOptions.calendar === "ethiopic-amete-alem")
      resolvedOptions.calendar = "ethioaa";
    return resolvedOptions;
  }
  constructor(locale, options2 = {}) {
    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options2);
    this.options = options2;
  }
};
var $fb18d541ea1ad717$var$hour12Preferences = {
  true: {
    // Only Japanese uses the h11 style for 12 hour time. All others use h12.
    ja: "h11"
  },
  false: {}
};
function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options2 = {}) {
  if (typeof options2.hour12 === "boolean" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
    options2 = {
      ...options2
    };
    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options2.hour12)][locale.split("-")[0]];
    let defaultHourCycle = options2.hour12 ? "h12" : "h23";
    options2.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
    delete options2.hour12;
  }
  let cacheKey = locale + (options2 ? Object.entries(options2).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey))
    return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.DateTimeFormat(locale, options2);
  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
var $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;
function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null)
    $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat("en-US", {
      hour: "numeric",
      hour12: false
    }).format(new Date(2020, 2, 3, 0)) === "24";
  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
}
var $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;
function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null)
    $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat("fr", {
      hour: "numeric",
      hour12: false
    }).resolvedOptions().hourCycle === "h12";
  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
}
function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options2) {
  if (!options2.timeStyle && !options2.hour)
    return void 0;
  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, "");
  locale += (locale.includes("-u-") ? "" : "-u") + "-nu-latn";
  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {
    ...options2,
    timeZone: void 0
    // use local timezone
  });
  let min3 = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p) => p.type === "hour").value, 10);
  let max3 = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p) => p.type === "hour").value, 10);
  if (min3 === 0 && max3 === 23)
    return "h23";
  if (min3 === 24 && max3 === 23)
    return "h24";
  if (min3 === 0 && max3 === 11)
    return "h11";
  if (min3 === 12 && max3 === 11)
    return "h12";
  throw new Error("Unexpected hour cycle result");
}

// node_modules/@internationalized/number/dist/import.mjs
var $488c6ddbf4ef74c2$var$formatterCache = /* @__PURE__ */ new Map();
var $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
try {
  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
    signDisplay: "exceptZero"
  }).resolvedOptions().signDisplay === "exceptZero";
} catch (e) {
}
var $488c6ddbf4ef74c2$var$supportsUnit = false;
try {
  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat("de-DE", {
    style: "unit",
    unit: "degree"
  }).resolvedOptions().style === "unit";
} catch (e) {
}
var $488c6ddbf4ef74c2$var$UNITS = {
  degree: {
    narrow: {
      default: "°",
      "ja-JP": " 度",
      "zh-TW": "度",
      "sl-SI": " °"
    }
  }
};
var $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = class {
  /** Formats a number value as a string, according to the locale and options provided to the constructor. */
  format(value) {
    let res = "";
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
      res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
    else
      res = this.numberFormatter.format(value);
    if (this.options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
      var _UNITS_unit;
      let { unit, unitDisplay = "short", locale } = this.resolvedOptions();
      if (!unit)
        return res;
      let values2 = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];
      res += values2[locale] || values2.default;
    }
    return res;
  }
  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */
  formatToParts(value) {
    return this.numberFormatter.formatToParts(value);
  }
  /** Formats a number range as a string. */
  formatRange(start2, end2) {
    if (typeof this.numberFormatter.formatRange === "function")
      return this.numberFormatter.formatRange(start2, end2);
    if (end2 < start2)
      throw new RangeError("End date must be >= start date");
    return `${this.format(start2)} – ${this.format(end2)}`;
  }
  /** Formats a number range as an array of parts. */
  formatRangeToParts(start2, end2) {
    if (typeof this.numberFormatter.formatRangeToParts === "function")
      return this.numberFormatter.formatRangeToParts(start2, end2);
    if (end2 < start2)
      throw new RangeError("End date must be >= start date");
    let startParts = this.numberFormatter.formatToParts(start2);
    let endParts = this.numberFormatter.formatToParts(end2);
    return [
      ...startParts.map((p) => ({
        ...p,
        source: "startRange"
      })),
      {
        type: "literal",
        value: " – ",
        source: "shared"
      },
      ...endParts.map((p) => ({
        ...p,
        source: "endRange"
      }))
    ];
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */
  resolvedOptions() {
    let options2 = this.numberFormatter.resolvedOptions();
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
      options2 = {
        ...options2,
        signDisplay: this.options.signDisplay
      };
    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === "unit")
      options2 = {
        ...options2,
        style: "unit",
        unit: this.options.unit,
        unitDisplay: this.options.unitDisplay
      };
    return options2;
  }
  constructor(locale, options2 = {}) {
    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options2);
    this.options = options2;
  }
};
function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options2 = {}) {
  let { numberingSystem } = options2;
  if (numberingSystem && locale.includes("-nu-")) {
    if (!locale.includes("-u-"))
      locale += "-u-";
    locale += `-nu-${numberingSystem}`;
  }
  if (options2.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
    var _UNITS_unit;
    let { unit, unitDisplay = "short" } = options2;
    if (!unit)
      throw new Error('unit option must be provided with style: "unit"');
    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay]))
      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
    options2 = {
      ...options2,
      style: "decimal"
    };
  }
  let cacheKey = locale + (options2 ? Object.entries(options2).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey))
    return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.NumberFormat(locale, options2);
  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
  if (signDisplay === "auto")
    return numberFormat.format(num);
  else if (signDisplay === "never")
    return numberFormat.format(Math.abs(num));
  else {
    let needsPositiveSign = false;
    if (signDisplay === "always")
      needsPositiveSign = num > 0 || Object.is(num, 0);
    else if (signDisplay === "exceptZero") {
      if (Object.is(num, -0) || Object.is(num, 0))
        num = Math.abs(num);
      else
        needsPositiveSign = num > 0;
    }
    if (needsPositiveSign) {
      let negative = numberFormat.format(-num);
      let noSign = numberFormat.format(num);
      let minus = negative.replace(noSign, "").replace(/\u200e|\u061C/, "");
      if ([
        ...minus
      ].length !== 1)
        console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
      let positive = negative.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
      return positive;
    } else
      return numberFormat.format(num);
  }
}
var $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");
var $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [
  "latn",
  "arab",
  "hanidec"
];
var $6c7bd7858deea686$export$cd11ab140839f11d = class {
  /**
  * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
  */
  parse(value) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
  }
  /**
  * Returns whether the given string could potentially be a valid number. This should be used to
  * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
  * of the minus/plus sign characters can be checked.
  */
  isValidPartialNumber(value, minValue, maxValue) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
  }
  /**
  * Returns a numbering system for which the given string is valid in the current locale.
  * If no numbering system could be detected, the default numbering system for the current
  * locale is returned.
  */
  getNumberingSystem(value) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
  }
  constructor(locale, options2 = {}) {
    this.locale = locale;
    this.options = options2;
  }
};
var $6c7bd7858deea686$var$numberParserCache = /* @__PURE__ */ new Map();
function $6c7bd7858deea686$var$getNumberParserImpl(locale, options2, value) {
  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options2);
  if (!locale.includes("-nu-") && !defaultParser.isValidPartialNumber(value)) {
    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS)
      if (numberingSystem !== defaultParser.options.numberingSystem) {
        let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes("-u-") ? "-nu-" : "-u-nu-") + numberingSystem, options2);
        if (parser.isValidPartialNumber(value))
          return parser;
      }
  }
  return defaultParser;
}
function $6c7bd7858deea686$var$getCachedNumberParser(locale, options2) {
  let cacheKey = locale + (options2 ? Object.entries(options2).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);
  if (!parser) {
    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options2);
    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);
  }
  return parser;
}
var $6c7bd7858deea686$var$NumberParserImpl = class {
  parse(value) {
    let fullySanitizedValue = this.sanitize(value);
    if (this.symbols.group)
      fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, "");
    if (this.symbols.decimal)
      fullySanitizedValue = fullySanitizedValue.replace(this.symbols.decimal, ".");
    if (this.symbols.minusSign)
      fullySanitizedValue = fullySanitizedValue.replace(this.symbols.minusSign, "-");
    fullySanitizedValue = fullySanitizedValue.replace(this.symbols.numeral, this.symbols.index);
    if (this.options.style === "percent") {
      let isNegative = fullySanitizedValue.indexOf("-");
      fullySanitizedValue = fullySanitizedValue.replace("-", "");
      let index5 = fullySanitizedValue.indexOf(".");
      if (index5 === -1)
        index5 = fullySanitizedValue.length;
      fullySanitizedValue = fullySanitizedValue.replace(".", "");
      if (index5 - 2 === 0)
        fullySanitizedValue = `0.${fullySanitizedValue}`;
      else if (index5 - 2 === -1)
        fullySanitizedValue = `0.0${fullySanitizedValue}`;
      else if (index5 - 2 === -2)
        fullySanitizedValue = "0.00";
      else
        fullySanitizedValue = `${fullySanitizedValue.slice(0, index5 - 2)}.${fullySanitizedValue.slice(index5 - 2)}`;
      if (isNegative > -1)
        fullySanitizedValue = `-${fullySanitizedValue}`;
    }
    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
    if (isNaN(newValue))
      return NaN;
    if (this.options.style === "percent") {
      let options2 = {
        ...this.options,
        style: "decimal",
        minimumFractionDigits: Math.min(this.options.minimumFractionDigits + 2, 20),
        maximumFractionDigits: Math.min(this.options.maximumFractionDigits + 2, 20)
      };
      return new $6c7bd7858deea686$export$cd11ab140839f11d(this.locale, options2).parse(new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(this.locale, options2).format(newValue));
    }
    if (this.options.currencySign === "accounting" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value))
      newValue = -1 * newValue;
    return newValue;
  }
  sanitize(value) {
    value = value.replace(this.symbols.literals, "");
    if (this.symbols.minusSign)
      value = value.replace("-", this.symbols.minusSign);
    if (this.options.numberingSystem === "arab") {
      if (this.symbols.decimal) {
        value = value.replace(",", this.symbols.decimal);
        value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
      }
      if (this.symbols.group)
        value = $6c7bd7858deea686$var$replaceAll(value, ".", this.symbols.group);
    }
    if (this.options.locale === "fr-FR")
      value = $6c7bd7858deea686$var$replaceAll(value, ".", String.fromCharCode(8239));
    return value;
  }
  isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {
    value = this.sanitize(value);
    if (this.symbols.minusSign && value.startsWith(this.symbols.minusSign) && minValue < 0)
      value = value.slice(this.symbols.minusSign.length);
    else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0)
      value = value.slice(this.symbols.plusSign.length);
    if (this.symbols.group && value.startsWith(this.symbols.group))
      return false;
    if (this.symbols.decimal && value.indexOf(this.symbols.decimal) > -1 && this.options.maximumFractionDigits === 0)
      return false;
    if (this.symbols.group)
      value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, "");
    value = value.replace(this.symbols.numeral, "");
    if (this.symbols.decimal)
      value = value.replace(this.symbols.decimal, "");
    return value.length === 0;
  }
  constructor(locale, options2 = {}) {
    this.locale = locale;
    this.formatter = new Intl.NumberFormat(locale, options2);
    this.options = this.formatter.resolvedOptions();
    this.symbols = $6c7bd7858deea686$var$getSymbols(locale, this.formatter, this.options, options2);
    var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
    if (this.options.style === "percent" && (((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) > 18 || ((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) > 18))
      console.warn("NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.");
  }
};
var $6c7bd7858deea686$var$nonLiteralParts = /* @__PURE__ */ new Set([
  "decimal",
  "fraction",
  "integer",
  "minusSign",
  "plusSign",
  "group"
]);
var $6c7bd7858deea686$var$pluralNumbers = [
  0,
  4,
  2,
  1,
  11,
  20,
  3,
  7,
  100,
  21,
  0.1,
  1.1
];
function $6c7bd7858deea686$var$getSymbols(locale, formatter, intlOptions, originalOptions) {
  var _allParts_find, _posAllParts_find, _decimalParts_find, _allParts_find1;
  let symbolFormatter = new Intl.NumberFormat(locale, {
    ...intlOptions,
    minimumSignificantDigits: 1,
    maximumSignificantDigits: 21
  });
  let allParts = symbolFormatter.formatToParts(-10000.111);
  let posAllParts = symbolFormatter.formatToParts(10000.111);
  let pluralParts = $6c7bd7858deea686$var$pluralNumbers.map((n3) => symbolFormatter.formatToParts(n3));
  var _allParts_find_value;
  let minusSign = (_allParts_find_value = (_allParts_find = allParts.find((p) => p.type === "minusSign")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : "-";
  let plusSign = (_posAllParts_find = posAllParts.find((p) => p.type === "plusSign")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;
  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "exceptZero" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "always"))
    plusSign = "+";
  let decimalParts = new Intl.NumberFormat(locale, {
    ...intlOptions,
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).formatToParts(1e-3);
  let decimal = (_decimalParts_find = decimalParts.find((p) => p.type === "decimal")) === null || _decimalParts_find === void 0 ? void 0 : _decimalParts_find.value;
  let group = (_allParts_find1 = allParts.find((p) => p.type === "group")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;
  let allPartsLiterals = allParts.filter((p) => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map((p) => $6c7bd7858deea686$var$escapeRegex(p.value));
  let pluralPartsLiterals = pluralParts.flatMap((p) => p.filter((p2) => !$6c7bd7858deea686$var$nonLiteralParts.has(p2.type)).map((p2) => $6c7bd7858deea686$var$escapeRegex(p2.value)));
  let sortedLiterals = [
    .../* @__PURE__ */ new Set([
      ...allPartsLiterals,
      ...pluralPartsLiterals
    ])
  ].sort((a2, b2) => b2.length - a2.length);
  let literals = sortedLiterals.length === 0 ? new RegExp("[\\p{White_Space}]", "gu") : new RegExp(`${sortedLiterals.join("|")}|[\\p{White_Space}]`, "gu");
  let numerals = [
    ...new Intl.NumberFormat(intlOptions.locale, {
      useGrouping: false
    }).format(9876543210)
  ].reverse();
  let indexes = new Map(numerals.map((d, i2) => [
    d,
    i2
  ]));
  let numeral = new RegExp(`[${numerals.join("")}]`, "g");
  let index5 = (d) => String(indexes.get(d));
  return {
    minusSign,
    plusSign,
    decimal,
    group,
    literals,
    numeral,
    index: index5
  };
}
function $6c7bd7858deea686$var$replaceAll(str, find2, replace3) {
  if (str.replaceAll)
    return str.replaceAll(find2, replace3);
  return str.split(find2).join(replace3);
}
function $6c7bd7858deea686$var$escapeRegex(string2) {
  return string2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

// node_modules/@react-aria/i18n/dist/real-module.mjs
var $148a7a147e38ea7f$var$RTL_SCRIPTS = /* @__PURE__ */ new Set([
  "Arab",
  "Syrc",
  "Samr",
  "Mand",
  "Thaa",
  "Mend",
  "Nkoo",
  "Adlm",
  "Rohg",
  "Hebr"
]);
var $148a7a147e38ea7f$var$RTL_LANGS = /* @__PURE__ */ new Set([
  "ae",
  "ar",
  "arc",
  "bcc",
  "bqi",
  "ckb",
  "dv",
  "fa",
  "glk",
  "he",
  "ku",
  "mzn",
  "nqo",
  "pnb",
  "ps",
  "sd",
  "ug",
  "ur",
  "yi"
]);
function $148a7a147e38ea7f$export$702d680b21cbd764(localeString) {
  if (Intl.Locale) {
    let locale = new Intl.Locale(localeString).maximize();
    let textInfo = typeof locale.getTextInfo === "function" ? locale.getTextInfo() : locale.textInfo;
    if (textInfo)
      return textInfo.direction === "rtl";
    if (locale.script)
      return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(locale.script);
  }
  let lang = localeString.split("-")[0];
  return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}
var $1e5a04cdaf7d1af8$var$localeSymbol = Symbol.for("react-aria.i18n.locale");
function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
  let locale = typeof window !== "undefined" && window[$1e5a04cdaf7d1af8$var$localeSymbol] || typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
  try {
    Intl.DateTimeFormat.supportedLocalesOf([
      locale
    ]);
  } catch (_err) {
    locale = "en-US";
  }
  return {
    locale,
    direction: (0, $148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
  };
}
var $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
var $1e5a04cdaf7d1af8$var$listeners = /* @__PURE__ */ new Set();
function $1e5a04cdaf7d1af8$var$updateLocale() {
  $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  for (let listener of $1e5a04cdaf7d1af8$var$listeners)
    listener($1e5a04cdaf7d1af8$var$currentLocale);
}
function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
  let isSSR = (0, $b5e257d569688ac6$export$535bd6ca7f90a273)();
  let [defaultLocale, setDefaultLocale] = (0, import_react231.useState)($1e5a04cdaf7d1af8$var$currentLocale);
  (0, import_react231.useEffect)(() => {
    if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
      window.addEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
    $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
    return () => {
      $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
      if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
        window.removeEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
    };
  }, []);
  if (isSSR)
    return {
      locale: "en-US",
      direction: "ltr"
    };
  return defaultLocale;
}
var $18f2051aff69b9bf$var$I18nContext = (0, import_react231.default).createContext(null);
function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
  let defaultLocale = (0, $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
  let context2 = (0, import_react231.useContext)($18f2051aff69b9bf$var$I18nContext);
  return context2 || defaultLocale;
}
var $fca6afa0e843324b$var$cache = /* @__PURE__ */ new WeakMap();
function $fca6afa0e843324b$var$getCachedDictionary(strings) {
  let dictionary = $fca6afa0e843324b$var$cache.get(strings);
  if (!dictionary) {
    dictionary = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)(strings);
    $fca6afa0e843324b$var$cache.set(strings, dictionary);
  }
  return dictionary;
}
function $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName) {
  return packageName && (0, $5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage(packageName) || $fca6afa0e843324b$var$getCachedDictionary(strings);
}
function $fca6afa0e843324b$export$f12b703ca79dfbb1(strings, packageName) {
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let dictionary = $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName);
  return (0, import_react231.useMemo)(() => new (0, $6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, dictionary), [
    locale,
    dictionary
  ]);
}
function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options2) {
  options2 = (0, $5a387cc49350e6db$export$722debc0e56fea39)(options2 !== null && options2 !== void 0 ? options2 : {}, $896ba0a80a8f4d36$var$isEqual);
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  return (0, import_react231.useMemo)(() => new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, options2), [
    locale,
    options2
  ]);
}
function $896ba0a80a8f4d36$var$isEqual(a2, b2) {
  if (a2 === b2)
    return true;
  let aKeys = Object.keys(a2);
  let bKeys = Object.keys(b2);
  if (aKeys.length !== bKeys.length)
    return false;
  for (let key2 of aKeys) {
    if (b2[key2] !== a2[key2])
      return false;
  }
  return true;
}
var $325a3faab7a68acd$var$cache = /* @__PURE__ */ new Map();
function $325a3faab7a68acd$export$a16aca283550c30d(options2) {
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let cacheKey = locale + (options2 ? Object.entries(options2).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  if ($325a3faab7a68acd$var$cache.has(cacheKey))
    return $325a3faab7a68acd$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options2);
  $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
  return formatter;
}
function $bb77f239b46e8c72$export$3274cf84b703fff(options2) {
  let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)({
    usage: "search",
    ...options2
  });
  let startsWith4 = (0, import_react231.useCallback)((string2, substring) => {
    if (substring.length === 0)
      return true;
    string2 = string2.normalize("NFC");
    substring = substring.normalize("NFC");
    return collator.compare(string2.slice(0, substring.length), substring) === 0;
  }, [
    collator
  ]);
  let endsWith = (0, import_react231.useCallback)((string2, substring) => {
    if (substring.length === 0)
      return true;
    string2 = string2.normalize("NFC");
    substring = substring.normalize("NFC");
    return collator.compare(string2.slice(-substring.length), substring) === 0;
  }, [
    collator
  ]);
  let contains7 = (0, import_react231.useCallback)((string2, substring) => {
    if (substring.length === 0)
      return true;
    string2 = string2.normalize("NFC");
    substring = substring.normalize("NFC");
    let scan = 0;
    let sliceLen = substring.length;
    for (; scan + sliceLen <= string2.length; scan++) {
      let slice2 = string2.slice(scan, scan + sliceLen);
      if (collator.compare(substring, slice2) === 0)
        return true;
    }
    return false;
  }, [
    collator
  ]);
  return (0, import_react231.useMemo)(() => ({
    startsWith: startsWith4,
    endsWith,
    contains: contains7
  }), [
    startsWith4,
    endsWith,
    contains7
  ]);
}

// node_modules/@formatjs/icu-messageformat-parser/lib/error.js
var ErrorKind;
(function(ErrorKind2) {
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
  ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
  ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
  ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
  ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
  ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
  ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind || (ErrorKind = {}));

// node_modules/@formatjs/icu-messageformat-parser/lib/types.js
var TYPE;
(function(TYPE2) {
  TYPE2[TYPE2["literal"] = 0] = "literal";
  TYPE2[TYPE2["argument"] = 1] = "argument";
  TYPE2[TYPE2["number"] = 2] = "number";
  TYPE2[TYPE2["date"] = 3] = "date";
  TYPE2[TYPE2["time"] = 4] = "time";
  TYPE2[TYPE2["select"] = 5] = "select";
  TYPE2[TYPE2["plural"] = 6] = "plural";
  TYPE2[TYPE2["pound"] = 7] = "pound";
  TYPE2[TYPE2["tag"] = 8] = "tag";
})(TYPE || (TYPE = {}));
var SKELETON_TYPE;
(function(SKELETON_TYPE2) {
  SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
  SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE || (SKELETON_TYPE = {}));
function isLiteralElement(el) {
  return el.type === TYPE.literal;
}
function isArgumentElement(el) {
  return el.type === TYPE.argument;
}
function isNumberElement(el) {
  return el.type === TYPE.number;
}
function isDateElement(el) {
  return el.type === TYPE.date;
}
function isTimeElement(el) {
  return el.type === TYPE.time;
}
function isSelectElement(el) {
  return el.type === TYPE.select;
}
function isPluralElement(el) {
  return el.type === TYPE.plural;
}
function isPoundElement(el) {
  return el.type === TYPE.pound;
}
function isTagElement(el) {
  return el.type === TYPE.tag;
}
function isNumberSkeleton(el) {
  return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
}
function isDateTimeSkeleton(el) {
  return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
}

// node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

// node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
function parseDateTimeSkeleton(skeleton) {
  var result = {};
  skeleton.replace(DATE_TIME_REGEX, function(match4) {
    var len = match4.length;
    switch (match4[0]) {
      case "G":
        result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
        break;
      case "y":
        result.year = len === 2 ? "2-digit" : "numeric";
        break;
      case "Y":
      case "u":
      case "U":
      case "r":
        throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
      case "q":
      case "Q":
        throw new RangeError("`q/Q` (quarter) patterns are not supported");
      case "M":
      case "L":
        result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
        break;
      case "w":
      case "W":
        throw new RangeError("`w/W` (week) patterns are not supported");
      case "d":
        result.day = ["numeric", "2-digit"][len - 1];
        break;
      case "D":
      case "F":
      case "g":
        throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
      case "E":
        result.weekday = len === 4 ? "long" : len === 5 ? "narrow" : "short";
        break;
      case "e":
        if (len < 4) {
          throw new RangeError("`e..eee` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "c":
        if (len < 4) {
          throw new RangeError("`c..ccc` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "a":
        result.hour12 = true;
        break;
      case "b":
      case "B":
        throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
      case "h":
        result.hourCycle = "h12";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "H":
        result.hourCycle = "h23";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "K":
        result.hourCycle = "h11";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "k":
        result.hourCycle = "h24";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "j":
      case "J":
      case "C":
        throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
      case "m":
        result.minute = ["numeric", "2-digit"][len - 1];
        break;
      case "s":
        result.second = ["numeric", "2-digit"][len - 1];
        break;
      case "S":
      case "A":
        throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
      case "z":
        result.timeZoneName = len < 4 ? "short" : "long";
        break;
      case "Z":
      case "O":
      case "v":
      case "V":
      case "X":
      case "x":
        throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
    }
    return "";
  });
  return result;
}

// node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

// node_modules/@formatjs/icu-skeleton-parser/lib/number.js
function parseNumberSkeletonFromString(skeleton) {
  if (skeleton.length === 0) {
    throw new Error("Number skeleton cannot be empty");
  }
  var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function(x) {
    return x.length > 0;
  });
  var tokens2 = [];
  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
    var stringToken = stringTokens_1[_i];
    var stemAndOptions = stringToken.split("/");
    if (stemAndOptions.length === 0) {
      throw new Error("Invalid number skeleton");
    }
    var stem = stemAndOptions[0], options2 = stemAndOptions.slice(1);
    for (var _a9 = 0, options_1 = options2; _a9 < options_1.length; _a9++) {
      var option = options_1[_a9];
      if (option.length === 0) {
        throw new Error("Invalid number skeleton");
      }
    }
    tokens2.push({ stem, options: options2 });
  }
  return tokens2;
}
function icuUnitToEcma(unit) {
  return unit.replace(/^(.*?)-/, "");
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
  var result = {};
  if (str[str.length - 1] === "r") {
    result.roundingPriority = "morePrecision";
  } else if (str[str.length - 1] === "s") {
    result.roundingPriority = "lessPrecision";
  }
  str.replace(SIGNIFICANT_PRECISION_REGEX, function(_, g1, g2) {
    if (typeof g2 !== "string") {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length;
    } else if (g2 === "+") {
      result.minimumSignificantDigits = g1.length;
    } else if (g1[0] === "#") {
      result.maximumSignificantDigits = g1.length;
    } else {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length + (typeof g2 === "string" ? g2.length : 0);
    }
    return "";
  });
  return result;
}
function parseSign(str) {
  switch (str) {
    case "sign-auto":
      return {
        signDisplay: "auto"
      };
    case "sign-accounting":
    case "()":
      return {
        currencySign: "accounting"
      };
    case "sign-always":
    case "+!":
      return {
        signDisplay: "always"
      };
    case "sign-accounting-always":
    case "()!":
      return {
        signDisplay: "always",
        currencySign: "accounting"
      };
    case "sign-except-zero":
    case "+?":
      return {
        signDisplay: "exceptZero"
      };
    case "sign-accounting-except-zero":
    case "()?":
      return {
        signDisplay: "exceptZero",
        currencySign: "accounting"
      };
    case "sign-never":
    case "+_":
      return {
        signDisplay: "never"
      };
  }
}
function parseConciseScientificAndEngineeringStem(stem) {
  var result;
  if (stem[0] === "E" && stem[1] === "E") {
    result = {
      notation: "engineering"
    };
    stem = stem.slice(2);
  } else if (stem[0] === "E") {
    result = {
      notation: "scientific"
    };
    stem = stem.slice(1);
  }
  if (result) {
    var signDisplay = stem.slice(0, 2);
    if (signDisplay === "+!") {
      result.signDisplay = "always";
      stem = stem.slice(2);
    } else if (signDisplay === "+?") {
      result.signDisplay = "exceptZero";
      stem = stem.slice(2);
    }
    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
      throw new Error("Malformed concise eng/scientific notation");
    }
    result.minimumIntegerDigits = stem.length;
  }
  return result;
}
function parseNotationOptions(opt) {
  var result = {};
  var signOpts = parseSign(opt);
  if (signOpts) {
    return signOpts;
  }
  return result;
}
function parseNumberSkeleton(tokens2) {
  var result = {};
  for (var _i = 0, tokens_1 = tokens2; _i < tokens_1.length; _i++) {
    var token2 = tokens_1[_i];
    switch (token2.stem) {
      case "percent":
      case "%":
        result.style = "percent";
        continue;
      case "%x100":
        result.style = "percent";
        result.scale = 100;
        continue;
      case "currency":
        result.style = "currency";
        result.currency = token2.options[0];
        continue;
      case "group-off":
      case ",_":
        result.useGrouping = false;
        continue;
      case "precision-integer":
      case ".":
        result.maximumFractionDigits = 0;
        continue;
      case "measure-unit":
      case "unit":
        result.style = "unit";
        result.unit = icuUnitToEcma(token2.options[0]);
        continue;
      case "compact-short":
      case "K":
        result.notation = "compact";
        result.compactDisplay = "short";
        continue;
      case "compact-long":
      case "KK":
        result.notation = "compact";
        result.compactDisplay = "long";
        continue;
      case "scientific":
        result = __assign(__assign(__assign({}, result), { notation: "scientific" }), token2.options.reduce(function(all2, opt2) {
          return __assign(__assign({}, all2), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "engineering":
        result = __assign(__assign(__assign({}, result), { notation: "engineering" }), token2.options.reduce(function(all2, opt2) {
          return __assign(__assign({}, all2), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "notation-simple":
        result.notation = "standard";
        continue;
      case "unit-width-narrow":
        result.currencyDisplay = "narrowSymbol";
        result.unitDisplay = "narrow";
        continue;
      case "unit-width-short":
        result.currencyDisplay = "code";
        result.unitDisplay = "short";
        continue;
      case "unit-width-full-name":
        result.currencyDisplay = "name";
        result.unitDisplay = "long";
        continue;
      case "unit-width-iso-code":
        result.currencyDisplay = "symbol";
        continue;
      case "scale":
        result.scale = parseFloat(token2.options[0]);
        continue;
      case "rounding-mode-floor":
        result.roundingMode = "floor";
        continue;
      case "rounding-mode-ceiling":
        result.roundingMode = "ceil";
        continue;
      case "rounding-mode-down":
        result.roundingMode = "trunc";
        continue;
      case "rounding-mode-up":
        result.roundingMode = "expand";
        continue;
      case "rounding-mode-half-even":
        result.roundingMode = "halfEven";
        continue;
      case "rounding-mode-half-down":
        result.roundingMode = "halfTrunc";
        continue;
      case "rounding-mode-half-up":
        result.roundingMode = "halfExpand";
        continue;
      case "integer-width":
        if (token2.options.length > 1) {
          throw new RangeError("integer-width stems only accept a single optional option");
        }
        token2.options[0].replace(INTEGER_WIDTH_REGEX, function(_, g1, g2, g3, g4, g5) {
          if (g1) {
            result.minimumIntegerDigits = g2.length;
          } else if (g3 && g4) {
            throw new Error("We currently do not support maximum integer digits");
          } else if (g5) {
            throw new Error("We currently do not support exact integer digits");
          }
          return "";
        });
        continue;
    }
    if (CONCISE_INTEGER_WIDTH_REGEX.test(token2.stem)) {
      result.minimumIntegerDigits = token2.stem.length;
      continue;
    }
    if (FRACTION_PRECISION_REGEX.test(token2.stem)) {
      if (token2.options.length > 1) {
        throw new RangeError("Fraction-precision stems only accept a single optional option");
      }
      token2.stem.replace(FRACTION_PRECISION_REGEX, function(_, g1, g2, g3, g4, g5) {
        if (g2 === "*") {
          result.minimumFractionDigits = g1.length;
        } else if (g3 && g3[0] === "#") {
          result.maximumFractionDigits = g3.length;
        } else if (g4 && g5) {
          result.minimumFractionDigits = g4.length;
          result.maximumFractionDigits = g4.length + g5.length;
        } else {
          result.minimumFractionDigits = g1.length;
          result.maximumFractionDigits = g1.length;
        }
        return "";
      });
      var opt = token2.options[0];
      if (opt === "w") {
        result = __assign(__assign({}, result), { trailingZeroDisplay: "stripIfInteger" });
      } else if (opt) {
        result = __assign(__assign({}, result), parseSignificantPrecision(opt));
      }
      continue;
    }
    if (SIGNIFICANT_PRECISION_REGEX.test(token2.stem)) {
      result = __assign(__assign({}, result), parseSignificantPrecision(token2.stem));
      continue;
    }
    var signOpts = parseSign(token2.stem);
    if (signOpts) {
      result = __assign(__assign({}, result), signOpts);
    }
    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token2.stem);
    if (conciseScientificAndEngineeringOpts) {
      result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
    }
  }
  return result;
}

// node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js
var timeData = {
  "001": [
    "H",
    "h"
  ],
  "AC": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "AD": [
    "H",
    "hB"
  ],
  "AE": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "AF": [
    "H",
    "hb",
    "hB",
    "h"
  ],
  "AG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "AI": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "AL": [
    "h",
    "H",
    "hB"
  ],
  "AM": [
    "H",
    "hB"
  ],
  "AO": [
    "H",
    "hB"
  ],
  "AR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "AS": [
    "h",
    "H"
  ],
  "AT": [
    "H",
    "hB"
  ],
  "AU": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "AW": [
    "H",
    "hB"
  ],
  "AX": [
    "H"
  ],
  "AZ": [
    "H",
    "hB",
    "h"
  ],
  "BA": [
    "H",
    "hB",
    "h"
  ],
  "BB": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BD": [
    "h",
    "hB",
    "H"
  ],
  "BE": [
    "H",
    "hB"
  ],
  "BF": [
    "H",
    "hB"
  ],
  "BG": [
    "H",
    "hB",
    "h"
  ],
  "BH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "BI": [
    "H",
    "h"
  ],
  "BJ": [
    "H",
    "hB"
  ],
  "BL": [
    "H",
    "hB"
  ],
  "BM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BN": [
    "hb",
    "hB",
    "h",
    "H"
  ],
  "BO": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "BQ": [
    "H"
  ],
  "BR": [
    "H",
    "hB"
  ],
  "BS": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BT": [
    "h",
    "H"
  ],
  "BW": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "BY": [
    "H",
    "h"
  ],
  "BZ": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CA": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "CC": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CD": [
    "hB",
    "H"
  ],
  "CF": [
    "H",
    "h",
    "hB"
  ],
  "CG": [
    "H",
    "hB"
  ],
  "CH": [
    "H",
    "hB",
    "h"
  ],
  "CI": [
    "H",
    "hB"
  ],
  "CK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CL": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CM": [
    "H",
    "h",
    "hB"
  ],
  "CN": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "CO": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "CP": [
    "H"
  ],
  "CR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CU": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CV": [
    "H",
    "hB"
  ],
  "CW": [
    "H",
    "hB"
  ],
  "CX": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CY": [
    "h",
    "H",
    "hb",
    "hB"
  ],
  "CZ": [
    "H"
  ],
  "DE": [
    "H",
    "hB"
  ],
  "DG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "DJ": [
    "h",
    "H"
  ],
  "DK": [
    "H"
  ],
  "DM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "DO": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "DZ": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "EA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "EC": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "EE": [
    "H",
    "hB"
  ],
  "EG": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "EH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "ER": [
    "h",
    "H"
  ],
  "ES": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "ET": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "FI": [
    "H"
  ],
  "FJ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "FK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "FM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "FO": [
    "H",
    "h"
  ],
  "FR": [
    "H",
    "hB"
  ],
  "GA": [
    "H",
    "hB"
  ],
  "GB": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GD": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GE": [
    "H",
    "hB",
    "h"
  ],
  "GF": [
    "H",
    "hB"
  ],
  "GG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GH": [
    "h",
    "H"
  ],
  "GI": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GL": [
    "H",
    "h"
  ],
  "GM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GN": [
    "H",
    "hB"
  ],
  "GP": [
    "H",
    "hB"
  ],
  "GQ": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "GR": [
    "h",
    "H",
    "hb",
    "hB"
  ],
  "GT": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "GU": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GW": [
    "H",
    "hB"
  ],
  "GY": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "HK": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "HN": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "HR": [
    "H",
    "hB"
  ],
  "HU": [
    "H",
    "h"
  ],
  "IC": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "ID": [
    "H"
  ],
  "IE": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IL": [
    "H",
    "hB"
  ],
  "IM": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IN": [
    "h",
    "H"
  ],
  "IO": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IQ": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "IR": [
    "hB",
    "H"
  ],
  "IS": [
    "H"
  ],
  "IT": [
    "H",
    "hB"
  ],
  "JE": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "JM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "JO": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "JP": [
    "H",
    "K",
    "h"
  ],
  "KE": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "KG": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "KH": [
    "hB",
    "h",
    "H",
    "hb"
  ],
  "KI": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KM": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "KN": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KP": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "KR": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "KW": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "KY": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KZ": [
    "H",
    "hB"
  ],
  "LA": [
    "H",
    "hb",
    "hB",
    "h"
  ],
  "LB": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "LC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "LI": [
    "H",
    "hB",
    "h"
  ],
  "LK": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "LR": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "LS": [
    "h",
    "H"
  ],
  "LT": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "LU": [
    "H",
    "h",
    "hB"
  ],
  "LV": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "LY": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "MA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "MC": [
    "H",
    "hB"
  ],
  "MD": [
    "H",
    "hB"
  ],
  "ME": [
    "H",
    "hB",
    "h"
  ],
  "MF": [
    "H",
    "hB"
  ],
  "MG": [
    "H",
    "h"
  ],
  "MH": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "ML": [
    "H"
  ],
  "MM": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "MN": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "MO": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "MP": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MQ": [
    "H",
    "hB"
  ],
  "MR": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "MS": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "MT": [
    "H",
    "h"
  ],
  "MU": [
    "H",
    "h"
  ],
  "MV": [
    "H",
    "h"
  ],
  "MW": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MX": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "MY": [
    "hb",
    "hB",
    "h",
    "H"
  ],
  "MZ": [
    "H",
    "hB"
  ],
  "NA": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "NC": [
    "H",
    "hB"
  ],
  "NE": [
    "H"
  ],
  "NF": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NI": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "NL": [
    "H",
    "hB"
  ],
  "NO": [
    "H",
    "h"
  ],
  "NP": [
    "H",
    "h",
    "hB"
  ],
  "NR": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NU": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NZ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "OM": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "PA": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "PE": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "PF": [
    "H",
    "h",
    "hB"
  ],
  "PG": [
    "h",
    "H"
  ],
  "PH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "PK": [
    "h",
    "hB",
    "H"
  ],
  "PL": [
    "H",
    "h"
  ],
  "PM": [
    "H",
    "hB"
  ],
  "PN": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "PR": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "PS": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "PT": [
    "H",
    "hB"
  ],
  "PW": [
    "h",
    "H"
  ],
  "PY": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "QA": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "RE": [
    "H",
    "hB"
  ],
  "RO": [
    "H",
    "hB"
  ],
  "RS": [
    "H",
    "hB",
    "h"
  ],
  "RU": [
    "H"
  ],
  "RW": [
    "H",
    "h"
  ],
  "SA": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SB": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SC": [
    "H",
    "h",
    "hB"
  ],
  "SD": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SE": [
    "H"
  ],
  "SG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SH": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "SI": [
    "H",
    "hB"
  ],
  "SJ": [
    "H"
  ],
  "SK": [
    "H"
  ],
  "SL": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SM": [
    "H",
    "h",
    "hB"
  ],
  "SN": [
    "H",
    "h",
    "hB"
  ],
  "SO": [
    "h",
    "H"
  ],
  "SR": [
    "H",
    "hB"
  ],
  "SS": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "ST": [
    "H",
    "hB"
  ],
  "SV": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "SX": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "SY": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SZ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "TA": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "TC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "TD": [
    "h",
    "H",
    "hB"
  ],
  "TF": [
    "H",
    "h",
    "hB"
  ],
  "TG": [
    "H",
    "hB"
  ],
  "TH": [
    "H",
    "h"
  ],
  "TJ": [
    "H",
    "h"
  ],
  "TL": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "TM": [
    "H",
    "h"
  ],
  "TN": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "TO": [
    "h",
    "H"
  ],
  "TR": [
    "H",
    "hB"
  ],
  "TT": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "TW": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "TZ": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "UA": [
    "H",
    "hB",
    "h"
  ],
  "UG": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "UM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "US": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "UY": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "UZ": [
    "H",
    "hB",
    "h"
  ],
  "VA": [
    "H",
    "h",
    "hB"
  ],
  "VC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VE": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "VG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VI": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VN": [
    "H",
    "h"
  ],
  "VU": [
    "h",
    "H"
  ],
  "WF": [
    "H",
    "hB"
  ],
  "WS": [
    "h",
    "H"
  ],
  "XK": [
    "H",
    "hB",
    "h"
  ],
  "YE": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "YT": [
    "H",
    "hB"
  ],
  "ZA": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "ZM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "ZW": [
    "H",
    "h"
  ],
  "af-ZA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "ar-001": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "ca-ES": [
    "H",
    "h",
    "hB"
  ],
  "en-001": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "es-BO": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-BR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-EC": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-ES": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-GQ": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-PE": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "fr-CA": [
    "H",
    "h",
    "hB"
  ],
  "gl-ES": [
    "H",
    "h",
    "hB"
  ],
  "gu-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "hi-IN": [
    "hB",
    "h",
    "H"
  ],
  "it-CH": [
    "H",
    "h",
    "hB"
  ],
  "it-IT": [
    "H",
    "h",
    "hB"
  ],
  "kn-IN": [
    "hB",
    "h",
    "H"
  ],
  "ml-IN": [
    "hB",
    "h",
    "H"
  ],
  "mr-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "pa-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "ta-IN": [
    "hB",
    "h",
    "hb",
    "H"
  ],
  "te-IN": [
    "hB",
    "h",
    "H"
  ],
  "zu-ZA": [
    "H",
    "hB",
    "hb",
    "h"
  ]
};

// node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js
function getBestPattern(skeleton, locale) {
  var skeletonCopy = "";
  for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
    var patternChar = skeleton.charAt(patternPos);
    if (patternChar === "j") {
      var extraLength = 0;
      while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
        extraLength++;
        patternPos++;
      }
      var hourLen = 1 + (extraLength & 1);
      var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
      var dayPeriodChar = "a";
      var hourChar = getDefaultHourSymbolFromLocale(locale);
      if (hourChar == "H" || hourChar == "k") {
        dayPeriodLen = 0;
      }
      while (dayPeriodLen-- > 0) {
        skeletonCopy += dayPeriodChar;
      }
      while (hourLen-- > 0) {
        skeletonCopy = hourChar + skeletonCopy;
      }
    } else if (patternChar === "J") {
      skeletonCopy += "H";
    } else {
      skeletonCopy += patternChar;
    }
  }
  return skeletonCopy;
}
function getDefaultHourSymbolFromLocale(locale) {
  var hourCycle = locale.hourCycle;
  if (hourCycle === void 0 && // @ts-ignore hourCycle(s) is not identified yet
  locale.hourCycles && // @ts-ignore
  locale.hourCycles.length) {
    hourCycle = locale.hourCycles[0];
  }
  if (hourCycle) {
    switch (hourCycle) {
      case "h24":
        return "k";
      case "h23":
        return "H";
      case "h12":
        return "h";
      case "h11":
        return "K";
      default:
        throw new Error("Invalid hourCycle");
    }
  }
  var languageTag = locale.language;
  var regionTag;
  if (languageTag !== "root") {
    regionTag = locale.maximize().region;
  }
  var hourCycles = timeData[regionTag || ""] || timeData[languageTag || ""] || timeData["".concat(languageTag, "-001")] || timeData["001"];
  return hourCycles[0];
}

// node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
var _a8;
var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
function createLocation(start2, end2) {
  return { start: start2, end: end2 };
}
var hasNativeStartsWith = !!String.prototype.startsWith && "_a".startsWith("a", 1);
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n3) {
  return typeof n3 === "number" && isFinite(n3) && Math.floor(n3) === n3 && Math.abs(n3) <= 9007199254740991;
};
var REGEX_SUPPORTS_U_AND_Y = true;
try {
  re = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  REGEX_SUPPORTS_U_AND_Y = ((_a8 = re.exec("a")) === null || _a8 === void 0 ? void 0 : _a8[0]) === "a";
} catch (_) {
  REGEX_SUPPORTS_U_AND_Y = false;
}
var re;
var startsWith = hasNativeStartsWith ? (
  // Native
  function startsWith2(s, search, position3) {
    return s.startsWith(search, position3);
  }
) : (
  // For IE11
  function startsWith3(s, search, position3) {
    return s.slice(position3, position3 + search.length) === search;
  }
);
var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : (
  // IE11
  function fromCodePoint2() {
    var codePoints = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      codePoints[_i] = arguments[_i];
    }
    var elements = "";
    var length3 = codePoints.length;
    var i2 = 0;
    var code;
    while (length3 > i2) {
      code = codePoints[i2++];
      if (code > 1114111)
        throw RangeError(code + " is not a valid code point");
      elements += code < 65536 ? String.fromCharCode(code) : String.fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
    }
    return elements;
  }
);
var fromEntries2 = (
  // native
  hasNativeFromEntries ? Object.fromEntries : (
    // Ponyfill
    function fromEntries3(entries) {
      var obj = {};
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var _a9 = entries_1[_i], k = _a9[0], v = _a9[1];
        obj[k] = v;
      }
      return obj;
    }
  )
);
var codePointAt = hasNativeCodePointAt ? (
  // Native
  function codePointAt2(s, index5) {
    return s.codePointAt(index5);
  }
) : (
  // IE 11
  function codePointAt3(s, index5) {
    var size4 = s.length;
    if (index5 < 0 || index5 >= size4) {
      return void 0;
    }
    var first = s.charCodeAt(index5);
    var second;
    return first < 55296 || first > 56319 || index5 + 1 === size4 || (second = s.charCodeAt(index5 + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
  }
);
var trimStart = hasTrimStart ? (
  // Native
  function trimStart2(s) {
    return s.trimStart();
  }
) : (
  // Ponyfill
  function trimStart3(s) {
    return s.replace(SPACE_SEPARATOR_START_REGEX, "");
  }
);
var trimEnd = hasTrimEnd ? (
  // Native
  function trimEnd2(s) {
    return s.trimEnd();
  }
) : (
  // Ponyfill
  function trimEnd3(s) {
    return s.replace(SPACE_SEPARATOR_END_REGEX, "");
  }
);
function RE(s, flag) {
  return new RegExp(s, flag);
}
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
  IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s, index5) {
    var _a9;
    IDENTIFIER_PREFIX_RE_1.lastIndex = index5;
    var match4 = IDENTIFIER_PREFIX_RE_1.exec(s);
    return (_a9 = match4[1]) !== null && _a9 !== void 0 ? _a9 : "";
  };
} else {
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s, index5) {
    var match4 = [];
    while (true) {
      var c2 = codePointAt(s, index5);
      if (c2 === void 0 || _isWhiteSpace(c2) || _isPatternSyntax(c2)) {
        break;
      }
      match4.push(c2);
      index5 += c2 >= 65536 ? 2 : 1;
    }
    return fromCodePoint.apply(void 0, match4);
  };
}
var IDENTIFIER_PREFIX_RE_1;
var Parser = (
  /** @class */
  function() {
    function Parser2(message, options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      this.message = message;
      this.position = { offset: 0, line: 1, column: 1 };
      this.ignoreTag = !!options2.ignoreTag;
      this.locale = options2.locale;
      this.requiresOtherClause = !!options2.requiresOtherClause;
      this.shouldParseSkeletons = !!options2.shouldParseSkeletons;
    }
    Parser2.prototype.parse = function() {
      if (this.offset() !== 0) {
        throw Error("parser can only be used once");
      }
      return this.parseMessage(0, "", false);
    };
    Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
      var elements = [];
      while (!this.isEOF()) {
        var char2 = this.char();
        if (char2 === 123) {
          var result = this.parseArgument(nestingLevel, expectingCloseTag);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        } else if (char2 === 125 && nestingLevel > 0) {
          break;
        } else if (char2 === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
          var position3 = this.clonePosition();
          this.bump();
          elements.push({
            type: TYPE.pound,
            location: createLocation(position3, this.clonePosition())
          });
        } else if (char2 === 60 && !this.ignoreTag && this.peek() === 47) {
          if (expectingCloseTag) {
            break;
          } else {
            return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
          }
        } else if (char2 === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
          var result = this.parseTag(nestingLevel, parentArgType);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        } else {
          var result = this.parseLiteral(nestingLevel, parentArgType);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        }
      }
      return { val: elements, err: null };
    };
    Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
      var startPosition = this.clonePosition();
      this.bump();
      var tagName = this.parseTagName();
      this.bumpSpace();
      if (this.bumpIf("/>")) {
        return {
          val: {
            type: TYPE.literal,
            value: "<".concat(tagName, "/>"),
            location: createLocation(startPosition, this.clonePosition())
          },
          err: null
        };
      } else if (this.bumpIf(">")) {
        var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
        if (childrenResult.err) {
          return childrenResult;
        }
        var children = childrenResult.val;
        var endTagStartPosition = this.clonePosition();
        if (this.bumpIf("</")) {
          if (this.isEOF() || !_isAlpha(this.char())) {
            return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
          }
          var closingTagNameStartPosition = this.clonePosition();
          var closingTagName = this.parseTagName();
          if (tagName !== closingTagName) {
            return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
          }
          this.bumpSpace();
          if (!this.bumpIf(">")) {
            return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
          }
          return {
            val: {
              type: TYPE.tag,
              value: tagName,
              children,
              location: createLocation(startPosition, this.clonePosition())
            },
            err: null
          };
        } else {
          return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
        }
      } else {
        return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
      }
    };
    Parser2.prototype.parseTagName = function() {
      var startOffset = this.offset();
      this.bump();
      while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
        this.bump();
      }
      return this.message.slice(startOffset, this.offset());
    };
    Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
      var start2 = this.clonePosition();
      var value = "";
      while (true) {
        var parseQuoteResult = this.tryParseQuote(parentArgType);
        if (parseQuoteResult) {
          value += parseQuoteResult;
          continue;
        }
        var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
        if (parseUnquotedResult) {
          value += parseUnquotedResult;
          continue;
        }
        var parseLeftAngleResult = this.tryParseLeftAngleBracket();
        if (parseLeftAngleResult) {
          value += parseLeftAngleResult;
          continue;
        }
        break;
      }
      var location2 = createLocation(start2, this.clonePosition());
      return {
        val: { type: TYPE.literal, value, location: location2 },
        err: null
      };
    };
    Parser2.prototype.tryParseLeftAngleBracket = function() {
      if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || // If at the opening tag or closing tag position, bail.
      !_isAlphaOrSlash(this.peek() || 0))) {
        this.bump();
        return "<";
      }
      return null;
    };
    Parser2.prototype.tryParseQuote = function(parentArgType) {
      if (this.isEOF() || this.char() !== 39) {
        return null;
      }
      switch (this.peek()) {
        case 39:
          this.bump();
          this.bump();
          return "'";
        case 123:
        case 60:
        case 62:
        case 125:
          break;
        case 35:
          if (parentArgType === "plural" || parentArgType === "selectordinal") {
            break;
          }
          return null;
        default:
          return null;
      }
      this.bump();
      var codePoints = [this.char()];
      this.bump();
      while (!this.isEOF()) {
        var ch = this.char();
        if (ch === 39) {
          if (this.peek() === 39) {
            codePoints.push(39);
            this.bump();
          } else {
            this.bump();
            break;
          }
        } else {
          codePoints.push(ch);
        }
        this.bump();
      }
      return fromCodePoint.apply(void 0, codePoints);
    };
    Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
      if (this.isEOF()) {
        return null;
      }
      var ch = this.char();
      if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch === 125 && nestingLevel > 0) {
        return null;
      } else {
        this.bump();
        return fromCodePoint(ch);
      }
    };
    Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
      var openingBracePosition = this.clonePosition();
      this.bump();
      this.bumpSpace();
      if (this.isEOF()) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      if (this.char() === 125) {
        this.bump();
        return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
      var value = this.parseIdentifierIfPossible().value;
      if (!value) {
        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
      this.bumpSpace();
      if (this.isEOF()) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      switch (this.char()) {
        case 125: {
          this.bump();
          return {
            val: {
              type: TYPE.argument,
              // value does not include the opening and closing braces.
              value,
              location: createLocation(openingBracePosition, this.clonePosition())
            },
            err: null
          };
        }
        case 44: {
          this.bump();
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
        }
        default:
          return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
    };
    Parser2.prototype.parseIdentifierIfPossible = function() {
      var startingPosition = this.clonePosition();
      var startOffset = this.offset();
      var value = matchIdentifierAtIndex(this.message, startOffset);
      var endOffset = startOffset + value.length;
      this.bumpTo(endOffset);
      var endPosition = this.clonePosition();
      var location2 = createLocation(startingPosition, endPosition);
      return { value, location: location2 };
    };
    Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
      var _a9;
      var typeStartPosition = this.clonePosition();
      var argType = this.parseIdentifierIfPossible().value;
      var typeEndPosition = this.clonePosition();
      switch (argType) {
        case "":
          return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
        case "number":
        case "date":
        case "time": {
          this.bumpSpace();
          var styleAndLocation = null;
          if (this.bumpIf(",")) {
            this.bumpSpace();
            var styleStartPosition = this.clonePosition();
            var result = this.parseSimpleArgStyleIfPossible();
            if (result.err) {
              return result;
            }
            var style = trimEnd(result.val);
            if (style.length === 0) {
              return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            var styleLocation = createLocation(styleStartPosition, this.clonePosition());
            styleAndLocation = { style, styleLocation };
          }
          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
          if (argCloseResult.err) {
            return argCloseResult;
          }
          var location_1 = createLocation(openingBracePosition, this.clonePosition());
          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
            var skeleton = trimStart(styleAndLocation.style.slice(2));
            if (argType === "number") {
              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
              if (result.err) {
                return result;
              }
              return {
                val: { type: TYPE.number, value, location: location_1, style: result.val },
                err: null
              };
            } else {
              if (skeleton.length === 0) {
                return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
              }
              var dateTimePattern = skeleton;
              if (this.locale) {
                dateTimePattern = getBestPattern(skeleton, this.locale);
              }
              var style = {
                type: SKELETON_TYPE.dateTime,
                pattern: dateTimePattern,
                location: styleAndLocation.styleLocation,
                parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(dateTimePattern) : {}
              };
              var type = argType === "date" ? TYPE.date : TYPE.time;
              return {
                val: { type, value, location: location_1, style },
                err: null
              };
            }
          }
          return {
            val: {
              type: argType === "number" ? TYPE.number : argType === "date" ? TYPE.date : TYPE.time,
              value,
              location: location_1,
              style: (_a9 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a9 !== void 0 ? _a9 : null
            },
            err: null
          };
        }
        case "plural":
        case "selectordinal":
        case "select": {
          var typeEndPosition_1 = this.clonePosition();
          this.bumpSpace();
          if (!this.bumpIf(",")) {
            return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
          }
          this.bumpSpace();
          var identifierAndLocation = this.parseIdentifierIfPossible();
          var pluralOffset = 0;
          if (argType !== "select" && identifierAndLocation.value === "offset") {
            if (!this.bumpIf(":")) {
              return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            this.bumpSpace();
            var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
            if (result.err) {
              return result;
            }
            this.bumpSpace();
            identifierAndLocation = this.parseIdentifierIfPossible();
            pluralOffset = result.val;
          }
          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
          if (optionsResult.err) {
            return optionsResult;
          }
          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
          if (argCloseResult.err) {
            return argCloseResult;
          }
          var location_2 = createLocation(openingBracePosition, this.clonePosition());
          if (argType === "select") {
            return {
              val: {
                type: TYPE.select,
                value,
                options: fromEntries2(optionsResult.val),
                location: location_2
              },
              err: null
            };
          } else {
            return {
              val: {
                type: TYPE.plural,
                value,
                options: fromEntries2(optionsResult.val),
                offset: pluralOffset,
                pluralType: argType === "plural" ? "cardinal" : "ordinal",
                location: location_2
              },
              err: null
            };
          }
        }
        default:
          return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
      }
    };
    Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
      if (this.isEOF() || this.char() !== 125) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      this.bump();
      return { val: true, err: null };
    };
    Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
      var nestedBraces = 0;
      var startPosition = this.clonePosition();
      while (!this.isEOF()) {
        var ch = this.char();
        switch (ch) {
          case 39: {
            this.bump();
            var apostrophePosition = this.clonePosition();
            if (!this.bumpUntil("'")) {
              return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
            }
            this.bump();
            break;
          }
          case 123: {
            nestedBraces += 1;
            this.bump();
            break;
          }
          case 125: {
            if (nestedBraces > 0) {
              nestedBraces -= 1;
            } else {
              return {
                val: this.message.slice(startPosition.offset, this.offset()),
                err: null
              };
            }
            break;
          }
          default:
            this.bump();
            break;
        }
      }
      return {
        val: this.message.slice(startPosition.offset, this.offset()),
        err: null
      };
    };
    Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location2) {
      var tokens2 = [];
      try {
        tokens2 = parseNumberSkeletonFromString(skeleton);
      } catch (e) {
        return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location2);
      }
      return {
        val: {
          type: SKELETON_TYPE.number,
          tokens: tokens2,
          location: location2,
          parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens2) : {}
        },
        err: null
      };
    };
    Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
      var _a9;
      var hasOtherClause = false;
      var options2 = [];
      var parsedSelectors = /* @__PURE__ */ new Set();
      var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
      while (true) {
        if (selector.length === 0) {
          var startPosition = this.clonePosition();
          if (parentArgType !== "select" && this.bumpIf("=")) {
            var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
            if (result.err) {
              return result;
            }
            selectorLocation = createLocation(startPosition, this.clonePosition());
            selector = this.message.slice(startPosition.offset, this.offset());
          } else {
            break;
          }
        }
        if (parsedSelectors.has(selector)) {
          return this.error(parentArgType === "select" ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
        }
        if (selector === "other") {
          hasOtherClause = true;
        }
        this.bumpSpace();
        var openingBracePosition = this.clonePosition();
        if (!this.bumpIf("{")) {
          return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
        }
        var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
        if (fragmentResult.err) {
          return fragmentResult;
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        options2.push([
          selector,
          {
            value: fragmentResult.val,
            location: createLocation(openingBracePosition, this.clonePosition())
          }
        ]);
        parsedSelectors.add(selector);
        this.bumpSpace();
        _a9 = this.parseIdentifierIfPossible(), selector = _a9.value, selectorLocation = _a9.location;
      }
      if (options2.length === 0) {
        return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
      }
      if (this.requiresOtherClause && !hasOtherClause) {
        return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
      }
      return { val: options2, err: null };
    };
    Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
      var sign = 1;
      var startingPosition = this.clonePosition();
      if (this.bumpIf("+")) {
      } else if (this.bumpIf("-")) {
        sign = -1;
      }
      var hasDigits = false;
      var decimal = 0;
      while (!this.isEOF()) {
        var ch = this.char();
        if (ch >= 48 && ch <= 57) {
          hasDigits = true;
          decimal = decimal * 10 + (ch - 48);
          this.bump();
        } else {
          break;
        }
      }
      var location2 = createLocation(startingPosition, this.clonePosition());
      if (!hasDigits) {
        return this.error(expectNumberError, location2);
      }
      decimal *= sign;
      if (!isSafeInteger(decimal)) {
        return this.error(invalidNumberError, location2);
      }
      return { val: decimal, err: null };
    };
    Parser2.prototype.offset = function() {
      return this.position.offset;
    };
    Parser2.prototype.isEOF = function() {
      return this.offset() === this.message.length;
    };
    Parser2.prototype.clonePosition = function() {
      return {
        offset: this.position.offset,
        line: this.position.line,
        column: this.position.column
      };
    };
    Parser2.prototype.char = function() {
      var offset3 = this.position.offset;
      if (offset3 >= this.message.length) {
        throw Error("out of bound");
      }
      var code = codePointAt(this.message, offset3);
      if (code === void 0) {
        throw Error("Offset ".concat(offset3, " is at invalid UTF-16 code unit boundary"));
      }
      return code;
    };
    Parser2.prototype.error = function(kind, location2) {
      return {
        val: null,
        err: {
          kind,
          message: this.message,
          location: location2
        }
      };
    };
    Parser2.prototype.bump = function() {
      if (this.isEOF()) {
        return;
      }
      var code = this.char();
      if (code === 10) {
        this.position.line += 1;
        this.position.column = 1;
        this.position.offset += 1;
      } else {
        this.position.column += 1;
        this.position.offset += code < 65536 ? 1 : 2;
      }
    };
    Parser2.prototype.bumpIf = function(prefix4) {
      if (startsWith(this.message, prefix4, this.offset())) {
        for (var i2 = 0; i2 < prefix4.length; i2++) {
          this.bump();
        }
        return true;
      }
      return false;
    };
    Parser2.prototype.bumpUntil = function(pattern) {
      var currentOffset = this.offset();
      var index5 = this.message.indexOf(pattern, currentOffset);
      if (index5 >= 0) {
        this.bumpTo(index5);
        return true;
      } else {
        this.bumpTo(this.message.length);
        return false;
      }
    };
    Parser2.prototype.bumpTo = function(targetOffset) {
      if (this.offset() > targetOffset) {
        throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
      }
      targetOffset = Math.min(targetOffset, this.message.length);
      while (true) {
        var offset3 = this.offset();
        if (offset3 === targetOffset) {
          break;
        }
        if (offset3 > targetOffset) {
          throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
        }
        this.bump();
        if (this.isEOF()) {
          break;
        }
      }
    };
    Parser2.prototype.bumpSpace = function() {
      while (!this.isEOF() && _isWhiteSpace(this.char())) {
        this.bump();
      }
    };
    Parser2.prototype.peek = function() {
      if (this.isEOF()) {
        return null;
      }
      var code = this.char();
      var offset3 = this.offset();
      var nextCode = this.message.charCodeAt(offset3 + (code >= 65536 ? 2 : 1));
      return nextCode !== null && nextCode !== void 0 ? nextCode : null;
    };
    return Parser2;
  }()
);
function _isAlpha(codepoint) {
  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
}
function _isAlphaOrSlash(codepoint) {
  return _isAlpha(codepoint) || codepoint === 47;
}
function _isPotentialElementNameChar(c2) {
  return c2 === 45 || c2 === 46 || c2 >= 48 && c2 <= 57 || c2 === 95 || c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90 || c2 == 183 || c2 >= 192 && c2 <= 214 || c2 >= 216 && c2 <= 246 || c2 >= 248 && c2 <= 893 || c2 >= 895 && c2 <= 8191 || c2 >= 8204 && c2 <= 8205 || c2 >= 8255 && c2 <= 8256 || c2 >= 8304 && c2 <= 8591 || c2 >= 11264 && c2 <= 12271 || c2 >= 12289 && c2 <= 55295 || c2 >= 63744 && c2 <= 64975 || c2 >= 65008 && c2 <= 65533 || c2 >= 65536 && c2 <= 983039;
}
function _isWhiteSpace(c2) {
  return c2 >= 9 && c2 <= 13 || c2 === 32 || c2 === 133 || c2 >= 8206 && c2 <= 8207 || c2 === 8232 || c2 === 8233;
}
function _isPatternSyntax(c2) {
  return c2 >= 33 && c2 <= 35 || c2 === 36 || c2 >= 37 && c2 <= 39 || c2 === 40 || c2 === 41 || c2 === 42 || c2 === 43 || c2 === 44 || c2 === 45 || c2 >= 46 && c2 <= 47 || c2 >= 58 && c2 <= 59 || c2 >= 60 && c2 <= 62 || c2 >= 63 && c2 <= 64 || c2 === 91 || c2 === 92 || c2 === 93 || c2 === 94 || c2 === 96 || c2 === 123 || c2 === 124 || c2 === 125 || c2 === 126 || c2 === 161 || c2 >= 162 && c2 <= 165 || c2 === 166 || c2 === 167 || c2 === 169 || c2 === 171 || c2 === 172 || c2 === 174 || c2 === 176 || c2 === 177 || c2 === 182 || c2 === 187 || c2 === 191 || c2 === 215 || c2 === 247 || c2 >= 8208 && c2 <= 8213 || c2 >= 8214 && c2 <= 8215 || c2 === 8216 || c2 === 8217 || c2 === 8218 || c2 >= 8219 && c2 <= 8220 || c2 === 8221 || c2 === 8222 || c2 === 8223 || c2 >= 8224 && c2 <= 8231 || c2 >= 8240 && c2 <= 8248 || c2 === 8249 || c2 === 8250 || c2 >= 8251 && c2 <= 8254 || c2 >= 8257 && c2 <= 8259 || c2 === 8260 || c2 === 8261 || c2 === 8262 || c2 >= 8263 && c2 <= 8273 || c2 === 8274 || c2 === 8275 || c2 >= 8277 && c2 <= 8286 || c2 >= 8592 && c2 <= 8596 || c2 >= 8597 && c2 <= 8601 || c2 >= 8602 && c2 <= 8603 || c2 >= 8604 && c2 <= 8607 || c2 === 8608 || c2 >= 8609 && c2 <= 8610 || c2 === 8611 || c2 >= 8612 && c2 <= 8613 || c2 === 8614 || c2 >= 8615 && c2 <= 8621 || c2 === 8622 || c2 >= 8623 && c2 <= 8653 || c2 >= 8654 && c2 <= 8655 || c2 >= 8656 && c2 <= 8657 || c2 === 8658 || c2 === 8659 || c2 === 8660 || c2 >= 8661 && c2 <= 8691 || c2 >= 8692 && c2 <= 8959 || c2 >= 8960 && c2 <= 8967 || c2 === 8968 || c2 === 8969 || c2 === 8970 || c2 === 8971 || c2 >= 8972 && c2 <= 8991 || c2 >= 8992 && c2 <= 8993 || c2 >= 8994 && c2 <= 9e3 || c2 === 9001 || c2 === 9002 || c2 >= 9003 && c2 <= 9083 || c2 === 9084 || c2 >= 9085 && c2 <= 9114 || c2 >= 9115 && c2 <= 9139 || c2 >= 9140 && c2 <= 9179 || c2 >= 9180 && c2 <= 9185 || c2 >= 9186 && c2 <= 9254 || c2 >= 9255 && c2 <= 9279 || c2 >= 9280 && c2 <= 9290 || c2 >= 9291 && c2 <= 9311 || c2 >= 9472 && c2 <= 9654 || c2 === 9655 || c2 >= 9656 && c2 <= 9664 || c2 === 9665 || c2 >= 9666 && c2 <= 9719 || c2 >= 9720 && c2 <= 9727 || c2 >= 9728 && c2 <= 9838 || c2 === 9839 || c2 >= 9840 && c2 <= 10087 || c2 === 10088 || c2 === 10089 || c2 === 10090 || c2 === 10091 || c2 === 10092 || c2 === 10093 || c2 === 10094 || c2 === 10095 || c2 === 10096 || c2 === 10097 || c2 === 10098 || c2 === 10099 || c2 === 10100 || c2 === 10101 || c2 >= 10132 && c2 <= 10175 || c2 >= 10176 && c2 <= 10180 || c2 === 10181 || c2 === 10182 || c2 >= 10183 && c2 <= 10213 || c2 === 10214 || c2 === 10215 || c2 === 10216 || c2 === 10217 || c2 === 10218 || c2 === 10219 || c2 === 10220 || c2 === 10221 || c2 === 10222 || c2 === 10223 || c2 >= 10224 && c2 <= 10239 || c2 >= 10240 && c2 <= 10495 || c2 >= 10496 && c2 <= 10626 || c2 === 10627 || c2 === 10628 || c2 === 10629 || c2 === 10630 || c2 === 10631 || c2 === 10632 || c2 === 10633 || c2 === 10634 || c2 === 10635 || c2 === 10636 || c2 === 10637 || c2 === 10638 || c2 === 10639 || c2 === 10640 || c2 === 10641 || c2 === 10642 || c2 === 10643 || c2 === 10644 || c2 === 10645 || c2 === 10646 || c2 === 10647 || c2 === 10648 || c2 >= 10649 && c2 <= 10711 || c2 === 10712 || c2 === 10713 || c2 === 10714 || c2 === 10715 || c2 >= 10716 && c2 <= 10747 || c2 === 10748 || c2 === 10749 || c2 >= 10750 && c2 <= 11007 || c2 >= 11008 && c2 <= 11055 || c2 >= 11056 && c2 <= 11076 || c2 >= 11077 && c2 <= 11078 || c2 >= 11079 && c2 <= 11084 || c2 >= 11085 && c2 <= 11123 || c2 >= 11124 && c2 <= 11125 || c2 >= 11126 && c2 <= 11157 || c2 === 11158 || c2 >= 11159 && c2 <= 11263 || c2 >= 11776 && c2 <= 11777 || c2 === 11778 || c2 === 11779 || c2 === 11780 || c2 === 11781 || c2 >= 11782 && c2 <= 11784 || c2 === 11785 || c2 === 11786 || c2 === 11787 || c2 === 11788 || c2 === 11789 || c2 >= 11790 && c2 <= 11798 || c2 === 11799 || c2 >= 11800 && c2 <= 11801 || c2 === 11802 || c2 === 11803 || c2 === 11804 || c2 === 11805 || c2 >= 11806 && c2 <= 11807 || c2 === 11808 || c2 === 11809 || c2 === 11810 || c2 === 11811 || c2 === 11812 || c2 === 11813 || c2 === 11814 || c2 === 11815 || c2 === 11816 || c2 === 11817 || c2 >= 11818 && c2 <= 11822 || c2 === 11823 || c2 >= 11824 && c2 <= 11833 || c2 >= 11834 && c2 <= 11835 || c2 >= 11836 && c2 <= 11839 || c2 === 11840 || c2 === 11841 || c2 === 11842 || c2 >= 11843 && c2 <= 11855 || c2 >= 11856 && c2 <= 11857 || c2 === 11858 || c2 >= 11859 && c2 <= 11903 || c2 >= 12289 && c2 <= 12291 || c2 === 12296 || c2 === 12297 || c2 === 12298 || c2 === 12299 || c2 === 12300 || c2 === 12301 || c2 === 12302 || c2 === 12303 || c2 === 12304 || c2 === 12305 || c2 >= 12306 && c2 <= 12307 || c2 === 12308 || c2 === 12309 || c2 === 12310 || c2 === 12311 || c2 === 12312 || c2 === 12313 || c2 === 12314 || c2 === 12315 || c2 === 12316 || c2 === 12317 || c2 >= 12318 && c2 <= 12319 || c2 === 12320 || c2 === 12336 || c2 === 64830 || c2 === 64831 || c2 >= 65093 && c2 <= 65094;
}

// node_modules/@formatjs/icu-messageformat-parser/lib/index.js
function pruneLocation(els) {
  els.forEach(function(el) {
    delete el.location;
    if (isSelectElement(el) || isPluralElement(el)) {
      for (var k in el.options) {
        delete el.options[k].location;
        pruneLocation(el.options[k].value);
      }
    } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
      delete el.style.location;
    } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {
      delete el.style.location;
    } else if (isTagElement(el)) {
      pruneLocation(el.children);
    }
  });
}
function parse4(message, opts) {
  if (opts === void 0) {
    opts = {};
  }
  opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
  var result = new Parser(message, opts).parse();
  if (result.err) {
    var error2 = SyntaxError(ErrorKind[result.err.kind]);
    error2.location = result.err.location;
    error2.originalMessage = result.err.message;
    throw error2;
  }
  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
    pruneLocation(result.val);
  }
  return result.val;
}

// node_modules/@formatjs/fast-memoize/lib/index.js
function memoize5(fn2, options2) {
  var cache2 = options2 && options2.cache ? options2.cache : cacheDefault;
  var serializer = options2 && options2.serializer ? options2.serializer : serializerDefault;
  var strategy = options2 && options2.strategy ? options2.strategy : strategyDefault;
  return strategy(fn2, {
    cache: cache2,
    serializer
  });
}
function isPrimitive2(value) {
  return value == null || typeof value === "number" || typeof value === "boolean";
}
function monadic(fn2, cache2, serializer, arg) {
  var cacheKey = isPrimitive2(arg) ? arg : serializer(arg);
  var computedValue = cache2.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn2.call(this, arg);
    cache2.set(cacheKey, computedValue);
  }
  return computedValue;
}
function variadic(fn2, cache2, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache2.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn2.apply(this, args);
    cache2.set(cacheKey, computedValue);
  }
  return computedValue;
}
function assemble(fn2, context2, strategy, cache2, serialize2) {
  return strategy.bind(context2, fn2, cache2, serialize2);
}
function strategyDefault(fn2, options2) {
  var strategy = fn2.length === 1 ? monadic : variadic;
  return assemble(fn2, this, strategy, options2.cache.create(), options2.serializer);
}
function strategyVariadic(fn2, options2) {
  return assemble(fn2, this, variadic, options2.cache.create(), options2.serializer);
}
function strategyMonadic(fn2, options2) {
  return assemble(fn2, this, monadic, options2.cache.create(), options2.serializer);
}
var serializerDefault = function() {
  return JSON.stringify(arguments);
};
function ObjectWithoutPrototypeCache() {
  this.cache = /* @__PURE__ */ Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.get = function(key2) {
  return this.cache[key2];
};
ObjectWithoutPrototypeCache.prototype.set = function(key2, value) {
  this.cache[key2] = value;
};
var cacheDefault = {
  create: function create() {
    return new ObjectWithoutPrototypeCache();
  }
};
var strategies = {
  variadic: strategyVariadic,
  monadic: strategyMonadic
};

// node_modules/intl-messageformat/lib/src/error.js
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
  ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
  ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode || (ErrorCode = {}));
var FormatError = (
  /** @class */
  function(_super) {
    __extends(FormatError2, _super);
    function FormatError2(msg, code, originalMessage) {
      var _this = _super.call(this, msg) || this;
      _this.code = code;
      _this.originalMessage = originalMessage;
      return _this;
    }
    FormatError2.prototype.toString = function() {
      return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
    };
    return FormatError2;
  }(Error)
);
var InvalidValueError = (
  /** @class */
  function(_super) {
    __extends(InvalidValueError2, _super);
    function InvalidValueError2(variableId, value, options2, originalMessage) {
      return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options2).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueError2;
  }(FormatError)
);
var InvalidValueTypeError = (
  /** @class */
  function(_super) {
    __extends(InvalidValueTypeError2, _super);
    function InvalidValueTypeError2(value, type, originalMessage) {
      return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueTypeError2;
  }(FormatError)
);
var MissingValueError = (
  /** @class */
  function(_super) {
    __extends(MissingValueError2, _super);
    function MissingValueError2(variableId, originalMessage) {
      return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
    }
    return MissingValueError2;
  }(FormatError)
);

// node_modules/intl-messageformat/lib/src/formatters.js
var PART_TYPE;
(function(PART_TYPE2) {
  PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
  PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
})(PART_TYPE || (PART_TYPE = {}));
function mergeLiteral(parts) {
  if (parts.length < 2) {
    return parts;
  }
  return parts.reduce(function(all2, part) {
    var lastPart = all2[all2.length - 1];
    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
      all2.push(part);
    } else {
      lastPart.value += part.value;
    }
    return all2;
  }, []);
}
function isFormatXMLElementFn(el) {
  return typeof el === "function";
}
function formatToParts(els, locales, formatters, formats, values2, currentPluralValue, originalMessage) {
  if (els.length === 1 && isLiteralElement(els[0])) {
    return [
      {
        type: PART_TYPE.literal,
        value: els[0].value
      }
    ];
  }
  var result = [];
  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
    var el = els_1[_i];
    if (isLiteralElement(el)) {
      result.push({
        type: PART_TYPE.literal,
        value: el.value
      });
      continue;
    }
    if (isPoundElement(el)) {
      if (typeof currentPluralValue === "number") {
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales).format(currentPluralValue)
        });
      }
      continue;
    }
    var varName = el.value;
    if (!(values2 && varName in values2)) {
      throw new MissingValueError(varName, originalMessage);
    }
    var value = values2[varName];
    if (isArgumentElement(el)) {
      if (!value || typeof value === "string" || typeof value === "number") {
        value = typeof value === "string" || typeof value === "number" ? String(value) : "";
      }
      result.push({
        type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
        value
      });
      continue;
    }
    if (isDateElement(el)) {
      var style = typeof el.style === "string" ? formats.date[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : void 0;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTimeElement(el)) {
      var style = typeof el.style === "string" ? formats.time[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : formats.time.medium;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isNumberElement(el)) {
      var style = typeof el.style === "string" ? formats.number[el.style] : isNumberSkeleton(el.style) ? el.style.parsedOptions : void 0;
      if (style && style.scale) {
        value = value * (style.scale || 1);
      }
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getNumberFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTagElement(el)) {
      var children = el.children, value_1 = el.value;
      var formatFn = values2[value_1];
      if (!isFormatXMLElementFn(formatFn)) {
        throw new InvalidValueTypeError(value_1, "function", originalMessage);
      }
      var parts = formatToParts(children, locales, formatters, formats, values2, currentPluralValue);
      var chunks = formatFn(parts.map(function(p) {
        return p.value;
      }));
      if (!Array.isArray(chunks)) {
        chunks = [chunks];
      }
      result.push.apply(result, chunks.map(function(c2) {
        return {
          type: typeof c2 === "string" ? PART_TYPE.literal : PART_TYPE.object,
          value: c2
        };
      }));
    }
    if (isSelectElement(el)) {
      var opt = el.options[value] || el.options.other;
      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values2));
      continue;
    }
    if (isPluralElement(el)) {
      var opt = el.options["=".concat(value)];
      if (!opt) {
        if (!Intl.PluralRules) {
          throw new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API, originalMessage);
        }
        var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
        opt = el.options[rule] || el.options.other;
      }
      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values2, value - (el.offset || 0)));
      continue;
    }
  }
  return mergeLiteral(result);
}

// node_modules/intl-messageformat/lib/src/core.js
function mergeConfig(c1, c2) {
  if (!c2) {
    return c1;
  }
  return __assign(__assign(__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function(all2, k) {
    all2[k] = __assign(__assign({}, c1[k]), c2[k] || {});
    return all2;
  }, {}));
}
function mergeConfigs(defaultConfig, configs) {
  if (!configs) {
    return defaultConfig;
  }
  return Object.keys(defaultConfig).reduce(function(all2, k) {
    all2[k] = mergeConfig(defaultConfig[k], configs[k]);
    return all2;
  }, __assign({}, defaultConfig));
}
function createFastMemoizeCache(store) {
  return {
    create: function() {
      return {
        get: function(key2) {
          return store[key2];
        },
        set: function(key2, value) {
          store[key2] = value;
        }
      };
    }
  };
}
function createDefaultFormatters(cache2) {
  if (cache2 === void 0) {
    cache2 = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
  }
  return {
    getNumberFormat: memoize5(function() {
      var _a9;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a9 = Intl.NumberFormat).bind.apply(_a9, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache2.number),
      strategy: strategies.variadic
    }),
    getDateTimeFormat: memoize5(function() {
      var _a9;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a9 = Intl.DateTimeFormat).bind.apply(_a9, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache2.dateTime),
      strategy: strategies.variadic
    }),
    getPluralRules: memoize5(function() {
      var _a9;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a9 = Intl.PluralRules).bind.apply(_a9, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache2.pluralRules),
      strategy: strategies.variadic
    })
  };
}
var IntlMessageFormat = (
  /** @class */
  function() {
    function IntlMessageFormat2(message, locales, overrideFormats, opts) {
      var _this = this;
      if (locales === void 0) {
        locales = IntlMessageFormat2.defaultLocale;
      }
      this.formatterCache = {
        number: {},
        dateTime: {},
        pluralRules: {}
      };
      this.format = function(values2) {
        var parts = _this.formatToParts(values2);
        if (parts.length === 1) {
          return parts[0].value;
        }
        var result = parts.reduce(function(all2, part) {
          if (!all2.length || part.type !== PART_TYPE.literal || typeof all2[all2.length - 1] !== "string") {
            all2.push(part.value);
          } else {
            all2[all2.length - 1] += part.value;
          }
          return all2;
        }, []);
        if (result.length <= 1) {
          return result[0] || "";
        }
        return result;
      };
      this.formatToParts = function(values2) {
        return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values2, void 0, _this.message);
      };
      this.resolvedOptions = function() {
        var _a10;
        return {
          locale: ((_a10 = _this.resolvedLocale) === null || _a10 === void 0 ? void 0 : _a10.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
        };
      };
      this.getAst = function() {
        return _this.ast;
      };
      this.locales = locales;
      this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
      if (typeof message === "string") {
        this.message = message;
        if (!IntlMessageFormat2.__parse) {
          throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
        }
        var _a9 = opts || {}, formatters = _a9.formatters, parseOpts = __rest(_a9, ["formatters"]);
        this.ast = IntlMessageFormat2.__parse(message, __assign(__assign({}, parseOpts), { locale: this.resolvedLocale }));
      } else {
        this.ast = message;
      }
      if (!Array.isArray(this.ast)) {
        throw new TypeError("A message must be provided as a String or AST.");
      }
      this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
      this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
    }
    Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
      get: function() {
        if (!IntlMessageFormat2.memoizedDefaultLocale) {
          IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
        }
        return IntlMessageFormat2.memoizedDefaultLocale;
      },
      enumerable: false,
      configurable: true
    });
    IntlMessageFormat2.memoizedDefaultLocale = null;
    IntlMessageFormat2.resolveLocale = function(locales) {
      if (typeof Intl.Locale === "undefined") {
        return;
      }
      var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
      if (supportedLocales.length > 0) {
        return new Intl.Locale(supportedLocales[0]);
      }
      return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
    };
    IntlMessageFormat2.__parse = parse4;
    IntlMessageFormat2.formats = {
      number: {
        integer: {
          maximumFractionDigits: 0
        },
        currency: {
          style: "currency"
        },
        percent: {
          style: "percent"
        }
      },
      date: {
        short: {
          month: "numeric",
          day: "numeric",
          year: "2-digit"
        },
        medium: {
          month: "short",
          day: "numeric",
          year: "numeric"
        },
        long: {
          month: "long",
          day: "numeric",
          year: "numeric"
        },
        full: {
          weekday: "long",
          month: "long",
          day: "numeric",
          year: "numeric"
        }
      },
      time: {
        short: {
          hour: "numeric",
          minute: "numeric"
        },
        medium: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric"
        },
        long: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          timeZoneName: "short"
        },
        full: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          timeZoneName: "short"
        }
      }
    };
    return IntlMessageFormat2;
  }()
);

// node_modules/@react-aria/i18n/dist/useMessageFormatter.module.mjs
var import_react232 = __toESM(require_react(), 1);

// node_modules/@react-aria/radio/dist/import.mjs
var $884aeceb3d67f00f$export$37b65e5b5444d35c = /* @__PURE__ */ new WeakMap();
function $0d5c49892c1215da$export$37b0961d2f4751e2(props, state2, ref) {
  let { value, children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby } = props;
  const isDisabled3 = props.isDisabled || state2.isDisabled;
  let hasChildren = children != null;
  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
  if (!hasChildren && !hasAriaLabel)
    console.warn("If you do not provide children, you must specify an aria-label for accessibility");
  let checked = state2.selectedValue === value;
  let onChange2 = (e) => {
    e.stopPropagation();
    state2.setSelectedValue(value);
  };
  let { pressProps, isPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled3
  });
  let { pressProps: labelProps, isPressed: isLabelPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled3,
    onPress() {
      state2.setSelectedValue(value);
    }
  });
  let { focusableProps } = (0, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c)((0, $3ef42575df84b30b$export$9d1611c77c2fe928)(props, {
    onFocus: () => state2.setLastFocusedValue(value)
  }), ref);
  let interactions = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps);
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  let tabIndex = -1;
  if (state2.selectedValue != null) {
    if (state2.selectedValue === value)
      tabIndex = 0;
  } else if (state2.lastFocusedValue === value || state2.lastFocusedValue == null)
    tabIndex = 0;
  if (isDisabled3)
    tabIndex = void 0;
  let { name, descriptionId, errorMessageId, validationBehavior } = (0, $884aeceb3d67f00f$export$37b65e5b5444d35c).get(state2);
  (0, $99facab73266f662$export$5add1d006293d136)(ref, state2.selectedValue, state2.setSelectedValue);
  (0, $e93e671b31057976$export$b8473d3665f3a75a)({
    validationBehavior
  }, state2, ref);
  return {
    labelProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
      onClick: (e) => e.preventDefault()
    }),
    inputProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      ...interactions,
      type: "radio",
      name,
      tabIndex,
      disabled: isDisabled3,
      required: state2.isRequired && validationBehavior === "native",
      checked,
      value,
      onChange: onChange2,
      "aria-describedby": [
        props["aria-describedby"],
        state2.isInvalid ? errorMessageId : null,
        descriptionId
      ].filter(Boolean).join(" ") || void 0
    }),
    isDisabled: isDisabled3,
    isSelected: checked,
    isPressed: isPressed || isLabelPressed
  };
}
function $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state2) {
  let { name, isReadOnly, isRequired, isDisabled: isDisabled3, orientation = "vertical", validationBehavior = "aria" } = props;
  let { direction: direction2 } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let { isInvalid, validationErrors, validationDetails } = state2.displayValidation;
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $2baaea4c71418dea$export$294aa081a6c6f55d)({
    ...props,
    // Radio group is not an HTML input element so it
    // shouldn't be labeled by a <label> element.
    labelElementType: "span",
    isInvalid: state2.isInvalid,
    errorMessage: props.errorMessage || validationErrors
  });
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    onBlurWithin(e) {
      var _props_onBlur;
      (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);
      if (!state2.selectedValue)
        state2.setLastFocusedValue(null);
    },
    onFocusWithin: props.onFocus,
    onFocusWithinChange: props.onFocusChange
  });
  let onKeyDown = (e) => {
    let nextDir;
    switch (e.key) {
      case "ArrowRight":
        if (direction2 === "rtl" && orientation !== "vertical")
          nextDir = "prev";
        else
          nextDir = "next";
        break;
      case "ArrowLeft":
        if (direction2 === "rtl" && orientation !== "vertical")
          nextDir = "next";
        else
          nextDir = "prev";
        break;
      case "ArrowDown":
        nextDir = "next";
        break;
      case "ArrowUp":
        nextDir = "prev";
        break;
      default:
        return;
    }
    e.preventDefault();
    let walker = (0, $9bf71ea28793e738$export$2d6ec8fc375ceafa)(e.currentTarget, {
      from: e.target
    });
    let nextElem;
    if (nextDir === "next") {
      nextElem = walker.nextNode();
      if (!nextElem) {
        walker.currentNode = e.currentTarget;
        nextElem = walker.firstChild();
      }
    } else {
      nextElem = walker.previousNode();
      if (!nextElem) {
        walker.currentNode = e.currentTarget;
        nextElem = walker.lastChild();
      }
    }
    if (nextElem) {
      nextElem.focus();
      state2.setSelectedValue(nextElem.value);
    }
  };
  let groupName = (0, $bdb11010cef70236$export$f680877a34711e37)(name);
  (0, $884aeceb3d67f00f$export$37b65e5b5444d35c).set(state2, {
    name: groupName,
    descriptionId: descriptionProps.id,
    errorMessageId: errorMessageProps.id,
    validationBehavior
  });
  return {
    radioGroupProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup
      role: "radiogroup",
      onKeyDown,
      "aria-invalid": state2.isInvalid || void 0,
      "aria-errormessage": props["aria-errormessage"],
      "aria-readonly": isReadOnly || void 0,
      "aria-required": isRequired || void 0,
      "aria-disabled": isDisabled3 || void 0,
      "aria-orientation": orientation,
      ...fieldProps,
      ...focusWithinProps
    }),
    labelProps,
    descriptionProps,
    errorMessageProps,
    isInvalid,
    validationErrors,
    validationDetails
  };
}

// node_modules/@react-stately/radio/dist/import.mjs
var import_react233 = __toESM(require_react(), 1);
var $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 1e10);
var $a54cdc5c1942b639$var$i = 0;
function $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {
  let name = (0, import_react233.useMemo)(() => props.name || `radio-group-${$a54cdc5c1942b639$var$instance}-${++$a54cdc5c1942b639$var$i}`, [
    props.name
  ]);
  var _props_defaultValue;
  let [selectedValue, setSelected] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : null, props.onChange);
  let [lastFocusedValue, setLastFocusedValue] = (0, import_react233.useState)(null);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: selectedValue
  });
  let setSelectedValue = (value) => {
    if (!props.isReadOnly && !props.isDisabled) {
      setSelected(value);
      validation.commitValidation();
    }
  };
  let isInvalid = validation.displayValidation.isInvalid;
  return {
    ...validation,
    name,
    selectedValue,
    setSelectedValue,
    lastFocusedValue,
    setLastFocusedValue,
    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,
    isRequired: props.isRequired || false,
    validationState: props.validationState || (isInvalid ? "invalid" : null),
    isInvalid
  };
}

// node_modules/@react-stately/checkbox/dist/import.mjs
var import_react234 = __toESM(require_react(), 1);
function $587d3ad58be6d31f$export$daff6da51032a415(props = {}) {
  let [selectedValues, setValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || [], props.onChange);
  let isRequired = !!props.isRequired && selectedValues.length === 0;
  let invalidValues = (0, import_react234.useRef)(/* @__PURE__ */ new Map());
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: selectedValues
  });
  let isInvalid = validation.displayValidation.isInvalid;
  var _props_validationState;
  const state2 = {
    ...validation,
    value: selectedValues,
    setValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      setValue(value);
    },
    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,
    isSelected(value) {
      return selectedValues.includes(value);
    },
    addValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (!selectedValues.includes(value))
        setValue(selectedValues.concat(value));
    },
    removeValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (selectedValues.includes(value))
        setValue(selectedValues.filter((existingValue) => existingValue !== value));
    },
    toggleValue(value) {
      if (props.isReadOnly || props.isDisabled)
        return;
      if (selectedValues.includes(value))
        setValue(selectedValues.filter((existingValue) => existingValue !== value));
      else
        setValue(selectedValues.concat(value));
    },
    setInvalid(value, v) {
      let s = new Map(invalidValues.current);
      if (v.isInvalid)
        s.set(value, v);
      else
        s.delete(value);
      invalidValues.current = s;
      validation.updateValidation((0, $e5be200c675c3b3a$export$75ee7c75d68f5b0e)(...s.values()));
    },
    validationState: (_props_validationState = props.validationState) !== null && _props_validationState !== void 0 ? _props_validationState : isInvalid ? "invalid" : null,
    isInvalid,
    isRequired
  };
  return state2;
}

// node_modules/@react-aria/datepicker/dist/ar-AE.mjs
var $f23889fffbde9058$exports = {};
$f23889fffbde9058$exports = {
  "calendar": `التقويم`,
  "day": `يوم`,
  "dayPeriod": `ص/م`,
  "endDate": `تاريخ الانتهاء`,
  "era": `العصر`,
  "hour": `الساعات`,
  "minute": `الدقائق`,
  "month": `الشهر`,
  "second": `الثواني`,
  "selectedDateDescription": (args) => `تاريخ محدد: ${args.date}`,
  "selectedRangeDescription": (args) => `المدى الزمني المحدد: ${args.startDate} إلى ${args.endDate}`,
  "selectedTimeDescription": (args) => `الوقت المحدد: ${args.time}`,
  "startDate": `تاريخ البدء`,
  "timeZoneName": `التوقيت`,
  "weekday": `اليوم`,
  "year": `السنة`
};

// node_modules/@react-aria/datepicker/dist/bg-BG.mjs
var $09d9badaa8903929$exports = {};
$09d9badaa8903929$exports = {
  "calendar": `Календар`,
  "day": `ден`,
  "dayPeriod": `пр.об./сл.об.`,
  "endDate": `Крайна дата`,
  "era": `ера`,
  "hour": `час`,
  "minute": `минута`,
  "month": `месец`,
  "second": `секунда`,
  "selectedDateDescription": (args) => `Избрана дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Избран диапазон: ${args.startDate} до ${args.endDate}`,
  "selectedTimeDescription": (args) => `Избрано време: ${args.time}`,
  "startDate": `Начална дата`,
  "timeZoneName": `часова зона`,
  "weekday": `ден от седмицата`,
  "year": `година`
};

// node_modules/@react-aria/datepicker/dist/cs-CZ.mjs
var $151b77e0fd711730$exports = {};
$151b77e0fd711730$exports = {
  "calendar": `Kalendář`,
  "day": `den`,
  "dayPeriod": `část dne`,
  "endDate": `Konečné datum`,
  "era": `letopočet`,
  "hour": `hodina`,
  "minute": `minuta`,
  "month": `měsíc`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Vybrané datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Vybrané období: ${args.startDate} až ${args.endDate}`,
  "selectedTimeDescription": (args) => `Vybraný čas: ${args.time}`,
  "startDate": `Počáteční datum`,
  "timeZoneName": `časové pásmo`,
  "weekday": `den v týdnu`,
  "year": `rok`
};

// node_modules/@react-aria/datepicker/dist/da-DK.mjs
var $61915aa8630b90a2$exports = {};
$61915aa8630b90a2$exports = {
  "calendar": `Kalender`,
  "day": `dag`,
  "dayPeriod": `AM/PM`,
  "endDate": `Slutdato`,
  "era": `æra`,
  "hour": `time`,
  "minute": `minut`,
  "month": `måned`,
  "second": `sekund`,
  "selectedDateDescription": (args) => `Valgt dato: ${args.date}`,
  "selectedRangeDescription": (args) => `Valgt interval: ${args.startDate} til ${args.endDate}`,
  "selectedTimeDescription": (args) => `Valgt tidspunkt: ${args.time}`,
  "startDate": `Startdato`,
  "timeZoneName": `tidszone`,
  "weekday": `ugedag`,
  "year": `år`
};

// node_modules/@react-aria/datepicker/dist/de-DE.mjs
var $35cea00159787840$exports = {};
$35cea00159787840$exports = {
  "calendar": `Kalender`,
  "day": `Tag`,
  "dayPeriod": `Tageshälfte`,
  "endDate": `Enddatum`,
  "era": `Epoche`,
  "hour": `Stunde`,
  "minute": `Minute`,
  "month": `Monat`,
  "second": `Sekunde`,
  "selectedDateDescription": (args) => `Ausgewähltes Datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Ausgewählter Bereich: ${args.startDate} bis ${args.endDate}`,
  "selectedTimeDescription": (args) => `Ausgewählte Zeit: ${args.time}`,
  "startDate": `Anfangsdatum`,
  "timeZoneName": `Zeitzone`,
  "weekday": `Wochentag`,
  "year": `Jahr`
};

// node_modules/@react-aria/datepicker/dist/el-GR.mjs
var $518b4e82b9eacafd$exports = {};
$518b4e82b9eacafd$exports = {
  "calendar": `Ημερολόγιο`,
  "day": `ημέρα`,
  "dayPeriod": `π.μ./μ.μ.`,
  "endDate": `Ημερομηνία λήξης`,
  "era": `περίοδος`,
  "hour": `ώρα`,
  "minute": `λεπτό`,
  "month": `μήνας`,
  "second": `δευτερόλεπτο`,
  "selectedDateDescription": (args) => `Επιλεγμένη ημερομηνία: ${args.date}`,
  "selectedRangeDescription": (args) => `Επιλεγμένο εύρος: ${args.startDate} έως ${args.endDate}`,
  "selectedTimeDescription": (args) => `Επιλεγμένη ώρα: ${args.time}`,
  "startDate": `Ημερομηνία έναρξης`,
  "timeZoneName": `ζώνη ώρας`,
  "weekday": `καθημερινή`,
  "year": `έτος`
};

// node_modules/@react-aria/datepicker/dist/en-US.mjs
var $1c2b297f7e2cf474$exports = {};
$1c2b297f7e2cf474$exports = {
  "era": `era`,
  "year": `year`,
  "month": `month`,
  "day": `day`,
  "hour": `hour`,
  "minute": `minute`,
  "second": `second`,
  "dayPeriod": `AM/PM`,
  "calendar": `Calendar`,
  "startDate": `Start Date`,
  "endDate": `End Date`,
  "weekday": `day of the week`,
  "timeZoneName": `time zone`,
  "selectedDateDescription": (args) => `Selected Date: ${args.date}`,
  "selectedRangeDescription": (args) => `Selected Range: ${args.startDate} to ${args.endDate}`,
  "selectedTimeDescription": (args) => `Selected Time: ${args.time}`
};

// node_modules/@react-aria/datepicker/dist/es-ES.mjs
var $07f628a707cf9b18$exports = {};
$07f628a707cf9b18$exports = {
  "calendar": `Calendario`,
  "day": `día`,
  "dayPeriod": `a. m./p. m.`,
  "endDate": `Fecha final`,
  "era": `era`,
  "hour": `hora`,
  "minute": `minuto`,
  "month": `mes`,
  "second": `segundo`,
  "selectedDateDescription": (args) => `Fecha seleccionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Rango seleccionado: ${args.startDate} a ${args.endDate}`,
  "selectedTimeDescription": (args) => `Hora seleccionada: ${args.time}`,
  "startDate": `Fecha de inicio`,
  "timeZoneName": `zona horaria`,
  "weekday": `día de la semana`,
  "year": `año`
};

// node_modules/@react-aria/datepicker/dist/et-EE.mjs
var $db553ffe17c7f4db$exports = {};
$db553ffe17c7f4db$exports = {
  "calendar": `Kalender`,
  "day": `päev`,
  "dayPeriod": `enne/pärast lõunat`,
  "endDate": `Lõppkuupäev`,
  "era": `ajastu`,
  "hour": `tund`,
  "minute": `minut`,
  "month": `kuu`,
  "second": `sekund`,
  "selectedDateDescription": (args) => `Valitud kuupäev: ${args.date}`,
  "selectedRangeDescription": (args) => `Valitud vahemik: ${args.startDate} kuni ${args.endDate}`,
  "selectedTimeDescription": (args) => `Valitud aeg: ${args.time}`,
  "startDate": `Alguskuupäev`,
  "timeZoneName": `ajavöönd`,
  "weekday": `nädalapäev`,
  "year": `aasta`
};

// node_modules/@react-aria/datepicker/dist/fi-FI.mjs
var $4afcfe00cd703f83$exports = {};
$4afcfe00cd703f83$exports = {
  "calendar": `Kalenteri`,
  "day": `päivä`,
  "dayPeriod": `vuorokaudenaika`,
  "endDate": `Päättymispäivä`,
  "era": `aikakausi`,
  "hour": `tunti`,
  "minute": `minuutti`,
  "month": `kuukausi`,
  "second": `sekunti`,
  "selectedDateDescription": (args) => `Valittu päivämäärä: ${args.date}`,
  "selectedRangeDescription": (args) => `Valittu aikaväli: ${args.startDate} – ${args.endDate}`,
  "selectedTimeDescription": (args) => `Valittu aika: ${args.time}`,
  "startDate": `Alkamispäivä`,
  "timeZoneName": `aikavyöhyke`,
  "weekday": `viikonpäivä`,
  "year": `vuosi`
};

// node_modules/@react-aria/datepicker/dist/fr-FR.mjs
var $1d2645d18d4c5be0$exports = {};
$1d2645d18d4c5be0$exports = {
  "calendar": `Calendrier`,
  "day": `jour`,
  "dayPeriod": `cadran`,
  "endDate": `Date de fin`,
  "era": `ère`,
  "hour": `heure`,
  "minute": `minute`,
  "month": `mois`,
  "second": `seconde`,
  "selectedDateDescription": (args) => `Date sélectionnée : ${args.date}`,
  "selectedRangeDescription": (args) => `Plage sélectionnée : ${args.startDate} au ${args.endDate}`,
  "selectedTimeDescription": (args) => `Heure choisie : ${args.time}`,
  "startDate": `Date de début`,
  "timeZoneName": `fuseau horaire`,
  "weekday": `jour de la semaine`,
  "year": `année`
};

// node_modules/@react-aria/datepicker/dist/he-IL.mjs
var $64cb6a9be1f6fa48$exports = {};
$64cb6a9be1f6fa48$exports = {
  "calendar": `לוח שנה`,
  "day": `יום`,
  "dayPeriod": `לפנה״צ/אחה״צ`,
  "endDate": `תאריך סיום`,
  "era": `תקופה`,
  "hour": `שעה`,
  "minute": `דקה`,
  "month": `חודש`,
  "second": `שנייה`,
  "selectedDateDescription": (args) => `תאריך נבחר: ${args.date}`,
  "selectedRangeDescription": (args) => `טווח נבחר: ${args.startDate} עד ${args.endDate}`,
  "selectedTimeDescription": (args) => `זמן נבחר: ${args.time}`,
  "startDate": `תאריך התחלה`,
  "timeZoneName": `אזור זמן`,
  "weekday": `יום בשבוע`,
  "year": `שנה`
};

// node_modules/@react-aria/datepicker/dist/hr-HR.mjs
var $2a1ef2e8050be27a$exports = {};
$2a1ef2e8050be27a$exports = {
  "calendar": `Kalendar`,
  "day": `dan`,
  "dayPeriod": `AM/PM`,
  "endDate": `Datum završetka`,
  "era": `era`,
  "hour": `sat`,
  "minute": `minuta`,
  "month": `mjesec`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Odabrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Odabrani raspon: ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Odabrano vrijeme: ${args.time}`,
  "startDate": `Datum početka`,
  "timeZoneName": `vremenska zona`,
  "weekday": `dan u tjednu`,
  "year": `godina`
};

// node_modules/@react-aria/datepicker/dist/hu-HU.mjs
var $ad429dca102acd0e$exports = {};
$ad429dca102acd0e$exports = {
  "calendar": `Naptár`,
  "day": `nap`,
  "dayPeriod": `napszak`,
  "endDate": `Befejező dátum`,
  "era": `éra`,
  "hour": `óra`,
  "minute": `perc`,
  "month": `hónap`,
  "second": `másodperc`,
  "selectedDateDescription": (args) => `Kijelölt dátum: ${args.date}`,
  "selectedRangeDescription": (args) => `Kijelölt tartomány: ${args.startDate}–${args.endDate}`,
  "selectedTimeDescription": (args) => `Kijelölt idő: ${args.time}`,
  "startDate": `Kezdő dátum`,
  "timeZoneName": `időzóna`,
  "weekday": `hét napja`,
  "year": `év`
};

// node_modules/@react-aria/datepicker/dist/it-IT.mjs
var $6e68cb5d1cb97bd2$exports = {};
$6e68cb5d1cb97bd2$exports = {
  "calendar": `Calendario`,
  "day": `giorno`,
  "dayPeriod": `AM/PM`,
  "endDate": `Data finale`,
  "era": `era`,
  "hour": `ora`,
  "minute": `minuto`,
  "month": `mese`,
  "second": `secondo`,
  "selectedDateDescription": (args) => `Data selezionata: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervallo selezionato: da ${args.startDate} a ${args.endDate}`,
  "selectedTimeDescription": (args) => `Ora selezionata: ${args.time}`,
  "startDate": `Data iniziale`,
  "timeZoneName": `fuso orario`,
  "weekday": `giorno della settimana`,
  "year": `anno`
};

// node_modules/@react-aria/datepicker/dist/ja-JP.mjs
var $a82ee9af063ee069$exports = {};
$a82ee9af063ee069$exports = {
  "calendar": `カレンダー`,
  "day": `日`,
  "dayPeriod": `午前/午後`,
  "endDate": `終了日`,
  "era": `時代`,
  "hour": `時`,
  "minute": `分`,
  "month": `月`,
  "second": `秒`,
  "selectedDateDescription": (args) => `選択した日付 : ${args.date}`,
  "selectedRangeDescription": (args) => `選択範囲 : ${args.startDate} から ${args.endDate}`,
  "selectedTimeDescription": (args) => `選択した時間 : ${args.time}`,
  "startDate": `開始日`,
  "timeZoneName": `タイムゾーン`,
  "weekday": `曜日`,
  "year": `年`
};

// node_modules/@react-aria/datepicker/dist/ko-KR.mjs
var $67e9091dbf37d4eb$exports = {};
$67e9091dbf37d4eb$exports = {
  "calendar": `달력`,
  "day": `일`,
  "dayPeriod": `오전/오후`,
  "endDate": `종료일`,
  "era": `연호`,
  "hour": `시`,
  "minute": `분`,
  "month": `월`,
  "second": `초`,
  "selectedDateDescription": (args) => `선택 일자: ${args.date}`,
  "selectedRangeDescription": (args) => `선택 범위: ${args.startDate} ~ ${args.endDate}`,
  "selectedTimeDescription": (args) => `선택 시간: ${args.time}`,
  "startDate": `시작일`,
  "timeZoneName": `시간대`,
  "weekday": `요일`,
  "year": `년`
};

// node_modules/@react-aria/datepicker/dist/lt-LT.mjs
var $75834f9729f653d1$exports = {};
$75834f9729f653d1$exports = {
  "calendar": `Kalendorius`,
  "day": `diena`,
  "dayPeriod": `iki pietų / po pietų`,
  "endDate": `Pabaigos data`,
  "era": `era`,
  "hour": `valanda`,
  "minute": `minutė`,
  "month": `mėnuo`,
  "second": `sekundė`,
  "selectedDateDescription": (args) => `Pasirinkta data: ${args.date}`,
  "selectedRangeDescription": (args) => `Pasirinktas intervalas: nuo ${args.startDate} iki ${args.endDate}`,
  "selectedTimeDescription": (args) => `Pasirinktas laikas: ${args.time}`,
  "startDate": `Pradžios data`,
  "timeZoneName": `laiko juosta`,
  "weekday": `savaitės diena`,
  "year": `metai`
};

// node_modules/@react-aria/datepicker/dist/lv-LV.mjs
var $a2df2c2520b4a7f0$exports = {};
$a2df2c2520b4a7f0$exports = {
  "calendar": `Kalendārs`,
  "day": `diena`,
  "dayPeriod": `priekšpusdienā/pēcpusdienā`,
  "endDate": `Beigu datums`,
  "era": `ēra`,
  "hour": `stundas`,
  "minute": `minūtes`,
  "month": `mēnesis`,
  "second": `sekundes`,
  "selectedDateDescription": (args) => `Atlasītais datums: ${args.date}`,
  "selectedRangeDescription": (args) => `Atlasītais diapazons: no ${args.startDate} līdz ${args.endDate}`,
  "selectedTimeDescription": (args) => `Atlasītais laiks: ${args.time}`,
  "startDate": `Sākuma datums`,
  "timeZoneName": `laika josla`,
  "weekday": `nedēļas diena`,
  "year": `gads`
};

// node_modules/@react-aria/datepicker/dist/nb-NO.mjs
var $aedcd71db4933ed5$exports = {};
$aedcd71db4933ed5$exports = {
  "calendar": `Kalender`,
  "day": `dag`,
  "dayPeriod": `a.m./p.m.`,
  "endDate": `Sluttdato`,
  "era": `tidsalder`,
  "hour": `time`,
  "minute": `minutt`,
  "month": `måned`,
  "second": `sekund`,
  "selectedDateDescription": (args) => `Valgt dato: ${args.date}`,
  "selectedRangeDescription": (args) => `Valgt område: ${args.startDate} til ${args.endDate}`,
  "selectedTimeDescription": (args) => `Valgt tid: ${args.time}`,
  "startDate": `Startdato`,
  "timeZoneName": `tidssone`,
  "weekday": `ukedag`,
  "year": `år`
};

// node_modules/@react-aria/datepicker/dist/nl-NL.mjs
var $3b2df9e54353046c$exports = {};
$3b2df9e54353046c$exports = {
  "calendar": `Kalender`,
  "day": `dag`,
  "dayPeriod": `a.m./p.m.`,
  "endDate": `Einddatum`,
  "era": `tijdperk`,
  "hour": `uur`,
  "minute": `minuut`,
  "month": `maand`,
  "second": `seconde`,
  "selectedDateDescription": (args) => `Geselecteerde datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Geselecteerd bereik: ${args.startDate} tot ${args.endDate}`,
  "selectedTimeDescription": (args) => `Geselecteerde tijd: ${args.time}`,
  "startDate": `Startdatum`,
  "timeZoneName": `tijdzone`,
  "weekday": `dag van de week`,
  "year": `jaar`
};

// node_modules/@react-aria/datepicker/dist/pl-PL.mjs
var $c03fe977fcfafe93$exports = {};
$c03fe977fcfafe93$exports = {
  "calendar": `Kalendarz`,
  "day": `dzień`,
  "dayPeriod": `rano / po południu / wieczorem`,
  "endDate": `Data końcowa`,
  "era": `era`,
  "hour": `godzina`,
  "minute": `minuta`,
  "month": `miesiąc`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Wybrana data: ${args.date}`,
  "selectedRangeDescription": (args) => `Wybrany zakres: ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Wybrany czas: ${args.time}`,
  "startDate": `Data początkowa`,
  "timeZoneName": `strefa czasowa`,
  "weekday": `dzień tygodnia`,
  "year": `rok`
};

// node_modules/@react-aria/datepicker/dist/pt-BR.mjs
var $569f006fc292345f$exports = {};
$569f006fc292345f$exports = {
  "calendar": `Calendário`,
  "day": `dia`,
  "dayPeriod": `AM/PM`,
  "endDate": `Data final`,
  "era": `era`,
  "hour": `hora`,
  "minute": `minuto`,
  "month": `mês`,
  "second": `segundo`,
  "selectedDateDescription": (args) => `Data selecionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo selecionado: ${args.startDate} a ${args.endDate}`,
  "selectedTimeDescription": (args) => `Hora selecionada: ${args.time}`,
  "startDate": `Data inicial`,
  "timeZoneName": `fuso horário`,
  "weekday": `dia da semana`,
  "year": `ano`
};

// node_modules/@react-aria/datepicker/dist/pt-PT.mjs
var $7c2494e14452f2dd$exports = {};
$7c2494e14452f2dd$exports = {
  "calendar": `Calendário`,
  "day": `dia`,
  "dayPeriod": `am/pm`,
  "endDate": `Data de Término`,
  "era": `era`,
  "hour": `hora`,
  "minute": `minuto`,
  "month": `mês`,
  "second": `segundo`,
  "selectedDateDescription": (args) => `Data selecionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo selecionado: ${args.startDate} a ${args.endDate}`,
  "selectedTimeDescription": (args) => `Hora selecionada: ${args.time}`,
  "startDate": `Data de Início`,
  "timeZoneName": `fuso horário`,
  "weekday": `dia da semana`,
  "year": `ano`
};

// node_modules/@react-aria/datepicker/dist/ro-RO.mjs
var $eb82ef981b5592bf$exports = {};
$eb82ef981b5592bf$exports = {
  "calendar": `Calendar`,
  "day": `zi`,
  "dayPeriod": `a.m/p.m.`,
  "endDate": `Dată final`,
  "era": `eră`,
  "hour": `oră`,
  "minute": `minut`,
  "month": `lună`,
  "second": `secundă`,
  "selectedDateDescription": (args) => `Dată selectată: ${args.date}`,
  "selectedRangeDescription": (args) => `Interval selectat: de la ${args.startDate} până la ${args.endDate}`,
  "selectedTimeDescription": (args) => `Ora selectată: ${args.time}`,
  "startDate": `Dată început`,
  "timeZoneName": `fus orar`,
  "weekday": `ziua din săptămână`,
  "year": `an`
};

// node_modules/@react-aria/datepicker/dist/ru-RU.mjs
var $6efa0e119f396950$exports = {};
$6efa0e119f396950$exports = {
  "calendar": `Календарь`,
  "day": `день`,
  "dayPeriod": `AM/PM`,
  "endDate": `Дата окончания`,
  "era": `эра`,
  "hour": `час`,
  "minute": `минута`,
  "month": `месяц`,
  "second": `секунда`,
  "selectedDateDescription": (args) => `Выбранная дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Выбранный диапазон: с ${args.startDate} по ${args.endDate}`,
  "selectedTimeDescription": (args) => `Выбранное время: ${args.time}`,
  "startDate": `Дата начала`,
  "timeZoneName": `часовой пояс`,
  "weekday": `день недели`,
  "year": `год`
};

// node_modules/@react-aria/datepicker/dist/sk-SK.mjs
var $7f5e57085d7f5049$exports = {};
$7f5e57085d7f5049$exports = {
  "calendar": `Kalendár`,
  "day": `deň`,
  "dayPeriod": `AM/PM`,
  "endDate": `Dátum ukončenia`,
  "era": `letopočet`,
  "hour": `hodina`,
  "minute": `minúta`,
  "month": `mesiac`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Vybratý dátum: ${args.date}`,
  "selectedRangeDescription": (args) => `Vybratý rozsah: od ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Vybratý čas: ${args.time}`,
  "startDate": `Dátum začatia`,
  "timeZoneName": `časové pásmo`,
  "weekday": `deň týždňa`,
  "year": `rok`
};

// node_modules/@react-aria/datepicker/dist/sl-SI.mjs
var $578ee7c11dcdde7a$exports = {};
$578ee7c11dcdde7a$exports = {
  "calendar": `Koledar`,
  "day": `dan`,
  "dayPeriod": `dop/pop`,
  "endDate": `Datum konca`,
  "era": `doba`,
  "hour": `ura`,
  "minute": `minuta`,
  "month": `mesec`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Izbrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Izbrano območje: ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Izbrani čas: ${args.time}`,
  "startDate": `Datum začetka`,
  "timeZoneName": `časovni pas`,
  "weekday": `dan v tednu`,
  "year": `leto`
};

// node_modules/@react-aria/datepicker/dist/sr-SP.mjs
var $bbc3fd6cd0bc9d50$exports = {};
$bbc3fd6cd0bc9d50$exports = {
  "calendar": `Kalendar`,
  "day": `дан`,
  "dayPeriod": `пре подне/по подне`,
  "endDate": `Datum završetka`,
  "era": `ера`,
  "hour": `сат`,
  "minute": `минут`,
  "month": `месец`,
  "second": `секунд`,
  "selectedDateDescription": (args) => `Izabrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Izabrani opseg: od ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Izabrano vreme: ${args.time}`,
  "startDate": `Datum početka`,
  "timeZoneName": `временска зона`,
  "weekday": `дан у недељи`,
  "year": `година`
};

// node_modules/@react-aria/datepicker/dist/sv-SE.mjs
var $0b04512118591d2a$exports = {};
$0b04512118591d2a$exports = {
  "calendar": `Kalender`,
  "day": `dag`,
  "dayPeriod": `fm/em`,
  "endDate": `Slutdatum`,
  "era": `era`,
  "hour": `timme`,
  "minute": `minut`,
  "month": `månad`,
  "second": `sekund`,
  "selectedDateDescription": (args) => `Valt datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Valt intervall: ${args.startDate} till ${args.endDate}`,
  "selectedTimeDescription": (args) => `Vald tid: ${args.time}`,
  "startDate": `Startdatum`,
  "timeZoneName": `tidszon`,
  "weekday": `veckodag`,
  "year": `år`
};

// node_modules/@react-aria/datepicker/dist/tr-TR.mjs
var $3a49d121fe4c9e1d$exports = {};
$3a49d121fe4c9e1d$exports = {
  "calendar": `Takvim`,
  "day": `gün`,
  "dayPeriod": `ÖÖ/ÖS`,
  "endDate": `Bitiş Tarihi`,
  "era": `çağ`,
  "hour": `saat`,
  "minute": `dakika`,
  "month": `ay`,
  "second": `saniye`,
  "selectedDateDescription": (args) => `Seçilen Tarih: ${args.date}`,
  "selectedRangeDescription": (args) => `Seçilen Aralık: ${args.startDate} - ${args.endDate}`,
  "selectedTimeDescription": (args) => `Seçilen Zaman: ${args.time}`,
  "startDate": `Başlangıç Tarihi`,
  "timeZoneName": `saat dilimi`,
  "weekday": `haftanın günü`,
  "year": `yıl`
};

// node_modules/@react-aria/datepicker/dist/uk-UA.mjs
var $5ba21dbb8914919d$exports = {};
$5ba21dbb8914919d$exports = {
  "calendar": `Календар`,
  "day": `день`,
  "dayPeriod": `дп/пп`,
  "endDate": `Дата завершення`,
  "era": `ера`,
  "hour": `година`,
  "minute": `хвилина`,
  "month": `місяць`,
  "second": `секунда`,
  "selectedDateDescription": (args) => `Вибрана дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Вибраний діапазон: ${args.startDate} — ${args.endDate}`,
  "selectedTimeDescription": (args) => `Вибраний час: ${args.time}`,
  "startDate": `Дата початку`,
  "timeZoneName": `часовий пояс`,
  "weekday": `день тижня`,
  "year": `рік`
};

// node_modules/@react-aria/datepicker/dist/zh-CN.mjs
var $51078838e1b16cd7$exports = {};
$51078838e1b16cd7$exports = {
  "calendar": `日历`,
  "day": `日`,
  "dayPeriod": `上午/下午`,
  "endDate": `结束日期`,
  "era": `纪元`,
  "hour": `小时`,
  "minute": `分钟`,
  "month": `月`,
  "second": `秒`,
  "selectedDateDescription": (args) => `选定的日期：${args.date}`,
  "selectedRangeDescription": (args) => `选定的范围：${args.startDate} 至 ${args.endDate}`,
  "selectedTimeDescription": (args) => `选定的时间：${args.time}`,
  "startDate": `开始日期`,
  "timeZoneName": `时区`,
  "weekday": `工作日`,
  "year": `年`
};

// node_modules/@react-aria/datepicker/dist/zh-TW.mjs
var $33fab8219207655a$exports = {};
$33fab8219207655a$exports = {
  "calendar": `日曆`,
  "day": `日`,
  "dayPeriod": `上午/下午`,
  "endDate": `結束日期`,
  "era": `纪元`,
  "hour": `小时`,
  "minute": `分钟`,
  "month": `月`,
  "second": `秒`,
  "selectedDateDescription": (args) => `選定的日期：${args.date}`,
  "selectedRangeDescription": (args) => `選定的範圍：${args.startDate} 至 ${args.endDate}`,
  "selectedTimeDescription": (args) => `選定的時間：${args.time}`,
  "startDate": `開始日期`,
  "timeZoneName": `时区`,
  "weekday": `工作日`,
  "year": `年`
};

// node_modules/@react-aria/datepicker/dist/import.mjs
var import_react236 = __toESM(require_react(), 1);

// node_modules/@react-aria/spinbutton/dist/ar-AE.mjs
var $ed6aae4e5f766f1e$exports = {};
$ed6aae4e5f766f1e$exports = {
  "Empty": `فارغ`
};

// node_modules/@react-aria/spinbutton/dist/bg-BG.mjs
var $38854e2b175151fa$exports = {};
$38854e2b175151fa$exports = {
  "Empty": `Изпразни`
};

// node_modules/@react-aria/spinbutton/dist/cs-CZ.mjs
var $15b25ab20f3945b2$exports = {};
$15b25ab20f3945b2$exports = {
  "Empty": `Prázdné`
};

// node_modules/@react-aria/spinbutton/dist/da-DK.mjs
var $692a4298b6b649a2$exports = {};
$692a4298b6b649a2$exports = {
  "Empty": `Tom`
};

// node_modules/@react-aria/spinbutton/dist/de-DE.mjs
var $1c6e1539193f1243$exports = {};
$1c6e1539193f1243$exports = {
  "Empty": `Leer`
};

// node_modules/@react-aria/spinbutton/dist/el-GR.mjs
var $1e8678632c464b6d$exports = {};
$1e8678632c464b6d$exports = {
  "Empty": `Άδειο`
};

// node_modules/@react-aria/spinbutton/dist/en-US.mjs
var $4adc85d9bf5b9eed$exports = {};
$4adc85d9bf5b9eed$exports = {
  "Empty": `Empty`
};

// node_modules/@react-aria/spinbutton/dist/es-ES.mjs
var $41c4b2bb61dafbca$exports = {};
$41c4b2bb61dafbca$exports = {
  "Empty": `Vacío`
};

// node_modules/@react-aria/spinbutton/dist/et-EE.mjs
var $405f8b24f5dd2a60$exports = {};
$405f8b24f5dd2a60$exports = {
  "Empty": `Tühjenda`
};

// node_modules/@react-aria/spinbutton/dist/fi-FI.mjs
var $7efe3ed02b9b9dd4$exports = {};
$7efe3ed02b9b9dd4$exports = {
  "Empty": `Tyhjä`
};

// node_modules/@react-aria/spinbutton/dist/fr-FR.mjs
var $99fc4c101d92daf3$exports = {};
$99fc4c101d92daf3$exports = {
  "Empty": `Vide`
};

// node_modules/@react-aria/spinbutton/dist/he-IL.mjs
var $f9e155e6e8cacaa2$exports = {};
$f9e155e6e8cacaa2$exports = {
  "Empty": `ריק`
};

// node_modules/@react-aria/spinbutton/dist/hr-HR.mjs
var $c31b5e8e9a249fd5$exports = {};
$c31b5e8e9a249fd5$exports = {
  "Empty": `Prazno`
};

// node_modules/@react-aria/spinbutton/dist/hu-HU.mjs
var $9c5435bc17499bd9$exports = {};
$9c5435bc17499bd9$exports = {
  "Empty": `Üres`
};

// node_modules/@react-aria/spinbutton/dist/it-IT.mjs
var $6d1fc8e84d8165e1$exports = {};
$6d1fc8e84d8165e1$exports = {
  "Empty": `Vuoto`
};

// node_modules/@react-aria/spinbutton/dist/ja-JP.mjs
var $46ea6b3641b83e71$exports = {};
$46ea6b3641b83e71$exports = {
  "Empty": `空`
};

// node_modules/@react-aria/spinbutton/dist/ko-KR.mjs
var $0e3cc9a288289dc5$exports = {};
$0e3cc9a288289dc5$exports = {
  "Empty": `비어 있음`
};

// node_modules/@react-aria/spinbutton/dist/lt-LT.mjs
var $4ff2bb25c0089ffb$exports = {};
$4ff2bb25c0089ffb$exports = {
  "Empty": `Tuščias`
};

// node_modules/@react-aria/spinbutton/dist/lv-LV.mjs
var $6cf33cd4c010a2fb$exports = {};
$6cf33cd4c010a2fb$exports = {
  "Empty": `Tukšs`
};

// node_modules/@react-aria/spinbutton/dist/nb-NO.mjs
var $5a9f8486f8b8837e$exports = {};
$5a9f8486f8b8837e$exports = {
  "Empty": `Tom`
};

// node_modules/@react-aria/spinbutton/dist/nl-NL.mjs
var $583f94d807f6ecea$exports = {};
$583f94d807f6ecea$exports = {
  "Empty": `Leeg`
};

// node_modules/@react-aria/spinbutton/dist/pl-PL.mjs
var $cc4dcfeea2b4050d$exports = {};
$cc4dcfeea2b4050d$exports = {
  "Empty": `Pusty`
};

// node_modules/@react-aria/spinbutton/dist/pt-BR.mjs
var $68ac2954d56e12b4$exports = {};
$68ac2954d56e12b4$exports = {
  "Empty": `Vazio`
};

// node_modules/@react-aria/spinbutton/dist/pt-PT.mjs
var $fdb0616f309780b0$exports = {};
$fdb0616f309780b0$exports = {
  "Empty": `Vazio`
};

// node_modules/@react-aria/spinbutton/dist/ro-RO.mjs
var $fe1eccf4ee1d6f52$exports = {};
$fe1eccf4ee1d6f52$exports = {
  "Empty": `Gol`
};

// node_modules/@react-aria/spinbutton/dist/ru-RU.mjs
var $a38b6c4e18725976$exports = {};
$a38b6c4e18725976$exports = {
  "Empty": `Не заполнено`
};

// node_modules/@react-aria/spinbutton/dist/sk-SK.mjs
var $6c14ae2b766b652c$exports = {};
$6c14ae2b766b652c$exports = {
  "Empty": `Prázdne`
};

// node_modules/@react-aria/spinbutton/dist/sl-SI.mjs
var $8f1c9692e16dc5eb$exports = {};
$8f1c9692e16dc5eb$exports = {
  "Empty": `Prazen`
};

// node_modules/@react-aria/spinbutton/dist/sr-SP.mjs
var $d2aa7abea627cafa$exports = {};
$d2aa7abea627cafa$exports = {
  "Empty": `Prazno`
};

// node_modules/@react-aria/spinbutton/dist/sv-SE.mjs
var $676b82e4b56408e6$exports = {};
$676b82e4b56408e6$exports = {
  "Empty": `Tomt`
};

// node_modules/@react-aria/spinbutton/dist/tr-TR.mjs
var $14c9042552d7ce08$exports = {};
$14c9042552d7ce08$exports = {
  "Empty": `Boş`
};

// node_modules/@react-aria/spinbutton/dist/uk-UA.mjs
var $393254ebcb66c9f5$exports = {};
$393254ebcb66c9f5$exports = {
  "Empty": `Пусто`
};

// node_modules/@react-aria/spinbutton/dist/zh-CN.mjs
var $d49d621f310cf6ce$exports = {};
$d49d621f310cf6ce$exports = {
  "Empty": `空`
};

// node_modules/@react-aria/spinbutton/dist/zh-TW.mjs
var $94b60c866ca5dfe6$exports = {};
$94b60c866ca5dfe6$exports = {
  "Empty": `空白`
};

// node_modules/@react-aria/live-announcer/dist/import.mjs
var $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7e3;
var $319e236875307eab$var$liveAnnouncer = null;
function $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = "assertive", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
  if (!$319e236875307eab$var$liveAnnouncer)
    $319e236875307eab$var$liveAnnouncer = new $319e236875307eab$var$LiveAnnouncer();
  $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);
}
function $319e236875307eab$export$d10ae4f68404609a(assertiveness) {
  if ($319e236875307eab$var$liveAnnouncer)
    $319e236875307eab$var$liveAnnouncer.clear(assertiveness);
}
var $319e236875307eab$var$LiveAnnouncer = class {
  createLog(ariaLive) {
    let node3 = document.createElement("div");
    node3.setAttribute("role", "log");
    node3.setAttribute("aria-live", ariaLive);
    node3.setAttribute("aria-relevant", "additions");
    return node3;
  }
  destroy() {
    if (!this.node)
      return;
    document.body.removeChild(this.node);
    this.node = null;
  }
  announce(message, assertiveness = "assertive", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
    if (!this.node)
      return;
    let node3 = document.createElement("div");
    node3.textContent = message;
    if (assertiveness === "assertive")
      this.assertiveLog.appendChild(node3);
    else
      this.politeLog.appendChild(node3);
    if (message !== "")
      setTimeout(() => {
        node3.remove();
      }, timeout);
  }
  clear(assertiveness) {
    if (!this.node)
      return;
    if (!assertiveness || assertiveness === "assertive")
      this.assertiveLog.innerHTML = "";
    if (!assertiveness || assertiveness === "polite")
      this.politeLog.innerHTML = "";
  }
  constructor() {
    this.node = document.createElement("div");
    this.node.dataset.liveAnnouncer = "true";
    Object.assign(this.node.style, {
      border: 0,
      clip: "rect(0 0 0 0)",
      clipPath: "inset(50%)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      width: "1px",
      whiteSpace: "nowrap"
    });
    this.assertiveLog = this.createLog("assertive");
    this.node.appendChild(this.assertiveLog);
    this.politeLog = this.createLog("polite");
    this.node.appendChild(this.politeLog);
    document.body.prepend(this.node);
  }
};

// node_modules/@react-aria/spinbutton/dist/import.mjs
var import_react235 = __toESM(require_react(), 1);
function $parcel$interopDefault(a2) {
  return a2 && a2.__esModule ? a2.default : a2;
}
var $a99895ee3dc79e61$exports = {};
$a99895ee3dc79e61$exports = {
  "ar-AE": $ed6aae4e5f766f1e$exports,
  "bg-BG": $38854e2b175151fa$exports,
  "cs-CZ": $15b25ab20f3945b2$exports,
  "da-DK": $692a4298b6b649a2$exports,
  "de-DE": $1c6e1539193f1243$exports,
  "el-GR": $1e8678632c464b6d$exports,
  "en-US": $4adc85d9bf5b9eed$exports,
  "es-ES": $41c4b2bb61dafbca$exports,
  "et-EE": $405f8b24f5dd2a60$exports,
  "fi-FI": $7efe3ed02b9b9dd4$exports,
  "fr-FR": $99fc4c101d92daf3$exports,
  "he-IL": $f9e155e6e8cacaa2$exports,
  "hr-HR": $c31b5e8e9a249fd5$exports,
  "hu-HU": $9c5435bc17499bd9$exports,
  "it-IT": $6d1fc8e84d8165e1$exports,
  "ja-JP": $46ea6b3641b83e71$exports,
  "ko-KR": $0e3cc9a288289dc5$exports,
  "lt-LT": $4ff2bb25c0089ffb$exports,
  "lv-LV": $6cf33cd4c010a2fb$exports,
  "nb-NO": $5a9f8486f8b8837e$exports,
  "nl-NL": $583f94d807f6ecea$exports,
  "pl-PL": $cc4dcfeea2b4050d$exports,
  "pt-BR": $68ac2954d56e12b4$exports,
  "pt-PT": $fdb0616f309780b0$exports,
  "ro-RO": $fe1eccf4ee1d6f52$exports,
  "ru-RU": $a38b6c4e18725976$exports,
  "sk-SK": $6c14ae2b766b652c$exports,
  "sl-SI": $8f1c9692e16dc5eb$exports,
  "sr-SP": $d2aa7abea627cafa$exports,
  "sv-SE": $676b82e4b56408e6$exports,
  "tr-TR": $14c9042552d7ce08$exports,
  "uk-UA": $393254ebcb66c9f5$exports,
  "zh-CN": $d49d621f310cf6ce$exports,
  "zh-TW": $94b60c866ca5dfe6$exports
};
function $d2e8511e6f209edf$export$e908e06f4b8e3402(props) {
  const _async = (0, import_react235.useRef)();
  let { value, textValue, minValue, maxValue, isDisabled: isDisabled3, isReadOnly, isRequired, onIncrement, onIncrementPage, onDecrement, onDecrementPage, onDecrementToMin, onIncrementToMax } = props;
  const stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault($a99895ee3dc79e61$exports)), "@react-aria/spinbutton");
  const clearAsync = () => clearTimeout(_async.current);
  (0, import_react235.useEffect)(() => {
    return () => clearAsync();
  }, []);
  let onKeyDown = (e) => {
    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly)
      return;
    switch (e.key) {
      case "PageUp":
        if (onIncrementPage) {
          e.preventDefault();
          onIncrementPage === null || onIncrementPage === void 0 ? void 0 : onIncrementPage();
          break;
        }
      case "ArrowUp":
      case "Up":
        if (onIncrement) {
          e.preventDefault();
          onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();
        }
        break;
      case "PageDown":
        if (onDecrementPage) {
          e.preventDefault();
          onDecrementPage === null || onDecrementPage === void 0 ? void 0 : onDecrementPage();
          break;
        }
      case "ArrowDown":
      case "Down":
        if (onDecrement) {
          e.preventDefault();
          onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();
        }
        break;
      case "Home":
        if (onDecrementToMin) {
          e.preventDefault();
          onDecrementToMin === null || onDecrementToMin === void 0 ? void 0 : onDecrementToMin();
        }
        break;
      case "End":
        if (onIncrementToMax) {
          e.preventDefault();
          onIncrementToMax === null || onIncrementToMax === void 0 ? void 0 : onIncrementToMax();
        }
        break;
    }
  };
  let isFocused = (0, import_react235.useRef)(false);
  let onFocus4 = () => {
    isFocused.current = true;
  };
  let onBlur3 = () => {
    isFocused.current = false;
  };
  let ariaTextValue = textValue === "" ? stringFormatter.format("Empty") : (textValue || `${value}`).replace("-", "−");
  (0, import_react235.useEffect)(() => {
    if (isFocused.current) {
      (0, $319e236875307eab$export$d10ae4f68404609a)("assertive");
      (0, $319e236875307eab$export$a9b970dcc4ae71a9)(ariaTextValue, "assertive");
    }
  }, [
    ariaTextValue
  ]);
  const onIncrementPressStart = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((initialStepDelay) => {
    clearAsync();
    onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();
    _async.current = window.setTimeout(() => {
      if (maxValue === void 0 || isNaN(maxValue) || value === void 0 || isNaN(value) || value < maxValue)
        onIncrementPressStart(60);
    }, initialStepDelay);
  });
  const onDecrementPressStart = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((initialStepDelay) => {
    clearAsync();
    onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();
    _async.current = window.setTimeout(() => {
      if (minValue === void 0 || isNaN(minValue) || value === void 0 || isNaN(value) || value > minValue)
        onDecrementPressStart(60);
    }, initialStepDelay);
  });
  let cancelContextMenu = (e) => {
    e.preventDefault();
  };
  let { addGlobalListener, removeAllGlobalListeners } = (0, $03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  return {
    spinButtonProps: {
      role: "spinbutton",
      "aria-valuenow": value !== void 0 && !isNaN(value) ? value : void 0,
      "aria-valuetext": ariaTextValue,
      "aria-valuemin": minValue,
      "aria-valuemax": maxValue,
      "aria-disabled": isDisabled3 || void 0,
      "aria-readonly": isReadOnly || void 0,
      "aria-required": isRequired || void 0,
      onKeyDown,
      onFocus: onFocus4,
      onBlur: onBlur3
    },
    incrementButtonProps: {
      onPressStart: () => {
        onIncrementPressStart(400);
        addGlobalListener(window, "contextmenu", cancelContextMenu);
      },
      onPressEnd: () => {
        clearAsync();
        removeAllGlobalListeners();
      },
      onFocus: onFocus4,
      onBlur: onBlur3
    },
    decrementButtonProps: {
      onPressStart: () => {
        onDecrementPressStart(400);
        addGlobalListener(window, "contextmenu", cancelContextMenu);
      },
      onPressEnd: () => {
        clearAsync();
        removeAllGlobalListeners();
      },
      onFocus: onFocus4,
      onBlur: onBlur3
    }
  };
}

// node_modules/@react-aria/datepicker/dist/import.mjs
function $parcel$interopDefault2(a2) {
  return a2 && a2.__esModule ? a2.default : a2;
}
var $dfb4eba373ed9493$exports = {};
$dfb4eba373ed9493$exports = {
  "ar-AE": $f23889fffbde9058$exports,
  "bg-BG": $09d9badaa8903929$exports,
  "cs-CZ": $151b77e0fd711730$exports,
  "da-DK": $61915aa8630b90a2$exports,
  "de-DE": $35cea00159787840$exports,
  "el-GR": $518b4e82b9eacafd$exports,
  "en-US": $1c2b297f7e2cf474$exports,
  "es-ES": $07f628a707cf9b18$exports,
  "et-EE": $db553ffe17c7f4db$exports,
  "fi-FI": $4afcfe00cd703f83$exports,
  "fr-FR": $1d2645d18d4c5be0$exports,
  "he-IL": $64cb6a9be1f6fa48$exports,
  "hr-HR": $2a1ef2e8050be27a$exports,
  "hu-HU": $ad429dca102acd0e$exports,
  "it-IT": $6e68cb5d1cb97bd2$exports,
  "ja-JP": $a82ee9af063ee069$exports,
  "ko-KR": $67e9091dbf37d4eb$exports,
  "lt-LT": $75834f9729f653d1$exports,
  "lv-LV": $a2df2c2520b4a7f0$exports,
  "nb-NO": $aedcd71db4933ed5$exports,
  "nl-NL": $3b2df9e54353046c$exports,
  "pl-PL": $c03fe977fcfafe93$exports,
  "pt-BR": $569f006fc292345f$exports,
  "pt-PT": $7c2494e14452f2dd$exports,
  "ro-RO": $eb82ef981b5592bf$exports,
  "ru-RU": $6efa0e119f396950$exports,
  "sk-SK": $7f5e57085d7f5049$exports,
  "sl-SI": $578ee7c11dcdde7a$exports,
  "sr-SP": $bbc3fd6cd0bc9d50$exports,
  "sv-SE": $0b04512118591d2a$exports,
  "tr-TR": $3a49d121fe4c9e1d$exports,
  "uk-UA": $5ba21dbb8914919d$exports,
  "zh-CN": $51078838e1b16cd7$exports,
  "zh-TW": $33fab8219207655a$exports
};
function $3dfb0f96be0d6a08$export$4a931266a3838b86(state2, ref, disableArrowNavigation) {
  let { direction: direction2 } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let focusManager = (0, import_react236.useMemo)(() => (0, $9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
    ref
  ]);
  let onKeyDown = (e) => {
    if (!e.currentTarget.contains(e.target))
      return;
    if (e.altKey && (e.key === "ArrowDown" || e.key === "ArrowUp") && "setOpen" in state2) {
      e.preventDefault();
      e.stopPropagation();
      state2.setOpen(true);
    }
    if (disableArrowNavigation)
      return;
    switch (e.key) {
      case "ArrowLeft":
        e.preventDefault();
        e.stopPropagation();
        if (direction2 === "rtl")
          focusManager.focusNext();
        else
          focusManager.focusPrevious();
        break;
      case "ArrowRight":
        e.preventDefault();
        e.stopPropagation();
        if (direction2 === "rtl")
          focusManager.focusPrevious();
        else
          focusManager.focusNext();
        break;
    }
  };
  let focusLast = () => {
    var _window_event;
    let target = (_window_event = window.event) === null || _window_event === void 0 ? void 0 : _window_event.target;
    let walker = (0, $9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
      tabbable: true
    });
    if (target) {
      walker.currentNode = target;
      target = walker.previousNode();
    }
    if (!target) {
      let last2;
      do {
        last2 = walker.lastChild();
        if (last2)
          target = last2;
      } while (last2);
    }
    while (target === null || target === void 0 ? void 0 : target.hasAttribute("data-placeholder")) {
      let prev2 = walker.previousNode();
      if (prev2 && prev2.hasAttribute("data-placeholder"))
        target = prev2;
      else
        break;
    }
    if (target)
      target.focus();
  };
  let { pressProps } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    preventFocusOnPress: true,
    allowTextSelectionOnPress: true,
    onPressStart(e) {
      if (e.pointerType === "mouse")
        focusLast();
    },
    onPress(e) {
      if (e.pointerType !== "mouse")
        focusLast();
    }
  });
  return (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, {
    onKeyDown
  });
}
var $16f0b7bb276bc17e$export$653eddfc964b0f8a = /* @__PURE__ */ new WeakMap();
var $16f0b7bb276bc17e$export$300019f83c56d282 = "__role_" + Date.now();
var $16f0b7bb276bc17e$export$7b3062cd49e80452 = "__focusManager_" + Date.now();
function $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state2, ref) {
  var _state_value;
  let { isInvalid, validationErrors, validationDetails } = state2.displayValidation;
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $2baaea4c71418dea$export$294aa081a6c6f55d)({
    ...props,
    labelElementType: "span",
    isInvalid,
    errorMessage: props.errorMessage || validationErrors
  });
  let valueOnFocus = (0, import_react236.useRef)(null);
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    ...props,
    onFocusWithin(e) {
      var _props_onFocus;
      valueOnFocus.current = state2.value;
      (_props_onFocus = props.onFocus) === null || _props_onFocus === void 0 ? void 0 : _props_onFocus.call(props, e);
    },
    onBlurWithin: (e) => {
      var _props_onBlur;
      state2.confirmPlaceholder();
      if (state2.value !== valueOnFocus.current)
        state2.commitValidation();
      (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);
    },
    onFocusWithinChange: props.onFocusChange
  });
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault2($dfb4eba373ed9493$exports)), "@react-aria/datepicker");
  let message = state2.maxGranularity === "hour" ? "selectedTimeDescription" : "selectedDateDescription";
  let field = state2.maxGranularity === "hour" ? "time" : "date";
  let description = state2.value ? stringFormatter.format(message, {
    [field]: state2.formatValue({
      month: "long"
    })
  }) : "";
  let descProps = (0, $ef06256079686ba0$export$f8aeda7b10753fa1)(description);
  let describedBy = props[$16f0b7bb276bc17e$export$300019f83c56d282] === "presentation" ? fieldProps["aria-describedby"] : [
    descProps["aria-describedby"],
    fieldProps["aria-describedby"]
  ].filter(Boolean).join(" ") || void 0;
  let propsFocusManager = props[$16f0b7bb276bc17e$export$7b3062cd49e80452];
  let focusManager = (0, import_react236.useMemo)(() => propsFocusManager || (0, $9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
    propsFocusManager,
    ref
  ]);
  let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state2, ref, props[$16f0b7bb276bc17e$export$300019f83c56d282] === "presentation");
  $16f0b7bb276bc17e$export$653eddfc964b0f8a.set(state2, {
    ariaLabel: props["aria-label"],
    ariaLabelledBy: [
      labelProps.id,
      props["aria-labelledby"]
    ].filter(Boolean).join(" ") || void 0,
    ariaDescribedBy: describedBy,
    focusManager
  });
  let autoFocusRef = (0, import_react236.useRef)(props.autoFocus);
  let fieldDOMProps;
  if (props[$16f0b7bb276bc17e$export$300019f83c56d282] === "presentation")
    fieldDOMProps = {
      role: "presentation"
    };
  else
    fieldDOMProps = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, {
      role: "group",
      "aria-disabled": props.isDisabled || void 0,
      "aria-describedby": describedBy
    });
  (0, import_react236.useEffect)(() => {
    if (autoFocusRef.current)
      focusManager.focusFirst();
    autoFocusRef.current = false;
  }, [
    focusManager
  ]);
  (0, $99facab73266f662$export$5add1d006293d136)(props.inputRef, state2.value, state2.setValue);
  (0, $e93e671b31057976$export$b8473d3665f3a75a)({
    ...props,
    focus() {
      focusManager.focusFirst();
    }
  }, state2, props.inputRef);
  let inputProps = {
    type: "hidden",
    name: props.name,
    value: ((_state_value = state2.value) === null || _state_value === void 0 ? void 0 : _state_value.toString()) || ""
  };
  if (props.validationBehavior === "native") {
    inputProps.type = "text";
    inputProps.hidden = true;
    inputProps.required = props.isRequired;
    inputProps.onChange = () => {
    };
  }
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
  return {
    labelProps: {
      ...labelProps,
      onClick: () => {
        focusManager.focusFirst();
      }
    },
    fieldProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, fieldDOMProps, groupProps, focusWithinProps, {
      onKeyDown(e) {
        if (props.onKeyDown)
          props.onKeyDown(e);
      },
      onKeyUp(e) {
        if (props.onKeyUp)
          props.onKeyUp(e);
      }
    }),
    inputProps,
    descriptionProps,
    errorMessageProps,
    isInvalid,
    validationErrors,
    validationDetails
  };
}
function $6057a3d2a53a12fd$export$42df105a73306d51(props, state2, ref) {
  let buttonId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let dialogId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let fieldId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault2($dfb4eba373ed9493$exports)), "@react-aria/datepicker");
  let { isInvalid, validationErrors, validationDetails } = state2.displayValidation;
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $2baaea4c71418dea$export$294aa081a6c6f55d)({
    ...props,
    labelElementType: "span",
    isInvalid,
    errorMessage: props.errorMessage || validationErrors
  });
  let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state2, ref);
  let labelledBy = fieldProps["aria-labelledby"] || fieldProps.id;
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let date = state2.formatValue(locale, {
    month: "long"
  });
  let description = date ? stringFormatter.format("selectedDateDescription", {
    date
  }) : "";
  let descProps = (0, $ef06256079686ba0$export$f8aeda7b10753fa1)(description);
  let ariaDescribedBy = [
    descProps["aria-describedby"],
    fieldProps["aria-describedby"]
  ].filter(Boolean).join(" ") || void 0;
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
  let focusManager = (0, import_react236.useMemo)(() => (0, $9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
    ref
  ]);
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    ...props,
    isDisabled: state2.isOpen,
    onBlurWithin: props.onBlur,
    onFocusWithin: props.onFocus,
    onFocusWithinChange: props.onFocusChange
  });
  return {
    groupProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {
      role: "group",
      "aria-disabled": props.isDisabled || null,
      "aria-labelledby": labelledBy,
      "aria-describedby": ariaDescribedBy,
      onKeyDown(e) {
        if (state2.isOpen)
          return;
        if (props.onKeyDown)
          props.onKeyDown(e);
      },
      onKeyUp(e) {
        if (state2.isOpen)
          return;
        if (props.onKeyUp)
          props.onKeyUp(e);
      }
    }),
    labelProps: {
      ...labelProps,
      onClick: () => {
        focusManager.focusFirst();
      }
    },
    fieldProps: {
      ...fieldProps,
      id: fieldId,
      [(0, $16f0b7bb276bc17e$export$300019f83c56d282)]: "presentation",
      "aria-describedby": ariaDescribedBy,
      value: state2.value,
      onChange: state2.setValue,
      placeholderValue: props.placeholderValue,
      hideTimeZone: props.hideTimeZone,
      hourCycle: props.hourCycle,
      shouldForceLeadingZeros: props.shouldForceLeadingZeros,
      granularity: props.granularity,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isRequired: props.isRequired,
      validationBehavior: props.validationBehavior,
      // DatePicker owns the validation state for the date field.
      [(0, $e5be200c675c3b3a$export$a763b9476acd3eb)]: state2,
      autoFocus: props.autoFocus,
      name: props.name
    },
    descriptionProps,
    errorMessageProps,
    buttonProps: {
      ...descProps,
      id: buttonId,
      "aria-haspopup": "dialog",
      "aria-label": stringFormatter.format("calendar"),
      "aria-labelledby": `${buttonId} ${labelledBy}`,
      "aria-describedby": ariaDescribedBy,
      "aria-expanded": state2.isOpen,
      isDisabled: props.isDisabled || props.isReadOnly,
      onPress: () => state2.setOpen(true)
    },
    dialogProps: {
      id: dialogId,
      "aria-labelledby": `${buttonId} ${labelledBy}`
    },
    calendarProps: {
      autoFocus: true,
      value: state2.dateValue,
      onChange: state2.setDateValue,
      minValue: props.minValue,
      maxValue: props.maxValue,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isDateUnavailable: props.isDateUnavailable,
      defaultFocusedValue: state2.dateValue ? void 0 : props.placeholderValue,
      isInvalid: state2.isInvalid,
      errorMessage: typeof props.errorMessage === "function" ? props.errorMessage(state2.displayValidation) : props.errorMessage || state2.displayValidation.validationErrors.join(" ")
    },
    isInvalid,
    validationErrors,
    validationDetails
  };
}
function $3aeceb3a64eb8358$export$d42c60378c8168f8() {
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let dictionary = (0, $fca6afa0e843324b$export$87b761675e8eaa10)((0, $parcel$interopDefault2($dfb4eba373ed9493$exports)), "@react-aria/datepicker");
  return (0, import_react236.useMemo)(() => {
    try {
      return new Intl.DisplayNames(locale, {
        type: "dateTimeField"
      });
    } catch (err) {
      return new $3aeceb3a64eb8358$var$DisplayNamesPolyfill(locale, dictionary);
    }
  }, [
    locale,
    dictionary
  ]);
}
var $3aeceb3a64eb8358$var$DisplayNamesPolyfill = class {
  of(field) {
    return this.dictionary.getStringForLocale(field, this.locale);
  }
  constructor(locale, dictionary) {
    this.locale = locale;
    this.dictionary = dictionary;
  }
};
function $32489daedd52963e$export$1315d136e6f7581(segment, state2, ref) {
  let enteredKeys = (0, import_react236.useRef)("");
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let displayNames = (0, $3aeceb3a64eb8358$export$d42c60378c8168f8)();
  let { ariaLabel, ariaLabelledBy, ariaDescribedBy, focusManager } = (0, $16f0b7bb276bc17e$export$653eddfc964b0f8a).get(state2);
  let textValue = segment.isPlaceholder ? "" : segment.text;
  let options2 = (0, import_react236.useMemo)(() => state2.dateFormatter.resolvedOptions(), [
    state2.dateFormatter
  ]);
  let monthDateFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    month: "long",
    timeZone: options2.timeZone
  });
  let hourDateFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    hour: "numeric",
    hour12: options2.hour12,
    timeZone: options2.timeZone
  });
  if (segment.type === "month" && !segment.isPlaceholder) {
    let monthTextValue = monthDateFormatter.format(state2.dateValue);
    textValue = monthTextValue !== textValue ? `${textValue} – ${monthTextValue}` : monthTextValue;
  } else if (segment.type === "hour" && !segment.isPlaceholder)
    textValue = hourDateFormatter.format(state2.dateValue);
  let { spinButtonProps } = (0, $d2e8511e6f209edf$export$e908e06f4b8e3402)({
    // The ARIA spec says aria-valuenow is optional if there's no value, but aXe seems to require it.
    // This doesn't seem to have any negative effects with real AT since we also use aria-valuetext.
    // https://github.com/dequelabs/axe-core/issues/3505
    value: segment.value,
    textValue,
    minValue: segment.minValue,
    maxValue: segment.maxValue,
    isDisabled: state2.isDisabled,
    isReadOnly: state2.isReadOnly || !segment.isEditable,
    isRequired: state2.isRequired,
    onIncrement: () => {
      enteredKeys.current = "";
      state2.increment(segment.type);
    },
    onDecrement: () => {
      enteredKeys.current = "";
      state2.decrement(segment.type);
    },
    onIncrementPage: () => {
      enteredKeys.current = "";
      state2.incrementPage(segment.type);
    },
    onDecrementPage: () => {
      enteredKeys.current = "";
      state2.decrementPage(segment.type);
    },
    onIncrementToMax: () => {
      enteredKeys.current = "";
      state2.setSegment(segment.type, segment.maxValue);
    },
    onDecrementToMin: () => {
      enteredKeys.current = "";
      state2.setSegment(segment.type, segment.minValue);
    }
  });
  let parser = (0, import_react236.useMemo)(() => new (0, $6c7bd7858deea686$export$cd11ab140839f11d)(locale, {
    maximumFractionDigits: 0
  }), [
    locale
  ]);
  let backspace = () => {
    if (parser.isValidPartialNumber(segment.text) && !state2.isReadOnly && !segment.isPlaceholder) {
      let newValue = segment.text.slice(0, -1);
      let parsed = parser.parse(newValue);
      if (newValue.length === 0 || parsed === 0)
        state2.clearSegment(segment.type);
      else
        state2.setSegment(segment.type, parsed);
      enteredKeys.current = newValue;
    } else if (segment.type === "dayPeriod")
      state2.clearSegment(segment.type);
  };
  let onKeyDown = (e) => {
    if (e.key === "a" && ((0, $c87311424ea30a05$export$9ac100e40613ea10)() ? e.metaKey : e.ctrlKey))
      e.preventDefault();
    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey)
      return;
    switch (e.key) {
      case "Backspace":
      case "Delete":
        e.preventDefault();
        e.stopPropagation();
        backspace();
        break;
    }
  };
  let { startsWith: startsWith4 } = (0, $bb77f239b46e8c72$export$3274cf84b703fff)({
    sensitivity: "base"
  });
  let amPmFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    hour: "numeric",
    hour12: true
  });
  let am = (0, import_react236.useMemo)(() => {
    let date = /* @__PURE__ */ new Date();
    date.setHours(0);
    return amPmFormatter.formatToParts(date).find((part) => part.type === "dayPeriod").value;
  }, [
    amPmFormatter
  ]);
  let pm = (0, import_react236.useMemo)(() => {
    let date = /* @__PURE__ */ new Date();
    date.setHours(12);
    return amPmFormatter.formatToParts(date).find((part) => part.type === "dayPeriod").value;
  }, [
    amPmFormatter
  ]);
  let eraFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    year: "numeric",
    era: "narrow",
    timeZone: "UTC"
  });
  let eras = (0, import_react236.useMemo)(() => {
    if (segment.type !== "era")
      return [];
    let date = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(1, 1, 1), state2.calendar);
    let eras2 = state2.calendar.getEras().map((era) => {
      let eraDate = date.set({
        year: 1,
        month: 1,
        day: 1,
        era
      }).toDate("UTC");
      let parts = eraFormatter.formatToParts(eraDate);
      let formatted = parts.find((p) => p.type === "era").value;
      return {
        era,
        formatted
      };
    });
    let prefixLength = $32489daedd52963e$var$commonPrefixLength(eras2.map((era) => era.formatted));
    if (prefixLength)
      for (let era of eras2)
        era.formatted = era.formatted.slice(prefixLength);
    return eras2;
  }, [
    eraFormatter,
    state2.calendar,
    segment.type
  ]);
  let onInput = (key2) => {
    if (state2.isDisabled || state2.isReadOnly)
      return;
    let newValue = enteredKeys.current + key2;
    switch (segment.type) {
      case "dayPeriod":
        if (startsWith4(am, key2))
          state2.setSegment("dayPeriod", 0);
        else if (startsWith4(pm, key2))
          state2.setSegment("dayPeriod", 12);
        else
          break;
        focusManager.focusNext();
        break;
      case "era": {
        let matched = eras.find((e) => startsWith4(e.formatted, key2));
        if (matched) {
          state2.setSegment("era", matched.era);
          focusManager.focusNext();
        }
        break;
      }
      case "day":
      case "hour":
      case "minute":
      case "second":
      case "month":
      case "year": {
        if (!parser.isValidPartialNumber(newValue))
          return;
        let numberValue = parser.parse(newValue);
        let segmentValue = numberValue;
        let allowsZero = segment.minValue === 0;
        if (segment.type === "hour" && state2.dateFormatter.resolvedOptions().hour12) {
          switch (state2.dateFormatter.resolvedOptions().hourCycle) {
            case "h11":
              if (numberValue > 11)
                segmentValue = parser.parse(key2);
              break;
            case "h12":
              allowsZero = false;
              if (numberValue > 12)
                segmentValue = parser.parse(key2);
              break;
          }
          if (segment.value >= 12 && numberValue > 1)
            numberValue += 12;
        } else if (numberValue > segment.maxValue)
          segmentValue = parser.parse(key2);
        if (isNaN(numberValue))
          return;
        let shouldSetValue = segmentValue !== 0 || allowsZero;
        if (shouldSetValue)
          state2.setSegment(segment.type, segmentValue);
        if (Number(numberValue + "0") > segment.maxValue || newValue.length >= String(segment.maxValue).length) {
          enteredKeys.current = "";
          if (shouldSetValue)
            focusManager.focusNext();
        } else
          enteredKeys.current = newValue;
        break;
      }
    }
  };
  let onFocus4 = () => {
    enteredKeys.current = "";
    (0, $2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
      containingElement: (0, $62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
    });
    let selection = window.getSelection();
    selection.collapse(ref.current);
  };
  let compositionRef = (0, import_react236.useRef)("");
  (0, $e9faafb641e167db$export$90fc3a17d93f704c)(ref, "beforeinput", (e) => {
    e.preventDefault();
    switch (e.inputType) {
      case "deleteContentBackward":
      case "deleteContentForward":
        if (parser.isValidPartialNumber(segment.text) && !state2.isReadOnly)
          backspace();
        break;
      case "insertCompositionText":
        compositionRef.current = ref.current.textContent;
        ref.current.textContent = ref.current.textContent;
        break;
      default:
        if (e.data != null)
          onInput(e.data);
        break;
    }
  });
  (0, $e9faafb641e167db$export$90fc3a17d93f704c)(ref, "input", (e) => {
    let { inputType, data } = e;
    switch (inputType) {
      case "insertCompositionText":
        ref.current.textContent = compositionRef.current;
        if (startsWith4(am, data) || startsWith4(pm, data))
          onInput(data);
        break;
    }
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let element = ref.current;
    return () => {
      if (document.activeElement === element) {
        let prev2 = focusManager.focusPrevious();
        if (!prev2)
          focusManager.focusNext();
      }
    };
  }, [
    ref,
    focusManager
  ]);
  let touchPropOverrides = (0, $c87311424ea30a05$export$fedb369cb70207f1)() || segment.type === "timeZoneName" ? {
    role: "textbox",
    "aria-valuemax": null,
    "aria-valuemin": null,
    "aria-valuetext": null,
    "aria-valuenow": null
  } : {};
  let firstSegment = (0, import_react236.useMemo)(() => state2.segments.find((s) => s.isEditable), [
    state2.segments
  ]);
  if (segment !== firstSegment && !state2.isInvalid)
    ariaDescribedBy = void 0;
  let id3 = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let isEditable = !state2.isDisabled && !state2.isReadOnly && segment.isEditable;
  let name = segment.type === "literal" ? "" : displayNames.of(segment.type);
  let labelProps = (0, $313b98861ee5dd6c$export$d6875122194c7b44)({
    "aria-label": `${name}${ariaLabel ? `, ${ariaLabel}` : ""}${ariaLabelledBy ? ", " : ""}`,
    "aria-labelledby": ariaLabelledBy
  });
  if (segment.type === "literal")
    return {
      segmentProps: {
        "aria-hidden": true
      }
    };
  return {
    segmentProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(spinButtonProps, labelProps, {
      id: id3,
      ...touchPropOverrides,
      "aria-invalid": state2.isInvalid ? "true" : void 0,
      "aria-describedby": ariaDescribedBy,
      "aria-readonly": state2.isReadOnly || !segment.isEditable ? "true" : void 0,
      "data-placeholder": segment.isPlaceholder || void 0,
      contentEditable: isEditable,
      suppressContentEditableWarning: isEditable,
      spellCheck: isEditable ? "false" : void 0,
      autoCapitalize: isEditable ? "off" : void 0,
      autoCorrect: isEditable ? "off" : void 0,
      // Capitalization was changed in React 17...
      [parseInt((0, import_react236.default).version, 10) >= 17 ? "enterKeyHint" : "enterkeyhint"]: isEditable ? "next" : void 0,
      inputMode: state2.isDisabled || segment.type === "dayPeriod" || segment.type === "era" || !isEditable ? void 0 : "numeric",
      tabIndex: state2.isDisabled ? void 0 : 0,
      onKeyDown,
      onFocus: onFocus4,
      style: {
        caretColor: "transparent"
      },
      // Prevent pointer events from reaching useDatePickerGroup, and allow native browser behavior to focus the segment.
      onPointerDown(e) {
        e.stopPropagation();
      },
      onMouseDown(e) {
        e.stopPropagation();
      }
    })
  };
}
function $32489daedd52963e$var$commonPrefixLength(strings) {
  strings.sort();
  let first = strings[0];
  let last2 = strings[strings.length - 1];
  for (let i2 = 0; i2 < first.length; i2++) {
    if (first[i2] !== last2[i2])
      return i2;
  }
  return 0;
}
function $887cac91b7cc8801$export$12fd5f0e9f4bb192(props, state2, ref) {
  var _state_value, _state_value1;
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault2($dfb4eba373ed9493$exports)), "@react-aria/datepicker");
  let { isInvalid, validationErrors, validationDetails } = state2.displayValidation;
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $2baaea4c71418dea$export$294aa081a6c6f55d)({
    ...props,
    labelElementType: "span",
    isInvalid,
    errorMessage: props.errorMessage || validationErrors
  });
  let labelledBy = fieldProps["aria-labelledby"] || fieldProps.id;
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let range2 = state2.formatValue(locale, {
    month: "long"
  });
  let description = range2 ? stringFormatter.format("selectedRangeDescription", {
    startDate: range2.start,
    endDate: range2.end
  }) : "";
  let descProps = (0, $ef06256079686ba0$export$f8aeda7b10753fa1)(description);
  let startFieldProps = {
    "aria-label": stringFormatter.format("startDate"),
    "aria-labelledby": labelledBy
  };
  let endFieldProps = {
    "aria-label": stringFormatter.format("endDate"),
    "aria-labelledby": labelledBy
  };
  let buttonId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let dialogId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state2, ref);
  let ariaDescribedBy = [
    descProps["aria-describedby"],
    fieldProps["aria-describedby"]
  ].filter(Boolean).join(" ") || void 0;
  let focusManager = (0, import_react236.useMemo)(() => (0, $9bf71ea28793e738$export$c5251b9e124bf29)(ref, {
    // Exclude the button from the focus manager.
    accept: (element) => element.id !== buttonId
  }), [
    ref,
    buttonId
  ]);
  let commonFieldProps = {
    [(0, $16f0b7bb276bc17e$export$7b3062cd49e80452)]: focusManager,
    [(0, $16f0b7bb276bc17e$export$300019f83c56d282)]: "presentation",
    "aria-describedby": ariaDescribedBy,
    placeholderValue: props.placeholderValue,
    hideTimeZone: props.hideTimeZone,
    hourCycle: props.hourCycle,
    granularity: props.granularity,
    shouldForceLeadingZeros: props.shouldForceLeadingZeros,
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    isRequired: props.isRequired,
    validationBehavior: props.validationBehavior
  };
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
  let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
    ...props,
    isDisabled: state2.isOpen,
    onBlurWithin: props.onBlur,
    onFocusWithin: props.onFocus,
    onFocusWithinChange: props.onFocusChange
  });
  let startFieldValidation = (0, import_react236.useRef)((0, $e5be200c675c3b3a$export$dad6ae84456c676a));
  let endFieldValidation = (0, import_react236.useRef)((0, $e5be200c675c3b3a$export$dad6ae84456c676a));
  return {
    groupProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {
      role: "group",
      "aria-disabled": props.isDisabled || null,
      "aria-describedby": ariaDescribedBy,
      onKeyDown(e) {
        if (state2.isOpen)
          return;
        if (props.onKeyDown)
          props.onKeyDown(e);
      },
      onKeyUp(e) {
        if (state2.isOpen)
          return;
        if (props.onKeyUp)
          props.onKeyUp(e);
      }
    }),
    labelProps: {
      ...labelProps,
      onClick: () => {
        focusManager.focusFirst();
      }
    },
    buttonProps: {
      ...descProps,
      id: buttonId,
      "aria-haspopup": "dialog",
      "aria-label": stringFormatter.format("calendar"),
      "aria-labelledby": `${buttonId} ${labelledBy}`,
      "aria-describedby": ariaDescribedBy,
      "aria-expanded": state2.isOpen,
      isDisabled: props.isDisabled || props.isReadOnly,
      onPress: () => state2.setOpen(true)
    },
    dialogProps: {
      id: dialogId,
      "aria-labelledby": `${buttonId} ${labelledBy}`
    },
    startFieldProps: {
      ...startFieldProps,
      ...commonFieldProps,
      value: (_state_value = state2.value) === null || _state_value === void 0 ? void 0 : _state_value.start,
      onChange: (start2) => state2.setDateTime("start", start2),
      autoFocus: props.autoFocus,
      name: props.startName,
      [(0, $e5be200c675c3b3a$export$a763b9476acd3eb)]: {
        realtimeValidation: state2.realtimeValidation,
        displayValidation: state2.displayValidation,
        updateValidation(e) {
          startFieldValidation.current = e;
          state2.updateValidation((0, $e5be200c675c3b3a$export$75ee7c75d68f5b0e)(e, endFieldValidation.current));
        },
        resetValidation: state2.resetValidation,
        commitValidation: state2.commitValidation
      }
    },
    endFieldProps: {
      ...endFieldProps,
      ...commonFieldProps,
      value: (_state_value1 = state2.value) === null || _state_value1 === void 0 ? void 0 : _state_value1.end,
      onChange: (end2) => state2.setDateTime("end", end2),
      name: props.endName,
      [(0, $e5be200c675c3b3a$export$a763b9476acd3eb)]: {
        realtimeValidation: state2.realtimeValidation,
        displayValidation: state2.displayValidation,
        updateValidation(e) {
          endFieldValidation.current = e;
          state2.updateValidation((0, $e5be200c675c3b3a$export$75ee7c75d68f5b0e)(startFieldValidation.current, e));
        },
        resetValidation: state2.resetValidation,
        commitValidation: state2.commitValidation
      }
    },
    descriptionProps,
    errorMessageProps,
    calendarProps: {
      autoFocus: true,
      value: state2.dateRange,
      onChange: state2.setDateRange,
      minValue: props.minValue,
      maxValue: props.maxValue,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isDateUnavailable: props.isDateUnavailable,
      allowsNonContiguousRanges: props.allowsNonContiguousRanges,
      defaultFocusedValue: state2.dateRange ? void 0 : props.placeholderValue,
      isInvalid: state2.isInvalid,
      errorMessage: typeof props.errorMessage === "function" ? props.errorMessage(state2.displayValidation) : props.errorMessage || state2.displayValidation.validationErrors.join(" ")
    },
    isInvalid,
    validationErrors,
    validationDetails
  };
}

// node_modules/@react-stately/datepicker/dist/ar-AE.mjs
var $b3427c06585c22a0$exports = {};
$b3427c06585c22a0$exports = {
  "rangeOverflow": (args) => `يجب أن تكون القيمة ${args.maxValue} أو قبل ذلك.`,
  "rangeReversed": `تاريخ البدء يجب أن يكون قبل تاريخ الانتهاء.`,
  "rangeUnderflow": (args) => `يجب أن تكون القيمة ${args.minValue} أو بعد ذلك.`,
  "unavailableDate": `البيانات المحددة غير متاحة.`
};

// node_modules/@react-stately/datepicker/dist/bg-BG.mjs
var $d282528f459122b9$exports = {};
$d282528f459122b9$exports = {
  "rangeOverflow": (args) => `Стойността трябва да е ${args.maxValue} или по-ранна.`,
  "rangeReversed": `Началната дата трябва да е преди крайната.`,
  "rangeUnderflow": (args) => `Стойността трябва да е ${args.minValue} или по-късно.`,
  "unavailableDate": `Избраната дата не е налична.`
};

// node_modules/@react-stately/datepicker/dist/cs-CZ.mjs
var $2d5eecd634a9ca45$exports = {};
$2d5eecd634a9ca45$exports = {
  "rangeOverflow": (args) => `Hodnota musí být ${args.maxValue} nebo dřívější.`,
  "rangeReversed": `Datum zahájení musí předcházet datu ukončení.`,
  "rangeUnderflow": (args) => `Hodnota musí být ${args.minValue} nebo pozdější.`,
  "unavailableDate": `Vybrané datum není k dispozici.`
};

// node_modules/@react-stately/datepicker/dist/da-DK.mjs
var $c8e2288226c24a67$exports = {};
$c8e2288226c24a67$exports = {
  "rangeOverflow": (args) => `Værdien skal være ${args.maxValue} eller tidligere.`,
  "rangeReversed": `Startdatoen skal være før slutdatoen.`,
  "rangeUnderflow": (args) => `Værdien skal være ${args.minValue} eller nyere.`,
  "unavailableDate": `Den valgte dato er ikke tilgængelig.`
};

// node_modules/@react-stately/datepicker/dist/de-DE.mjs
var $6f5745e389c346d7$exports = {};
$6f5745e389c346d7$exports = {
  "rangeOverflow": (args) => `Der Wert muss ${args.maxValue} oder früher sein.`,
  "rangeReversed": `Das Anfangsdatum muss vor dem Enddatum liegen.`,
  "rangeUnderflow": (args) => `Der Wert muss ${args.minValue} oder später sein.`,
  "unavailableDate": `Das ausgewählte Datum ist nicht verfügbar.`
};

// node_modules/@react-stately/datepicker/dist/el-GR.mjs
var $8c882ccf4300d1da$exports = {};
$8c882ccf4300d1da$exports = {
  "rangeOverflow": (args) => `Η τιμή πρέπει να είναι ${args.maxValue} ή παλαιότερη.`,
  "rangeReversed": `Η ημερομηνία έναρξης πρέπει να είναι πριν από την ημερομηνία λήξης.`,
  "rangeUnderflow": (args) => `Η τιμή πρέπει να είναι ${args.minValue} ή μεταγενέστερη.`,
  "unavailableDate": `Η επιλεγμένη ημερομηνία δεν είναι διαθέσιμη.`
};

// node_modules/@react-stately/datepicker/dist/en-US.mjs
var $22195056771860be$exports = {};
$22195056771860be$exports = {
  "rangeUnderflow": (args) => `Value must be ${args.minValue} or later.`,
  "rangeOverflow": (args) => `Value must be ${args.maxValue} or earlier.`,
  "rangeReversed": `Start date must be before end date.`,
  "unavailableDate": `Selected date unavailable.`
};

// node_modules/@react-stately/datepicker/dist/es-ES.mjs
var $cedfa43b4e2a5906$exports = {};
$cedfa43b4e2a5906$exports = {
  "rangeOverflow": (args) => `El valor debe ser ${args.maxValue} o anterior.`,
  "rangeReversed": `La fecha de inicio debe ser anterior a la fecha de finalización.`,
  "rangeUnderflow": (args) => `El valor debe ser ${args.minValue} o posterior.`,
  "unavailableDate": `Fecha seleccionada no disponible.`
};

// node_modules/@react-stately/datepicker/dist/et-EE.mjs
var $eeeaa8daee3601c7$exports = {};
$eeeaa8daee3601c7$exports = {
  "rangeOverflow": (args) => `Väärtus peab olema ${args.maxValue} või varasem.`,
  "rangeReversed": `Alguskuupäev peab olema enne lõppkuupäeva.`,
  "rangeUnderflow": (args) => `Väärtus peab olema ${args.minValue} või hilisem.`,
  "unavailableDate": `Valitud kuupäev pole saadaval.`
};

// node_modules/@react-stately/datepicker/dist/fi-FI.mjs
var $35e0614a49b3bb40$exports = {};
$35e0614a49b3bb40$exports = {
  "rangeOverflow": (args) => `Arvon on oltava ${args.maxValue} tai sitä aikaisempi.`,
  "rangeReversed": `Aloituspäivän on oltava ennen lopetuspäivää.`,
  "rangeUnderflow": (args) => `Arvon on oltava ${args.minValue} tai sitä myöhäisempi.`,
  "unavailableDate": `Valittu päivämäärä ei ole käytettävissä.`
};

// node_modules/@react-stately/datepicker/dist/fr-FR.mjs
var $929bc63f7705a78f$exports = {};
$929bc63f7705a78f$exports = {
  "rangeOverflow": (args) => `La valeur doit être ${args.maxValue} ou antérieure.`,
  "rangeReversed": `La date de début doit être antérieure à la date de fin.`,
  "rangeUnderflow": (args) => `La valeur doit être ${args.minValue} ou ultérieure.`,
  "unavailableDate": `La date sélectionnée n’est pas disponible.`
};

// node_modules/@react-stately/datepicker/dist/he-IL.mjs
var $9a28d073b034d183$exports = {};
$9a28d073b034d183$exports = {
  "rangeOverflow": (args) => `הערך חייב להיות ${args.maxValue} או מוקדם יותר.`,
  "rangeReversed": `תאריך ההתחלה חייב להיות לפני תאריך הסיום.`,
  "rangeUnderflow": (args) => `הערך חייב להיות ${args.minValue} או מאוחר יותר.`,
  "unavailableDate": `התאריך הנבחר אינו זמין.`
};

// node_modules/@react-stately/datepicker/dist/hr-HR.mjs
var $7743e79780ebcca3$exports = {};
$7743e79780ebcca3$exports = {
  "rangeOverflow": (args) => `Vrijednost mora biti ${args.maxValue} ili ranije.`,
  "rangeReversed": `Datum početka mora biti prije datuma završetka.`,
  "rangeUnderflow": (args) => `Vrijednost mora biti ${args.minValue} ili kasnije.`,
  "unavailableDate": `Odabrani datum nije dostupan.`
};

// node_modules/@react-stately/datepicker/dist/hu-HU.mjs
var $3351817a04898858$exports = {};
$3351817a04898858$exports = {
  "rangeOverflow": (args) => `Az értéknek ${args.maxValue} vagy korábbinak kell lennie.`,
  "rangeReversed": `A kezdő dátumnak a befejező dátumnál korábbinak kell lennie.`,
  "rangeUnderflow": (args) => `Az értéknek ${args.minValue} vagy későbbinek kell lennie.`,
  "unavailableDate": `A kiválasztott dátum nem érhető el.`
};

// node_modules/@react-stately/datepicker/dist/it-IT.mjs
var $4120bdb1d03484db$exports = {};
$4120bdb1d03484db$exports = {
  "rangeOverflow": (args) => `Il valore deve essere ${args.maxValue} o precedente.`,
  "rangeReversed": `La data di inizio deve essere antecedente alla data di fine.`,
  "rangeUnderflow": (args) => `Il valore deve essere ${args.minValue} o successivo.`,
  "unavailableDate": `Data selezionata non disponibile.`
};

// node_modules/@react-stately/datepicker/dist/ja-JP.mjs
var $65e5e1569f34ea4f$exports = {};
$65e5e1569f34ea4f$exports = {
  "rangeOverflow": (args) => `値は ${args.maxValue} 以下にする必要があります。`,
  "rangeReversed": `開始日は終了日より前にする必要があります。`,
  "rangeUnderflow": (args) => `値は ${args.minValue} 以上にする必要があります。`,
  "unavailableDate": `選択した日付は使用できません。`
};

// node_modules/@react-stately/datepicker/dist/ko-KR.mjs
var $d34552a7550967e7$exports = {};
$d34552a7550967e7$exports = {
  "rangeOverflow": (args) => `값은 ${args.maxValue} 이전이어야 합니다.`,
  "rangeReversed": `시작일은 종료일 이전이어야 합니다.`,
  "rangeUnderflow": (args) => `값은 ${args.minValue} 이상이어야 합니다.`,
  "unavailableDate": `선택한 날짜를 사용할 수 없습니다.`
};

// node_modules/@react-stately/datepicker/dist/lt-LT.mjs
var $8f855bffe63f6eca$exports = {};
$8f855bffe63f6eca$exports = {
  "rangeOverflow": (args) => `Reikšmė turi būti ${args.maxValue} arba ankstesnė.`,
  "rangeReversed": `Pradžios data turi būti ankstesnė nei pabaigos data.`,
  "rangeUnderflow": (args) => `Reikšmė turi būti ${args.minValue} arba naujesnė.`,
  "unavailableDate": `Pasirinkta data nepasiekiama.`
};

// node_modules/@react-stately/datepicker/dist/lv-LV.mjs
var $ce40f46d09034645$exports = {};
$ce40f46d09034645$exports = {
  "rangeOverflow": (args) => `Vērtībai ir jābūt ${args.maxValue} vai agrākai.`,
  "rangeReversed": `Sākuma datumam ir jābūt pirms beigu datuma.`,
  "rangeUnderflow": (args) => `Vērtībai ir jābūt ${args.minValue} vai vēlākai.`,
  "unavailableDate": `Atlasītais datums nav pieejams.`
};

// node_modules/@react-stately/datepicker/dist/nb-NO.mjs
var $dd1a9a73340c793e$exports = {};
$dd1a9a73340c793e$exports = {
  "rangeOverflow": (args) => `Verdien må være ${args.maxValue} eller tidligere.`,
  "rangeReversed": `Startdatoen må være før sluttdatoen.`,
  "rangeUnderflow": (args) => `Verdien må være ${args.minValue} eller senere.`,
  "unavailableDate": `Valgt dato utilgjengelig.`
};

// node_modules/@react-stately/datepicker/dist/nl-NL.mjs
var $4ee1fb3f0cbe6f59$exports = {};
$4ee1fb3f0cbe6f59$exports = {
  "rangeOverflow": (args) => `Waarde moet ${args.maxValue} of eerder zijn.`,
  "rangeReversed": `De startdatum moet voor de einddatum liggen.`,
  "rangeUnderflow": (args) => `Waarde moet ${args.minValue} of later zijn.`,
  "unavailableDate": `Geselecteerde datum niet beschikbaar.`
};

// node_modules/@react-stately/datepicker/dist/pl-PL.mjs
var $c85829aebb0bc94b$exports = {};
$c85829aebb0bc94b$exports = {
  "rangeOverflow": (args) => `Wartość musi mieć wartość ${args.maxValue} lub wcześniejszą.`,
  "rangeReversed": `Data rozpoczęcia musi być wcześniejsza niż data zakończenia.`,
  "rangeUnderflow": (args) => `Wartość musi mieć wartość ${args.minValue} lub późniejszą.`,
  "unavailableDate": `Wybrana data jest niedostępna.`
};

// node_modules/@react-stately/datepicker/dist/pt-BR.mjs
var $27f5cd2291ca8a02$exports = {};
$27f5cd2291ca8a02$exports = {
  "rangeOverflow": (args) => `O valor deve ser ${args.maxValue} ou anterior.`,
  "rangeReversed": `A data inicial deve ser anterior à data final.`,
  "rangeUnderflow": (args) => `O valor deve ser ${args.minValue} ou posterior.`,
  "unavailableDate": `Data selecionada indisponível.`
};

// node_modules/@react-stately/datepicker/dist/pt-PT.mjs
var $e046fdccd69bea8e$exports = {};
$e046fdccd69bea8e$exports = {
  "rangeOverflow": (args) => `O valor tem de ser ${args.maxValue} ou anterior.`,
  "rangeReversed": `A data de início deve ser anterior à data de fim.`,
  "rangeUnderflow": (args) => `O valor tem de ser ${args.minValue} ou posterior.`,
  "unavailableDate": `Data selecionada indisponível.`
};

// node_modules/@react-stately/datepicker/dist/ro-RO.mjs
var $fa5f88e804986547$exports = {};
$fa5f88e804986547$exports = {
  "rangeOverflow": (args) => `Valoarea trebuie să fie ${args.maxValue} sau anterioară.`,
  "rangeReversed": `Data de început trebuie să fie anterioară datei de sfârșit.`,
  "rangeUnderflow": (args) => `Valoarea trebuie să fie ${args.minValue} sau ulterioară.`,
  "unavailableDate": `Data selectată nu este disponibilă.`
};

// node_modules/@react-stately/datepicker/dist/ru-RU.mjs
var $28e4714602d1b568$exports = {};
$28e4714602d1b568$exports = {
  "rangeOverflow": (args) => `Значение должно быть не позже ${args.maxValue}.`,
  "rangeReversed": `Дата начала должна предшествовать дате окончания.`,
  "rangeUnderflow": (args) => `Значение должно быть не раньше ${args.minValue}.`,
  "unavailableDate": `Выбранная дата недоступна.`
};

// node_modules/@react-stately/datepicker/dist/sk-SK.mjs
var $4e3bc8cf783ad569$exports = {};
$4e3bc8cf783ad569$exports = {
  "rangeOverflow": (args) => `Hodnota musí byť ${args.maxValue} alebo skoršia.`,
  "rangeReversed": `Dátum začiatku musí byť skorší ako dátum konca.`,
  "rangeUnderflow": (args) => `Hodnota musí byť ${args.minValue} alebo neskoršia.`,
  "unavailableDate": `Vybratý dátum je nedostupný.`
};

// node_modules/@react-stately/datepicker/dist/sl-SI.mjs
var $bee07513333bdc15$exports = {};
$bee07513333bdc15$exports = {
  "rangeOverflow": (args) => `Vrednost mora biti ${args.maxValue} ali starejša.`,
  "rangeReversed": `Začetni datum mora biti pred končnim datumom.`,
  "rangeUnderflow": (args) => `Vrednost mora biti ${args.minValue} ali novejša.`,
  "unavailableDate": `Izbrani datum ni na voljo.`
};

// node_modules/@react-stately/datepicker/dist/sr-SP.mjs
var $7ed9c6fad16a15ec$exports = {};
$7ed9c6fad16a15ec$exports = {
  "rangeOverflow": (args) => `Vrednost mora da bude ${args.maxValue} ili starija.`,
  "rangeReversed": `Datum početka mora biti pre datuma završetka.`,
  "rangeUnderflow": (args) => `Vrednost mora da bude ${args.minValue} ili novija.`,
  "unavailableDate": `Izabrani datum nije dostupan.`
};

// node_modules/@react-stately/datepicker/dist/sv-SE.mjs
var $8bef6d5a236de86c$exports = {};
$8bef6d5a236de86c$exports = {
  "rangeOverflow": (args) => `Värdet måste vara ${args.maxValue} eller tidigare.`,
  "rangeReversed": `Startdatumet måste vara före slutdatumet.`,
  "rangeUnderflow": (args) => `Värdet måste vara ${args.minValue} eller senare.`,
  "unavailableDate": `Det valda datumet är inte tillgängligt.`
};

// node_modules/@react-stately/datepicker/dist/tr-TR.mjs
var $098b9a2d2340cfc5$exports = {};
$098b9a2d2340cfc5$exports = {
  "rangeOverflow": (args) => `Değer, ${args.maxValue} veya öncesi olmalıdır.`,
  "rangeReversed": `Başlangıç tarihi bitiş tarihinden önce olmalıdır.`,
  "rangeUnderflow": (args) => `Değer, ${args.minValue} veya sonrası olmalıdır.`,
  "unavailableDate": `Seçilen tarih kullanılamıyor.`
};

// node_modules/@react-stately/datepicker/dist/uk-UA.mjs
var $54a862ea7fad7419$exports = {};
$54a862ea7fad7419$exports = {
  "rangeOverflow": (args) => `Значення має бути не пізніше ${args.maxValue}.`,
  "rangeReversed": `Дата початку має передувати даті завершення.`,
  "rangeUnderflow": (args) => `Значення має бути не раніше ${args.minValue}.`,
  "unavailableDate": `Вибрана дата недоступна.`
};

// node_modules/@react-stately/datepicker/dist/zh-CN.mjs
var $e6cc491d590dfda5$exports = {};
$e6cc491d590dfda5$exports = {
  "rangeOverflow": (args) => `值必须是 ${args.maxValue} 或更早日期。`,
  "rangeReversed": `开始日期必须早于结束日期。`,
  "rangeUnderflow": (args) => `值必须是 ${args.minValue} 或更晚日期。`,
  "unavailableDate": `所选日期不可用。`
};

// node_modules/@react-stately/datepicker/dist/zh-TW.mjs
var $9aebf53181a474bd$exports = {};
$9aebf53181a474bd$exports = {
  "rangeOverflow": (args) => `值必須是 ${args.maxValue} 或更早。`,
  "rangeReversed": `開始日期必須在結束日期之前。`,
  "rangeUnderflow": (args) => `值必須是 ${args.minValue} 或更晚。`,
  "unavailableDate": `所選日期無法使用。`
};

// node_modules/@react-stately/overlays/dist/import.mjs
var import_react237 = __toESM(require_react(), 1);
function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  const open = (0, import_react237.useCallback)(() => {
    setOpen(true);
  }, [
    setOpen
  ]);
  const close = (0, import_react237.useCallback)(() => {
    setOpen(false);
  }, [
    setOpen
  ]);
  const toggle = (0, import_react237.useCallback)(() => {
    setOpen(!isOpen);
  }, [
    setOpen,
    isOpen
  ]);
  return {
    isOpen,
    setOpen,
    open,
    close,
    toggle
  };
}

// node_modules/@react-stately/datepicker/dist/import.mjs
var import_react238 = __toESM(require_react(), 1);
function $parcel$interopDefault3(a2) {
  return a2 && a2.__esModule ? a2.default : a2;
}
var $452ac34de8c2444e$exports = {};
$452ac34de8c2444e$exports = {
  "ar-AE": $b3427c06585c22a0$exports,
  "bg-BG": $d282528f459122b9$exports,
  "cs-CZ": $2d5eecd634a9ca45$exports,
  "da-DK": $c8e2288226c24a67$exports,
  "de-DE": $6f5745e389c346d7$exports,
  "el-GR": $8c882ccf4300d1da$exports,
  "en-US": $22195056771860be$exports,
  "es-ES": $cedfa43b4e2a5906$exports,
  "et-EE": $eeeaa8daee3601c7$exports,
  "fi-FI": $35e0614a49b3bb40$exports,
  "fr-FR": $929bc63f7705a78f$exports,
  "he-IL": $9a28d073b034d183$exports,
  "hr-HR": $7743e79780ebcca3$exports,
  "hu-HU": $3351817a04898858$exports,
  "it-IT": $4120bdb1d03484db$exports,
  "ja-JP": $65e5e1569f34ea4f$exports,
  "ko-KR": $d34552a7550967e7$exports,
  "lt-LT": $8f855bffe63f6eca$exports,
  "lv-LV": $ce40f46d09034645$exports,
  "nb-NO": $dd1a9a73340c793e$exports,
  "nl-NL": $4ee1fb3f0cbe6f59$exports,
  "pl-PL": $c85829aebb0bc94b$exports,
  "pt-BR": $27f5cd2291ca8a02$exports,
  "pt-PT": $e046fdccd69bea8e$exports,
  "ro-RO": $fa5f88e804986547$exports,
  "ru-RU": $28e4714602d1b568$exports,
  "sk-SK": $4e3bc8cf783ad569$exports,
  "sl-SI": $bee07513333bdc15$exports,
  "sr-SP": $7ed9c6fad16a15ec$exports,
  "sv-SE": $8bef6d5a236de86c$exports,
  "tr-TR": $098b9a2d2340cfc5$exports,
  "uk-UA": $54a862ea7fad7419$exports,
  "zh-CN": $e6cc491d590dfda5$exports,
  "zh-TW": $9aebf53181a474bd$exports
};
var $35a22f14a1f04b11$var$dictionary = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)((0, $parcel$interopDefault3($452ac34de8c2444e$exports)));
function $35a22f14a1f04b11$var$getLocale() {
  return typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
}
function $35a22f14a1f04b11$export$f18627323ab57ac0(value, minValue, maxValue, isDateUnavailable, options2) {
  let rangeOverflow = value != null && maxValue != null && value.compare(maxValue) > 0;
  let rangeUnderflow = value != null && minValue != null && value.compare(minValue) < 0;
  let isUnavailable = value != null && (isDateUnavailable === null || isDateUnavailable === void 0 ? void 0 : isDateUnavailable(value)) || false;
  let isInvalid = rangeOverflow || rangeUnderflow || isUnavailable;
  let errors = [];
  if (isInvalid) {
    let locale = $35a22f14a1f04b11$var$getLocale();
    let strings = (0, $5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage("@react-stately/datepicker") || $35a22f14a1f04b11$var$dictionary;
    let formatter = new (0, $6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, strings);
    let dateFormatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, $35a22f14a1f04b11$export$7e319ea407e63bc0({}, options2));
    let timeZone = dateFormatter.resolvedOptions().timeZone;
    if (rangeUnderflow)
      errors.push(formatter.format("rangeUnderflow", {
        minValue: dateFormatter.format(minValue.toDate(timeZone))
      }));
    if (rangeOverflow)
      errors.push(formatter.format("rangeOverflow", {
        maxValue: dateFormatter.format(maxValue.toDate(timeZone))
      }));
    if (isUnavailable)
      errors.push(formatter.format("unavailableDate"));
  }
  return {
    isInvalid,
    validationErrors: errors,
    validationDetails: {
      badInput: isUnavailable,
      customError: false,
      patternMismatch: false,
      rangeOverflow,
      rangeUnderflow,
      stepMismatch: false,
      tooLong: false,
      tooShort: false,
      typeMismatch: false,
      valueMissing: false,
      valid: !isInvalid
    }
  };
}
function $35a22f14a1f04b11$export$80ff8fc0ae339c13(value, minValue, maxValue, isDateUnavailable, options2) {
  let startValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.start, minValue, maxValue, isDateUnavailable, options2);
  let endValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.end, minValue, maxValue, isDateUnavailable, options2);
  let result = (0, $e5be200c675c3b3a$export$75ee7c75d68f5b0e)(startValidation, endValidation);
  if (value.end != null && value.start != null && value.end.compare(value.start) < 0)
    result = (0, $e5be200c675c3b3a$export$75ee7c75d68f5b0e)(result, {
      isInvalid: true,
      validationErrors: [
        $35a22f14a1f04b11$var$dictionary.getStringForLocale("rangeReversed", $35a22f14a1f04b11$var$getLocale())
      ],
      validationDetails: {
        ...(0, $e5be200c675c3b3a$export$aca958c65c314e6c),
        rangeUnderflow: true,
        rangeOverflow: true,
        valid: false
      }
    });
  return result;
}
var $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {
  year: "numeric",
  month: "numeric",
  day: "numeric",
  hour: "numeric",
  minute: "2-digit",
  second: "2-digit"
};
var $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS = {
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit"
};
function $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options2) {
  let defaultFieldOptions = options2.shouldForceLeadingZeros ? $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS : $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS;
  fieldOptions = {
    ...defaultFieldOptions,
    ...fieldOptions
  };
  let granularity = options2.granularity || "minute";
  let keys3 = Object.keys(fieldOptions);
  var _options_maxGranularity;
  let startIdx = keys3.indexOf((_options_maxGranularity = options2.maxGranularity) !== null && _options_maxGranularity !== void 0 ? _options_maxGranularity : "year");
  if (startIdx < 0)
    startIdx = 0;
  let endIdx = keys3.indexOf(granularity);
  if (endIdx < 0)
    endIdx = 2;
  if (startIdx > endIdx)
    throw new Error("maxGranularity must be greater than granularity");
  let opts = keys3.slice(startIdx, endIdx + 1).reduce((opts2, key2) => {
    opts2[key2] = fieldOptions[key2];
    return opts2;
  }, {});
  if (options2.hourCycle != null)
    opts.hour12 = options2.hourCycle === 12;
  opts.timeZone = options2.timeZone || "UTC";
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  if (hasTime && options2.timeZone && !options2.hideTimeZone)
    opts.timeZoneName = "short";
  if (options2.showEra && startIdx === 0)
    opts.era = "short";
  return opts;
}
function $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {
  if (placeholderValue && "hour" in placeholderValue)
    return placeholderValue;
  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)();
}
function $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {
  if (value === null)
    return null;
  if (!value)
    return void 0;
  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(value, calendar);
}
function $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {
  if (placeholderValue)
    return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);
  let date = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $14e0f24ef4ac5c92$export$461939dd4422153)(timeZone).set({
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  }), calendar);
  if (granularity === "year" || granularity === "month" || granularity === "day")
    return (0, $11d87f3f76e88657$export$93522d1a439f3617)(date);
  if (!timeZone)
    return (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);
  return date;
}
function $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {
  let defaultTimeZone = v && "timeZone" in v ? v.timeZone : void 0;
  let defaultGranularity = v && "minute" in v ? "minute" : "day";
  if (v && granularity && !(granularity in v))
    throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let [lastValue, setLastValue] = (0, import_react238.useState)([
    defaultGranularity,
    defaultTimeZone
  ]);
  if (v && (lastValue[0] !== defaultGranularity || lastValue[1] !== defaultTimeZone))
    setLastValue([
      defaultGranularity,
      defaultTimeZone
    ]);
  if (!granularity)
    granularity = v ? defaultGranularity : lastValue[0];
  let timeZone = v ? defaultTimeZone : lastValue[1];
  return [
    granularity,
    timeZone
  ];
}
function $ab5bf3f618090389$export$87194bb378cc3ac2(props) {
  let overlayState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let [value, setValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || null, props.onChange);
  let v = value || props.placeholderValue;
  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
  let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : "UTC") : null;
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  var _props_shouldCloseOnSelect;
  let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
  let [selectedDate, setSelectedDate] = (0, import_react238.useState)(null);
  let [selectedTime, setSelectedTime] = (0, import_react238.useState)(null);
  if (value) {
    selectedDate = value;
    if ("hour" in value)
      selectedTime = value;
  }
  if (v && !(granularity in v))
    throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let showEra = (value === null || value === void 0 ? void 0 : value.calendar.identifier) === "gregory" && value.era === "BC";
  let formatOpts = (0, import_react238.useMemo)(() => ({
    granularity,
    timeZone: defaultTimeZone,
    hideTimeZone: props.hideTimeZone,
    hourCycle: props.hourCycle,
    shouldForceLeadingZeros: props.shouldForceLeadingZeros,
    showEra
  }), [
    granularity,
    props.hourCycle,
    props.shouldForceLeadingZeros,
    defaultTimeZone,
    props.hideTimeZone,
    showEra
  ]);
  let { minValue, maxValue, isDateUnavailable } = props;
  let builtinValidation = (0, import_react238.useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
    value,
    minValue,
    maxValue,
    isDateUnavailable,
    formatOpts
  ]);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value,
    builtinValidation
  });
  let isValueInvalid = validation.displayValidation.isInvalid;
  let validationState = props.validationState || (isValueInvalid ? "invalid" : null);
  let commitValue = (date, time2) => {
    setValue("timeZone" in time2 ? time2.set((0, $11d87f3f76e88657$export$93522d1a439f3617)(date)) : (0, $11d87f3f76e88657$export$b21e0b124e224484)(date, time2));
    setSelectedDate(null);
    setSelectedTime(null);
    validation.commitValidation();
  };
  let selectDate = (newValue) => {
    let shouldClose = typeof shouldCloseOnSelect === "function" ? shouldCloseOnSelect() : shouldCloseOnSelect;
    if (hasTime) {
      if (selectedTime || shouldClose)
        commitValue(newValue, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));
      else
        setSelectedDate(newValue);
    } else {
      setValue(newValue);
      validation.commitValidation();
    }
    if (shouldClose)
      overlayState.setOpen(false);
  };
  let selectTime = (newValue) => {
    if (selectedDate && newValue)
      commitValue(selectedDate, newValue);
    else
      setSelectedTime(newValue);
  };
  return {
    ...validation,
    value,
    setValue,
    dateValue: selectedDate,
    timeValue: selectedTime,
    setDateValue: selectDate,
    setTimeValue: selectTime,
    granularity,
    hasTime,
    ...overlayState,
    setOpen(isOpen) {
      if (!isOpen && !value && selectedDate && hasTime)
        commitValue(selectedDate, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));
      overlayState.setOpen(isOpen);
    },
    validationState,
    isInvalid: isValueInvalid,
    formatValue(locale, fieldOptions) {
      if (!dateValue)
        return "";
      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);
      let formatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, formatOptions);
      return formatter.format(dateValue);
    }
  };
}
var $3e3ed55ab2966714$var$placeholders = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)({
  ach: {
    year: "mwaka",
    month: "dwe",
    day: "nino"
  },
  af: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  am: {
    year: "ዓዓዓዓ",
    month: "ሚሜ",
    day: "ቀቀ"
  },
  an: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  ar: {
    year: "سنة",
    month: "شهر",
    day: "يوم"
  },
  ast: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  az: {
    year: "iiii",
    month: "aa",
    day: "gg"
  },
  be: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  bg: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  bn: {
    year: "yyyy",
    month: "মিমি",
    day: "dd"
  },
  br: {
    year: "bbbb",
    month: "mm",
    day: "dd"
  },
  bs: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  ca: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  cak: {
    year: "jjjj",
    month: "ii",
    day: "q'q'"
  },
  ckb: {
    year: "ساڵ",
    month: "مانگ",
    day: "ڕۆژ"
  },
  cs: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  cy: {
    year: "bbbb",
    month: "mm",
    day: "dd"
  },
  da: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  de: {
    year: "jjjj",
    month: "mm",
    day: "tt"
  },
  dsb: {
    year: "llll",
    month: "mm",
    day: "źź"
  },
  el: {
    year: "εεεε",
    month: "μμ",
    day: "ηη"
  },
  en: {
    year: "yyyy",
    month: "mm",
    day: "dd"
  },
  eo: {
    year: "jjjj",
    month: "mm",
    day: "tt"
  },
  es: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  et: {
    year: "aaaa",
    month: "kk",
    day: "pp"
  },
  eu: {
    year: "uuuu",
    month: "hh",
    day: "ee"
  },
  fa: {
    year: "سال",
    month: "ماه",
    day: "روز"
  },
  ff: {
    year: "hhhh",
    month: "ll",
    day: "ññ"
  },
  fi: {
    year: "vvvv",
    month: "kk",
    day: "pp"
  },
  fr: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  fy: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  ga: {
    year: "bbbb",
    month: "mm",
    day: "ll"
  },
  gd: {
    year: "bbbb",
    month: "mm",
    day: "ll"
  },
  gl: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  he: {
    year: "שנה",
    month: "חודש",
    day: "יום"
  },
  hr: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  hsb: {
    year: "llll",
    month: "mm",
    day: "dd"
  },
  hu: {
    year: "éééé",
    month: "hh",
    day: "nn"
  },
  ia: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  id: {
    year: "tttt",
    month: "bb",
    day: "hh"
  },
  it: {
    year: "aaaa",
    month: "mm",
    day: "gg"
  },
  ja: {
    year: " 年 ",
    month: "月",
    day: "日"
  },
  ka: {
    year: "წწწწ",
    month: "თთ",
    day: "რრ"
  },
  kk: {
    year: "жжжж",
    month: "аа",
    day: "кк"
  },
  kn: {
    year: "ವವವವ",
    month: "ಮಿಮೀ",
    day: "ದಿದಿ"
  },
  ko: {
    year: "연도",
    month: "월",
    day: "일"
  },
  lb: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  lo: {
    year: "ປປປປ",
    month: "ດດ",
    day: "ວວ"
  },
  lt: {
    year: "mmmm",
    month: "mm",
    day: "dd"
  },
  lv: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  meh: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  ml: {
    year: "വർഷം",
    month: "മാസം",
    day: "തീയതി"
  },
  ms: {
    year: "tttt",
    month: "mm",
    day: "hh"
  },
  nl: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  nn: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  no: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  oc: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  pl: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  pt: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  rm: {
    year: "oooo",
    month: "mm",
    day: "dd"
  },
  ro: {
    year: "aaaa",
    month: "ll",
    day: "zz"
  },
  ru: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  sc: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  scn: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  sk: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  sl: {
    year: "llll",
    month: "mm",
    day: "dd"
  },
  sr: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  sv: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  szl: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  tg: {
    year: "сссс",
    month: "мм",
    day: "рр"
  },
  th: {
    year: "ปปปป",
    month: "ดด",
    day: "วว"
  },
  tr: {
    year: "yyyy",
    month: "aa",
    day: "gg"
  },
  uk: {
    year: "рррр",
    month: "мм",
    day: "дд"
  },
  "zh-CN": {
    year: "年",
    month: "月",
    day: "日"
  },
  "zh-TW": {
    year: "年",
    month: "月",
    day: "日"
  }
}, "en");
function $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {
  if (field === "era" || field === "dayPeriod")
    return value;
  if (field === "year" || field === "month" || field === "day")
    return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale);
  return "––";
}
var $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {
  year: true,
  month: true,
  day: true,
  hour: true,
  minute: true,
  second: true,
  dayPeriod: true,
  era: true
};
var $3c0fc76039f1c516$var$PAGE_STEP = {
  year: 5,
  month: 2,
  day: 7,
  hour: 2,
  minute: 15,
  second: 15
};
var $3c0fc76039f1c516$var$TYPE_MAPPING = {
  dayperiod: "dayPeriod"
};
function $3c0fc76039f1c516$export$60e84778edff6d26(props) {
  let { locale, createCalendar, hideTimeZone, isDisabled: isDisabled3, isReadOnly, isRequired, minValue, maxValue, isDateUnavailable } = props;
  let v = props.value || props.defaultValue || props.placeholderValue;
  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
  let timeZone = defaultTimeZone || "UTC";
  if (v && !(granularity in v))
    throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let defaultFormatter = (0, import_react238.useMemo)(() => new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale), [
    locale
  ]);
  let calendar = (0, import_react238.useMemo)(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [
    createCalendar,
    defaultFormatter
  ]);
  let [value, setDate] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
  let calendarValue = (0, import_react238.useMemo)(() => (0, $35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [
    value,
    calendar
  ]);
  let [placeholderDate, setPlaceholderDate] = (0, import_react238.useState)(() => (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
  let val = calendarValue || placeholderDate;
  let showEra = calendar.identifier === "gregory" && val.era === "BC";
  let formatOpts = (0, import_react238.useMemo)(() => {
    var _props_maxGranularity2;
    return {
      granularity,
      maxGranularity: (_props_maxGranularity2 = props.maxGranularity) !== null && _props_maxGranularity2 !== void 0 ? _props_maxGranularity2 : "year",
      timeZone: defaultTimeZone,
      hideTimeZone,
      hourCycle: props.hourCycle,
      showEra,
      shouldForceLeadingZeros: props.shouldForceLeadingZeros
    };
  }, [
    props.maxGranularity,
    granularity,
    props.hourCycle,
    props.shouldForceLeadingZeros,
    defaultTimeZone,
    hideTimeZone,
    showEra
  ]);
  let opts = (0, import_react238.useMemo)(() => (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [
    formatOpts
  ]);
  let dateFormatter = (0, import_react238.useMemo)(() => new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, opts), [
    locale,
    opts
  ]);
  let resolvedOptions = (0, import_react238.useMemo)(() => dateFormatter.resolvedOptions(), [
    dateFormatter
  ]);
  let allSegments = (0, import_react238.useMemo)(() => dateFormatter.formatToParts(/* @__PURE__ */ new Date()).filter((seg) => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg) => (p[seg.type] = true, p), {}), [
    dateFormatter
  ]);
  let [validSegments, setValidSegments] = (0, import_react238.useState)(() => props.value || props.defaultValue ? {
    ...allSegments
  } : {});
  let clearedSegment = (0, import_react238.useRef)();
  let lastCalendarIdentifier = (0, import_react238.useRef)(calendar.identifier);
  (0, import_react238.useEffect)(() => {
    if (calendar.identifier !== lastCalendarIdentifier.current) {
      lastCalendarIdentifier.current = calendar.identifier;
      setPlaceholderDate((placeholder) => Object.keys(validSegments).length > 0 ? (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(placeholder, calendar) : (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
    }
  }, [
    calendar,
    granularity,
    validSegments,
    defaultTimeZone,
    props.placeholderValue
  ]);
  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {
    validSegments = {
      ...allSegments
    };
    setValidSegments(validSegments);
  }
  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {
    validSegments = {};
    setValidSegments(validSegments);
    setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
  }
  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;
  let setValue = (newValue) => {
    if (props.isDisabled || props.isReadOnly)
      return;
    let validKeys = Object.keys(validSegments);
    let allKeys = Object.keys(allSegments);
    if (newValue == null) {
      setDate(null);
      setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
      setValidSegments({});
    } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== "dayPeriod") {
      newValue = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
      setDate(newValue);
    } else
      setPlaceholderDate(newValue);
    clearedSegment.current = null;
  };
  let dateValue = (0, import_react238.useMemo)(() => displayValue.toDate(timeZone), [
    displayValue,
    timeZone
  ]);
  let segments = (0, import_react238.useMemo)(() => dateFormatter.formatToParts(dateValue).map((segment) => {
    let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];
    if (segment.type === "era" && calendar.getEras().length === 1)
      isEditable = false;
    let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];
    let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? (0, $3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;
    return {
      type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,
      text: isPlaceholder ? placeholder : segment.value,
      ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),
      isPlaceholder,
      placeholder,
      isEditable
    };
  }), [
    dateValue,
    validSegments,
    dateFormatter,
    resolvedOptions,
    displayValue,
    calendar,
    locale
  ]);
  if (allSegments.era && validSegments.year && !validSegments.era) {
    validSegments.era = true;
    setValidSegments({
      ...validSegments
    });
  } else if (!allSegments.era && validSegments.era) {
    delete validSegments.era;
    setValidSegments({
      ...validSegments
    });
  }
  let markValid = (part) => {
    validSegments[part] = true;
    if (part === "year" && allSegments.era)
      validSegments.era = true;
    setValidSegments({
      ...validSegments
    });
  };
  let adjustSegment = (type, amount) => {
    if (!validSegments[type]) {
      markValid(type);
      let validKeys = Object.keys(validSegments);
      let allKeys = Object.keys(allSegments);
      if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod)
        setValue(displayValue);
    } else
      setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));
  };
  let builtinValidation = (0, import_react238.useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
    value,
    minValue,
    maxValue,
    isDateUnavailable,
    formatOpts
  ]);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value,
    builtinValidation
  });
  let isValueInvalid = validation.displayValidation.isInvalid;
  let validationState = props.validationState || (isValueInvalid ? "invalid" : null);
  var _props_maxGranularity;
  return {
    ...validation,
    value: calendarValue,
    dateValue,
    calendar,
    setValue,
    segments,
    dateFormatter,
    validationState,
    isInvalid: isValueInvalid,
    granularity,
    maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : "year",
    isDisabled: isDisabled3,
    isReadOnly,
    isRequired,
    increment(part) {
      adjustSegment(part, 1);
    },
    decrement(part) {
      adjustSegment(part, -1);
    },
    incrementPage(part) {
      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);
    },
    decrementPage(part) {
      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));
    },
    setSegment(part, v2) {
      markValid(part);
      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v2, resolvedOptions));
    },
    confirmPlaceholder() {
      if (props.isDisabled || props.isReadOnly)
        return;
      let validKeys = Object.keys(validSegments);
      let allKeys = Object.keys(allSegments);
      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {
        validSegments = {
          ...allSegments
        };
        setValidSegments(validSegments);
        setValue(displayValue.copy());
      }
    },
    clearSegment(part) {
      delete validSegments[part];
      clearedSegment.current = part;
      setValidSegments({
        ...validSegments
      });
      let placeholder = (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);
      let value2 = displayValue;
      if (part === "dayPeriod" && "hour" in displayValue && "hour" in placeholder) {
        let isPM = displayValue.hour >= 12;
        let shouldBePM = placeholder.hour >= 12;
        if (isPM && !shouldBePM)
          value2 = displayValue.set({
            hour: displayValue.hour - 12
          });
        else if (!isPM && shouldBePM)
          value2 = displayValue.set({
            hour: displayValue.hour + 12
          });
      } else if (part in displayValue)
        value2 = displayValue.set({
          [part]: placeholder[part]
        });
      setDate(null);
      setValue(value2);
    },
    formatValue(fieldOptions) {
      if (!calendarValue)
        return "";
      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);
      let formatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, formatOptions);
      return formatter.format(dateValue);
    }
  };
}
function $3c0fc76039f1c516$var$getSegmentLimits(date, type, options2) {
  switch (type) {
    case "era": {
      let eras = date.calendar.getEras();
      return {
        value: eras.indexOf(date.era),
        minValue: 0,
        maxValue: eras.length - 1
      };
    }
    case "year":
      return {
        value: date.year,
        minValue: 1,
        maxValue: date.calendar.getYearsInEra(date)
      };
    case "month":
      return {
        value: date.month,
        minValue: (0, $14e0f24ef4ac5c92$export$5412ac11713b72ad)(date),
        maxValue: date.calendar.getMonthsInYear(date)
      };
    case "day":
      return {
        value: date.day,
        minValue: (0, $14e0f24ef4ac5c92$export$b2f4953d301981d5)(date),
        maxValue: date.calendar.getDaysInMonth(date)
      };
  }
  if ("hour" in date)
    switch (type) {
      case "dayPeriod":
        return {
          value: date.hour >= 12 ? 12 : 0,
          minValue: 0,
          maxValue: 12
        };
      case "hour":
        if (options2.hour12) {
          let isPM = date.hour >= 12;
          return {
            value: date.hour,
            minValue: isPM ? 12 : 0,
            maxValue: isPM ? 23 : 11
          };
        }
        return {
          value: date.hour,
          minValue: 0,
          maxValue: 23
        };
      case "minute":
        return {
          value: date.minute,
          minValue: 0,
          maxValue: 59
        };
      case "second":
        return {
          value: date.second,
          minValue: 0,
          maxValue: 59
        };
    }
  return {};
}
function $3c0fc76039f1c516$var$addSegment(value, part, amount, options2) {
  switch (part) {
    case "era":
    case "year":
    case "month":
    case "day":
      return value.cycle(part, amount, {
        round: part === "year"
      });
  }
  if ("hour" in value)
    switch (part) {
      case "dayPeriod": {
        let hours = value.hour;
        let isPM = hours >= 12;
        return value.set({
          hour: isPM ? hours - 12 : hours + 12
        });
      }
      case "hour":
      case "minute":
      case "second":
        return value.cycle(part, amount, {
          round: part !== "hour",
          hourCycle: options2.hour12 ? 12 : 24
        });
    }
}
function $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options2) {
  switch (part) {
    case "day":
    case "month":
    case "year":
    case "era":
      return value.set({
        [part]: segmentValue
      });
  }
  if ("hour" in value)
    switch (part) {
      case "dayPeriod": {
        let hours = value.hour;
        let wasPM = hours >= 12;
        let isPM = segmentValue >= 12;
        if (isPM === wasPM)
          return value;
        return value.set({
          hour: wasPM ? hours - 12 : hours + 12
        });
      }
      case "hour":
        if (options2.hour12) {
          let hours = value.hour;
          let wasPM = hours >= 12;
          if (!wasPM && segmentValue === 12)
            segmentValue = 0;
          if (wasPM && segmentValue < 12)
            segmentValue += 12;
        }
      case "minute":
      case "second":
        return value.set({
          [part]: segmentValue
        });
    }
}
function $93c38a5e28be6249$export$e50a61c1de9f574(props) {
  var _value_start, _value_end;
  let overlayState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let [controlledValue, setControlledValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || null, props.onChange);
  let [placeholderValue, setPlaceholderValue] = (0, import_react238.useState)(() => controlledValue || {
    start: null,
    end: null
  });
  if (controlledValue == null && placeholderValue.start && placeholderValue.end) {
    placeholderValue = {
      start: null,
      end: null
    };
    setPlaceholderValue(placeholderValue);
  }
  let value = controlledValue || placeholderValue;
  let setValue = (value2) => {
    setPlaceholderValue(value2 || {
      start: null,
      end: null
    });
    if ((value2 === null || value2 === void 0 ? void 0 : value2.start) && value2.end)
      setControlledValue(value2);
    else
      setControlledValue(null);
  };
  let v = (value === null || value === void 0 ? void 0 : value.start) || (value === null || value === void 0 ? void 0 : value.end) || props.placeholderValue;
  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  var _props_shouldCloseOnSelect;
  let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
  let [dateRange, setSelectedDateRange] = (0, import_react238.useState)(null);
  let [timeRange, setSelectedTimeRange] = (0, import_react238.useState)(null);
  if (value && value.start && value.end) {
    dateRange = value;
    if ("hour" in value.start)
      timeRange = value;
  }
  let commitValue = (dateRange2, timeRange2) => {
    setValue({
      start: "timeZone" in timeRange2.start ? timeRange2.start.set((0, $11d87f3f76e88657$export$93522d1a439f3617)(dateRange2.start)) : (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateRange2.start, timeRange2.start),
      end: "timeZone" in timeRange2.end ? timeRange2.end.set((0, $11d87f3f76e88657$export$93522d1a439f3617)(dateRange2.end)) : (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateRange2.end, timeRange2.end)
    });
    setSelectedDateRange(null);
    setSelectedTimeRange(null);
    validation.commitValidation();
  };
  let setDateRange = (range2) => {
    let shouldClose = typeof shouldCloseOnSelect === "function" ? shouldCloseOnSelect() : shouldCloseOnSelect;
    if (hasTime) {
      if (shouldClose || range2.start && range2.end && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end))
        commitValue(range2, {
          start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),
          end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)
        });
      else
        setSelectedDateRange(range2);
    } else if (range2.start && range2.end) {
      setValue(range2);
      validation.commitValidation();
    } else
      setSelectedDateRange(range2);
    if (shouldClose)
      overlayState.setOpen(false);
  };
  let setTimeRange = (range2) => {
    if ((dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && range2.start && range2.end)
      commitValue(dateRange, range2);
    else
      setSelectedTimeRange(range2);
  };
  let showEra = (value === null || value === void 0 ? void 0 : (_value_start = value.start) === null || _value_start === void 0 ? void 0 : _value_start.calendar.identifier) === "gregory" && value.start.era === "BC" || (value === null || value === void 0 ? void 0 : (_value_end = value.end) === null || _value_end === void 0 ? void 0 : _value_end.calendar.identifier) === "gregory" && value.end.era === "BC";
  let formatOpts = (0, import_react238.useMemo)(() => ({
    granularity,
    timeZone: defaultTimeZone,
    hideTimeZone: props.hideTimeZone,
    hourCycle: props.hourCycle,
    shouldForceLeadingZeros: props.shouldForceLeadingZeros,
    showEra
  }), [
    granularity,
    props.hourCycle,
    props.shouldForceLeadingZeros,
    defaultTimeZone,
    props.hideTimeZone,
    showEra
  ]);
  let { minValue, maxValue, isDateUnavailable } = props;
  let builtinValidation = (0, import_react238.useMemo)(() => (0, $35a22f14a1f04b11$export$80ff8fc0ae339c13)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
    value,
    minValue,
    maxValue,
    isDateUnavailable,
    formatOpts
  ]);
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: controlledValue,
    name: (0, import_react238.useMemo)(() => [
      props.startName,
      props.endName
    ], [
      props.startName,
      props.endName
    ]),
    builtinValidation
  });
  let isValueInvalid = validation.displayValidation.isInvalid;
  let validationState = props.validationState || (isValueInvalid ? "invalid" : null);
  return {
    ...validation,
    value,
    setValue,
    dateRange,
    timeRange,
    granularity,
    hasTime,
    setDate(part, date) {
      setDateRange({
        ...dateRange,
        [part]: date
      });
    },
    setTime(part, time2) {
      setTimeRange({
        ...timeRange,
        [part]: time2
      });
    },
    setDateTime(part, dateTime) {
      setValue({
        ...value,
        [part]: dateTime
      });
    },
    setDateRange,
    setTimeRange,
    ...overlayState,
    setOpen(isOpen) {
      if (!isOpen && !((value === null || value === void 0 ? void 0 : value.start) && (value === null || value === void 0 ? void 0 : value.end)) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && hasTime)
        commitValue(dateRange, {
          start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),
          end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)
        });
      overlayState.setOpen(isOpen);
    },
    validationState,
    isInvalid: isValueInvalid,
    formatValue(locale, fieldOptions) {
      if (!value || !value.start || !value.end)
        return null;
      let startTimeZone = "timeZone" in value.start ? value.start.timeZone : void 0;
      let startGranularity = props.granularity || (value.start && "minute" in value.start ? "minute" : "day");
      let endTimeZone = "timeZone" in value.end ? value.end.timeZone : void 0;
      let endGranularity = props.granularity || (value.end && "minute" in value.end ? "minute" : "day");
      let startOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {
        granularity: startGranularity,
        timeZone: startTimeZone,
        hideTimeZone: props.hideTimeZone,
        hourCycle: props.hourCycle,
        showEra: value.start.calendar.identifier === "gregory" && value.start.era === "BC" || value.end.calendar.identifier === "gregory" && value.end.era === "BC"
      });
      let startDate = value.start.toDate(startTimeZone || "UTC");
      let endDate = value.end.toDate(endTimeZone || "UTC");
      let startFormatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, startOptions);
      let endFormatter;
      if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {
        try {
          let parts = startFormatter.formatRangeToParts(startDate, endDate);
          let separatorIndex = -1;
          for (let i2 = 0; i2 < parts.length; i2++) {
            let part = parts[i2];
            if (part.source === "shared" && part.type === "literal")
              separatorIndex = i2;
            else if (part.source === "endRange")
              break;
          }
          let start2 = "";
          let end2 = "";
          for (let i2 = 0; i2 < parts.length; i2++) {
            if (i2 < separatorIndex)
              start2 += parts[i2].value;
            else if (i2 > separatorIndex)
              end2 += parts[i2].value;
          }
          return {
            start: start2,
            end: end2
          };
        } catch (e) {
        }
        endFormatter = startFormatter;
      } else {
        let endOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {
          granularity: endGranularity,
          timeZone: endTimeZone,
          hideTimeZone: props.hideTimeZone,
          hourCycle: props.hourCycle
        });
        endFormatter = new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(locale, endOptions);
      }
      return {
        start: startFormatter.format(startDate),
        end: endFormatter.format(endDate)
      };
    }
  };
}

// node_modules/@react-aria/button/dist/import.mjs
function $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {
  let {
    elementType = "button",
    isDisabled: isDisabled3,
    onPress,
    onPressStart,
    onPressEnd,
    onPressUp,
    onPressChange,
    preventFocusOnPress,
    allowFocusWhenDisabled,
    // @ts-ignore
    onClick: deprecatedOnClick,
    href,
    target,
    rel,
    type = "button"
  } = props;
  let additionalProps;
  if (elementType === "button")
    additionalProps = {
      type,
      disabled: isDisabled3
    };
  else
    additionalProps = {
      role: "button",
      tabIndex: isDisabled3 ? void 0 : 0,
      href: elementType === "a" && isDisabled3 ? void 0 : href,
      target: elementType === "a" ? target : void 0,
      type: elementType === "input" ? type : void 0,
      disabled: elementType === "input" ? isDisabled3 : void 0,
      "aria-disabled": !isDisabled3 || elementType === "input" ? void 0 : isDisabled3,
      rel: elementType === "a" ? rel : void 0
    };
  let { pressProps, isPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    onPressStart,
    onPressEnd,
    onPressChange,
    onPress,
    onPressUp,
    isDisabled: isDisabled3,
    preventFocusOnPress,
    ref
  });
  let { focusableProps } = (0, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
  if (allowFocusWhenDisabled)
    focusableProps.tabIndex = isDisabled3 ? -1 : focusableProps.tabIndex;
  let buttonProps = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, pressProps, (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  }));
  return {
    isPressed,
    buttonProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(additionalProps, buttonProps, {
      "aria-haspopup": props["aria-haspopup"],
      "aria-expanded": props["aria-expanded"],
      "aria-controls": props["aria-controls"],
      "aria-pressed": props["aria-pressed"],
      onClick: (e) => {
        if (deprecatedOnClick) {
          deprecatedOnClick(e);
          console.warn("onClick is deprecated, please use onPress");
        }
      }
    })
  };
}

// node_modules/@react-stately/calendar/dist/import.mjs
var import_react239 = __toESM(require_react(), 1);
function $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue) {
  return minValue != null && date.compare(minValue) < 0 || maxValue != null && date.compare(maxValue) > 0;
}
function $f62d864046160412$export$f4a51ff076cc9a09(date, duration, locale, minValue, maxValue) {
  let halfDuration = {};
  for (let key2 in duration) {
    halfDuration[key2] = Math.floor(duration[key2] / 2);
    if (halfDuration[key2] > 0 && duration[key2] % 2 === 0)
      halfDuration[key2]--;
  }
  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(halfDuration);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$144a00ba6044eb9(date, duration, locale, minValue, maxValue) {
  let aligned = date;
  if (duration.years)
    aligned = (0, $14e0f24ef4ac5c92$export$f91e89d3d0406102)(date);
  else if (duration.months)
    aligned = (0, $14e0f24ef4ac5c92$export$a5a3b454ada2268e)(date);
  else if (duration.weeks)
    aligned = (0, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(date, locale);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$530edbfc915b2b04(date, duration, locale, minValue, maxValue) {
  let d = {
    ...duration
  };
  if (duration.days)
    d.days--;
  else if (duration.weeks)
    d.weeks--;
  else if (duration.months)
    d.months--;
  else if (duration.years)
    d.years--;
  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(d);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue) {
  if (minValue && date.compare(minValue) >= 0)
    aligned = (0, $14e0f24ef4ac5c92$export$a75f2bff57811055)(aligned, $f62d864046160412$export$144a00ba6044eb9((0, $11d87f3f76e88657$export$93522d1a439f3617)(minValue), duration, locale));
  if (maxValue && date.compare(maxValue) <= 0)
    aligned = (0, $14e0f24ef4ac5c92$export$5c333a116e949cdd)(aligned, $f62d864046160412$export$530edbfc915b2b04((0, $11d87f3f76e88657$export$93522d1a439f3617)(maxValue), duration, locale));
  return aligned;
}
function $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue) {
  if (minValue)
    date = (0, $14e0f24ef4ac5c92$export$a75f2bff57811055)(date, (0, $11d87f3f76e88657$export$93522d1a439f3617)(minValue));
  if (maxValue)
    date = (0, $14e0f24ef4ac5c92$export$5c333a116e949cdd)(date, (0, $11d87f3f76e88657$export$93522d1a439f3617)(maxValue));
  return date;
}
function $f62d864046160412$export$a1d3911297b952d7(date, minValue, isDateUnavailable) {
  if (!isDateUnavailable)
    return date;
  while (date.compare(minValue) >= 0 && isDateUnavailable(date))
    date = date.subtract({
      days: 1
    });
  if (date.compare(minValue) >= 0)
    return date;
}
function $131cf43a05231e1e$export$6d095e787d2b5e1f(props) {
  let defaultFormatter = (0, import_react239.useMemo)(() => new (0, $fb18d541ea1ad717$export$ad991b66133851cf)(props.locale), [
    props.locale
  ]);
  let resolvedOptions = (0, import_react239.useMemo)(() => defaultFormatter.resolvedOptions(), [
    defaultFormatter
  ]);
  let { locale, createCalendar, visibleDuration = {
    months: 1
  }, minValue, maxValue, selectionAlignment, isDateUnavailable, pageBehavior = "visible" } = props;
  let calendar = (0, import_react239.useMemo)(() => createCalendar(resolvedOptions.calendar), [
    createCalendar,
    resolvedOptions.calendar
  ]);
  let [value, setControlledValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
  let calendarDateValue = (0, import_react239.useMemo)(() => value ? (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$93522d1a439f3617)(value), calendar) : null, [
    value,
    calendar
  ]);
  let timeZone = (0, import_react239.useMemo)(() => value && "timeZone" in value ? value.timeZone : resolvedOptions.timeZone, [
    value,
    resolvedOptions.timeZone
  ]);
  let focusedCalendarDate = (0, import_react239.useMemo)(() => props.focusedValue ? (0, $f62d864046160412$export$4f5203c0d889109e)((0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$93522d1a439f3617)(props.focusedValue), calendar), minValue, maxValue) : void 0, [
    props.focusedValue,
    calendar,
    minValue,
    maxValue
  ]);
  let defaultFocusedCalendarDate = (0, import_react239.useMemo)(() => (0, $f62d864046160412$export$4f5203c0d889109e)(props.defaultFocusedValue ? (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$93522d1a439f3617)(props.defaultFocusedValue), calendar) : calendarDateValue || (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)(timeZone), calendar), minValue, maxValue), [
    props.defaultFocusedValue,
    calendarDateValue,
    timeZone,
    calendar,
    minValue,
    maxValue
  ]);
  let [focusedDate, setFocusedDate] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(focusedCalendarDate, defaultFocusedCalendarDate, props.onFocusChange);
  let [startDate, setStartDate] = (0, import_react239.useState)(() => {
    switch (selectionAlignment) {
      case "start":
        return (0, $f62d864046160412$export$144a00ba6044eb9)(focusedDate, visibleDuration, locale, minValue, maxValue);
      case "end":
        return (0, $f62d864046160412$export$530edbfc915b2b04)(focusedDate, visibleDuration, locale, minValue, maxValue);
      case "center":
      default:
        return (0, $f62d864046160412$export$f4a51ff076cc9a09)(focusedDate, visibleDuration, locale, minValue, maxValue);
    }
  });
  let [isFocused, setFocused] = (0, import_react239.useState)(props.autoFocus || false);
  let endDate = (0, import_react239.useMemo)(() => {
    let duration = {
      ...visibleDuration
    };
    if (duration.days)
      duration.days--;
    else
      duration.days = -1;
    return startDate.add(duration);
  }, [
    startDate,
    visibleDuration
  ]);
  let [lastCalendarIdentifier, setLastCalendarIdentifier] = (0, import_react239.useState)(calendar.identifier);
  if (calendar.identifier !== lastCalendarIdentifier) {
    let newFocusedDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(focusedDate, calendar);
    setStartDate((0, $f62d864046160412$export$f4a51ff076cc9a09)(newFocusedDate, visibleDuration, locale, minValue, maxValue));
    setFocusedDate(newFocusedDate);
    setLastCalendarIdentifier(calendar.identifier);
  }
  if ((0, $f62d864046160412$export$eac50920cf2fd59a)(focusedDate, minValue, maxValue))
    setFocusedDate((0, $f62d864046160412$export$4f5203c0d889109e)(focusedDate, minValue, maxValue));
  else if (focusedDate.compare(startDate) < 0)
    setStartDate((0, $f62d864046160412$export$530edbfc915b2b04)(focusedDate, visibleDuration, locale, minValue, maxValue));
  else if (focusedDate.compare(endDate) > 0)
    setStartDate((0, $f62d864046160412$export$144a00ba6044eb9)(focusedDate, visibleDuration, locale, minValue, maxValue));
  function focusCell(date) {
    date = (0, $f62d864046160412$export$4f5203c0d889109e)(date, minValue, maxValue);
    setFocusedDate(date);
  }
  function setValue(newValue) {
    if (!props.isDisabled && !props.isReadOnly) {
      newValue = (0, $f62d864046160412$export$4f5203c0d889109e)(newValue, minValue, maxValue);
      newValue = (0, $f62d864046160412$export$a1d3911297b952d7)(newValue, startDate, isDateUnavailable);
      if (!newValue)
        return;
      newValue = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (value === null || value === void 0 ? void 0 : value.calendar) || new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());
      if (value && "hour" in value)
        setControlledValue(value.set(newValue));
      else
        setControlledValue(newValue);
    }
  }
  let isUnavailable = (0, import_react239.useMemo)(() => {
    if (!calendarDateValue)
      return false;
    if (isDateUnavailable && isDateUnavailable(calendarDateValue))
      return true;
    return (0, $f62d864046160412$export$eac50920cf2fd59a)(calendarDateValue, minValue, maxValue);
  }, [
    calendarDateValue,
    isDateUnavailable,
    minValue,
    maxValue
  ]);
  let isValueInvalid = props.isInvalid || props.validationState === "invalid" || isUnavailable;
  let validationState = isValueInvalid ? "invalid" : null;
  let pageDuration = (0, import_react239.useMemo)(() => {
    if (pageBehavior === "visible")
      return visibleDuration;
    return $131cf43a05231e1e$var$unitDuration(visibleDuration);
  }, [
    pageBehavior,
    visibleDuration
  ]);
  return {
    isDisabled: props.isDisabled,
    isReadOnly: props.isReadOnly,
    value: calendarDateValue,
    setValue,
    visibleRange: {
      start: startDate,
      end: endDate
    },
    minValue,
    maxValue,
    focusedDate,
    timeZone,
    validationState,
    isValueInvalid,
    setFocusedDate(date) {
      focusCell(date);
      setFocused(true);
    },
    focusNextDay() {
      focusCell(focusedDate.add({
        days: 1
      }));
    },
    focusPreviousDay() {
      focusCell(focusedDate.subtract({
        days: 1
      }));
    },
    focusNextRow() {
      if (visibleDuration.days)
        this.focusNextPage();
      else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.add({
          weeks: 1
        }));
    },
    focusPreviousRow() {
      if (visibleDuration.days)
        this.focusPreviousPage();
      else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.subtract({
          weeks: 1
        }));
    },
    focusNextPage() {
      let start2 = startDate.add(pageDuration);
      setFocusedDate((0, $f62d864046160412$export$4f5203c0d889109e)(focusedDate.add(pageDuration), minValue, maxValue));
      setStartDate((0, $f62d864046160412$export$144a00ba6044eb9)((0, $f62d864046160412$export$5bb865b12696a77d)(focusedDate, start2, pageDuration, locale, minValue, maxValue), pageDuration, locale));
    },
    focusPreviousPage() {
      let start2 = startDate.subtract(pageDuration);
      setFocusedDate((0, $f62d864046160412$export$4f5203c0d889109e)(focusedDate.subtract(pageDuration), minValue, maxValue));
      setStartDate((0, $f62d864046160412$export$144a00ba6044eb9)((0, $f62d864046160412$export$5bb865b12696a77d)(focusedDate, start2, pageDuration, locale, minValue, maxValue), pageDuration, locale));
    },
    focusSectionStart() {
      if (visibleDuration.days)
        focusCell(startDate);
      else if (visibleDuration.weeks)
        focusCell((0, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(focusedDate, locale));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell((0, $14e0f24ef4ac5c92$export$a5a3b454ada2268e)(focusedDate));
    },
    focusSectionEnd() {
      if (visibleDuration.days)
        focusCell(endDate);
      else if (visibleDuration.weeks)
        focusCell((0, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e)(focusedDate, locale));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell((0, $14e0f24ef4ac5c92$export$a2258d9c4118825c)(focusedDate));
    },
    focusNextSection(larger) {
      if (!larger && !visibleDuration.days) {
        focusCell(focusedDate.add($131cf43a05231e1e$var$unitDuration(visibleDuration)));
        return;
      }
      if (visibleDuration.days)
        this.focusNextPage();
      else if (visibleDuration.weeks)
        focusCell(focusedDate.add({
          months: 1
        }));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.add({
          years: 1
        }));
    },
    focusPreviousSection(larger) {
      if (!larger && !visibleDuration.days) {
        focusCell(focusedDate.subtract($131cf43a05231e1e$var$unitDuration(visibleDuration)));
        return;
      }
      if (visibleDuration.days)
        this.focusPreviousPage();
      else if (visibleDuration.weeks)
        focusCell(focusedDate.subtract({
          months: 1
        }));
      else if (visibleDuration.months || visibleDuration.years)
        focusCell(focusedDate.subtract({
          years: 1
        }));
    },
    selectFocusedDate() {
      setValue(focusedDate);
    },
    selectDate(date) {
      setValue(date);
    },
    isFocused,
    setFocused,
    isInvalid(date) {
      return (0, $f62d864046160412$export$eac50920cf2fd59a)(date, minValue, maxValue);
    },
    isSelected(date) {
      return calendarDateValue != null && (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, calendarDateValue) && !this.isCellDisabled(date) && !this.isCellUnavailable(date);
    },
    isCellFocused(date) {
      return isFocused && focusedDate && (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, focusedDate);
    },
    isCellDisabled(date) {
      return props.isDisabled || date.compare(startDate) < 0 || date.compare(endDate) > 0 || this.isInvalid(date, minValue, maxValue);
    },
    isCellUnavailable(date) {
      return props.isDateUnavailable && props.isDateUnavailable(date);
    },
    isPreviousVisibleRangeInvalid() {
      let prev2 = startDate.subtract({
        days: 1
      });
      return (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(prev2, startDate) || this.isInvalid(prev2, minValue, maxValue);
    },
    isNextVisibleRangeInvalid() {
      let next2 = endDate.add({
        days: 1
      });
      return (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(next2, endDate) || this.isInvalid(next2, minValue, maxValue);
    },
    getDatesInWeek(weekIndex, from2 = startDate) {
      let date = from2.add({
        weeks: weekIndex
      });
      let dates = [];
      date = (0, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(date, locale);
      let dayOfWeek = (0, $14e0f24ef4ac5c92$export$2061056d06d7cdf7)(date, locale);
      for (let i2 = 0; i2 < dayOfWeek; i2++)
        dates.push(null);
      while (dates.length < 7) {
        dates.push(date);
        let nextDate = date.add({
          days: 1
        });
        if ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, nextDate))
          break;
        date = nextDate;
      }
      while (dates.length < 7)
        dates.push(null);
      return dates;
    }
  };
}
function $131cf43a05231e1e$var$unitDuration(duration) {
  let unit = {
    ...duration
  };
  for (let key2 in duration)
    unit[key2] = 1;
  return unit;
}

// node_modules/@react-aria/calendar/dist/ar-AE.mjs
var $39324ace0d945f59$exports = {};
$39324ace0d945f59$exports = {
  "dateRange": (args) => `${args.startDate} إلى ${args.endDate}`,
  "dateSelected": (args) => `${args.date} المحدد`,
  "finishRangeSelectionPrompt": `انقر لإنهاء عملية تحديد نطاق التاريخ`,
  "maximumDate": `آخر تاريخ متاح`,
  "minimumDate": `أول تاريخ متاح`,
  "next": `التالي`,
  "previous": `السابق`,
  "selectedDateDescription": (args) => `تاريخ محدد: ${args.date}`,
  "selectedRangeDescription": (args) => `المدى الزمني المحدد: ${args.dateRange}`,
  "startRangeSelectionPrompt": `انقر لبدء عملية تحديد نطاق التاريخ`,
  "todayDate": (args) => `اليوم، ${args.date}`,
  "todayDateSelected": (args) => `اليوم، ${args.date} محدد`
};

// node_modules/@react-aria/calendar/dist/bg-BG.mjs
var $1830a539e98c7baf$exports = {};
$1830a539e98c7baf$exports = {
  "dateRange": (args) => `${args.startDate} до ${args.endDate}`,
  "dateSelected": (args) => `Избрано е ${args.date}`,
  "finishRangeSelectionPrompt": `Натиснете, за да довършите избора на времеви интервал`,
  "maximumDate": `Последна налична дата`,
  "minimumDate": `Първа налична дата`,
  "next": `Напред`,
  "previous": `Назад`,
  "selectedDateDescription": (args) => `Избрана дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Избран диапазон: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Натиснете, за да пристъпите към избора на времеви интервал`,
  "todayDate": (args) => `Днес, ${args.date}`,
  "todayDateSelected": (args) => `Днес, ${args.date} са избрани`
};

// node_modules/@react-aria/calendar/dist/cs-CZ.mjs
var $f4b92528965aab97$exports = {};
$f4b92528965aab97$exports = {
  "dateRange": (args) => `${args.startDate} až ${args.endDate}`,
  "dateSelected": (args) => `Vybráno ${args.date}`,
  "finishRangeSelectionPrompt": `Kliknutím dokončíte výběr rozsahu dat`,
  "maximumDate": `Poslední dostupné datum`,
  "minimumDate": `První dostupné datum`,
  "next": `Další`,
  "previous": `Předchozí`,
  "selectedDateDescription": (args) => `Vybrané datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Vybrané období: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknutím zahájíte výběr rozsahu dat`,
  "todayDate": (args) => `Dnes, ${args.date}`,
  "todayDateSelected": (args) => `Dnes, vybráno ${args.date}`
};

// node_modules/@react-aria/calendar/dist/da-DK.mjs
var $1cd578ef0547c8f1$exports = {};
$1cd578ef0547c8f1$exports = {
  "dateRange": (args) => `${args.startDate} til ${args.endDate}`,
  "dateSelected": (args) => `${args.date} valgt`,
  "finishRangeSelectionPrompt": `Klik for at fuldføre valg af datoområde`,
  "maximumDate": `Sidste ledige dato`,
  "minimumDate": `Første ledige dato`,
  "next": `Næste`,
  "previous": `Forrige`,
  "selectedDateDescription": (args) => `Valgt dato: ${args.date}`,
  "selectedRangeDescription": (args) => `Valgt interval: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klik for at starte valg af datoområde`,
  "todayDate": (args) => `I dag, ${args.date}`,
  "todayDateSelected": (args) => `I dag, ${args.date} valgt`
};

// node_modules/@react-aria/calendar/dist/de-DE.mjs
var $db55a8973925d619$exports = {};
$db55a8973925d619$exports = {
  "dateRange": (args) => `${args.startDate} bis ${args.endDate}`,
  "dateSelected": (args) => `${args.date} ausgewählt`,
  "finishRangeSelectionPrompt": `Klicken, um die Auswahl des Datumsbereichs zu beenden`,
  "maximumDate": `Letztes verfügbares Datum`,
  "minimumDate": `Erstes verfügbares Datum`,
  "next": `Weiter`,
  "previous": `Zurück`,
  "selectedDateDescription": (args) => `Ausgewähltes Datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Ausgewählter Bereich: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klicken, um die Auswahl des Datumsbereichs zu beginnen`,
  "todayDate": (args) => `Heute, ${args.date}`,
  "todayDateSelected": (args) => `Heute, ${args.date} ausgewählt`
};

// node_modules/@react-aria/calendar/dist/el-GR.mjs
var $ec6937d58566d443$exports = {};
$ec6937d58566d443$exports = {
  "dateRange": (args) => `${args.startDate} έως ${args.endDate}`,
  "dateSelected": (args) => `Επιλέχθηκε ${args.date}`,
  "finishRangeSelectionPrompt": `Κάντε κλικ για να ολοκληρώσετε την επιλογή εύρους ημερομηνιών`,
  "maximumDate": `Τελευταία διαθέσιμη ημερομηνία`,
  "minimumDate": `Πρώτη διαθέσιμη ημερομηνία`,
  "next": `Επόμενο`,
  "previous": `Προηγούμενο`,
  "selectedDateDescription": (args) => `Επιλεγμένη ημερομηνία: ${args.date}`,
  "selectedRangeDescription": (args) => `Επιλεγμένο εύρος: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Κάντε κλικ για να ξεκινήσετε την επιλογή εύρους ημερομηνιών`,
  "todayDate": (args) => `Σήμερα, ${args.date}`,
  "todayDateSelected": (args) => `Σήμερα, επιλέχτηκε ${args.date}`
};

// node_modules/@react-aria/calendar/dist/en-US.mjs
var $1f5cea0742dc284a$exports = {};
$1f5cea0742dc284a$exports = {
  "previous": `Previous`,
  "next": `Next`,
  "selectedDateDescription": (args) => `Selected Date: ${args.date}`,
  "selectedRangeDescription": (args) => `Selected Range: ${args.dateRange}`,
  "todayDate": (args) => `Today, ${args.date}`,
  "todayDateSelected": (args) => `Today, ${args.date} selected`,
  "dateSelected": (args) => `${args.date} selected`,
  "startRangeSelectionPrompt": `Click to start selecting date range`,
  "finishRangeSelectionPrompt": `Click to finish selecting date range`,
  "minimumDate": `First available date`,
  "maximumDate": `Last available date`,
  "dateRange": (args) => `${args.startDate} to ${args.endDate}`
};

// node_modules/@react-aria/calendar/dist/es-ES.mjs
var $2ca7ea366384817b$exports = {};
$2ca7ea366384817b$exports = {
  "dateRange": (args) => `${args.startDate} a ${args.endDate}`,
  "dateSelected": (args) => `${args.date} seleccionado`,
  "finishRangeSelectionPrompt": `Haga clic para terminar de seleccionar rango de fechas`,
  "maximumDate": `Última fecha disponible`,
  "minimumDate": `Primera fecha disponible`,
  "next": `Siguiente`,
  "previous": `Anterior`,
  "selectedDateDescription": (args) => `Fecha seleccionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo seleccionado: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Haga clic para comenzar a seleccionar un rango de fechas`,
  "todayDate": (args) => `Hoy, ${args.date}`,
  "todayDateSelected": (args) => `Hoy, ${args.date} seleccionado`
};

// node_modules/@react-aria/calendar/dist/et-EE.mjs
var $97874a7fe9cd091f$exports = {};
$97874a7fe9cd091f$exports = {
  "dateRange": (args) => `${args.startDate} kuni ${args.endDate}`,
  "dateSelected": (args) => `${args.date} valitud`,
  "finishRangeSelectionPrompt": `Klõpsake kuupäevavahemiku valimise lõpetamiseks`,
  "maximumDate": `Viimane saadaolev kuupäev`,
  "minimumDate": `Esimene saadaolev kuupäev`,
  "next": `Järgmine`,
  "previous": `Eelmine`,
  "selectedDateDescription": (args) => `Valitud kuupäev: ${args.date}`,
  "selectedRangeDescription": (args) => `Valitud vahemik: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klõpsake kuupäevavahemiku valimiseks`,
  "todayDate": (args) => `Täna, ${args.date}`,
  "todayDateSelected": (args) => `Täna, ${args.date} valitud`
};

// node_modules/@react-aria/calendar/dist/fi-FI.mjs
var $5d376b7fce1a45b2$exports = {};
$5d376b7fce1a45b2$exports = {
  "dateRange": (args) => `${args.startDate} – ${args.endDate}`,
  "dateSelected": (args) => `${args.date} valittu`,
  "finishRangeSelectionPrompt": `Lopeta päivämääräalueen valinta napsauttamalla tätä.`,
  "maximumDate": `Viimeinen varattavissa oleva päivämäärä`,
  "minimumDate": `Ensimmäinen varattavissa oleva päivämäärä`,
  "next": `Seuraava`,
  "previous": `Edellinen`,
  "selectedDateDescription": (args) => `Valittu päivämäärä: ${args.date}`,
  "selectedRangeDescription": (args) => `Valittu aikaväli: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Aloita päivämääräalueen valinta napsauttamalla tätä.`,
  "todayDate": (args) => `Tänään, ${args.date}`,
  "todayDateSelected": (args) => `Tänään, ${args.date} valittu`
};

// node_modules/@react-aria/calendar/dist/fr-FR.mjs
var $3bf722b362aaf54d$exports = {};
$3bf722b362aaf54d$exports = {
  "dateRange": (args) => `${args.startDate} à ${args.endDate}`,
  "dateSelected": (args) => `${args.date} sélectionné`,
  "finishRangeSelectionPrompt": `Cliquer pour finir de sélectionner la plage de dates`,
  "maximumDate": `Dernière date disponible`,
  "minimumDate": `Première date disponible`,
  "next": `Suivant`,
  "previous": `Précédent`,
  "selectedDateDescription": (args) => `Date sélectionnée : ${args.date}`,
  "selectedRangeDescription": (args) => `Plage sélectionnée : ${args.dateRange}`,
  "startRangeSelectionPrompt": `Cliquer pour commencer à sélectionner la plage de dates`,
  "todayDate": (args) => `Aujourd'hui, ${args.date}`,
  "todayDateSelected": (args) => `Aujourd’hui, ${args.date} sélectionné`
};

// node_modules/@react-aria/calendar/dist/he-IL.mjs
var $38c43f8322316031$exports = {};
$38c43f8322316031$exports = {
  "dateRange": (args) => `${args.startDate} עד ${args.endDate}`,
  "dateSelected": (args) => `${args.date} נבחר`,
  "finishRangeSelectionPrompt": `חץ כדי לסיים את בחירת טווח התאריכים`,
  "maximumDate": `תאריך פנוי אחרון`,
  "minimumDate": `תאריך פנוי ראשון`,
  "next": `הבא`,
  "previous": `הקודם`,
  "selectedDateDescription": (args) => `תאריך נבחר: ${args.date}`,
  "selectedRangeDescription": (args) => `טווח נבחר: ${args.dateRange}`,
  "startRangeSelectionPrompt": `לחץ כדי להתחיל בבחירת טווח התאריכים`,
  "todayDate": (args) => `היום, ${args.date}`,
  "todayDateSelected": (args) => `היום, ${args.date} נבחר`
};

// node_modules/@react-aria/calendar/dist/hr-HR.mjs
var $c90e0f32b44630bf$exports = {};
$c90e0f32b44630bf$exports = {
  "dateRange": (args) => `${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `${args.date} odabran`,
  "finishRangeSelectionPrompt": `Kliknite da dovršite raspon odabranih datuma`,
  "maximumDate": `Posljednji raspoloživi datum`,
  "minimumDate": `Prvi raspoloživi datum`,
  "next": `Sljedeći`,
  "previous": `Prethodni`,
  "selectedDateDescription": (args) => `Odabrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Odabrani raspon: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknite da započnete raspon odabranih datuma`,
  "todayDate": (args) => `Danas, ${args.date}`,
  "todayDateSelected": (args) => `Danas, odabran ${args.date}`
};

// node_modules/@react-aria/calendar/dist/hu-HU.mjs
var $715875e6e7a338f4$exports = {};
$715875e6e7a338f4$exports = {
  "dateRange": (args) => `${args.startDate}–${args.endDate}`,
  "dateSelected": (args) => `${args.date} kiválasztva`,
  "finishRangeSelectionPrompt": `Kattintson a dátumtartomány kijelölésének befejezéséhez`,
  "maximumDate": `Utolsó elérhető dátum`,
  "minimumDate": `Az első elérhető dátum`,
  "next": `Következő`,
  "previous": `Előző`,
  "selectedDateDescription": (args) => `Kijelölt dátum: ${args.date}`,
  "selectedRangeDescription": (args) => `Kijelölt tartomány: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kattintson a dátumtartomány kijelölésének indításához`,
  "todayDate": (args) => `Ma, ${args.date}`,
  "todayDateSelected": (args) => `Ma, ${args.date} kijelölve`
};

// node_modules/@react-aria/calendar/dist/it-IT.mjs
var $37d77c66e34daccf$exports = {};
$37d77c66e34daccf$exports = {
  "dateRange": (args) => `Da ${args.startDate} a ${args.endDate}`,
  "dateSelected": (args) => `${args.date} selezionata`,
  "finishRangeSelectionPrompt": `Fai clic per completare la selezione dell’intervallo di date`,
  "maximumDate": `Ultima data disponibile`,
  "minimumDate": `Prima data disponibile`,
  "next": `Successivo`,
  "previous": `Precedente`,
  "selectedDateDescription": (args) => `Data selezionata: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervallo selezionato: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Fai clic per selezionare l’intervallo di date`,
  "todayDate": (args) => `Oggi, ${args.date}`,
  "todayDateSelected": (args) => `Oggi, ${args.date} selezionata`
};

// node_modules/@react-aria/calendar/dist/ja-JP.mjs
var $542f39aee29303c3$exports = {};
$542f39aee29303c3$exports = {
  "dateRange": (args) => `${args.startDate} から ${args.endDate}`,
  "dateSelected": (args) => `${args.date} を選択`,
  "finishRangeSelectionPrompt": `クリックして日付範囲の選択を終了`,
  "maximumDate": `最終利用可能日`,
  "minimumDate": `最初の利用可能日`,
  "next": `次へ`,
  "previous": `前へ`,
  "selectedDateDescription": (args) => `選択した日付 : ${args.date}`,
  "selectedRangeDescription": (args) => `選択範囲 : ${args.dateRange}`,
  "startRangeSelectionPrompt": `クリックして日付範囲の選択を開始`,
  "todayDate": (args) => `本日、${args.date}`,
  "todayDateSelected": (args) => `本日、${args.date} を選択`
};

// node_modules/@react-aria/calendar/dist/ko-KR.mjs
var $22a5f0623ea73e4f$exports = {};
$22a5f0623ea73e4f$exports = {
  "dateRange": (args) => `${args.startDate} ~ ${args.endDate}`,
  "dateSelected": (args) => `${args.date} 선택됨`,
  "finishRangeSelectionPrompt": `날짜 범위 선택을 완료하려면 클릭하십시오.`,
  "maximumDate": `마지막으로 사용 가능한 일자`,
  "minimumDate": `처음으로 사용 가능한 일자`,
  "next": `다음`,
  "previous": `이전`,
  "selectedDateDescription": (args) => `선택 일자: ${args.date}`,
  "selectedRangeDescription": (args) => `선택 범위: ${args.dateRange}`,
  "startRangeSelectionPrompt": `날짜 범위 선택을 시작하려면 클릭하십시오.`,
  "todayDate": (args) => `오늘, ${args.date}`,
  "todayDateSelected": (args) => `오늘, ${args.date} 선택됨`
};

// node_modules/@react-aria/calendar/dist/lt-LT.mjs
var $522380d13d62cba0$exports = {};
$522380d13d62cba0$exports = {
  "dateRange": (args) => `Nuo ${args.startDate} iki ${args.endDate}`,
  "dateSelected": (args) => `Pasirinkta ${args.date}`,
  "finishRangeSelectionPrompt": `Spustelėkite, kad baigtumėte pasirinkti datų intervalą`,
  "maximumDate": `Paskutinė galima data`,
  "minimumDate": `Pirmoji galima data`,
  "next": `Paskesnis`,
  "previous": `Ankstesnis`,
  "selectedDateDescription": (args) => `Pasirinkta data: ${args.date}`,
  "selectedRangeDescription": (args) => `Pasirinktas intervalas: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Spustelėkite, kad pradėtumėte pasirinkti datų intervalą`,
  "todayDate": (args) => `Šiandien, ${args.date}`,
  "todayDateSelected": (args) => `Šiandien, pasirinkta ${args.date}`
};

// node_modules/@react-aria/calendar/dist/lv-LV.mjs
var $8a7bc830b2fe6485$exports = {};
$8a7bc830b2fe6485$exports = {
  "dateRange": (args) => `No ${args.startDate} līdz ${args.endDate}`,
  "dateSelected": (args) => `Atlasīts: ${args.date}`,
  "finishRangeSelectionPrompt": `Noklikšķiniet, lai pabeigtu datumu diapazona atlasi`,
  "maximumDate": `Pēdējais pieejamais datums`,
  "minimumDate": `Pirmais pieejamais datums`,
  "next": `Tālāk`,
  "previous": `Atpakaļ`,
  "selectedDateDescription": (args) => `Atlasītais datums: ${args.date}`,
  "selectedRangeDescription": (args) => `Atlasītais diapazons: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Noklikšķiniet, lai sāktu datumu diapazona atlasi`,
  "todayDate": (args) => `Šodien, ${args.date}`,
  "todayDateSelected": (args) => `Atlasīta šodiena, ${args.date}`
};

// node_modules/@react-aria/calendar/dist/nb-NO.mjs
var $9fac9c044470683b$exports = {};
$9fac9c044470683b$exports = {
  "dateRange": (args) => `${args.startDate} til ${args.endDate}`,
  "dateSelected": (args) => `${args.date} valgt`,
  "finishRangeSelectionPrompt": `Klikk for å fullføre valg av datoområde`,
  "maximumDate": `Siste tilgjengelige dato`,
  "minimumDate": `Første tilgjengelige dato`,
  "next": `Neste`,
  "previous": `Forrige`,
  "selectedDateDescription": (args) => `Valgt dato: ${args.date}`,
  "selectedRangeDescription": (args) => `Valgt område: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klikk for å starte valg av datoområde`,
  "todayDate": (args) => `I dag, ${args.date}`,
  "todayDateSelected": (args) => `I dag, ${args.date} valgt`
};

// node_modules/@react-aria/calendar/dist/nl-NL.mjs
var $b127d3569efb1449$exports = {};
$b127d3569efb1449$exports = {
  "dateRange": (args) => `${args.startDate} tot ${args.endDate}`,
  "dateSelected": (args) => `${args.date} geselecteerd`,
  "finishRangeSelectionPrompt": `Klik om de selectie van het datumbereik te voltooien`,
  "maximumDate": `Laatste beschikbare datum`,
  "minimumDate": `Eerste beschikbare datum`,
  "next": `Volgende`,
  "previous": `Vorige`,
  "selectedDateDescription": (args) => `Geselecteerde datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Geselecteerd bereik: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klik om het datumbereik te selecteren`,
  "todayDate": (args) => `Vandaag, ${args.date}`,
  "todayDateSelected": (args) => `Vandaag, ${args.date} geselecteerd`
};

// node_modules/@react-aria/calendar/dist/pl-PL.mjs
var $51404a4090633490$exports = {};
$51404a4090633490$exports = {
  "dateRange": (args) => `${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `Wybrano ${args.date}`,
  "finishRangeSelectionPrompt": `Kliknij, aby zakończyć wybór zakresu dat`,
  "maximumDate": `Ostatnia dostępna data`,
  "minimumDate": `Pierwsza dostępna data`,
  "next": `Dalej`,
  "previous": `Wstecz`,
  "selectedDateDescription": (args) => `Wybrana data: ${args.date}`,
  "selectedRangeDescription": (args) => `Wybrany zakres: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknij, aby rozpocząć wybór zakresu dat`,
  "todayDate": (args) => `Dzisiaj, ${args.date}`,
  "todayDateSelected": (args) => `Dzisiaj wybrano ${args.date}`
};

// node_modules/@react-aria/calendar/dist/pt-BR.mjs
var $e5e6a3fe3b4527df$exports = {};
$e5e6a3fe3b4527df$exports = {
  "dateRange": (args) => `${args.startDate} a ${args.endDate}`,
  "dateSelected": (args) => `${args.date} selecionado`,
  "finishRangeSelectionPrompt": `Clique para concluir a seleção do intervalo de datas`,
  "maximumDate": `Última data disponível`,
  "minimumDate": `Primeira data disponível`,
  "next": `Próximo`,
  "previous": `Anterior`,
  "selectedDateDescription": (args) => `Data selecionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo selecionado: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Clique para iniciar a seleção do intervalo de datas`,
  "todayDate": (args) => `Hoje, ${args.date}`,
  "todayDateSelected": (args) => `Hoje, ${args.date} selecionado`
};

// node_modules/@react-aria/calendar/dist/pt-PT.mjs
var $c519dcadcbb1ee47$exports = {};
$c519dcadcbb1ee47$exports = {
  "dateRange": (args) => `${args.startDate} a ${args.endDate}`,
  "dateSelected": (args) => `${args.date} selecionado`,
  "finishRangeSelectionPrompt": `Clique para terminar de selecionar o intervalo de datas`,
  "maximumDate": `Última data disponível`,
  "minimumDate": `Primeira data disponível`,
  "next": `Próximo`,
  "previous": `Anterior`,
  "selectedDateDescription": (args) => `Data selecionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo selecionado: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Clique para começar a selecionar o intervalo de datas`,
  "todayDate": (args) => `Hoje, ${args.date}`,
  "todayDateSelected": (args) => `Hoje, ${args.date} selecionado`
};

// node_modules/@react-aria/calendar/dist/ro-RO.mjs
var $e5aa0186ca7889c6$exports = {};
$e5aa0186ca7889c6$exports = {
  "dateRange": (args) => `De la ${args.startDate} până la ${args.endDate}`,
  "dateSelected": (args) => `${args.date} selectată`,
  "finishRangeSelectionPrompt": `Apăsaţi pentru a finaliza selecţia razei pentru dată`,
  "maximumDate": `Ultima dată disponibilă`,
  "minimumDate": `Prima dată disponibilă`,
  "next": `Următorul`,
  "previous": `Înainte`,
  "selectedDateDescription": (args) => `Dată selectată: ${args.date}`,
  "selectedRangeDescription": (args) => `Interval selectat: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Apăsaţi pentru a începe selecţia razei pentru dată`,
  "todayDate": (args) => `Astăzi, ${args.date}`,
  "todayDateSelected": (args) => `Azi, ${args.date} selectată`
};

// node_modules/@react-aria/calendar/dist/ru-RU.mjs
var $5b907f5fa3eee652$exports = {};
$5b907f5fa3eee652$exports = {
  "dateRange": (args) => `С ${args.startDate} по ${args.endDate}`,
  "dateSelected": (args) => `Выбрано ${args.date}`,
  "finishRangeSelectionPrompt": `Щелкните, чтобы завершить выбор диапазона дат`,
  "maximumDate": `Последняя доступная дата`,
  "minimumDate": `Первая доступная дата`,
  "next": `Далее`,
  "previous": `Назад`,
  "selectedDateDescription": (args) => `Выбранная дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Выбранный диапазон: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Щелкните, чтобы начать выбор диапазона дат`,
  "todayDate": (args) => `Сегодня, ${args.date}`,
  "todayDateSelected": (args) => `Сегодня, выбрано ${args.date}`
};

// node_modules/@react-aria/calendar/dist/sk-SK.mjs
var $1b4c51359c99cf79$exports = {};
$1b4c51359c99cf79$exports = {
  "dateRange": (args) => `Od ${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `Vybratý dátum ${args.date}`,
  "finishRangeSelectionPrompt": `Kliknutím dokončíte výber rozsahu dátumov`,
  "maximumDate": `Posledný dostupný dátum`,
  "minimumDate": `Prvý dostupný dátum`,
  "next": `Nasledujúce`,
  "previous": `Predchádzajúce`,
  "selectedDateDescription": (args) => `Vybratý dátum: ${args.date}`,
  "selectedRangeDescription": (args) => `Vybratý rozsah: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknutím spustíte výber rozsahu dátumov`,
  "todayDate": (args) => `Dnes ${args.date}`,
  "todayDateSelected": (args) => `Vybratý dnešný dátum ${args.date}`
};

// node_modules/@react-aria/calendar/dist/sl-SI.mjs
var $02e4e6a4608cc6f3$exports = {};
$02e4e6a4608cc6f3$exports = {
  "dateRange": (args) => `${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `${args.date} izbrano`,
  "finishRangeSelectionPrompt": `Kliknite za dokončanje izbire datumskega obsega`,
  "maximumDate": `Zadnji razpoložljivi datum`,
  "minimumDate": `Prvi razpoložljivi datum`,
  "next": `Naprej`,
  "previous": `Nazaj`,
  "selectedDateDescription": (args) => `Izbrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Izbrano območje: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknite za začetek izbire datumskega obsega`,
  "todayDate": (args) => `Danes, ${args.date}`,
  "todayDateSelected": (args) => `Danes, ${args.date} izbrano`
};

// node_modules/@react-aria/calendar/dist/sr-SP.mjs
var $6dd2fbaad93b6878$exports = {};
$6dd2fbaad93b6878$exports = {
  "dateRange": (args) => `${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `${args.date} izabran`,
  "finishRangeSelectionPrompt": `Kliknite da dovršite opseg izabranih datuma`,
  "maximumDate": `Zadnji raspoloživi datum`,
  "minimumDate": `Prvi raspoloživi datum`,
  "next": `Sledeći`,
  "previous": `Prethodni`,
  "selectedDateDescription": (args) => `Izabrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Izabrani period: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknite da započnete opseg izabranih datuma`,
  "todayDate": (args) => `Danas, ${args.date}`,
  "todayDateSelected": (args) => `Danas, izabran ${args.date}`
};

// node_modules/@react-aria/calendar/dist/sv-SE.mjs
var $33ea59bfe6e804e0$exports = {};
$33ea59bfe6e804e0$exports = {
  "dateRange": (args) => `${args.startDate} till ${args.endDate}`,
  "dateSelected": (args) => `${args.date} har valts`,
  "finishRangeSelectionPrompt": `Klicka för att avsluta val av datumintervall`,
  "maximumDate": `Sista tillgängliga datum`,
  "minimumDate": `Första tillgängliga datum`,
  "next": `Nästa`,
  "previous": `Föregående`,
  "selectedDateDescription": (args) => `Valt datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Valt intervall: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klicka för att välja datumintervall`,
  "todayDate": (args) => `Idag, ${args.date}`,
  "todayDateSelected": (args) => `Idag, ${args.date} har valts`
};

// node_modules/@react-aria/calendar/dist/tr-TR.mjs
var $4603b0d0246969b2$exports = {};
$4603b0d0246969b2$exports = {
  "dateRange": (args) => `${args.startDate} - ${args.endDate}`,
  "dateSelected": (args) => `${args.date} seçildi`,
  "finishRangeSelectionPrompt": `Tarih aralığı seçimini tamamlamak için tıklayın`,
  "maximumDate": `Son müsait tarih`,
  "minimumDate": `İlk müsait tarih`,
  "next": `Sonraki`,
  "previous": `Önceki`,
  "selectedDateDescription": (args) => `Seçilen Tarih: ${args.date}`,
  "selectedRangeDescription": (args) => `Seçilen Aralık: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Tarih aralığı seçimini başlatmak için tıklayın`,
  "todayDate": (args) => `Bugün, ${args.date}`,
  "todayDateSelected": (args) => `Bugün, ${args.date} seçildi`
};

// node_modules/@react-aria/calendar/dist/uk-UA.mjs
var $82649816f530bb1b$exports = {};
$82649816f530bb1b$exports = {
  "dateRange": (args) => `${args.startDate} — ${args.endDate}`,
  "dateSelected": (args) => `Вибрано ${args.date}`,
  "finishRangeSelectionPrompt": `Натисніть, щоб завершити вибір діапазону дат`,
  "maximumDate": `Остання доступна дата`,
  "minimumDate": `Перша доступна дата`,
  "next": `Наступний`,
  "previous": `Попередній`,
  "selectedDateDescription": (args) => `Вибрана дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Вибраний діапазон: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Натисніть, щоб почати вибір діапазону дат`,
  "todayDate": (args) => `Сьогодні, ${args.date}`,
  "todayDateSelected": (args) => `Сьогодні, вибрано ${args.date}`
};

// node_modules/@react-aria/calendar/dist/zh-CN.mjs
var $628e140a43dfb330$exports = {};
$628e140a43dfb330$exports = {
  "dateRange": (args) => `${args.startDate} 至 ${args.endDate}`,
  "dateSelected": (args) => `已选择 ${args.date}`,
  "finishRangeSelectionPrompt": `单击以完成选择日期范围`,
  "maximumDate": `最后一个可用日期`,
  "minimumDate": `第一个可用日期`,
  "next": `下一页`,
  "previous": `上一页`,
  "selectedDateDescription": (args) => `选定的日期：${args.date}`,
  "selectedRangeDescription": (args) => `选定的范围：${args.dateRange}`,
  "startRangeSelectionPrompt": `单击以开始选择日期范围`,
  "todayDate": (args) => `今天，即 ${args.date}`,
  "todayDateSelected": (args) => `已选择今天，即 ${args.date}`
};

// node_modules/@react-aria/calendar/dist/zh-TW.mjs
var $745937250cd4679c$exports = {};
$745937250cd4679c$exports = {
  "dateRange": (args) => `${args.startDate} 至 ${args.endDate}`,
  "dateSelected": (args) => `已選取 ${args.date}`,
  "finishRangeSelectionPrompt": `按一下以完成選取日期範圍`,
  "maximumDate": `最後一個可用日期`,
  "minimumDate": `第一個可用日期`,
  "next": `下一頁`,
  "previous": `上一頁`,
  "selectedDateDescription": (args) => `選定的日期：${args.date}`,
  "selectedRangeDescription": (args) => `選定的範圍：${args.dateRange}`,
  "startRangeSelectionPrompt": `按一下以開始選取日期範圍`,
  "todayDate": (args) => `今天，${args.date}`,
  "todayDateSelected": (args) => `已選取今天，${args.date}`
};

// node_modules/@react-aria/calendar/dist/import.mjs
var import_react240 = __toESM(require_react(), 1);
function $parcel$interopDefault4(a2) {
  return a2 && a2.__esModule ? a2.default : a2;
}
var $3904726b442bd9b2$exports = {};
$3904726b442bd9b2$exports = {
  "ar-AE": $39324ace0d945f59$exports,
  "bg-BG": $1830a539e98c7baf$exports,
  "cs-CZ": $f4b92528965aab97$exports,
  "da-DK": $1cd578ef0547c8f1$exports,
  "de-DE": $db55a8973925d619$exports,
  "el-GR": $ec6937d58566d443$exports,
  "en-US": $1f5cea0742dc284a$exports,
  "es-ES": $2ca7ea366384817b$exports,
  "et-EE": $97874a7fe9cd091f$exports,
  "fi-FI": $5d376b7fce1a45b2$exports,
  "fr-FR": $3bf722b362aaf54d$exports,
  "he-IL": $38c43f8322316031$exports,
  "hr-HR": $c90e0f32b44630bf$exports,
  "hu-HU": $715875e6e7a338f4$exports,
  "it-IT": $37d77c66e34daccf$exports,
  "ja-JP": $542f39aee29303c3$exports,
  "ko-KR": $22a5f0623ea73e4f$exports,
  "lt-LT": $522380d13d62cba0$exports,
  "lv-LV": $8a7bc830b2fe6485$exports,
  "nb-NO": $9fac9c044470683b$exports,
  "nl-NL": $b127d3569efb1449$exports,
  "pl-PL": $51404a4090633490$exports,
  "pt-BR": $e5e6a3fe3b4527df$exports,
  "pt-PT": $c519dcadcbb1ee47$exports,
  "ro-RO": $e5aa0186ca7889c6$exports,
  "ru-RU": $5b907f5fa3eee652$exports,
  "sk-SK": $1b4c51359c99cf79$exports,
  "sl-SI": $02e4e6a4608cc6f3$exports,
  "sr-SP": $6dd2fbaad93b6878$exports,
  "sv-SE": $33ea59bfe6e804e0$exports,
  "tr-TR": $4603b0d0246969b2$exports,
  "uk-UA": $82649816f530bb1b$exports,
  "zh-CN": $628e140a43dfb330$exports,
  "zh-TW": $745937250cd4679c$exports
};
var $a074e1e2d0f0a665$export$653eddfc964b0f8a = /* @__PURE__ */ new WeakMap();
function $a074e1e2d0f0a665$export$134cbb7fb09a9522(date) {
  return (date === null || date === void 0 ? void 0 : date.calendar.identifier) === "gregory" && date.era === "BC" ? "short" : void 0;
}
function $a074e1e2d0f0a665$export$b6df97c887c38e1a(state2) {
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault4($3904726b442bd9b2$exports)), "@react-aria/calendar");
  let start2, end2;
  if ("highlightedRange" in state2)
    ({ start: start2, end: end2 } = state2.highlightedRange || {});
  else
    start2 = end2 = state2.value;
  let dateFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    weekday: "long",
    month: "long",
    year: "numeric",
    day: "numeric",
    era: $a074e1e2d0f0a665$export$134cbb7fb09a9522(start2) || $a074e1e2d0f0a665$export$134cbb7fb09a9522(end2),
    timeZone: state2.timeZone
  });
  let anchorDate = "anchorDate" in state2 ? state2.anchorDate : null;
  return (0, import_react240.useMemo)(() => {
    if (!anchorDate && start2 && end2) {
      if ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(start2, end2)) {
        let date = dateFormatter.format(start2.toDate(state2.timeZone));
        return stringFormatter.format("selectedDateDescription", {
          date
        });
      } else {
        let dateRange = $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, start2, end2, state2.timeZone);
        return stringFormatter.format("selectedRangeDescription", {
          dateRange
        });
      }
    }
    return "";
  }, [
    start2,
    end2,
    anchorDate,
    state2.timeZone,
    stringFormatter,
    dateFormatter
  ]);
}
function $a074e1e2d0f0a665$export$31afe65d91ef6e8(startDate, endDate, timeZone, isAria) {
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault4($3904726b442bd9b2$exports)), "@react-aria/calendar");
  let era = $a074e1e2d0f0a665$export$134cbb7fb09a9522(startDate) || $a074e1e2d0f0a665$export$134cbb7fb09a9522(endDate);
  let monthFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    month: "long",
    year: "numeric",
    era,
    calendar: startDate.calendar.identifier,
    timeZone
  });
  let dateFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    month: "long",
    year: "numeric",
    day: "numeric",
    era,
    calendar: startDate.calendar.identifier,
    timeZone
  });
  return (0, import_react240.useMemo)(() => {
    if ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(startDate, (0, $14e0f24ef4ac5c92$export$a5a3b454ada2268e)(startDate))) {
      if ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(endDate, (0, $14e0f24ef4ac5c92$export$a2258d9c4118825c)(startDate)))
        return monthFormatter.format(startDate.toDate(timeZone));
      else if ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(endDate, (0, $14e0f24ef4ac5c92$export$a2258d9c4118825c)(endDate)))
        return isAria ? $a074e1e2d0f0a665$var$formatRange(monthFormatter, stringFormatter, startDate, endDate, timeZone) : monthFormatter.formatRange(startDate.toDate(timeZone), endDate.toDate(timeZone));
    }
    return isAria ? $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, startDate, endDate, timeZone) : dateFormatter.formatRange(startDate.toDate(timeZone), endDate.toDate(timeZone));
  }, [
    startDate,
    endDate,
    monthFormatter,
    dateFormatter,
    stringFormatter,
    timeZone,
    isAria
  ]);
}
function $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, start2, end2, timeZone) {
  let parts = dateFormatter.formatRangeToParts(start2.toDate(timeZone), end2.toDate(timeZone));
  let separatorIndex = -1;
  for (let i2 = 0; i2 < parts.length; i2++) {
    let part = parts[i2];
    if (part.source === "shared" && part.type === "literal")
      separatorIndex = i2;
    else if (part.source === "endRange")
      break;
  }
  let startValue = "";
  let endValue = "";
  for (let i2 = 0; i2 < parts.length; i2++) {
    if (i2 < separatorIndex)
      startValue += parts[i2].value;
    else if (i2 > separatorIndex)
      endValue += parts[i2].value;
  }
  return stringFormatter.format("dateRange", {
    startDate: startValue,
    endDate: endValue
  });
}
function $c4acc1de3ab169cf$export$d652b3ea2d672d5b(props, state2) {
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault4($3904726b442bd9b2$exports)), "@react-aria/calendar");
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
  let title = (0, $a074e1e2d0f0a665$export$31afe65d91ef6e8)(state2.visibleRange.start, state2.visibleRange.end, state2.timeZone, false);
  let visibleRangeDescription = (0, $a074e1e2d0f0a665$export$31afe65d91ef6e8)(state2.visibleRange.start, state2.visibleRange.end, state2.timeZone, true);
  (0, $4f58c5f72bcf79f7$export$496315a1608d9602)(() => {
    if (!state2.isFocused)
      (0, $319e236875307eab$export$a9b970dcc4ae71a9)(visibleRangeDescription);
  }, [
    visibleRangeDescription
  ]);
  let selectedDateDescription = (0, $a074e1e2d0f0a665$export$b6df97c887c38e1a)(state2);
  (0, $4f58c5f72bcf79f7$export$496315a1608d9602)(() => {
    if (selectedDateDescription)
      (0, $319e236875307eab$export$a9b970dcc4ae71a9)(selectedDateDescription, "polite", 4e3);
  }, [
    selectedDateDescription
  ]);
  let errorMessageId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)([
    Boolean(props.errorMessage),
    props.isInvalid,
    props.validationState
  ]);
  (0, $a074e1e2d0f0a665$export$653eddfc964b0f8a).set(state2, {
    ariaLabel: props["aria-label"],
    ariaLabelledBy: props["aria-labelledby"],
    errorMessageId,
    selectedDateDescription
  });
  let [nextFocused, setNextFocused] = (0, import_react240.useState)(false);
  let nextDisabled = props.isDisabled || state2.isNextVisibleRangeInvalid();
  if (nextDisabled && nextFocused) {
    setNextFocused(false);
    state2.setFocused(true);
  }
  let [previousFocused, setPreviousFocused] = (0, import_react240.useState)(false);
  let previousDisabled = props.isDisabled || state2.isPreviousVisibleRangeInvalid();
  if (previousDisabled && previousFocused) {
    setPreviousFocused(false);
    state2.setFocused(true);
  }
  let labelProps = (0, $313b98861ee5dd6c$export$d6875122194c7b44)({
    id: props["id"],
    "aria-label": [
      props["aria-label"],
      visibleRangeDescription
    ].filter(Boolean).join(", "),
    "aria-labelledby": props["aria-labelledby"]
  });
  return {
    calendarProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, labelProps, {
      role: "application",
      "aria-describedby": props["aria-describedby"] || void 0
    }),
    nextButtonProps: {
      onPress: () => state2.focusNextPage(),
      "aria-label": stringFormatter.format("next"),
      isDisabled: nextDisabled,
      onFocusChange: setNextFocused
    },
    prevButtonProps: {
      onPress: () => state2.focusPreviousPage(),
      "aria-label": stringFormatter.format("previous"),
      isDisabled: previousDisabled,
      onFocusChange: setPreviousFocused
    },
    errorMessageProps: {
      id: errorMessageId
    },
    title
  };
}
function $9942cad8a072a530$export$3ee915f8151bd4f1(props, state2) {
  return (0, $c4acc1de3ab169cf$export$d652b3ea2d672d5b)(props, state2);
}
function $e3031d1f8c9d64eb$export$cb95147730a423f5(props, state2) {
  let { startDate = state2.visibleRange.start, endDate = state2.visibleRange.end } = props;
  let { direction: direction2 } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let onKeyDown = (e) => {
    switch (e.key) {
      case "Enter":
      case " ":
        e.preventDefault();
        state2.selectFocusedDate();
        break;
      case "PageUp":
        e.preventDefault();
        e.stopPropagation();
        state2.focusPreviousSection(e.shiftKey);
        break;
      case "PageDown":
        e.preventDefault();
        e.stopPropagation();
        state2.focusNextSection(e.shiftKey);
        break;
      case "End":
        e.preventDefault();
        e.stopPropagation();
        state2.focusSectionEnd();
        break;
      case "Home":
        e.preventDefault();
        e.stopPropagation();
        state2.focusSectionStart();
        break;
      case "ArrowLeft":
        e.preventDefault();
        e.stopPropagation();
        if (direction2 === "rtl")
          state2.focusNextDay();
        else
          state2.focusPreviousDay();
        break;
      case "ArrowUp":
        e.preventDefault();
        e.stopPropagation();
        state2.focusPreviousRow();
        break;
      case "ArrowRight":
        e.preventDefault();
        e.stopPropagation();
        if (direction2 === "rtl")
          state2.focusPreviousDay();
        else
          state2.focusNextDay();
        break;
      case "ArrowDown":
        e.preventDefault();
        e.stopPropagation();
        state2.focusNextRow();
        break;
      case "Escape":
        if ("setAnchorDate" in state2) {
          e.preventDefault();
          state2.setAnchorDate(null);
        }
        break;
    }
  };
  let visibleRangeDescription = (0, $a074e1e2d0f0a665$export$31afe65d91ef6e8)(startDate, endDate, state2.timeZone, true);
  let { ariaLabel, ariaLabelledBy } = (0, $a074e1e2d0f0a665$export$653eddfc964b0f8a).get(state2);
  let labelProps = (0, $313b98861ee5dd6c$export$d6875122194c7b44)({
    "aria-label": [
      ariaLabel,
      visibleRangeDescription
    ].filter(Boolean).join(", "),
    "aria-labelledby": ariaLabelledBy
  });
  let dayFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    weekday: props.weekdayStyle || "narrow",
    timeZone: state2.timeZone
  });
  let { locale } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let weekDays = (0, import_react240.useMemo)(() => {
    let weekStart = (0, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4)((0, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)(state2.timeZone), locale);
    return [
      ...new Array(7).keys()
    ].map((index5) => {
      let date = weekStart.add({
        days: index5
      });
      let dateDay = date.toDate(state2.timeZone);
      return dayFormatter.format(dateDay);
    });
  }, [
    locale,
    state2.timeZone,
    dayFormatter
  ]);
  return {
    gridProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
      role: "grid",
      "aria-readonly": state2.isReadOnly || null,
      "aria-disabled": state2.isDisabled || null,
      "aria-multiselectable": "highlightedRange" in state2 || void 0,
      onKeyDown,
      onFocus: () => state2.setFocused(true),
      onBlur: () => state2.setFocused(false)
    }),
    headerProps: {
      // Column headers are hidden to screen readers to make navigating with a touch screen reader easier.
      // The day names are already included in the label of each cell, so there's no need to announce them twice.
      "aria-hidden": true
    },
    weekDays
  };
}
function $36a0ac60f04457c5$export$136073280381448e(props, state2, ref) {
  let { date, isDisabled: isDisabled3 } = props;
  let { errorMessageId, selectedDateDescription } = (0, $a074e1e2d0f0a665$export$653eddfc964b0f8a).get(state2);
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault4($3904726b442bd9b2$exports)), "@react-aria/calendar");
  let dateFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    weekday: "long",
    day: "numeric",
    month: "long",
    year: "numeric",
    era: (0, $a074e1e2d0f0a665$export$134cbb7fb09a9522)(date),
    timeZone: state2.timeZone
  });
  let isSelected = state2.isSelected(date);
  let isFocused = state2.isCellFocused(date);
  isDisabled3 = isDisabled3 || state2.isCellDisabled(date);
  let isUnavailable = state2.isCellUnavailable(date);
  let isSelectable = !isDisabled3 && !isUnavailable;
  let isInvalid = state2.isValueInvalid && ("highlightedRange" in state2 ? !state2.anchorDate && state2.highlightedRange && date.compare(state2.highlightedRange.start) >= 0 && date.compare(state2.highlightedRange.end) <= 0 : state2.value && (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(state2.value, date));
  if (isInvalid)
    isSelected = true;
  date = (0, $5a387cc49350e6db$export$722debc0e56fea39)(date, (0, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee));
  let nativeDate = (0, import_react240.useMemo)(() => date.toDate(state2.timeZone), [
    date,
    state2.timeZone
  ]);
  let isDateToday = (0, $14e0f24ef4ac5c92$export$629b0a497aa65267)(date, state2.timeZone);
  let label = (0, import_react240.useMemo)(() => {
    let label2 = "";
    if ("highlightedRange" in state2 && state2.value && !state2.anchorDate && ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state2.value.start) || (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state2.value.end)))
      label2 = selectedDateDescription + ", ";
    label2 += dateFormatter.format(nativeDate);
    if (isDateToday)
      label2 = stringFormatter.format(isSelected ? "todayDateSelected" : "todayDate", {
        date: label2
      });
    else if (isSelected)
      label2 = stringFormatter.format("dateSelected", {
        date: label2
      });
    if (state2.minValue && (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state2.minValue))
      label2 += ", " + stringFormatter.format("minimumDate");
    else if (state2.maxValue && (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state2.maxValue))
      label2 += ", " + stringFormatter.format("maximumDate");
    return label2;
  }, [
    dateFormatter,
    nativeDate,
    stringFormatter,
    isSelected,
    isDateToday,
    date,
    state2,
    selectedDateDescription
  ]);
  let rangeSelectionPrompt = "";
  if ("anchorDate" in state2 && isFocused && !state2.isReadOnly && isSelectable) {
    if (state2.anchorDate)
      rangeSelectionPrompt = stringFormatter.format("finishRangeSelectionPrompt");
    else
      rangeSelectionPrompt = stringFormatter.format("startRangeSelectionPrompt");
  }
  let descriptionProps = (0, $ef06256079686ba0$export$f8aeda7b10753fa1)(rangeSelectionPrompt);
  let isAnchorPressed = (0, import_react240.useRef)(false);
  let isRangeBoundaryPressed = (0, import_react240.useRef)(false);
  let touchDragTimerRef = (0, import_react240.useRef)(null);
  let { pressProps, isPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    // When dragging to select a range, we don't want dragging over the original anchor
    // again to trigger onPressStart. Cancel presses immediately when the pointer exits.
    shouldCancelOnPointerExit: "anchorDate" in state2 && !!state2.anchorDate,
    preventFocusOnPress: true,
    isDisabled: !isSelectable || state2.isReadOnly,
    onPressStart(e) {
      if (state2.isReadOnly) {
        state2.setFocusedDate(date);
        return;
      }
      if ("highlightedRange" in state2 && !state2.anchorDate && (e.pointerType === "mouse" || e.pointerType === "touch")) {
        if (state2.highlightedRange && !isInvalid) {
          if ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state2.highlightedRange.start)) {
            state2.setAnchorDate(state2.highlightedRange.end);
            state2.setFocusedDate(date);
            state2.setDragging(true);
            isRangeBoundaryPressed.current = true;
            return;
          } else if ((0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state2.highlightedRange.end)) {
            state2.setAnchorDate(state2.highlightedRange.start);
            state2.setFocusedDate(date);
            state2.setDragging(true);
            isRangeBoundaryPressed.current = true;
            return;
          }
        }
        let startDragging = () => {
          state2.setDragging(true);
          touchDragTimerRef.current = null;
          state2.selectDate(date);
          state2.setFocusedDate(date);
          isAnchorPressed.current = true;
        };
        if (e.pointerType === "touch")
          touchDragTimerRef.current = setTimeout(startDragging, 200);
        else
          startDragging();
      }
    },
    onPressEnd() {
      isRangeBoundaryPressed.current = false;
      isAnchorPressed.current = false;
      clearTimeout(touchDragTimerRef.current);
      touchDragTimerRef.current = null;
    },
    onPress() {
      if (!("anchorDate" in state2) && !state2.isReadOnly) {
        state2.selectDate(date);
        state2.setFocusedDate(date);
      }
    },
    onPressUp(e) {
      if (state2.isReadOnly)
        return;
      if ("anchorDate" in state2 && touchDragTimerRef.current) {
        state2.selectDate(date);
        state2.setFocusedDate(date);
      }
      if ("anchorDate" in state2) {
        if (isRangeBoundaryPressed.current)
          state2.setAnchorDate(date);
        else if (state2.anchorDate && !isAnchorPressed.current) {
          state2.selectDate(date);
          state2.setFocusedDate(date);
        } else if (e.pointerType === "keyboard" && !state2.anchorDate) {
          state2.selectDate(date);
          let nextDay = date.add({
            days: 1
          });
          if (state2.isInvalid(nextDay))
            nextDay = date.subtract({
              days: 1
            });
          if (!state2.isInvalid(nextDay))
            state2.setFocusedDate(nextDay);
        } else if (e.pointerType === "virtual") {
          state2.selectDate(date);
          state2.setFocusedDate(date);
        }
      }
    }
  });
  let tabIndex = null;
  if (!isDisabled3)
    tabIndex = (0, $14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state2.focusedDate) ? 0 : -1;
  (0, import_react240.useEffect)(() => {
    if (isFocused && ref.current) {
      (0, $7215afc6de606d6b$export$de79e2c695e052f3)(ref.current);
      if ((0, $507fabe10e71c6fb$export$630ff653c5ada6a9)() !== "pointer" && document.activeElement === ref.current)
        (0, $2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
          containingElement: (0, $62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
        });
    }
  }, [
    isFocused,
    ref
  ]);
  let cellDateFormatter = (0, $896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
    day: "numeric",
    timeZone: state2.timeZone,
    calendar: date.calendar.identifier
  });
  let formattedDate = (0, import_react240.useMemo)(() => cellDateFormatter.formatToParts(nativeDate).find((part) => part.type === "day").value, [
    cellDateFormatter,
    nativeDate
  ]);
  return {
    cellProps: {
      role: "gridcell",
      "aria-disabled": !isSelectable || null,
      "aria-selected": isSelected || null,
      "aria-invalid": isInvalid || null
    },
    buttonProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, {
      onFocus() {
        if (!isDisabled3)
          state2.setFocusedDate(date);
      },
      tabIndex,
      role: "button",
      "aria-disabled": !isSelectable || null,
      "aria-label": label,
      "aria-invalid": isInvalid || null,
      "aria-describedby": [
        isInvalid ? errorMessageId : null,
        descriptionProps["aria-describedby"]
      ].filter(Boolean).join(" ") || void 0,
      onPointerEnter(e) {
        if ("highlightDate" in state2 && (e.pointerType !== "touch" || state2.isDragging) && isSelectable)
          state2.highlightDate(date);
      },
      onPointerDown(e) {
        if ("releasePointerCapture" in e.target)
          e.target.releasePointerCapture(e.pointerId);
      },
      onContextMenu(e) {
        e.preventDefault();
      }
    }),
    isPressed,
    isFocused,
    isSelected,
    isDisabled: isDisabled3,
    isUnavailable,
    isOutsideVisibleRange: date.compare(state2.visibleRange.start) < 0 || date.compare(state2.visibleRange.end) > 0,
    isInvalid,
    formattedDate
  };
}

// node_modules/@northlight/ui/node_modules/react-router/esm/react-router.js
var import_react242 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());

// node_modules/resolve-pathname/esm/resolve-pathname.js
function isAbsolute(pathname) {
  return pathname.charAt(0) === "/";
}
function spliceOne(list2, index5) {
  for (var i2 = index5, k = i2 + 1, n3 = list2.length; k < n3; i2 += 1, k += 1) {
    list2[i2] = list2[k];
  }
  list2.pop();
}
function resolvePathname(to, from2) {
  if (from2 === void 0)
    from2 = "";
  var toParts = to && to.split("/") || [];
  var fromParts = from2 && from2.split("/") || [];
  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from2 && isAbsolute(from2);
  var mustEndAbs = isToAbs || isFromAbs;
  if (to && isAbsolute(to)) {
    fromParts = toParts;
  } else if (toParts.length) {
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }
  if (!fromParts.length)
    return "/";
  var hasTrailingSlash;
  if (fromParts.length) {
    var last2 = fromParts[fromParts.length - 1];
    hasTrailingSlash = last2 === "." || last2 === ".." || last2 === "";
  } else {
    hasTrailingSlash = false;
  }
  var up = 0;
  for (var i2 = fromParts.length; i2 >= 0; i2--) {
    var part = fromParts[i2];
    if (part === ".") {
      spliceOne(fromParts, i2);
    } else if (part === "..") {
      spliceOne(fromParts, i2);
      up++;
    } else if (up) {
      spliceOne(fromParts, i2);
      up--;
    }
  }
  if (!mustEndAbs)
    for (; up--; up)
      fromParts.unshift("..");
  if (mustEndAbs && fromParts[0] !== "" && (!fromParts[0] || !isAbsolute(fromParts[0])))
    fromParts.unshift("");
  var result = fromParts.join("/");
  if (hasTrailingSlash && result.substr(-1) !== "/")
    result += "/";
  return result;
}
var resolve_pathname_default = resolvePathname;

// node_modules/value-equal/esm/value-equal.js
function valueOf(obj) {
  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
}
function valueEqual(a2, b2) {
  if (a2 === b2)
    return true;
  if (a2 == null || b2 == null)
    return false;
  if (Array.isArray(a2)) {
    return Array.isArray(b2) && a2.length === b2.length && a2.every(function(item, index5) {
      return valueEqual(item, b2[index5]);
    });
  }
  if (typeof a2 === "object" || typeof b2 === "object") {
    var aValue = valueOf(a2);
    var bValue = valueOf(b2);
    if (aValue !== a2 || bValue !== b2)
      return valueEqual(aValue, bValue);
    return Object.keys(Object.assign({}, a2, b2)).every(function(key2) {
      return valueEqual(a2[key2], b2[key2]);
    });
  }
  return false;
}
var value_equal_default = valueEqual;

// node_modules/tiny-warning/dist/tiny-warning.esm.js
var isProduction2 = false;
function warning2(condition, message) {
  if (!isProduction2) {
    if (condition) {
      return;
    }
    var text = "Warning: " + message;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x) {
    }
  }
}
var tiny_warning_esm_default = warning2;

// node_modules/history/esm/history.js
function addLeadingSlash(path2) {
  return path2.charAt(0) === "/" ? path2 : "/" + path2;
}
function stripLeadingSlash(path2) {
  return path2.charAt(0) === "/" ? path2.substr(1) : path2;
}
function hasBasename(path2, prefix4) {
  return path2.toLowerCase().indexOf(prefix4.toLowerCase()) === 0 && "/?#".indexOf(path2.charAt(prefix4.length)) !== -1;
}
function stripBasename(path2, prefix4) {
  return hasBasename(path2, prefix4) ? path2.substr(prefix4.length) : path2;
}
function stripTrailingSlash(path2) {
  return path2.charAt(path2.length - 1) === "/" ? path2.slice(0, -1) : path2;
}
function parsePath(path2) {
  var pathname = path2 || "/";
  var search = "";
  var hash5 = "";
  var hashIndex = pathname.indexOf("#");
  if (hashIndex !== -1) {
    hash5 = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }
  var searchIndex = pathname.indexOf("?");
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }
  return {
    pathname,
    search: search === "?" ? "" : search,
    hash: hash5 === "#" ? "" : hash5
  };
}
function createPath(location2) {
  var pathname = location2.pathname, search = location2.search, hash5 = location2.hash;
  var path2 = pathname || "/";
  if (search && search !== "?")
    path2 += search.charAt(0) === "?" ? search : "?" + search;
  if (hash5 && hash5 !== "#")
    path2 += hash5.charAt(0) === "#" ? hash5 : "#" + hash5;
  return path2;
}
function createLocation2(path2, state2, key2, currentLocation) {
  var location2;
  if (typeof path2 === "string") {
    location2 = parsePath(path2);
    location2.state = state2;
  } else {
    location2 = _extends({}, path2);
    if (location2.pathname === void 0)
      location2.pathname = "";
    if (location2.search) {
      if (location2.search.charAt(0) !== "?")
        location2.search = "?" + location2.search;
    } else {
      location2.search = "";
    }
    if (location2.hash) {
      if (location2.hash.charAt(0) !== "#")
        location2.hash = "#" + location2.hash;
    } else {
      location2.hash = "";
    }
    if (state2 !== void 0 && location2.state === void 0)
      location2.state = state2;
  }
  try {
    location2.pathname = decodeURI(location2.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location2.pathname + '" could not be decoded. This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }
  if (key2)
    location2.key = key2;
  if (currentLocation) {
    if (!location2.pathname) {
      location2.pathname = currentLocation.pathname;
    } else if (location2.pathname.charAt(0) !== "/") {
      location2.pathname = resolve_pathname_default(location2.pathname, currentLocation.pathname);
    }
  } else {
    if (!location2.pathname) {
      location2.pathname = "/";
    }
  }
  return location2;
}
function locationsAreEqual(a2, b2) {
  return a2.pathname === b2.pathname && a2.search === b2.search && a2.hash === b2.hash && a2.key === b2.key && value_equal_default(a2.state, b2.state);
}
function createTransitionManager() {
  var prompt = null;
  function setPrompt(nextPrompt) {
    true ? tiny_warning_esm_default(prompt == null, "A history supports only one prompt at a time") : void 0;
    prompt = nextPrompt;
    return function() {
      if (prompt === nextPrompt)
        prompt = null;
    };
  }
  function confirmTransitionTo(location2, action, getUserConfirmation, callback) {
    if (prompt != null) {
      var result = typeof prompt === "function" ? prompt(location2, action) : prompt;
      if (typeof result === "string") {
        if (typeof getUserConfirmation === "function") {
          getUserConfirmation(result, callback);
        } else {
          true ? tiny_warning_esm_default(false, "A history needs a getUserConfirmation function in order to use a prompt message") : void 0;
          callback(true);
        }
      } else {
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }
  var listeners = [];
  function appendListener(fn2) {
    var isActive = true;
    function listener() {
      if (isActive)
        fn2.apply(void 0, arguments);
    }
    listeners.push(listener);
    return function() {
      isActive = false;
      listeners = listeners.filter(function(item) {
        return item !== listener;
      });
    };
  }
  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    listeners.forEach(function(listener) {
      return listener.apply(void 0, args);
    });
  }
  return {
    setPrompt,
    confirmTransitionTo,
    appendListener,
    notifyListeners
  };
}
var canUseDOM3 = !!(typeof window !== "undefined" && window.document && window.document.createElement);
function getConfirmation(message, callback) {
  callback(window.confirm(message));
}
function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf("Android 2.") !== -1 || ua.indexOf("Android 4.0") !== -1) && ua.indexOf("Mobile Safari") !== -1 && ua.indexOf("Chrome") === -1 && ua.indexOf("Windows Phone") === -1)
    return false;
  return window.history && "pushState" in window.history;
}
function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf("Trident") === -1;
}
function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf("Firefox") === -1;
}
function isExtraneousPopstateEvent(event) {
  return event.state === void 0 && navigator.userAgent.indexOf("CriOS") === -1;
}
var PopStateEvent = "popstate";
var HashChangeEvent = "hashchange";
function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    return {};
  }
}
function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }
  !canUseDOM3 ? true ? invariant(false, "Browser history needs a DOM") : invariant(false) : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
  function getDOMLocation(historyState) {
    var _ref4 = historyState || {}, key2 = _ref4.key, state2 = _ref4.state;
    var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash5 = _window$location.hash;
    var path2 = pathname + search + hash5;
    true ? tiny_warning_esm_default(!basename || hasBasename(path2, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path2 + '" to begin with "' + basename + '".') : void 0;
    if (basename)
      path2 = stripBasename(path2, basename);
    return createLocation2(path2, state2, key2);
  }
  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }
  var transitionManager = createTransitionManager();
  function setState(nextState) {
    _extends(history, nextState);
    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }
  function handlePopState(event) {
    if (isExtraneousPopstateEvent(event))
      return;
    handlePop(getDOMLocation(event.state));
  }
  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }
  var forceNextPop = false;
  function handlePop(location2) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = "POP";
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (ok) {
          setState({
            action,
            location: location2
          });
        } else {
          revertPop(location2);
        }
      });
    }
  }
  function revertPop(fromLocation) {
    var toLocation = history.location;
    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1)
      toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1)
      fromIndex = 0;
    var delta2 = toIndex - fromIndex;
    if (delta2) {
      forceNextPop = true;
      go(delta2);
    }
  }
  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key];
  function createHref(location2) {
    return basename + createPath(location2);
  }
  function push(path2, state2) {
    true ? tiny_warning_esm_default(!(typeof path2 === "object" && path2.state !== void 0 && state2 !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored") : void 0;
    var action = "PUSH";
    var location2 = createLocation2(path2, state2, createKey(), history.location);
    transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var href = createHref(location2);
      var key2 = location2.key, state3 = location2.state;
      if (canUseHistory) {
        globalHistory.pushState({
          key: key2,
          state: state3
        }, null, href);
        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex + 1);
          nextKeys.push(location2.key);
          allKeys = nextKeys;
          setState({
            action,
            location: location2
          });
        }
      } else {
        true ? tiny_warning_esm_default(state3 === void 0, "Browser history cannot push state in browsers that do not support HTML5 history") : void 0;
        window.location.href = href;
      }
    });
  }
  function replace3(path2, state2) {
    true ? tiny_warning_esm_default(!(typeof path2 === "object" && path2.state !== void 0 && state2 !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored") : void 0;
    var action = "REPLACE";
    var location2 = createLocation2(path2, state2, createKey(), history.location);
    transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var href = createHref(location2);
      var key2 = location2.key, state3 = location2.state;
      if (canUseHistory) {
        globalHistory.replaceState({
          key: key2,
          state: state3
        }, null, href);
        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1)
            allKeys[prevIndex] = location2.key;
          setState({
            action,
            location: location2
          });
        }
      } else {
        true ? tiny_warning_esm_default(state3 === void 0, "Browser history cannot replace state in browsers that do not support HTML5 history") : void 0;
        window.location.replace(href);
      }
    });
  }
  function go(n3) {
    globalHistory.go(n3);
  }
  function goBack() {
    go(-1);
  }
  function goForward() {
    go(1);
  }
  var listenerCount = 0;
  function checkDOMListeners(delta2) {
    listenerCount += delta2;
    if (listenerCount === 1 && delta2 === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener)
        window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener)
        window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }
  var isBlocked = false;
  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }
    var unblock = transitionManager.setPrompt(prompt);
    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }
    return function() {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }
      return unblock();
    };
  }
  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function() {
      checkDOMListeners(-1);
      unlisten();
    };
  }
  var history = {
    length: globalHistory.length,
    action: "POP",
    location: initialLocation,
    createHref,
    push,
    replace: replace3,
    go,
    goBack,
    goForward,
    block,
    listen
  };
  return history;
}
var HashChangeEvent$1 = "hashchange";
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path2) {
      return path2.charAt(0) === "!" ? path2 : "!/" + stripLeadingSlash(path2);
    },
    decodePath: function decodePath(path2) {
      return path2.charAt(0) === "!" ? path2.substr(1) : path2;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};
function stripHash(url) {
  var hashIndex = url.indexOf("#");
  return hashIndex === -1 ? url : url.slice(0, hashIndex);
}
function getHashPath() {
  var href = window.location.href;
  var hashIndex = href.indexOf("#");
  return hashIndex === -1 ? "" : href.substring(hashIndex + 1);
}
function pushHashPath(path2) {
  window.location.hash = path2;
}
function replaceHashPath(path2) {
  window.location.replace(stripHash(window.location.href) + "#" + path2);
}
function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }
  !canUseDOM3 ? true ? invariant(false, "Hash history needs a DOM") : invariant(false) : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? "slash" : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
  var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath2 = _HashPathCoders$hashT.encodePath, decodePath2 = _HashPathCoders$hashT.decodePath;
  function getDOMLocation() {
    var path3 = decodePath2(getHashPath());
    true ? tiny_warning_esm_default(!basename || hasBasename(path3, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path3 + '" to begin with "' + basename + '".') : void 0;
    if (basename)
      path3 = stripBasename(path3, basename);
    return createLocation2(path3);
  }
  var transitionManager = createTransitionManager();
  function setState(nextState) {
    _extends(history, nextState);
    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }
  var forceNextPop = false;
  var ignorePath = null;
  function locationsAreEqual$$1(a2, b2) {
    return a2.pathname === b2.pathname && a2.search === b2.search && a2.hash === b2.hash;
  }
  function handleHashChange() {
    var path3 = getHashPath();
    var encodedPath2 = encodePath2(path3);
    if (path3 !== encodedPath2) {
      replaceHashPath(encodedPath2);
    } else {
      var location2 = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location2))
        return;
      if (ignorePath === createPath(location2))
        return;
      ignorePath = null;
      handlePop(location2);
    }
  }
  function handlePop(location2) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = "POP";
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (ok) {
          setState({
            action,
            location: location2
          });
        } else {
          revertPop(location2);
        }
      });
    }
  }
  function revertPop(fromLocation) {
    var toLocation = history.location;
    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1)
      toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1)
      fromIndex = 0;
    var delta2 = toIndex - fromIndex;
    if (delta2) {
      forceNextPop = true;
      go(delta2);
    }
  }
  var path2 = getHashPath();
  var encodedPath = encodePath2(path2);
  if (path2 !== encodedPath)
    replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)];
  function createHref(location2) {
    var baseTag = document.querySelector("base");
    var href = "";
    if (baseTag && baseTag.getAttribute("href")) {
      href = stripHash(window.location.href);
    }
    return href + "#" + encodePath2(basename + createPath(location2));
  }
  function push(path3, state2) {
    true ? tiny_warning_esm_default(state2 === void 0, "Hash history cannot push state; it is ignored") : void 0;
    var action = "PUSH";
    var location2 = createLocation2(path3, void 0, void 0, history.location);
    transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var path4 = createPath(location2);
      var encodedPath2 = encodePath2(basename + path4);
      var hashChanged = getHashPath() !== encodedPath2;
      if (hashChanged) {
        ignorePath = path4;
        pushHashPath(encodedPath2);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex + 1);
        nextPaths.push(path4);
        allPaths = nextPaths;
        setState({
          action,
          location: location2
        });
      } else {
        true ? tiny_warning_esm_default(false, "Hash history cannot PUSH the same path; a new entry will not be added to the history stack") : void 0;
        setState();
      }
    });
  }
  function replace3(path3, state2) {
    true ? tiny_warning_esm_default(state2 === void 0, "Hash history cannot replace state; it is ignored") : void 0;
    var action = "REPLACE";
    var location2 = createLocation2(path3, void 0, void 0, history.location);
    transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var path4 = createPath(location2);
      var encodedPath2 = encodePath2(basename + path4);
      var hashChanged = getHashPath() !== encodedPath2;
      if (hashChanged) {
        ignorePath = path4;
        replaceHashPath(encodedPath2);
      }
      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1)
        allPaths[prevIndex] = path4;
      setState({
        action,
        location: location2
      });
    });
  }
  function go(n3) {
    true ? tiny_warning_esm_default(canGoWithoutReload, "Hash history go(n) causes a full page reload in this browser") : void 0;
    globalHistory.go(n3);
  }
  function goBack() {
    go(-1);
  }
  function goForward() {
    go(1);
  }
  var listenerCount = 0;
  function checkDOMListeners(delta2) {
    listenerCount += delta2;
    if (listenerCount === 1 && delta2 === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }
  var isBlocked = false;
  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }
    var unblock = transitionManager.setPrompt(prompt);
    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }
    return function() {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }
      return unblock();
    };
  }
  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function() {
      checkDOMListeners(-1);
      unlisten();
    };
  }
  var history = {
    length: globalHistory.length,
    action: "POP",
    location: initialLocation,
    createHref,
    push,
    replace: replace3,
    go,
    goBack,
    goForward,
    block,
    listen
  };
  return history;
}
function clamp3(n3, lowerBound, upperBound) {
  return Math.min(Math.max(n3, lowerBound), upperBound);
}
function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? ["/"] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();
  function setState(nextState) {
    _extends(history, nextState);
    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }
  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }
  var index5 = clamp3(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function(entry) {
    return typeof entry === "string" ? createLocation2(entry, void 0, createKey()) : createLocation2(entry, void 0, entry.key || createKey());
  });
  var createHref = createPath;
  function push(path2, state2) {
    true ? tiny_warning_esm_default(!(typeof path2 === "object" && path2.state !== void 0 && state2 !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored") : void 0;
    var action = "PUSH";
    var location2 = createLocation2(path2, state2, createKey(), history.location);
    transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);
      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location2);
      } else {
        nextEntries.push(location2);
      }
      setState({
        action,
        location: location2,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }
  function replace3(path2, state2) {
    true ? tiny_warning_esm_default(!(typeof path2 === "object" && path2.state !== void 0 && state2 !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored") : void 0;
    var action = "REPLACE";
    var location2 = createLocation2(path2, state2, createKey(), history.location);
    transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      history.entries[history.index] = location2;
      setState({
        action,
        location: location2
      });
    });
  }
  function go(n3) {
    var nextIndex = clamp3(history.index + n3, 0, history.entries.length - 1);
    var action = "POP";
    var location2 = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
      if (ok) {
        setState({
          action,
          location: location2,
          index: nextIndex
        });
      } else {
        setState();
      }
    });
  }
  function goBack() {
    go(-1);
  }
  function goForward() {
    go(1);
  }
  function canGo(n3) {
    var nextIndex = history.index + n3;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }
  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }
    return transitionManager.setPrompt(prompt);
  }
  function listen(listener) {
    return transitionManager.appendListener(listener);
  }
  var history = {
    length: entries.length,
    action: "POP",
    location: entries[index5],
    index: index5,
    entries,
    createHref,
    push,
    replace: replace3,
    go,
    goBack,
    goForward,
    canGo,
    block,
    listen
  };
  return history;
}

// node_modules/@northlight/ui/node_modules/react-router/node_modules/mini-create-react-context/dist/esm/index.js
var import_react241 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var MAX_SIGNED_31_BIT_INT = 1073741823;
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
function getUniqueId() {
  var key2 = "__global_unique_id__";
  return commonjsGlobal[key2] = (commonjsGlobal[key2] || 0) + 1;
}
function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function createEventEmitter(value) {
  var handlers2 = [];
  return {
    on: function on(handler) {
      handlers2.push(handler);
    },
    off: function off(handler) {
      handlers2 = handlers2.filter(function(h) {
        return h !== handler;
      });
    },
    get: function get4() {
      return value;
    },
    set: function set2(newValue, changedBits) {
      value = newValue;
      handlers2.forEach(function(handler) {
        return handler(value, changedBits);
      });
    }
  };
}
function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}
function createReactContext3(defaultValue2, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;
  var contextProp = "__create-react-context-" + getUniqueId() + "__";
  var Provider = function(_Component) {
    _inheritsLoose(Provider2, _Component);
    function Provider2() {
      var _this;
      _this = _Component.apply(this, arguments) || this;
      _this.emitter = createEventEmitter(_this.props.value);
      return _this;
    }
    var _proto = Provider2.prototype;
    _proto.getChildContext = function getChildContext() {
      var _ref4;
      return _ref4 = {}, _ref4[contextProp] = this.emitter, _ref4;
    };
    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits;
        if (objectIs(oldValue, newValue)) {
          changedBits = 0;
        } else {
          changedBits = typeof calculateChangedBits === "function" ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          if (true) {
            tiny_warning_esm_default((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
          }
          changedBits |= 0;
          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };
    _proto.render = function render() {
      return this.props.children;
    };
    return Provider2;
  }(import_react241.Component);
  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = import_prop_types7.default.object.isRequired, _Provider$childContex);
  var Consumer = function(_Component2) {
    _inheritsLoose(Consumer2, _Component2);
    function Consumer2() {
      var _this2;
      _this2 = _Component2.apply(this, arguments) || this;
      _this2.state = {
        value: _this2.getValue()
      };
      _this2.onUpdate = function(newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;
        if ((observedBits & changedBits) !== 0) {
          _this2.setState({
            value: _this2.getValue()
          });
        }
      };
      return _this2;
    }
    var _proto2 = Consumer2.prototype;
    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;
      this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };
    _proto2.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }
      var observedBits = this.props.observedBits;
      this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };
    _proto2.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };
    _proto2.getValue = function getValue2() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue2;
      }
    };
    _proto2.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };
    return Consumer2;
  }(import_react241.Component);
  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = import_prop_types7.default.object, _Consumer$contextType);
  return {
    Provider,
    Consumer
  };
}
var index3 = import_react241.default.createContext || createReactContext3;
var esm_default = index3;

// node_modules/@northlight/ui/node_modules/react-router/esm/react-router.js
var import_path_to_regexp = __toESM(require_path_to_regexp());
var import_react_is = __toESM(require_react_is());
var import_hoist_non_react_statics3 = __toESM(require_hoist_non_react_statics_cjs());
var createNamedContext = function createNamedContext2(name) {
  var context2 = esm_default();
  context2.displayName = name;
  return context2;
};
var historyContext = createNamedContext("Router-History");
var createNamedContext$1 = function createNamedContext3(name) {
  var context2 = esm_default();
  context2.displayName = name;
  return context2;
};
var context = createNamedContext$1("Router");
var Router = function(_React$Component) {
  _inheritsLoose(Router2, _React$Component);
  Router2.computeRootMatch = function computeRootMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };
  function Router2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.state = {
      location: props.history.location
    };
    _this._isMounted = false;
    _this._pendingLocation = null;
    if (!props.staticContext) {
      _this.unlisten = props.history.listen(function(location2) {
        if (_this._isMounted) {
          _this.setState({
            location: location2
          });
        } else {
          _this._pendingLocation = location2;
        }
      });
    }
    return _this;
  }
  var _proto = Router2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;
    if (this._pendingLocation) {
      this.setState({
        location: this._pendingLocation
      });
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unlisten)
      this.unlisten();
  };
  _proto.render = function render() {
    return import_react242.default.createElement(context.Provider, {
      value: {
        history: this.props.history,
        location: this.state.location,
        match: Router2.computeRootMatch(this.state.location.pathname),
        staticContext: this.props.staticContext
      }
    }, import_react242.default.createElement(historyContext.Provider, {
      children: this.props.children || null,
      value: this.props.history
    }));
  };
  return Router2;
}(import_react242.default.Component);
if (true) {
  Router.propTypes = {
    children: import_prop_types8.default.node,
    history: import_prop_types8.default.object.isRequired,
    staticContext: import_prop_types8.default.object
  };
  Router.prototype.componentDidUpdate = function(prevProps) {
    true ? tiny_warning_esm_default(prevProps.history === this.props.history, "You cannot change <Router history>") : void 0;
  };
}
var MemoryRouter = function(_React$Component) {
  _inheritsLoose(MemoryRouter2, _React$Component);
  function MemoryRouter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = createMemoryHistory(_this.props);
    return _this;
  }
  var _proto = MemoryRouter2.prototype;
  _proto.render = function render() {
    return import_react242.default.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };
  return MemoryRouter2;
}(import_react242.default.Component);
if (true) {
  MemoryRouter.propTypes = {
    initialEntries: import_prop_types8.default.array,
    initialIndex: import_prop_types8.default.number,
    getUserConfirmation: import_prop_types8.default.func,
    keyLength: import_prop_types8.default.number,
    children: import_prop_types8.default.node
  };
  MemoryRouter.prototype.componentDidMount = function() {
    true ? tiny_warning_esm_default(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.") : void 0;
  };
}
var Lifecycle = function(_React$Component) {
  _inheritsLoose(Lifecycle2, _React$Component);
  function Lifecycle2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Lifecycle2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.props.onMount)
      this.props.onMount.call(this, this);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.onUpdate)
      this.props.onUpdate.call(this, this, prevProps);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onUnmount)
      this.props.onUnmount.call(this, this);
  };
  _proto.render = function render() {
    return null;
  };
  return Lifecycle2;
}(import_react242.default.Component);
function Prompt(_ref4) {
  var message = _ref4.message, _ref$when = _ref4.when, when = _ref$when === void 0 ? true : _ref$when;
  return import_react242.default.createElement(context.Consumer, null, function(context2) {
    !context2 ? true ? invariant(false, "You should not use <Prompt> outside a <Router>") : invariant(false) : void 0;
    if (!when || context2.staticContext)
      return null;
    var method = context2.history.block;
    return import_react242.default.createElement(Lifecycle, {
      onMount: function onMount(self2) {
        self2.release = method(message);
      },
      onUpdate: function onUpdate(self2, prevProps) {
        if (prevProps.message !== message) {
          self2.release();
          self2.release = method(message);
        }
      },
      onUnmount: function onUnmount(self2) {
        self2.release();
      },
      message
    });
  });
}
if (true) {
  messageType = import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.string]);
  Prompt.propTypes = {
    when: import_prop_types8.default.bool,
    message: messageType.isRequired
  };
}
var messageType;
var cache = {};
var cacheLimit = 1e4;
var cacheCount = 0;
function compilePath(path2) {
  if (cache[path2])
    return cache[path2];
  var generator = import_path_to_regexp.default.compile(path2);
  if (cacheCount < cacheLimit) {
    cache[path2] = generator;
    cacheCount++;
  }
  return generator;
}
function generatePath(path2, params) {
  if (path2 === void 0) {
    path2 = "/";
  }
  if (params === void 0) {
    params = {};
  }
  return path2 === "/" ? path2 : compilePath(path2)(params, {
    pretty: true
  });
}
function Redirect(_ref4) {
  var computedMatch = _ref4.computedMatch, to = _ref4.to, _ref$push = _ref4.push, push = _ref$push === void 0 ? false : _ref$push;
  return import_react242.default.createElement(context.Consumer, null, function(context2) {
    !context2 ? true ? invariant(false, "You should not use <Redirect> outside a <Router>") : invariant(false) : void 0;
    var history = context2.history, staticContext = context2.staticContext;
    var method = push ? history.push : history.replace;
    var location2 = createLocation2(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {
      pathname: generatePath(to.pathname, computedMatch.params)
    }) : to);
    if (staticContext) {
      method(location2);
      return null;
    }
    return import_react242.default.createElement(Lifecycle, {
      onMount: function onMount() {
        method(location2);
      },
      onUpdate: function onUpdate(self2, prevProps) {
        var prevLocation = createLocation2(prevProps.to);
        if (!locationsAreEqual(prevLocation, _extends({}, location2, {
          key: prevLocation.key
        }))) {
          method(location2);
        }
      },
      to
    });
  });
}
if (true) {
  Redirect.propTypes = {
    push: import_prop_types8.default.bool,
    from: import_prop_types8.default.string,
    to: import_prop_types8.default.oneOfType([import_prop_types8.default.string, import_prop_types8.default.object]).isRequired
  };
}
var cache$1 = {};
var cacheLimit$1 = 1e4;
var cacheCount$1 = 0;
function compilePath$1(path2, options2) {
  var cacheKey = "" + options2.end + options2.strict + options2.sensitive;
  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
  if (pathCache[path2])
    return pathCache[path2];
  var keys3 = [];
  var regexp = (0, import_path_to_regexp.default)(path2, keys3, options2);
  var result = {
    regexp,
    keys: keys3
  };
  if (cacheCount$1 < cacheLimit$1) {
    pathCache[path2] = result;
    cacheCount$1++;
  }
  return result;
}
function matchPath(pathname, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  if (typeof options2 === "string" || Array.isArray(options2)) {
    options2 = {
      path: options2
    };
  }
  var _options = options2, path2 = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
  var paths = [].concat(path2);
  return paths.reduce(function(matched, path3) {
    if (!path3 && path3 !== "")
      return null;
    if (matched)
      return matched;
    var _compilePath = compilePath$1(path3, {
      end: exact,
      strict,
      sensitive
    }), regexp = _compilePath.regexp, keys3 = _compilePath.keys;
    var match4 = regexp.exec(pathname);
    if (!match4)
      return null;
    var url = match4[0], values2 = match4.slice(1);
    var isExact = pathname === url;
    if (exact && !isExact)
      return null;
    return {
      path: path3,
      // the path used to match
      url: path3 === "/" && url === "" ? "/" : url,
      // the matched portion of the URL
      isExact,
      // whether or not we matched exactly
      params: keys3.reduce(function(memo6, key2, index5) {
        memo6[key2.name] = values2[index5];
        return memo6;
      }, {})
    };
  }, null);
}
function isEmptyChildren(children) {
  return import_react242.default.Children.count(children) === 0;
}
function evalChildrenDev(children, props, path2) {
  var value = children(props);
  true ? tiny_warning_esm_default(value !== void 0, "You returned `undefined` from the `children` function of " + ("<Route" + (path2 ? ' path="' + path2 + '"' : "") + ">, but you ") + "should have returned a React element or `null`") : void 0;
  return value || null;
}
var Route = function(_React$Component) {
  _inheritsLoose(Route2, _React$Component);
  function Route2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Route2.prototype;
  _proto.render = function render() {
    var _this = this;
    return import_react242.default.createElement(context.Consumer, null, function(context$1) {
      !context$1 ? true ? invariant(false, "You should not use <Route> outside a <Router>") : invariant(false) : void 0;
      var location2 = _this.props.location || context$1.location;
      var match4 = _this.props.computedMatch ? _this.props.computedMatch : _this.props.path ? matchPath(location2.pathname, _this.props) : context$1.match;
      var props = _extends({}, context$1, {
        location: location2,
        match: match4
      });
      var _this$props = _this.props, children = _this$props.children, component = _this$props.component, render2 = _this$props.render;
      if (Array.isArray(children) && children.length === 0) {
        children = null;
      }
      return import_react242.default.createElement(context.Provider, {
        value: props
      }, props.match ? children ? typeof children === "function" ? true ? evalChildrenDev(children, props, _this.props.path) : children(props) : children : component ? import_react242.default.createElement(component, props) : render2 ? render2(props) : null : typeof children === "function" ? true ? evalChildrenDev(children, props, _this.props.path) : children(props) : null);
    });
  };
  return Route2;
}(import_react242.default.Component);
if (true) {
  Route.propTypes = {
    children: import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.node]),
    component: function component(props, propName) {
      if (props[propName] && !(0, import_react_is.isValidElementType)(props[propName])) {
        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
      }
    },
    exact: import_prop_types8.default.bool,
    location: import_prop_types8.default.object,
    path: import_prop_types8.default.oneOfType([import_prop_types8.default.string, import_prop_types8.default.arrayOf(import_prop_types8.default.string)]),
    render: import_prop_types8.default.func,
    sensitive: import_prop_types8.default.bool,
    strict: import_prop_types8.default.bool
  };
  Route.prototype.componentDidMount = function() {
    true ? tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : void 0;
    true ? tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : void 0;
    true ? tiny_warning_esm_default(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : void 0;
  };
  Route.prototype.componentDidUpdate = function(prevProps) {
    true ? tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;
    true ? tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
  };
}
function addLeadingSlash2(path2) {
  return path2.charAt(0) === "/" ? path2 : "/" + path2;
}
function addBasename(basename, location2) {
  if (!basename)
    return location2;
  return _extends({}, location2, {
    pathname: addLeadingSlash2(basename) + location2.pathname
  });
}
function stripBasename2(basename, location2) {
  if (!basename)
    return location2;
  var base = addLeadingSlash2(basename);
  if (location2.pathname.indexOf(base) !== 0)
    return location2;
  return _extends({}, location2, {
    pathname: location2.pathname.substr(base.length)
  });
}
function createURL(location2) {
  return typeof location2 === "string" ? location2 : createPath(location2);
}
function staticHandler(methodName) {
  return function() {
    true ? invariant(false, "You cannot %s with <StaticRouter>", methodName) : invariant(false);
  };
}
function noop6() {
}
var StaticRouter = function(_React$Component) {
  _inheritsLoose(StaticRouter2, _React$Component);
  function StaticRouter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.handlePush = function(location2) {
      return _this.navigateTo(location2, "PUSH");
    };
    _this.handleReplace = function(location2) {
      return _this.navigateTo(location2, "REPLACE");
    };
    _this.handleListen = function() {
      return noop6;
    };
    _this.handleBlock = function() {
      return noop6;
    };
    return _this;
  }
  var _proto = StaticRouter2.prototype;
  _proto.navigateTo = function navigateTo(location2, action) {
    var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context2 = _this$props$context === void 0 ? {} : _this$props$context;
    context2.action = action;
    context2.location = addBasename(basename, createLocation2(location2));
    context2.url = createURL(context2.location);
  };
  _proto.render = function render() {
    var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context2 = _this$props2$context === void 0 ? {} : _this$props2$context, _this$props2$location = _this$props2.location, location2 = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);
    var history = {
      createHref: function createHref(path2) {
        return addLeadingSlash2(basename + createURL(path2));
      },
      action: "POP",
      location: stripBasename2(basename, createLocation2(location2)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return import_react242.default.createElement(Router, _extends({}, rest, {
      history,
      staticContext: context2
    }));
  };
  return StaticRouter2;
}(import_react242.default.Component);
if (true) {
  StaticRouter.propTypes = {
    basename: import_prop_types8.default.string,
    context: import_prop_types8.default.object,
    location: import_prop_types8.default.oneOfType([import_prop_types8.default.string, import_prop_types8.default.object])
  };
  StaticRouter.prototype.componentDidMount = function() {
    true ? tiny_warning_esm_default(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.") : void 0;
  };
}
var Switch3 = function(_React$Component) {
  _inheritsLoose(Switch5, _React$Component);
  function Switch5() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Switch5.prototype;
  _proto.render = function render() {
    var _this = this;
    return import_react242.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? true ? invariant(false, "You should not use <Switch> outside a <Router>") : invariant(false) : void 0;
      var location2 = _this.props.location || context2.location;
      var element, match4;
      import_react242.default.Children.forEach(_this.props.children, function(child) {
        if (match4 == null && import_react242.default.isValidElement(child)) {
          element = child;
          var path2 = child.props.path || child.props.from;
          match4 = path2 ? matchPath(location2.pathname, _extends({}, child.props, {
            path: path2
          })) : context2.match;
        }
      });
      return match4 ? import_react242.default.cloneElement(element, {
        location: location2,
        computedMatch: match4
      }) : null;
    });
  };
  return Switch5;
}(import_react242.default.Component);
if (true) {
  Switch3.propTypes = {
    children: import_prop_types8.default.node,
    location: import_prop_types8.default.object
  };
  Switch3.prototype.componentDidUpdate = function(prevProps) {
    true ? tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;
    true ? tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
  };
}
var useContext25 = import_react242.default.useContext;
if (true) {
  if (typeof window !== "undefined") {
    global2 = window;
    key2 = "__react_router_build__";
    buildNames = {
      cjs: "CommonJS",
      esm: "ES modules",
      umd: "UMD"
    };
    if (global2[key2] && global2[key2] !== "esm") {
      initialBuildName = buildNames[global2[key2]];
      secondaryBuildName = buildNames["esm"];
      throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }
    global2[key2] = "esm";
  }
}
var global2;
var key2;
var buildNames;
var initialBuildName;
var secondaryBuildName;

// node_modules/@northlight/ui/node_modules/react-router-dom/esm/react-router-dom.js
var import_react243 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
var BrowserRouter = function(_React$Component) {
  _inheritsLoose(BrowserRouter2, _React$Component);
  function BrowserRouter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = createBrowserHistory(_this.props);
    return _this;
  }
  var _proto = BrowserRouter2.prototype;
  _proto.render = function render() {
    return import_react243.default.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };
  return BrowserRouter2;
}(import_react243.default.Component);
if (true) {
  BrowserRouter.propTypes = {
    basename: import_prop_types9.default.string,
    children: import_prop_types9.default.node,
    forceRefresh: import_prop_types9.default.bool,
    getUserConfirmation: import_prop_types9.default.func,
    keyLength: import_prop_types9.default.number
  };
  BrowserRouter.prototype.componentDidMount = function() {
    true ? tiny_warning_esm_default(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.") : void 0;
  };
}
var HashRouter = function(_React$Component) {
  _inheritsLoose(HashRouter2, _React$Component);
  function HashRouter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = createHashHistory(_this.props);
    return _this;
  }
  var _proto = HashRouter2.prototype;
  _proto.render = function render() {
    return import_react243.default.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };
  return HashRouter2;
}(import_react243.default.Component);
if (true) {
  HashRouter.propTypes = {
    basename: import_prop_types9.default.string,
    children: import_prop_types9.default.node,
    getUserConfirmation: import_prop_types9.default.func,
    hashType: import_prop_types9.default.oneOf(["hashbang", "noslash", "slash"])
  };
  HashRouter.prototype.componentDidMount = function() {
    true ? tiny_warning_esm_default(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.") : void 0;
  };
}
var resolveToLocation = function resolveToLocation2(to, currentLocation) {
  return typeof to === "function" ? to(currentLocation) : to;
};
var normalizeToLocation = function normalizeToLocation2(to, currentLocation) {
  return typeof to === "string" ? createLocation2(to, null, null, currentLocation) : to;
};
var forwardRefShim = function forwardRefShim2(C) {
  return C;
};
var forwardRef25 = import_react243.default.forwardRef;
if (typeof forwardRef25 === "undefined") {
  forwardRef25 = forwardRefShim;
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var LinkAnchor = forwardRef25(function(_ref4, forwardedRef) {
  var innerRef = _ref4.innerRef, navigate = _ref4.navigate, _onClick = _ref4.onClick, rest = _objectWithoutPropertiesLoose(_ref4, ["innerRef", "navigate", "onClick"]);
  var target = rest.target;
  var props = _extends({}, rest, {
    onClick: function onClick(event) {
      try {
        if (_onClick)
          _onClick(event);
      } catch (ex) {
        event.preventDefault();
        throw ex;
      }
      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && // ignore everything but left clicks
      (!target || target === "_self") && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event)) {
        event.preventDefault();
        navigate();
      }
    }
  });
  if (forwardRefShim !== forwardRef25) {
    props.ref = forwardedRef || innerRef;
  } else {
    props.ref = innerRef;
  }
  return import_react243.default.createElement("a", props);
});
if (true) {
  LinkAnchor.displayName = "LinkAnchor";
}
var Link3 = forwardRef25(function(_ref23, forwardedRef) {
  var _ref2$component = _ref23.component, component = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace3 = _ref23.replace, to = _ref23.to, innerRef = _ref23.innerRef, rest = _objectWithoutPropertiesLoose(_ref23, ["component", "replace", "to", "innerRef"]);
  return import_react243.default.createElement(context.Consumer, null, function(context2) {
    !context2 ? true ? invariant(false, "You should not use <Link> outside a <Router>") : invariant(false) : void 0;
    var history = context2.history;
    var location2 = normalizeToLocation(resolveToLocation(to, context2.location), context2.location);
    var href = location2 ? history.createHref(location2) : "";
    var props = _extends({}, rest, {
      href,
      navigate: function navigate() {
        var location3 = resolveToLocation(to, context2.location);
        var method = replace3 ? history.replace : history.push;
        method(location3);
      }
    });
    if (forwardRefShim !== forwardRef25) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }
    return import_react243.default.createElement(component, props);
  });
});
if (true) {
  toType = import_prop_types9.default.oneOfType([import_prop_types9.default.string, import_prop_types9.default.object, import_prop_types9.default.func]);
  refType = import_prop_types9.default.oneOfType([import_prop_types9.default.string, import_prop_types9.default.func, import_prop_types9.default.shape({
    current: import_prop_types9.default.any
  })]);
  Link3.displayName = "Link";
  Link3.propTypes = {
    innerRef: refType,
    onClick: import_prop_types9.default.func,
    replace: import_prop_types9.default.bool,
    target: import_prop_types9.default.string,
    to: toType.isRequired
  };
}
var toType;
var refType;
var forwardRefShim$1 = function forwardRefShim3(C) {
  return C;
};
var forwardRef$1 = import_react243.default.forwardRef;
if (typeof forwardRef$1 === "undefined") {
  forwardRef$1 = forwardRefShim$1;
}
function joinClassnames() {
  for (var _len = arguments.length, classnames3 = new Array(_len), _key = 0; _key < _len; _key++) {
    classnames3[_key] = arguments[_key];
  }
  return classnames3.filter(function(i2) {
    return i2;
  }).join(" ");
}
var NavLink = forwardRef$1(function(_ref4, forwardedRef) {
  var _ref$ariaCurrent = _ref4["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref4.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref4.activeStyle, classNameProp = _ref4.className, exact = _ref4.exact, isActiveProp = _ref4.isActive, locationProp = _ref4.location, sensitive = _ref4.sensitive, strict = _ref4.strict, styleProp = _ref4.style, to = _ref4.to, innerRef = _ref4.innerRef, rest = _objectWithoutPropertiesLoose(_ref4, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);
  return import_react243.default.createElement(context.Consumer, null, function(context2) {
    !context2 ? true ? invariant(false, "You should not use <NavLink> outside a <Router>") : invariant(false) : void 0;
    var currentLocation = locationProp || context2.location;
    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
    var path2 = toLocation.pathname;
    var escapedPath = path2 && path2.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
    var match4 = escapedPath ? matchPath(currentLocation.pathname, {
      path: escapedPath,
      exact,
      sensitive,
      strict
    }) : null;
    var isActive = !!(isActiveProp ? isActiveProp(match4, currentLocation) : match4);
    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
    var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;
    var props = _extends({
      "aria-current": isActive && ariaCurrent || null,
      className,
      style,
      to: toLocation
    }, rest);
    if (forwardRefShim$1 !== forwardRef$1) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }
    return import_react243.default.createElement(Link3, props);
  });
});
if (true) {
  NavLink.displayName = "NavLink";
  ariaCurrentType = import_prop_types9.default.oneOf(["page", "step", "location", "date", "time", "true"]);
  NavLink.propTypes = _extends({}, Link3.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: import_prop_types9.default.string,
    activeStyle: import_prop_types9.default.object,
    className: import_prop_types9.default.string,
    exact: import_prop_types9.default.bool,
    isActive: import_prop_types9.default.func,
    location: import_prop_types9.default.object,
    sensitive: import_prop_types9.default.bool,
    strict: import_prop_types9.default.bool,
    style: import_prop_types9.default.object
  });
}
var ariaCurrentType;

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/index.js
var React56 = __toESM(require_react());
var import_react256 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/use-features.js
var React55 = __toESM(require_react());
var import_react245 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/definitions.js
var createDefinition = function(propNames2) {
  return {
    isEnabled: function(props) {
      return propNames2.some(function(name) {
        return !!props[name];
      });
    }
  };
};
var featureDefinitions2 = {
  measureLayout: createDefinition([
    "layout",
    "layoutId",
    "drag",
    "_layoutResetTransform"
  ]),
  animation: createDefinition([
    "animate",
    "exit",
    "variants",
    "whileHover",
    "whileTap",
    "whileFocus",
    "whileDrag"
  ]),
  exit: createDefinition(["exit"]),
  drag: createDefinition(["drag", "dragControls"]),
  focus: createDefinition(["whileFocus"]),
  hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
  tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
  pan: createDefinition([
    "onPan",
    "onPanStart",
    "onPanSessionStart",
    "onPanEnd"
  ]),
  layoutAnimation: createDefinition(["layout", "layoutId"])
};
function loadFeatures2(features) {
  for (var key2 in features) {
    var Component7 = features[key2];
    if (Component7 !== null)
      featureDefinitions2[key2].Component = Component7;
  }
}

// node_modules/hey-listen/dist/hey-listen.es.js
var warning3 = function() {
};
var invariant3 = function() {
};
if (true) {
  warning3 = function(check, message) {
    if (!check && typeof console !== "undefined") {
      console.warn(message);
    }
  };
  invariant3 = function(check, message) {
    if (!check) {
      throw new Error(message);
    }
  };
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/LazyContext.js
var import_react244 = __toESM(require_react());
var LazyContext2 = (0, import_react244.createContext)({ strict: false });

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/use-features.js
var featureNames2 = Object.keys(featureDefinitions2);
var numFeatures2 = featureNames2.length;
function useFeatures(props, visualElement2, preloadedFeatures2) {
  var features = [];
  var lazyContext = (0, import_react245.useContext)(LazyContext2);
  if (!visualElement2)
    return null;
  if (preloadedFeatures2 && lazyContext.strict) {
    invariant3(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
  }
  for (var i2 = 0; i2 < numFeatures2; i2++) {
    var name_1 = featureNames2[i2];
    var _a9 = featureDefinitions2[name_1], isEnabled = _a9.isEnabled, Component7 = _a9.Component;
    if (isEnabled(props) && Component7) {
      features.push(React55.createElement(Component7, __assign({ key: name_1 }, props, { visualElement: visualElement2 })));
    }
  }
  return features;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/MotionConfigContext.js
var import_react246 = __toESM(require_react());
var MotionConfigContext2 = (0, import_react246.createContext)({
  transformPagePoint: function(p) {
    return p;
  },
  isStatic: false
});

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/MotionContext/index.js
var import_react247 = __toESM(require_react());
var MotionContext2 = (0, import_react247.createContext)({});
function useVisualElementContext() {
  return (0, import_react247.useContext)(MotionContext2).visualElement;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
var import_react253 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/PresenceContext.js
var import_react248 = __toESM(require_react());
var PresenceContext2 = (0, import_react248.createContext)(null);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
var import_react250 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/use-constant.js
var import_react249 = __toESM(require_react());
function useConstant2(init2) {
  var ref = (0, import_react249.useRef)(null);
  if (ref.current === null) {
    ref.current = init2();
  }
  return ref.current;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
function usePresence2() {
  var context2 = (0, import_react250.useContext)(PresenceContext2);
  if (context2 === null)
    return [true, null];
  var isPresent3 = context2.isPresent, onExitComplete = context2.onExitComplete, register = context2.register;
  var id3 = useUniqueId();
  (0, import_react250.useEffect)(function() {
    return register(id3);
  }, []);
  var safeToRemove = function() {
    return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id3);
  };
  return !isPresent3 && onExitComplete ? [false, safeToRemove] : [true];
}
function isPresent2(context2) {
  return context2 === null ? true : context2.isPresent;
}
var counter2 = 0;
var incrementId = function() {
  return counter2++;
};
var useUniqueId = function() {
  return useConstant2(incrementId);
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/LayoutGroupContext.js
var import_react251 = __toESM(require_react());
var LayoutGroupContext2 = (0, import_react251.createContext)(null);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var import_react252 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/is-browser.js
var isBrowser6 = typeof window !== "undefined";

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var useIsomorphicLayoutEffect2 = isBrowser6 ? import_react252.useLayoutEffect : import_react252.useEffect;

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
function useLayoutId2(_a9) {
  var layoutId = _a9.layoutId;
  var layoutGroupId = (0, import_react253.useContext)(LayoutGroupContext2);
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}
function useVisualElement2(Component7, visualState, props, createVisualElement2) {
  var config2 = (0, import_react253.useContext)(MotionConfigContext2);
  var lazyContext = (0, import_react253.useContext)(LazyContext2);
  var parent = useVisualElementContext();
  var presenceContext = (0, import_react253.useContext)(PresenceContext2);
  var layoutId = useLayoutId2(props);
  var visualElementRef = (0, import_react253.useRef)(void 0);
  if (!createVisualElement2)
    createVisualElement2 = lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement2) {
    visualElementRef.current = createVisualElement2(Component7, {
      visualState,
      parent,
      props: __assign(__assign({}, props), { layoutId }),
      presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
      blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false
    });
  }
  var visualElement2 = visualElementRef.current;
  useIsomorphicLayoutEffect2(function() {
    if (!visualElement2)
      return;
    visualElement2.setProps(__assign(__assign(__assign({}, config2), props), { layoutId }));
    visualElement2.isPresent = isPresent2(presenceContext);
    visualElement2.isPresenceRoot = !parent || parent.presenceId !== (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id);
    visualElement2.syncRender();
  });
  (0, import_react253.useEffect)(function() {
    var _a9;
    if (!visualElement2)
      return;
    (_a9 = visualElement2.animationState) === null || _a9 === void 0 ? void 0 : _a9.animateChanges();
  });
  useIsomorphicLayoutEffect2(function() {
    return function() {
      return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
    };
  }, []);
  return visualElement2;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
var import_react254 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/is-ref-object.js
function isRefObject5(ref) {
  return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
function useMotionRef2(visualState, visualElement2, externalRef) {
  return (0, import_react254.useCallback)(
    function(instance) {
      var _a9;
      instance && ((_a9 = visualState.mount) === null || _a9 === void 0 ? void 0 : _a9.call(visualState, instance));
      if (visualElement2) {
        instance ? visualElement2.mount(instance) : visualElement2.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject5(externalRef)) {
          externalRef.current = instance;
        }
      }
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [visualElement2]
  );
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/MotionContext/create.js
var import_react255 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/variants.js
function isVariantLabels(v) {
  return Array.isArray(v);
}
function isVariantLabel2(v) {
  return typeof v === "string" || isVariantLabels(v);
}
function getCurrent2(visualElement2) {
  var current = {};
  visualElement2.forEachValue(function(value, key2) {
    return current[key2] = value.get();
  });
  return current;
}
function getVelocity4(visualElement2) {
  var velocity = {};
  visualElement2.forEachValue(function(value, key2) {
    return velocity[key2] = value.getVelocity();
  });
  return velocity;
}
function resolveVariantFromProps2(props, definition, custom, currentValues2, currentVelocity) {
  var _a9;
  if (currentValues2 === void 0) {
    currentValues2 = {};
  }
  if (currentVelocity === void 0) {
    currentVelocity = {};
  }
  if (typeof definition === "string") {
    definition = (_a9 = props.variants) === null || _a9 === void 0 ? void 0 : _a9[definition];
  }
  return typeof definition === "function" ? definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues2, currentVelocity) : definition;
}
function resolveVariant2(visualElement2, definition, custom) {
  var props = visualElement2.getProps();
  return resolveVariantFromProps2(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent2(visualElement2), getVelocity4(visualElement2));
}
function checkIfControllingVariants(props) {
  var _a9;
  return typeof ((_a9 = props.animate) === null || _a9 === void 0 ? void 0 : _a9.start) === "function" || isVariantLabel2(props.initial) || isVariantLabel2(props.animate) || isVariantLabel2(props.whileHover) || isVariantLabel2(props.whileDrag) || isVariantLabel2(props.whileTap) || isVariantLabel2(props.whileFocus) || isVariantLabel2(props.exit);
}
function checkIfVariantNode(props) {
  return Boolean(checkIfControllingVariants(props) || props.variants);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/MotionContext/utils.js
function getCurrentTreeVariants2(props, context2) {
  if (checkIfControllingVariants(props)) {
    var initial = props.initial, animate4 = props.animate;
    return {
      initial: initial === false || isVariantLabel2(initial) ? initial : void 0,
      animate: isVariantLabel2(animate4) ? animate4 : void 0
    };
  }
  return props.inherit !== false ? context2 : {};
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/MotionContext/create.js
function useCreateMotionContext2(props, isStatic) {
  var _a9 = getCurrentTreeVariants2(props, (0, import_react255.useContext)(MotionContext2)), initial = _a9.initial, animate4 = _a9.animate;
  return (0, import_react255.useMemo)(
    function() {
      return { initial, animate: animate4 };
    },
    /**
     * Only break memoisation in static mode
     */
    isStatic ? [
      variantLabelsAsDependency2(initial),
      variantLabelsAsDependency2(animate4)
    ] : []
  );
}
function variantLabelsAsDependency2(prop2) {
  return Array.isArray(prop2) ? prop2.join(" ") : prop2;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/index.js
function createMotionComponent2(_a9) {
  var preloadedFeatures2 = _a9.preloadedFeatures, createVisualElement2 = _a9.createVisualElement, useRender = _a9.useRender, useVisualState3 = _a9.useVisualState, Component7 = _a9.Component;
  preloadedFeatures2 && loadFeatures2(preloadedFeatures2);
  function MotionComponent(props, externalRef) {
    var isStatic = (0, import_react256.useContext)(MotionConfigContext2).isStatic;
    var features = null;
    var context2 = useCreateMotionContext2(props, isStatic);
    var visualState = useVisualState3(props, isStatic);
    if (!isStatic && isBrowser6) {
      context2.visualElement = useVisualElement2(Component7, visualState, props, createVisualElement2);
      features = useFeatures(props, context2.visualElement, preloadedFeatures2);
    }
    return React56.createElement(
      React56.Fragment,
      null,
      React56.createElement(MotionContext2.Provider, { value: context2 }, useRender(Component7, props, useMotionRef2(visualState, context2.visualElement, externalRef), visualState, isStatic)),
      features
    );
  }
  return (0, import_react256.forwardRef)(MotionComponent);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/motion-proxy.js
function createMotionProxy2(createConfig) {
  function custom(Component7, customMotionComponentConfig) {
    if (customMotionComponentConfig === void 0) {
      customMotionComponentConfig = {};
    }
    return createMotionComponent2(createConfig(Component7, customMotionComponentConfig));
  }
  var componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: function(_target, key2) {
      if (!componentCache.has(key2)) {
        componentCache.set(key2, custom(key2));
      }
      return componentCache.get(key2);
    }
  });
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.js
var lowercaseSVGElements2 = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "svg",
  "switch",
  "symbol",
  "text",
  "tspan",
  "use",
  "view"
];

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.js
function isSVGComponent2(Component7) {
  if (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component7 !== "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component7.includes("-")
  ) {
    return false;
  } else if (
    /**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */
    lowercaseSVGElements2.indexOf(Component7) > -1 || /**
     * If it contains a capital letter, it's an SVG component
     */
    /[A-Z]/.test(Component7)
  ) {
    return true;
  }
  return false;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/use-render.js
var import_react259 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/use-props.js
var import_react257 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/projection/scale-correction.js
var valueScaleCorrection = {};
function addScaleCorrection(correctors) {
  for (var key2 in correctors) {
    valueScaleCorrection[key2] = correctors[key2];
  }
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/utils/transform.js
var transformAxes2 = ["", "X", "Y", "Z"];
var order2 = ["translate", "scale", "rotate", "skew"];
var transformProps2 = ["transformPerspective", "x", "y", "z"];
order2.forEach(function(operationKey) {
  return transformAxes2.forEach(function(axesKey) {
    return transformProps2.push(operationKey + axesKey);
  });
});
function sortTransformProps(a2, b2) {
  return transformProps2.indexOf(a2) - transformProps2.indexOf(b2);
}
var transformPropSet = new Set(transformProps2);
function isTransformProp(key2) {
  return transformPropSet.has(key2);
}
var transformOriginProps = /* @__PURE__ */ new Set(["originX", "originY", "originZ"]);
function isTransformOriginProp(key2) {
  return transformOriginProps.has(key2);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.js
function isForcedMotionValue2(key2, _a9) {
  var layout3 = _a9.layout, layoutId = _a9.layoutId;
  return isTransformProp(key2) || isTransformOriginProp(key2) || (layout3 || layoutId !== void 0) && (!!valueScaleCorrection[key2] || key2 === "opacity");
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/value/utils/is-motion-value.js
var isMotionValue2 = function(value) {
  return value !== null && typeof value === "object" && value.getVelocity;
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/utils/build-transform.js
var translateAlias2 = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
function buildTransform2(_a9, _b5, transformIsDefault, transformTemplate2) {
  var transform4 = _a9.transform, transformKeys3 = _a9.transformKeys;
  var _c3 = _b5.enableHardwareAcceleration, enableHardwareAcceleration = _c3 === void 0 ? true : _c3, _d3 = _b5.allowTransformNone, allowTransformNone = _d3 === void 0 ? true : _d3;
  var transformString = "";
  transformKeys3.sort(sortTransformProps);
  var transformHasZ = false;
  var numTransformKeys = transformKeys3.length;
  for (var i2 = 0; i2 < numTransformKeys; i2++) {
    var key2 = transformKeys3[i2];
    transformString += (translateAlias2[key2] || key2) + "(" + transform4[key2] + ") ";
    if (key2 === "z")
      transformHasZ = true;
  }
  if (!transformHasZ && enableHardwareAcceleration) {
    transformString += "translateZ(0)";
  } else {
    transformString = transformString.trim();
  }
  if (transformTemplate2) {
    transformString = transformTemplate2(transform4, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}
function buildTransformOrigin(_a9) {
  var _b5 = _a9.originX, originX = _b5 === void 0 ? "50%" : _b5, _c3 = _a9.originY, originY = _c3 === void 0 ? "50%" : _c3, _d3 = _a9.originZ, originZ = _d3 === void 0 ? 0 : _d3;
  return originX + " " + originY + " " + originZ;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.js
function isCSSVariable(key2) {
  return key2.startsWith("--");
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.js
var getValueAsType2 = function(value, type) {
  return type && typeof value === "number" ? type.transform(value) : value;
};

// node_modules/style-value-types/dist/es/utils.js
var clamp4 = function(min3, max3) {
  return function(v) {
    return Math.max(Math.min(v, max3), min3);
  };
};
var sanitize2 = function(v) {
  return v % 1 ? Number(v.toFixed(5)) : v;
};
var floatRegex2 = /(-)?([\d]*\.?[\d])+/g;
var colorRegex2 = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
var singleColorRegex2 = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
function isString4(v) {
  return typeof v === "string";
}

// node_modules/style-value-types/dist/es/numbers/index.js
var number2 = {
  test: function(v) {
    return typeof v === "number";
  },
  parse: parseFloat,
  transform: function(v) {
    return v;
  }
};
var alpha2 = __assign(__assign({}, number2), { transform: clamp4(0, 1) });
var scale3 = __assign(__assign({}, number2), { default: 1 });

// node_modules/style-value-types/dist/es/numbers/units.js
var createUnitType2 = function(unit) {
  return {
    test: function(v) {
      return isString4(v) && v.endsWith(unit) && v.split(" ").length === 1;
    },
    parse: parseFloat,
    transform: function(v) {
      return "" + v + unit;
    }
  };
};
var degrees2 = createUnitType2("deg");
var percent2 = createUnitType2("%");
var px5 = createUnitType2("px");
var vh2 = createUnitType2("vh");
var vw2 = createUnitType2("vw");
var progressPercentage2 = __assign(__assign({}, percent2), { parse: function(v) {
  return percent2.parse(v) / 100;
}, transform: function(v) {
  return percent2.transform(v * 100);
} });

// node_modules/style-value-types/dist/es/color/utils.js
var isColorString2 = function(type, testProp) {
  return function(v) {
    return Boolean(isString4(v) && singleColorRegex2.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
  };
};
var splitColor2 = function(aName, bName, cName) {
  return function(v) {
    var _a9;
    if (!isString4(v))
      return v;
    var _b5 = v.match(floatRegex2), a2 = _b5[0], b2 = _b5[1], c2 = _b5[2], alpha3 = _b5[3];
    return _a9 = {}, _a9[aName] = parseFloat(a2), _a9[bName] = parseFloat(b2), _a9[cName] = parseFloat(c2), _a9.alpha = alpha3 !== void 0 ? parseFloat(alpha3) : 1, _a9;
  };
};

// node_modules/style-value-types/dist/es/color/hsla.js
var hsla3 = {
  test: isColorString2("hsl", "hue"),
  parse: splitColor2("hue", "saturation", "lightness"),
  transform: function(_a9) {
    var hue = _a9.hue, saturation = _a9.saturation, lightness = _a9.lightness, _b5 = _a9.alpha, alpha$1 = _b5 === void 0 ? 1 : _b5;
    return "hsla(" + Math.round(hue) + ", " + percent2.transform(sanitize2(saturation)) + ", " + percent2.transform(sanitize2(lightness)) + ", " + sanitize2(alpha2.transform(alpha$1)) + ")";
  }
};

// node_modules/style-value-types/dist/es/color/rgba.js
var clampRgbUnit2 = clamp4(0, 255);
var rgbUnit2 = __assign(__assign({}, number2), { transform: function(v) {
  return Math.round(clampRgbUnit2(v));
} });
var rgba3 = {
  test: isColorString2("rgb", "red"),
  parse: splitColor2("red", "green", "blue"),
  transform: function(_a9) {
    var red = _a9.red, green = _a9.green, blue = _a9.blue, _b5 = _a9.alpha, alpha$1 = _b5 === void 0 ? 1 : _b5;
    return "rgba(" + rgbUnit2.transform(red) + ", " + rgbUnit2.transform(green) + ", " + rgbUnit2.transform(blue) + ", " + sanitize2(alpha2.transform(alpha$1)) + ")";
  }
};

// node_modules/style-value-types/dist/es/color/hex.js
function parseHex2(v) {
  var r3 = "";
  var g = "";
  var b2 = "";
  var a2 = "";
  if (v.length > 5) {
    r3 = v.substr(1, 2);
    g = v.substr(3, 2);
    b2 = v.substr(5, 2);
    a2 = v.substr(7, 2);
  } else {
    r3 = v.substr(1, 1);
    g = v.substr(2, 1);
    b2 = v.substr(3, 1);
    a2 = v.substr(4, 1);
    r3 += r3;
    g += g;
    b2 += b2;
    a2 += a2;
  }
  return {
    red: parseInt(r3, 16),
    green: parseInt(g, 16),
    blue: parseInt(b2, 16),
    alpha: a2 ? parseInt(a2, 16) / 255 : 1
  };
}
var hex2 = {
  test: isColorString2("#"),
  parse: parseHex2,
  transform: rgba3.transform
};

// node_modules/style-value-types/dist/es/color/index.js
var color4 = {
  test: function(v) {
    return rgba3.test(v) || hex2.test(v) || hsla3.test(v);
  },
  parse: function(v) {
    if (rgba3.test(v)) {
      return rgba3.parse(v);
    } else if (hsla3.test(v)) {
      return hsla3.parse(v);
    } else {
      return hex2.parse(v);
    }
  },
  transform: function(v) {
    return isString4(v) ? v : v.hasOwnProperty("red") ? rgba3.transform(v) : hsla3.transform(v);
  }
};

// node_modules/style-value-types/dist/es/complex/index.js
var colorToken = "${c}";
var numberToken = "${n}";
function test2(v) {
  var _a9, _b5, _c3, _d3;
  return isNaN(v) && isString4(v) && ((_b5 = (_a9 = v.match(floatRegex2)) === null || _a9 === void 0 ? void 0 : _a9.length) !== null && _b5 !== void 0 ? _b5 : 0) + ((_d3 = (_c3 = v.match(colorRegex2)) === null || _c3 === void 0 ? void 0 : _c3.length) !== null && _d3 !== void 0 ? _d3 : 0) > 0;
}
function analyse(v) {
  var values2 = [];
  var numColors = 0;
  var colors3 = v.match(colorRegex2);
  if (colors3) {
    numColors = colors3.length;
    v = v.replace(colorRegex2, colorToken);
    values2.push.apply(values2, colors3.map(color4.parse));
  }
  var numbers = v.match(floatRegex2);
  if (numbers) {
    v = v.replace(floatRegex2, numberToken);
    values2.push.apply(values2, numbers.map(number2.parse));
  }
  return { values: values2, numColors, tokenised: v };
}
function parse5(v) {
  return analyse(v).values;
}
function createTransformer2(v) {
  var _a9 = analyse(v), values2 = _a9.values, numColors = _a9.numColors, tokenised = _a9.tokenised;
  var numValues = values2.length;
  return function(v2) {
    var output = tokenised;
    for (var i2 = 0; i2 < numValues; i2++) {
      output = output.replace(i2 < numColors ? colorToken : numberToken, i2 < numColors ? color4.transform(v2[i2]) : sanitize2(v2[i2]));
    }
    return output;
  };
}
var convertNumbersToZero2 = function(v) {
  return typeof v === "number" ? 0 : v;
};
function getAnimatableNone3(v) {
  var parsed = parse5(v);
  var transformer = createTransformer2(v);
  return transformer(parsed.map(convertNumbersToZero2));
}
var complex2 = { test: test2, parse: parse5, createTransformer: createTransformer2, getAnimatableNone: getAnimatableNone3 };

// node_modules/style-value-types/dist/es/complex/filter.js
var maxDefaults2 = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter2(v) {
  var _a9 = v.slice(0, -1).split("("), name = _a9[0], value = _a9[1];
  if (name === "drop-shadow")
    return v;
  var number3 = (value.match(floatRegex2) || [])[0];
  if (!number3)
    return v;
  var unit = value.replace(number3, "");
  var defaultValue2 = maxDefaults2.has(name) ? 1 : 0;
  if (number3 !== value)
    defaultValue2 *= 100;
  return name + "(" + defaultValue2 + unit + ")";
}
var functionRegex2 = /([a-z-]*)\(.*?\)/g;
var filter4 = __assign(__assign({}, complex2), { getAnimatableNone: function(v) {
  var functions = v.match(functionRegex2);
  return functions ? functions.map(applyDefaultFilter2).join(" ") : v;
} });

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.js
var int2 = __assign(__assign({}, number2), { transform: Math.round });

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/number.js
var numberValueTypes2 = {
  // Border props
  borderWidth: px5,
  borderTopWidth: px5,
  borderRightWidth: px5,
  borderBottomWidth: px5,
  borderLeftWidth: px5,
  borderRadius: px5,
  radius: px5,
  borderTopLeftRadius: px5,
  borderTopRightRadius: px5,
  borderBottomRightRadius: px5,
  borderBottomLeftRadius: px5,
  // Positioning props
  width: px5,
  maxWidth: px5,
  height: px5,
  maxHeight: px5,
  size: px5,
  top: px5,
  right: px5,
  bottom: px5,
  left: px5,
  // Spacing props
  padding: px5,
  paddingTop: px5,
  paddingRight: px5,
  paddingBottom: px5,
  paddingLeft: px5,
  margin: px5,
  marginTop: px5,
  marginRight: px5,
  marginBottom: px5,
  marginLeft: px5,
  // Transform props
  rotate: degrees2,
  rotateX: degrees2,
  rotateY: degrees2,
  rotateZ: degrees2,
  scale: scale3,
  scaleX: scale3,
  scaleY: scale3,
  scaleZ: scale3,
  skew: degrees2,
  skewX: degrees2,
  skewY: degrees2,
  distance: px5,
  translateX: px5,
  translateY: px5,
  translateZ: px5,
  x: px5,
  y: px5,
  z: px5,
  perspective: px5,
  transformPerspective: px5,
  opacity: alpha2,
  originX: progressPercentage2,
  originY: progressPercentage2,
  originZ: px5,
  // Misc
  zIndex: int2,
  // SVG
  fillOpacity: alpha2,
  strokeOpacity: alpha2,
  numOctaves: int2
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/utils/build-styles.js
function buildHTMLStyles2(state2, latestValues, projection, layoutState, options2, transformTemplate2, buildProjectionTransform2, buildProjectionTransformOrigin) {
  var _a9;
  var style = state2.style, vars2 = state2.vars, transform4 = state2.transform, transformKeys3 = state2.transformKeys, transformOrigin2 = state2.transformOrigin;
  transformKeys3.length = 0;
  var hasTransform2 = false;
  var hasTransformOrigin = false;
  var transformIsNone = true;
  for (var key2 in latestValues) {
    var value = latestValues[key2];
    if (isCSSVariable(key2)) {
      vars2[key2] = value;
      continue;
    }
    var valueType = numberValueTypes2[key2];
    var valueAsType = getValueAsType2(value, valueType);
    if (isTransformProp(key2)) {
      hasTransform2 = true;
      transform4[key2] = valueAsType;
      transformKeys3.push(key2);
      if (!transformIsNone)
        continue;
      if (value !== ((_a9 = valueType.default) !== null && _a9 !== void 0 ? _a9 : 0))
        transformIsNone = false;
    } else if (isTransformOriginProp(key2)) {
      transformOrigin2[key2] = valueAsType;
      hasTransformOrigin = true;
    } else {
      if ((projection === null || projection === void 0 ? void 0 : projection.isHydrated) && (layoutState === null || layoutState === void 0 ? void 0 : layoutState.isHydrated) && valueScaleCorrection[key2]) {
        var correctedValue = valueScaleCorrection[key2].process(value, layoutState, projection);
        var applyTo = valueScaleCorrection[key2].applyTo;
        if (applyTo) {
          var num = applyTo.length;
          for (var i2 = 0; i2 < num; i2++) {
            style[applyTo[i2]] = correctedValue;
          }
        } else {
          style[key2] = correctedValue;
        }
      } else {
        style[key2] = valueAsType;
      }
    }
  }
  if (layoutState && projection && buildProjectionTransform2 && buildProjectionTransformOrigin) {
    style.transform = buildProjectionTransform2(layoutState.deltaFinal, layoutState.treeScale, hasTransform2 ? transform4 : void 0);
    if (transformTemplate2) {
      style.transform = transformTemplate2(transform4, style.transform);
    }
    style.transformOrigin = buildProjectionTransformOrigin(layoutState);
  } else {
    if (hasTransform2) {
      style.transform = buildTransform2(state2, options2, transformIsNone, transformTemplate2);
    }
    if (hasTransformOrigin) {
      style.transformOrigin = buildTransformOrigin(transformOrigin2);
    }
  }
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.js
var createHtmlRenderState2 = function() {
  return {
    style: {},
    transform: {},
    transformKeys: [],
    transformOrigin: {},
    vars: {}
  };
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/use-props.js
function copyRawValuesOnly2(target, source, props) {
  for (var key2 in source) {
    if (!isMotionValue2(source[key2]) && !isForcedMotionValue2(key2, props)) {
      target[key2] = source[key2];
    }
  }
}
function useInitialMotionValues2(_a9, visualState, isStatic) {
  var transformTemplate2 = _a9.transformTemplate;
  return (0, import_react257.useMemo)(function() {
    var state2 = createHtmlRenderState2();
    buildHTMLStyles2(state2, visualState, void 0, void 0, { enableHardwareAcceleration: !isStatic }, transformTemplate2);
    var vars2 = state2.vars, style = state2.style;
    return __assign(__assign({}, vars2), style);
  }, [visualState]);
}
function useStyle2(props, visualState, isStatic) {
  var styleProp = props.style || {};
  var style = {};
  copyRawValuesOnly2(style, styleProp, props);
  Object.assign(style, useInitialMotionValues2(props, visualState, isStatic));
  if (props.transformValues) {
    style = props.transformValues(style);
  }
  return style;
}
function useHTMLProps2(props, visualState, isStatic) {
  var htmlProps = {};
  var style = useStyle2(props, visualState, isStatic);
  if (Boolean(props.drag)) {
    htmlProps.draggable = false;
    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
    style.touchAction = props.drag === true ? "none" : "pan-" + (props.drag === "x" ? "y" : "x");
  }
  htmlProps.style = style;
  return htmlProps;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/valid-prop.js
var validMotionProps2 = /* @__PURE__ */ new Set([
  "initial",
  "animate",
  "exit",
  "style",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "layout",
  "layoutId",
  "_layoutResetTransform",
  "onLayoutAnimationComplete",
  "onViewportBoxUpdate",
  "onLayoutMeasure",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "drag",
  "dragControls",
  "dragListener",
  "dragConstraints",
  "dragDirectionLock",
  "_dragX",
  "_dragY",
  "dragElastic",
  "dragMomentum",
  "dragPropagation",
  "dragTransition",
  "whileDrag",
  "onPan",
  "onPanStart",
  "onPanEnd",
  "onPanSessionStart",
  "onTap",
  "onTapStart",
  "onTapCancel",
  "onHoverStart",
  "onHoverEnd",
  "whileFocus",
  "whileTap",
  "whileHover"
]);
function isValidMotionProp2(key2) {
  return validMotionProps2.has(key2);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.js
var shouldForward2 = function(key2) {
  return !isValidMotionProp2(key2);
};
try {
  emotionIsPropValid_1 = (init_is_prop_valid_browser_esm2(), __toCommonJS(is_prop_valid_browser_esm_exports2)).default;
  shouldForward2 = function(key2) {
    if (key2.startsWith("on")) {
      return !isValidMotionProp2(key2);
    } else {
      return emotionIsPropValid_1(key2);
    }
  };
} catch (_a9) {
}
var emotionIsPropValid_1;
function filterProps2(props, isDom3, forwardMotionProps) {
  var filteredProps = {};
  for (var key2 in props) {
    if (shouldForward2(key2) || forwardMotionProps === true && isValidMotionProp2(key2) || !isDom3 && !isValidMotionProp2(key2)) {
      filteredProps[key2] = props[key2];
    }
  }
  return filteredProps;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/use-props.js
var import_react258 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.js
function calcOrigin3(origin, offset3, size4) {
  return typeof origin === "string" ? origin : px5.transform(offset3 + size4 * origin);
}
function calcSVGTransformOrigin2(dimensions, originX, originY) {
  var pxOriginX = calcOrigin3(originX, dimensions.x, dimensions.width);
  var pxOriginY = calcOrigin3(originY, dimensions.y, dimensions.height);
  return pxOriginX + " " + pxOriginY;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/utils/path.js
var progressToPixels = function(progress4, length3) {
  return px5.transform(progress4 * length3);
};
var dashKeys2 = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
var camelKeys2 = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath2(attrs, totalLength, length3, spacing4, offset3, useDashCase) {
  if (spacing4 === void 0) {
    spacing4 = 1;
  }
  if (offset3 === void 0) {
    offset3 = 0;
  }
  if (useDashCase === void 0) {
    useDashCase = true;
  }
  var keys3 = useDashCase ? dashKeys2 : camelKeys2;
  attrs[keys3.offset] = progressToPixels(-offset3, totalLength);
  var pathLength = progressToPixels(length3, totalLength);
  var pathSpacing = progressToPixels(spacing4, totalLength);
  attrs[keys3.array] = pathLength + " " + pathSpacing;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.js
function buildSVGAttrs2(state2, _a9, projection, layoutState, options2, transformTemplate2, buildProjectionTransform2, buildProjectionTransformOrigin) {
  var attrX = _a9.attrX, attrY = _a9.attrY, originX = _a9.originX, originY = _a9.originY, pathLength = _a9.pathLength, _b5 = _a9.pathSpacing, pathSpacing = _b5 === void 0 ? 1 : _b5, _c3 = _a9.pathOffset, pathOffset = _c3 === void 0 ? 0 : _c3, latest = __rest(_a9, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
  buildHTMLStyles2(state2, latest, projection, layoutState, options2, transformTemplate2, buildProjectionTransform2, buildProjectionTransformOrigin);
  state2.attrs = state2.style;
  state2.style = {};
  var attrs = state2.attrs, style = state2.style, dimensions = state2.dimensions, totalPathLength = state2.totalPathLength;
  if (attrs.transform) {
    if (dimensions)
      style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
    style.transformOrigin = calcSVGTransformOrigin2(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (totalPathLength !== void 0 && pathLength !== void 0) {
    buildSVGPath2(attrs, totalPathLength, pathLength, pathSpacing, pathOffset, false);
  }
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.js
var createSvgRenderState2 = function() {
  return __assign(__assign({}, createHtmlRenderState2()), { attrs: {} });
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/use-props.js
function useSVGProps2(props, visualState) {
  var visualProps = (0, import_react258.useMemo)(function() {
    var state2 = createSvgRenderState2();
    buildSVGAttrs2(state2, visualState, void 0, void 0, { enableHardwareAcceleration: false }, props.transformTemplate);
    return __assign(__assign({}, state2.attrs), { style: __assign({}, state2.style) });
  }, [visualState]);
  if (props.style) {
    var rawStyles = {};
    copyRawValuesOnly2(rawStyles, props.style, props);
    visualProps.style = __assign(__assign({}, rawStyles), visualProps.style);
  }
  return visualProps;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/use-render.js
function createUseRender2(forwardMotionProps) {
  if (forwardMotionProps === void 0) {
    forwardMotionProps = false;
  }
  var useRender = function(Component7, props, ref, _a9, isStatic) {
    var latestValues = _a9.latestValues;
    var useVisualProps = isSVGComponent2(Component7) ? useSVGProps2 : useHTMLProps2;
    var visualProps = useVisualProps(props, latestValues, isStatic);
    var filteredProps = filterProps2(props, typeof Component7 === "string", forwardMotionProps);
    var elementProps = __assign(__assign(__assign({}, filteredProps), visualProps), { ref });
    return (0, import_react259.createElement)(Component7, elementProps);
  };
  return useRender;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.js
var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
var REPLACE_TEMPLATE = "$1-$2";
var camelToDash2 = function(str) {
  return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/utils/render.js
function renderHTML2(element, _a9) {
  var style = _a9.style, vars2 = _a9.vars;
  Object.assign(element.style, style);
  for (var key2 in vars2) {
    element.style.setProperty(key2, vars2[key2]);
  }
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.js
var camelCaseAttributes2 = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform"
]);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/utils/render.js
function renderSVG2(element, renderState) {
  renderHTML2(element, renderState);
  for (var key2 in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes2.has(key2) ? camelToDash2(key2) : key2, renderState.attrs[key2]);
  }
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.js
function scrapeMotionValuesFromProps3(props) {
  var style = props.style;
  var newValues = {};
  for (var key2 in style) {
    if (isMotionValue2(style[key2]) || isForcedMotionValue2(key2, props)) {
      newValues[key2] = style[key2];
    }
  }
  return newValues;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.js
function scrapeMotionValuesFromProps4(props) {
  var newValues = scrapeMotionValuesFromProps3(props);
  for (var key2 in props) {
    if (isMotionValue2(props[key2])) {
      var targetKey = key2 === "x" || key2 === "y" ? "attr" + key2.toUpperCase() : key2;
      newValues[targetKey] = props[key2];
    }
  }
  return newValues;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
var import_react260 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.js
function isAnimationControls2(v) {
  return typeof v === "object" && typeof v.start === "function";
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.js
var isKeyframesTarget2 = function(v) {
  return Array.isArray(v);
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/resolve-value.js
var isCustomValue2 = function(v) {
  return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
var resolveFinalValueInKeyframes2 = function(v) {
  return isKeyframesTarget2(v) ? v[v.length - 1] || 0 : v;
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.js
function resolveMotionValue2(value) {
  var unwrappedValue = isMotionValue2(value) ? value.get() : value;
  return isCustomValue2(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
function makeState2(_a9, props, context2, presenceContext) {
  var scrapeMotionValuesFromProps5 = _a9.scrapeMotionValuesFromProps, createRenderState = _a9.createRenderState, onMount = _a9.onMount;
  var state2 = {
    latestValues: makeLatestValues2(props, context2, presenceContext, scrapeMotionValuesFromProps5),
    renderState: createRenderState()
  };
  if (onMount) {
    state2.mount = function(instance) {
      return onMount(props, instance, state2);
    };
  }
  return state2;
}
var makeUseVisualState2 = function(config2) {
  return function(props, isStatic) {
    var context2 = (0, import_react260.useContext)(MotionContext2);
    var presenceContext = (0, import_react260.useContext)(PresenceContext2);
    return isStatic ? makeState2(config2, props, context2, presenceContext) : useConstant2(function() {
      return makeState2(config2, props, context2, presenceContext);
    });
  };
};
function makeLatestValues2(props, context2, presenceContext, scrapeMotionValues) {
  var values2 = {};
  var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
  var motionValues = scrapeMotionValues(props);
  for (var key2 in motionValues) {
    values2[key2] = resolveMotionValue2(motionValues[key2]);
  }
  var initial = props.initial, animate4 = props.animate;
  var isControllingVariants2 = checkIfControllingVariants(props);
  var isVariantNode2 = checkIfVariantNode(props);
  if (context2 && isVariantNode2 && !isControllingVariants2 && props.inherit !== false) {
    initial !== null && initial !== void 0 ? initial : initial = context2.initial;
    animate4 !== null && animate4 !== void 0 ? animate4 : animate4 = context2.animate;
  }
  var variantToSet = blockInitialAnimation || initial === false ? animate4 : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls2(variantToSet)) {
    var list2 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list2.forEach(function(definition) {
      var resolved = resolveVariantFromProps2(props, definition);
      if (!resolved)
        return;
      var transitionEnd = resolved.transitionEnd;
      resolved.transition;
      var target = __rest(resolved, ["transitionEnd", "transition"]);
      for (var key3 in target)
        values2[key3] = target[key3];
      for (var key3 in transitionEnd)
        values2[key3] = transitionEnd[key3];
    });
  }
  return values2;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/config-motion.js
var svgMotionConfig2 = {
  useVisualState: makeUseVisualState2({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps4,
    createRenderState: createSvgRenderState2,
    onMount: function(props, instance, _a9) {
      var renderState = _a9.renderState, latestValues = _a9.latestValues;
      try {
        renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
      } catch (e) {
        renderState.dimensions = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }
      if (isPath(instance)) {
        renderState.totalPathLength = instance.getTotalLength();
      }
      buildSVGAttrs2(renderState, latestValues, void 0, void 0, { enableHardwareAcceleration: false }, props.transformTemplate);
      renderSVG2(instance, renderState);
    }
  })
};
function isPath(element) {
  return element.tagName === "path";
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/config-motion.js
var htmlMotionConfig2 = {
  useVisualState: makeUseVisualState2({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3,
    createRenderState: createHtmlRenderState2
  })
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/create-config.js
function createDomMotionConfig2(Component7, _a9, preloadedFeatures2, createVisualElement2) {
  var _b5 = _a9.forwardMotionProps, forwardMotionProps = _b5 === void 0 ? false : _b5;
  var baseConfig = isSVGComponent2(Component7) ? svgMotionConfig2 : htmlMotionConfig2;
  return __assign(__assign({}, baseConfig), {
    preloadedFeatures: preloadedFeatures2,
    useRender: createUseRender2(forwardMotionProps),
    createVisualElement: createVisualElement2,
    Component: Component7
  });
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/types.js
var AnimationType;
(function(AnimationType2) {
  AnimationType2["Animate"] = "animate";
  AnimationType2["Hover"] = "whileHover";
  AnimationType2["Tap"] = "whileTap";
  AnimationType2["Drag"] = "whileDrag";
  AnimationType2["Focus"] = "whileFocus";
  AnimationType2["Exit"] = "exit";
})(AnimationType || (AnimationType = {}));

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/events/use-dom-event.js
var import_react261 = __toESM(require_react());
function addDomEvent4(target, eventName, handler, options2) {
  target.addEventListener(eventName, handler, options2);
  return function() {
    return target.removeEventListener(eventName, handler, options2);
  };
}
function useDomEvent2(ref, eventName, handler, options2) {
  (0, import_react261.useEffect)(function() {
    var element = ref.current;
    if (handler && element) {
      return addDomEvent4(element, eventName, handler, options2);
    }
  }, [ref, eventName, handler, options2]);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js
function useFocusGesture(_a9) {
  var whileFocus = _a9.whileFocus, visualElement2 = _a9.visualElement;
  var onFocus4 = function() {
    var _a10;
    (_a10 = visualElement2.animationState) === null || _a10 === void 0 ? void 0 : _a10.setActive(AnimationType.Focus, true);
  };
  var onBlur3 = function() {
    var _a10;
    (_a10 = visualElement2.animationState) === null || _a10 === void 0 ? void 0 : _a10.setActive(AnimationType.Focus, false);
  };
  useDomEvent2(visualElement2, "focus", whileFocus ? onFocus4 : void 0);
  useDomEvent2(visualElement2, "blur", whileFocus ? onBlur3 : void 0);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/utils/event-type.js
function isMouseEvent3(event) {
  if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof MouseEvent;
}
function isTouchEvent3(event) {
  var hasTouches = !!event.touches;
  return hasTouches;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/events/event-info.js
function filterPrimaryPointer(eventHandler) {
  return function(event) {
    var isMouseEvent4 = event instanceof MouseEvent;
    var isPrimaryPointer2 = !isMouseEvent4 || isMouseEvent4 && event.button === 0;
    if (isPrimaryPointer2) {
      eventHandler(event);
    }
  };
}
var defaultPagePoint = { pageX: 0, pageY: 0 };
function pointFromTouch2(e, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  var primaryTouch = e.touches[0] || e.changedTouches[0];
  var point = primaryTouch || defaultPagePoint;
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function pointFromMouse2(point, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function extractEventInfo3(event, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    point: isTouchEvent3(event) ? pointFromTouch2(event, pointType) : pointFromMouse2(event, pointType)
  };
}
function getViewportPointFromEvent2(event) {
  return extractEventInfo3(event, "client");
}
var wrapHandler = function(handler, shouldFilterPrimaryPointer) {
  if (shouldFilterPrimaryPointer === void 0) {
    shouldFilterPrimaryPointer = false;
  }
  var listener = function(event) {
    return handler(event, extractEventInfo3(event));
  };
  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/events/utils.js
var supportsPointerEvents = function() {
  return isBrowser6 && window.onpointerdown === null;
};
var supportsTouchEvents = function() {
  return isBrowser6 && window.ontouchstart === null;
};
var supportsMouseEvents = function() {
  return isBrowser6 && window.onmousedown === null;
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/events/use-pointer-event.js
var mouseEventNames = {
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointercancel: "mousecancel",
  pointerover: "mouseover",
  pointerout: "mouseout",
  pointerenter: "mouseenter",
  pointerleave: "mouseleave"
};
var touchEventNames = {
  pointerdown: "touchstart",
  pointermove: "touchmove",
  pointerup: "touchend",
  pointercancel: "touchcancel"
};
function getPointerEventName2(name) {
  if (supportsPointerEvents()) {
    return name;
  } else if (supportsTouchEvents()) {
    return touchEventNames[name];
  } else if (supportsMouseEvents()) {
    return mouseEventNames[name];
  }
  return name;
}
function addPointerEvent4(target, eventName, handler, options2) {
  return addDomEvent4(target, getPointerEventName2(eventName), wrapHandler(handler, eventName === "pointerdown"), options2);
}
function usePointerEvent2(ref, eventName, handler, options2) {
  return useDomEvent2(ref, getPointerEventName2(eventName), handler && wrapHandler(handler, eventName === "pointerdown"), options2);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js
function createLock2(name) {
  var lock = null;
  return function() {
    var openLock = function() {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
var globalHorizontalLock2 = createLock2("dragHorizontal");
var globalVerticalLock2 = createLock2("dragVertical");
function getGlobalLock2(drag3) {
  var lock = false;
  if (drag3 === "y") {
    lock = globalVerticalLock2();
  } else if (drag3 === "x") {
    lock = globalHorizontalLock2();
  } else {
    var openHorizontal_1 = globalHorizontalLock2();
    var openVertical_1 = globalVerticalLock2();
    if (openHorizontal_1 && openVertical_1) {
      lock = function() {
        openHorizontal_1();
        openVertical_1();
      };
    } else {
      if (openHorizontal_1)
        openHorizontal_1();
      if (openVertical_1)
        openVertical_1();
    }
  }
  return lock;
}
function isDragActive2() {
  var openGestureLock = getGlobalLock2(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js
function createHoverEvent(visualElement2, isActive, callback) {
  return function(event, info) {
    var _a9;
    if (!isMouseEvent3(event) || isDragActive2())
      return;
    callback === null || callback === void 0 ? void 0 : callback(event, info);
    (_a9 = visualElement2.animationState) === null || _a9 === void 0 ? void 0 : _a9.setActive(AnimationType.Hover, isActive);
  };
}
function useHoverGesture(_a9) {
  var onHoverStart = _a9.onHoverStart, onHoverEnd = _a9.onHoverEnd, whileHover = _a9.whileHover, visualElement2 = _a9.visualElement;
  usePointerEvent2(visualElement2, "pointerenter", onHoverStart || whileHover ? createHoverEvent(visualElement2, true, onHoverStart) : void 0);
  usePointerEvent2(visualElement2, "pointerleave", onHoverEnd || whileHover ? createHoverEvent(visualElement2, false, onHoverEnd) : void 0);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js
var import_react263 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js
var isNodeOrChild2 = function(parent, child) {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild2(parent, child.parentElement);
  }
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/use-unmount-effect.js
var import_react262 = __toESM(require_react());
function useUnmountEffect3(callback) {
  return (0, import_react262.useEffect)(function() {
    return function() {
      return callback();
    };
  }, []);
}

// node_modules/popmotion/dist/es/utils/clamp.js
var clamp5 = function(min3, max3, v) {
  return Math.min(Math.max(v, min3), max3);
};

// node_modules/popmotion/dist/es/animations/utils/find-spring.js
var safeMin2 = 1e-3;
var minDuration2 = 0.01;
var maxDuration3 = 10;
var minDamping2 = 0.05;
var maxDamping2 = 1;
function findSpring2(_a9) {
  var _b5 = _a9.duration, duration = _b5 === void 0 ? 800 : _b5, _c3 = _a9.bounce, bounce = _c3 === void 0 ? 0.25 : _c3, _d3 = _a9.velocity, velocity = _d3 === void 0 ? 0 : _d3, _e3 = _a9.mass, mass = _e3 === void 0 ? 1 : _e3;
  var envelope;
  var derivative;
  warning3(duration <= maxDuration3 * 1e3, "Spring duration must be 10 seconds or less");
  var dampingRatio = 1 - bounce;
  dampingRatio = clamp5(minDamping2, maxDamping2, dampingRatio);
  duration = clamp5(minDuration2, maxDuration3, duration / 1e3);
  if (dampingRatio < 1) {
    envelope = function(undampedFreq2) {
      var exponentialDecay = undampedFreq2 * dampingRatio;
      var delta2 = exponentialDecay * duration;
      var a2 = exponentialDecay - velocity;
      var b2 = calcAngularFreq2(undampedFreq2, dampingRatio);
      var c2 = Math.exp(-delta2);
      return safeMin2 - a2 / b2 * c2;
    };
    derivative = function(undampedFreq2) {
      var exponentialDecay = undampedFreq2 * dampingRatio;
      var delta2 = exponentialDecay * duration;
      var d = delta2 * velocity + velocity;
      var e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      var f = Math.exp(-delta2);
      var g = calcAngularFreq2(Math.pow(undampedFreq2, 2), dampingRatio);
      var factor = -envelope(undampedFreq2) + safeMin2 > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g;
    };
  } else {
    envelope = function(undampedFreq2) {
      var a2 = Math.exp(-undampedFreq2 * duration);
      var b2 = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin2 + a2 * b2;
    };
    derivative = function(undampedFreq2) {
      var a2 = Math.exp(-undampedFreq2 * duration);
      var b2 = (velocity - undampedFreq2) * (duration * duration);
      return a2 * b2;
    };
  }
  var initialGuess = 5 / duration;
  var undampedFreq = approximateRoot2(envelope, derivative, initialGuess);
  duration = duration * 1e3;
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  } else {
    var stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
var rootIterations2 = 12;
function approximateRoot2(envelope, derivative, initialGuess) {
  var result = initialGuess;
  for (var i2 = 1; i2 < rootIterations2; i2++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq2(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// node_modules/popmotion/dist/es/animations/generators/spring.js
var durationKeys2 = ["duration", "bounce"];
var physicsKeys2 = ["stiffness", "damping", "mass"];
function isSpringType2(options2, keys3) {
  return keys3.some(function(key2) {
    return options2[key2] !== void 0;
  });
}
function getSpringOptions2(options2) {
  var springOptions = __assign({ velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false }, options2);
  if (!isSpringType2(options2, physicsKeys2) && isSpringType2(options2, durationKeys2)) {
    var derived = findSpring2(options2);
    springOptions = __assign(__assign(__assign({}, springOptions), derived), { velocity: 0, mass: 1 });
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring2(_a9) {
  var _b5 = _a9.from, from2 = _b5 === void 0 ? 0 : _b5, _c3 = _a9.to, to = _c3 === void 0 ? 1 : _c3, _d3 = _a9.restSpeed, restSpeed = _d3 === void 0 ? 2 : _d3, restDelta = _a9.restDelta, options2 = __rest(_a9, ["from", "to", "restSpeed", "restDelta"]);
  var state2 = { done: false, value: from2 };
  var _e3 = getSpringOptions2(options2), stiffness = _e3.stiffness, damping = _e3.damping, mass = _e3.mass, velocity = _e3.velocity, duration = _e3.duration, isResolvedFromDuration = _e3.isResolvedFromDuration;
  var resolveSpring = zero;
  var resolveVelocity = zero;
  function createSpring() {
    var initialVelocity = velocity ? -(velocity / 1e3) : 0;
    var initialDelta = to - from2;
    var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
    restDelta !== null && restDelta !== void 0 ? restDelta : restDelta = Math.abs(to - from2) <= 1 ? 0.01 : 0.4;
    if (dampingRatio < 1) {
      var angularFreq_1 = calcAngularFreq2(undampedAngularFreq, dampingRatio);
      resolveSpring = function(t3) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t3);
        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 * Math.sin(angularFreq_1 * t3) + initialDelta * Math.cos(angularFreq_1 * t3));
      };
      resolveVelocity = function(t3) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t3);
        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq_1 * t3) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 + initialDelta * Math.cos(angularFreq_1 * t3)) - envelope * (Math.cos(angularFreq_1 * t3) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq_1 * initialDelta * Math.sin(angularFreq_1 * t3));
      };
    } else if (dampingRatio === 1) {
      resolveSpring = function(t3) {
        return to - Math.exp(-undampedAngularFreq * t3) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t3);
      };
    } else {
      var dampedAngularFreq_1 = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
      resolveSpring = function(t3) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t3);
        var freqForT = Math.min(dampedAngularFreq_1 * t3, 300);
        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq_1 * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq_1;
      };
    }
  }
  createSpring();
  return {
    next: function(t3) {
      var current = resolveSpring(t3);
      if (!isResolvedFromDuration) {
        var currentVelocity = resolveVelocity(t3) * 1e3;
        var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        var isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;
        state2.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state2.done = t3 >= duration;
      }
      state2.value = state2.done ? to : current;
      return state2;
    },
    flipTarget: function() {
      var _a10;
      velocity = -velocity;
      _a10 = [to, from2], from2 = _a10[0], to = _a10[1];
      createSpring();
    }
  };
}
spring2.needsInterpolation = function(a2, b2) {
  return typeof a2 === "string" || typeof b2 === "string";
};
var zero = function(_t) {
  return 0;
};

// node_modules/popmotion/dist/es/utils/progress.js
var progress3 = function(from2, to, value) {
  var toFromDifference = to - from2;
  return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
};

// node_modules/popmotion/dist/es/utils/mix.js
var mix3 = function(from2, to, progress4) {
  return -progress4 * from2 + progress4 * to + from2;
};

// node_modules/popmotion/dist/es/utils/mix-color.js
var mixLinearColor2 = function(from2, to, v) {
  var fromExpo = from2 * from2;
  var toExpo = to * to;
  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
};
var colorTypes2 = [hex2, rgba3, hsla3];
var getColorType2 = function(v) {
  return colorTypes2.find(function(type) {
    return type.test(v);
  });
};
var notAnimatable = function(color5) {
  return "'" + color5 + "' is not an animatable color. Use the equivalent color code instead.";
};
var mixColor2 = function(from2, to) {
  var fromColorType = getColorType2(from2);
  var toColorType = getColorType2(to);
  invariant3(!!fromColorType, notAnimatable(from2));
  invariant3(!!toColorType, notAnimatable(to));
  invariant3(fromColorType.transform === toColorType.transform, "Both colors must be hex/RGBA, OR both must be HSLA.");
  var fromColor = fromColorType.parse(from2);
  var toColor = toColorType.parse(to);
  var blended = __assign({}, fromColor);
  var mixFunc = fromColorType === hsla3 ? mix3 : mixLinearColor2;
  return function(v) {
    for (var key2 in blended) {
      if (key2 !== "alpha") {
        blended[key2] = mixFunc(fromColor[key2], toColor[key2], v);
      }
    }
    blended.alpha = mix3(fromColor.alpha, toColor.alpha, v);
    return fromColorType.transform(blended);
  };
};

// node_modules/popmotion/dist/es/utils/inc.js
var isNum = function(v) {
  return typeof v === "number";
};

// node_modules/popmotion/dist/es/utils/pipe.js
var combineFunctions2 = function(a2, b2) {
  return function(v) {
    return b2(a2(v));
  };
};
var pipe6 = function() {
  var transformers = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    transformers[_i] = arguments[_i];
  }
  return transformers.reduce(combineFunctions2);
};

// node_modules/popmotion/dist/es/utils/mix-complex.js
function getMixer3(origin, target) {
  if (isNum(origin)) {
    return function(v) {
      return mix3(origin, target, v);
    };
  } else if (color4.test(origin)) {
    return mixColor2(origin, target);
  } else {
    return mixComplex2(origin, target);
  }
}
var mixArray2 = function(from2, to) {
  var output = __spreadArray([], from2);
  var numValues = output.length;
  var blendValue = from2.map(function(fromThis, i2) {
    return getMixer3(fromThis, to[i2]);
  });
  return function(v) {
    for (var i2 = 0; i2 < numValues; i2++) {
      output[i2] = blendValue[i2](v);
    }
    return output;
  };
};
var mixObject2 = function(origin, target) {
  var output = __assign(__assign({}, origin), target);
  var blendValue = {};
  for (var key2 in output) {
    if (origin[key2] !== void 0 && target[key2] !== void 0) {
      blendValue[key2] = getMixer3(origin[key2], target[key2]);
    }
  }
  return function(v) {
    for (var key3 in blendValue) {
      output[key3] = blendValue[key3](v);
    }
    return output;
  };
};
function analyse2(value) {
  var parsed = complex2.parse(value);
  var numValues = parsed.length;
  var numNumbers = 0;
  var numRGB = 0;
  var numHSL = 0;
  for (var i2 = 0; i2 < numValues; i2++) {
    if (numNumbers || typeof parsed[i2] === "number") {
      numNumbers++;
    } else {
      if (parsed[i2].hue !== void 0) {
        numHSL++;
      } else {
        numRGB++;
      }
    }
  }
  return { parsed, numNumbers, numRGB, numHSL };
}
var mixComplex2 = function(origin, target) {
  var template = complex2.createTransformer(target);
  var originStats = analyse2(origin);
  var targetStats = analyse2(target);
  invariant3(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, "Complex values '" + origin + "' and '" + target + "' too different to mix. Ensure all colors are of the same type.");
  return pipe6(mixArray2(originStats.parsed, targetStats.parsed), template);
};

// node_modules/popmotion/dist/es/utils/interpolate.js
var mixNumber3 = function(from2, to) {
  return function(p) {
    return mix3(from2, to, p);
  };
};
function detectMixerFactory(v) {
  if (typeof v === "number") {
    return mixNumber3;
  } else if (typeof v === "string") {
    if (color4.test(v)) {
      return mixColor2;
    } else {
      return mixComplex2;
    }
  } else if (Array.isArray(v)) {
    return mixArray2;
  } else if (typeof v === "object") {
    return mixObject2;
  }
}
function createMixers2(output, ease2, customMixer) {
  var mixers = [];
  var mixerFactory = customMixer || detectMixerFactory(output[0]);
  var numMixers = output.length - 1;
  for (var i2 = 0; i2 < numMixers; i2++) {
    var mixer = mixerFactory(output[i2], output[i2 + 1]);
    if (ease2) {
      var easingFunction = Array.isArray(ease2) ? ease2[i2] : ease2;
      mixer = pipe6(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function fastInterpolate(_a9, _b5) {
  var from2 = _a9[0], to = _a9[1];
  var mixer = _b5[0];
  return function(v) {
    return mixer(progress3(from2, to, v));
  };
}
function slowInterpolate(input, mixers) {
  var inputLength = input.length;
  var lastInputIndex = inputLength - 1;
  return function(v) {
    var mixerIndex = 0;
    var foundMixerIndex = false;
    if (v <= input[0]) {
      foundMixerIndex = true;
    } else if (v >= input[lastInputIndex]) {
      mixerIndex = lastInputIndex - 1;
      foundMixerIndex = true;
    }
    if (!foundMixerIndex) {
      var i2 = 1;
      for (; i2 < inputLength; i2++) {
        if (input[i2] > v || i2 === lastInputIndex) {
          break;
        }
      }
      mixerIndex = i2 - 1;
    }
    var progressInRange = progress3(input[mixerIndex], input[mixerIndex + 1], v);
    return mixers[mixerIndex](progressInRange);
  };
}
function interpolate2(input, output, _a9) {
  var _b5 = _a9 === void 0 ? {} : _a9, _c3 = _b5.clamp, isClamp = _c3 === void 0 ? true : _c3, ease2 = _b5.ease, mixer = _b5.mixer;
  var inputLength = input.length;
  invariant3(inputLength === output.length, "Both input and output ranges must be the same length");
  invariant3(!ease2 || !Array.isArray(ease2) || ease2.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
  if (input[0] > input[inputLength - 1]) {
    input = [].concat(input);
    output = [].concat(output);
    input.reverse();
    output.reverse();
  }
  var mixers = createMixers2(output, ease2, mixer);
  var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
  return isClamp ? function(v) {
    return interpolator(clamp5(input[0], input[inputLength - 1], v));
  } : interpolator;
}

// node_modules/popmotion/dist/es/easing/utils.js
var reverseEasing2 = function(easing) {
  return function(p) {
    return 1 - easing(1 - p);
  };
};
var mirrorEasing2 = function(easing) {
  return function(p) {
    return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
  };
};
var createExpoIn = function(power) {
  return function(p) {
    return Math.pow(p, power);
  };
};
var createBackIn = function(power) {
  return function(p) {
    return p * p * ((power + 1) * p - power);
  };
};
var createAnticipate = function(power) {
  var backEasing = createBackIn(power);
  return function(p) {
    return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
  };
};

// node_modules/popmotion/dist/es/easing/index.js
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
var BOUNCE_FIRST_THRESHOLD = 4 / 11;
var BOUNCE_SECOND_THRESHOLD = 8 / 11;
var BOUNCE_THIRD_THRESHOLD = 9 / 10;
var linear = function(p) {
  return p;
};
var easeIn2 = createExpoIn(2);
var easeOut2 = reverseEasing2(easeIn2);
var easeInOut2 = mirrorEasing2(easeIn2);
var circIn2 = function(p) {
  return 1 - Math.sin(Math.acos(p));
};
var circOut2 = reverseEasing2(circIn2);
var circInOut2 = mirrorEasing2(circOut2);
var backIn2 = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
var backOut2 = reverseEasing2(backIn2);
var backInOut2 = mirrorEasing2(backIn2);
var anticipate2 = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
var ca = 4356 / 361;
var cb = 35442 / 1805;
var cc = 16061 / 1805;
var bounceOut = function(p) {
  if (p === 1 || p === 0)
    return p;
  var p2 = p * p;
  return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
};
var bounceIn = reverseEasing2(bounceOut);
var bounceInOut = function(p) {
  return p < 0.5 ? 0.5 * (1 - bounceOut(1 - p * 2)) : 0.5 * bounceOut(p * 2 - 1) + 0.5;
};

// node_modules/popmotion/dist/es/animations/generators/keyframes.js
function defaultEasing2(values2, easing) {
  return values2.map(function() {
    return easing || easeInOut2;
  }).splice(0, values2.length - 1);
}
function defaultOffset2(values2) {
  var numValues = values2.length;
  return values2.map(function(_value, i2) {
    return i2 !== 0 ? i2 / (numValues - 1) : 0;
  });
}
function convertOffsetToTimes2(offset3, duration) {
  return offset3.map(function(o2) {
    return o2 * duration;
  });
}
function keyframes4(_a9) {
  var _b5 = _a9.from, from2 = _b5 === void 0 ? 0 : _b5, _c3 = _a9.to, to = _c3 === void 0 ? 1 : _c3, ease2 = _a9.ease, offset3 = _a9.offset, _d3 = _a9.duration, duration = _d3 === void 0 ? 300 : _d3;
  var state2 = { done: false, value: from2 };
  var values2 = Array.isArray(to) ? to : [from2, to];
  var times2 = convertOffsetToTimes2(offset3 && offset3.length === values2.length ? offset3 : defaultOffset2(values2), duration);
  function createInterpolator() {
    return interpolate2(times2, values2, {
      ease: Array.isArray(ease2) ? ease2 : defaultEasing2(values2, ease2)
    });
  }
  var interpolator = createInterpolator();
  return {
    next: function(t3) {
      state2.value = interpolator(t3);
      state2.done = t3 >= duration;
      return state2;
    },
    flipTarget: function() {
      values2.reverse();
      interpolator = createInterpolator();
    }
  };
}

// node_modules/popmotion/dist/es/animations/generators/decay.js
function decay(_a9) {
  var _b5 = _a9.velocity, velocity = _b5 === void 0 ? 0 : _b5, _c3 = _a9.from, from2 = _c3 === void 0 ? 0 : _c3, _d3 = _a9.power, power = _d3 === void 0 ? 0.8 : _d3, _e3 = _a9.timeConstant, timeConstant = _e3 === void 0 ? 350 : _e3, _f3 = _a9.restDelta, restDelta = _f3 === void 0 ? 0.5 : _f3, modifyTarget = _a9.modifyTarget;
  var state2 = { done: false, value: from2 };
  var amplitude = power * velocity;
  var ideal = from2 + amplitude;
  var target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - from2;
  return {
    next: function(t3) {
      var delta2 = -amplitude * Math.exp(-t3 / timeConstant);
      state2.done = !(delta2 > restDelta || delta2 < -restDelta);
      state2.value = state2.done ? target : target + delta2;
      return state2;
    },
    flipTarget: function() {
    }
  };
}

// node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.js
var types2 = { keyframes: keyframes4, spring: spring2, decay };
function detectAnimationFromOptions(config2) {
  if (Array.isArray(config2.to)) {
    return keyframes4;
  } else if (types2[config2.type]) {
    return types2[config2.type];
  }
  var keys3 = new Set(Object.keys(config2));
  if (keys3.has("ease") || keys3.has("duration") && !keys3.has("dampingRatio")) {
    return keyframes4;
  } else if (keys3.has("dampingRatio") || keys3.has("stiffness") || keys3.has("mass") || keys3.has("damping") || keys3.has("restSpeed") || keys3.has("restDelta")) {
    return spring2;
  }
  return keyframes4;
}

// node_modules/popmotion/node_modules/framesync/dist/es/on-next-frame.js
var defaultTimestep2 = 1 / 60 * 1e3;
var getCurrentTime2 = typeof performance !== "undefined" ? function() {
  return performance.now();
} : function() {
  return Date.now();
};
var onNextFrame2 = typeof window !== "undefined" ? function(callback) {
  return window.requestAnimationFrame(callback);
} : function(callback) {
  return setTimeout(function() {
    return callback(getCurrentTime2());
  }, defaultTimestep2);
};

// node_modules/popmotion/node_modules/framesync/dist/es/create-render-step.js
function createRenderStep3(runNextFrame4) {
  var toRun = [];
  var toRunNextFrame = [];
  var numToRun = 0;
  var isProcessing4 = false;
  var toKeepAlive = /* @__PURE__ */ new WeakSet();
  var step = {
    schedule: function(callback, keepAlive, immediate) {
      if (keepAlive === void 0) {
        keepAlive = false;
      }
      if (immediate === void 0) {
        immediate = false;
      }
      var addToCurrentFrame = immediate && isProcessing4;
      var buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing4)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: function(callback) {
      var index5 = toRunNextFrame.indexOf(callback);
      if (index5 !== -1)
        toRunNextFrame.splice(index5, 1);
      toKeepAlive.delete(callback);
    },
    process: function(frameData2) {
      var _a9;
      isProcessing4 = true;
      _a9 = [toRunNextFrame, toRun], toRun = _a9[0], toRunNextFrame = _a9[1];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (var i2 = 0; i2 < numToRun; i2++) {
          var callback = toRun[i2];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame4();
          }
        }
      }
      isProcessing4 = false;
    }
  };
  return step;
}

// node_modules/popmotion/node_modules/framesync/dist/es/index.js
var maxElapsed3 = 40;
var useDefaultElapsed2 = true;
var runNextFrame2 = false;
var isProcessing2 = false;
var frame3 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder3 = ["read", "update", "preRender", "render", "postRender"];
var steps3 = stepsOrder3.reduce(function(acc, key2) {
  acc[key2] = createRenderStep3(function() {
    return runNextFrame2 = true;
  });
  return acc;
}, {});
var sync3 = stepsOrder3.reduce(function(acc, key2) {
  var step = steps3[key2];
  acc[key2] = function(process2, keepAlive, immediate) {
    if (keepAlive === void 0) {
      keepAlive = false;
    }
    if (immediate === void 0) {
      immediate = false;
    }
    if (!runNextFrame2)
      startLoop2();
    return step.schedule(process2, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync3 = stepsOrder3.reduce(function(acc, key2) {
  acc[key2] = steps3[key2].cancel;
  return acc;
}, {});
var flushSync2 = stepsOrder3.reduce(function(acc, key2) {
  acc[key2] = function() {
    return steps3[key2].process(frame3);
  };
  return acc;
}, {});
var processStep2 = function(stepId) {
  return steps3[stepId].process(frame3);
};
var processFrame2 = function(timestamp) {
  runNextFrame2 = false;
  frame3.delta = useDefaultElapsed2 ? defaultTimestep2 : Math.max(Math.min(timestamp - frame3.timestamp, maxElapsed3), 1);
  frame3.timestamp = timestamp;
  isProcessing2 = true;
  stepsOrder3.forEach(processStep2);
  isProcessing2 = false;
  if (runNextFrame2) {
    useDefaultElapsed2 = false;
    onNextFrame2(processFrame2);
  }
};
var startLoop2 = function() {
  runNextFrame2 = true;
  useDefaultElapsed2 = true;
  if (!isProcessing2)
    onNextFrame2(processFrame2);
};
var getFrameData2 = function() {
  return frame3;
};
var es_default2 = sync3;

// node_modules/popmotion/dist/es/animations/utils/elapsed.js
function loopElapsed(elapsed, duration, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return elapsed - duration - delay2;
}
function reverseElapsed(elapsed, duration, delay2, isForwardPlayback) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (isForwardPlayback === void 0) {
    isForwardPlayback = true;
  }
  return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay2) : duration - (elapsed - duration) + delay2;
}
function hasRepeatDelayElapsed(elapsed, duration, delay2, isForwardPlayback) {
  return isForwardPlayback ? elapsed >= duration + delay2 : elapsed <= -delay2;
}

// node_modules/popmotion/dist/es/animations/index.js
var framesync = function(update) {
  var passTimestamp = function(_a9) {
    var delta2 = _a9.delta;
    return update(delta2);
  };
  return {
    start: function() {
      return es_default2.update(passTimestamp, true);
    },
    stop: function() {
      return cancelSync3.update(passTimestamp);
    }
  };
};
function animate2(_a9) {
  var _b5, _c3;
  var from2 = _a9.from, _d3 = _a9.autoplay, autoplay = _d3 === void 0 ? true : _d3, _e3 = _a9.driver, driver = _e3 === void 0 ? framesync : _e3, _f3 = _a9.elapsed, elapsed = _f3 === void 0 ? 0 : _f3, _g3 = _a9.repeat, repeatMax = _g3 === void 0 ? 0 : _g3, _h3 = _a9.repeatType, repeatType = _h3 === void 0 ? "loop" : _h3, _j = _a9.repeatDelay, repeatDelay = _j === void 0 ? 0 : _j, onPlay = _a9.onPlay, onStop = _a9.onStop, onComplete = _a9.onComplete, onRepeat = _a9.onRepeat, onUpdate = _a9.onUpdate, options2 = __rest(_a9, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
  var to = options2.to;
  var driverControls;
  var repeatCount = 0;
  var computedDuration = options2.duration;
  var latest;
  var isComplete = false;
  var isForwardPlayback = true;
  var interpolateFromNumber;
  var animator = detectAnimationFromOptions(options2);
  if ((_c3 = (_b5 = animator).needsInterpolation) === null || _c3 === void 0 ? void 0 : _c3.call(_b5, from2, to)) {
    interpolateFromNumber = interpolate2([0, 100], [from2, to], {
      clamp: false
    });
    from2 = 0;
    to = 100;
  }
  var animation = animator(__assign(__assign({}, options2), { from: from2, to }));
  function repeat2() {
    repeatCount++;
    if (repeatType === "reverse") {
      isForwardPlayback = repeatCount % 2 === 0;
      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
    } else {
      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
      if (repeatType === "mirror")
        animation.flipTarget();
    }
    isComplete = false;
    onRepeat && onRepeat();
  }
  function complete() {
    driverControls.stop();
    onComplete && onComplete();
  }
  function update(delta2) {
    if (!isForwardPlayback)
      delta2 = -delta2;
    elapsed += delta2;
    if (!isComplete) {
      var state2 = animation.next(Math.max(0, elapsed));
      latest = state2.value;
      if (interpolateFromNumber)
        latest = interpolateFromNumber(latest);
      isComplete = isForwardPlayback ? state2.done : elapsed <= 0;
    }
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
    if (isComplete) {
      if (repeatCount === 0)
        computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
      if (repeatCount < repeatMax) {
        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat2();
      } else {
        complete();
      }
    }
  }
  function play() {
    onPlay === null || onPlay === void 0 ? void 0 : onPlay();
    driverControls = driver(update);
    driverControls.start();
  }
  autoplay && play();
  return {
    stop: function() {
      onStop === null || onStop === void 0 ? void 0 : onStop();
      driverControls.stop();
    }
  };
}

// node_modules/popmotion/dist/es/utils/velocity-per-second.js
function velocityPerSecond2(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/popmotion/dist/es/animations/inertia.js
function inertia2(_a9) {
  var _b5 = _a9.from, from2 = _b5 === void 0 ? 0 : _b5, _c3 = _a9.velocity, velocity = _c3 === void 0 ? 0 : _c3, min3 = _a9.min, max3 = _a9.max, _d3 = _a9.power, power = _d3 === void 0 ? 0.8 : _d3, _e3 = _a9.timeConstant, timeConstant = _e3 === void 0 ? 750 : _e3, _f3 = _a9.bounceStiffness, bounceStiffness = _f3 === void 0 ? 500 : _f3, _g3 = _a9.bounceDamping, bounceDamping = _g3 === void 0 ? 10 : _g3, _h3 = _a9.restDelta, restDelta = _h3 === void 0 ? 1 : _h3, modifyTarget = _a9.modifyTarget, driver = _a9.driver, onUpdate = _a9.onUpdate, onComplete = _a9.onComplete;
  var currentAnimation;
  function isOutOfBounds(v) {
    return min3 !== void 0 && v < min3 || max3 !== void 0 && v > max3;
  }
  function boundaryNearest(v) {
    if (min3 === void 0)
      return max3;
    if (max3 === void 0)
      return min3;
    return Math.abs(min3 - v) < Math.abs(max3 - v) ? min3 : max3;
  }
  function startAnimation2(options2) {
    currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
    currentAnimation = animate2(__assign(__assign({}, options2), { driver, onUpdate: function(v) {
      var _a10;
      onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
      (_a10 = options2.onUpdate) === null || _a10 === void 0 ? void 0 : _a10.call(options2, v);
    }, onComplete }));
  }
  function startSpring(options2) {
    startAnimation2(__assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options2));
  }
  if (isOutOfBounds(from2)) {
    startSpring({ from: from2, velocity, to: boundaryNearest(from2) });
  } else {
    var target = power * velocity + from2;
    if (typeof modifyTarget !== "undefined")
      target = modifyTarget(target);
    var boundary_1 = boundaryNearest(target);
    var heading_1 = boundary_1 === min3 ? -1 : 1;
    var prev_1;
    var current_1;
    var checkBoundary = function(v) {
      prev_1 = current_1;
      current_1 = v;
      velocity = velocityPerSecond2(v - prev_1, getFrameData2().delta);
      if (heading_1 === 1 && v > boundary_1 || heading_1 === -1 && v < boundary_1) {
        startSpring({ from: v, to: boundary_1, velocity });
      }
    };
    startAnimation2({
      type: "decay",
      from: from2,
      velocity,
      timeConstant,
      power,
      restDelta,
      modifyTarget,
      onUpdate: isOutOfBounds(target) ? checkBoundary : void 0
    });
  }
  return {
    stop: function() {
      return currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
    }
  };
}

// node_modules/popmotion/dist/es/utils/attract.js
var identity = function(v) {
  return v;
};
var createAttractor = function(alterDisplacement) {
  if (alterDisplacement === void 0) {
    alterDisplacement = identity;
  }
  return function(constant, origin, v) {
    var displacement = origin - v;
    var springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));
    return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
  };
};
var attract = createAttractor();
var attractExpo = createAttractor(Math.sqrt);

// node_modules/popmotion/dist/es/utils/is-point.js
var isPoint2 = function(point) {
  return point.hasOwnProperty("x") && point.hasOwnProperty("y");
};

// node_modules/popmotion/dist/es/utils/is-point-3d.js
var isPoint3D = function(point) {
  return isPoint2(point) && point.hasOwnProperty("z");
};

// node_modules/popmotion/dist/es/utils/distance.js
var distance1D2 = function(a2, b2) {
  return Math.abs(a2 - b2);
};
function distance4(a2, b2) {
  if (isNum(a2) && isNum(b2)) {
    return distance1D2(a2, b2);
  } else if (isPoint2(a2) && isPoint2(b2)) {
    var xDelta = distance1D2(a2.x, b2.x);
    var yDelta = distance1D2(a2.y, b2.y);
    var zDelta = isPoint3D(a2) && isPoint3D(b2) ? distance1D2(a2.z, b2.z) : 0;
    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
  }
}

// node_modules/popmotion/dist/es/easing/cubic-bezier.js
var a = function(a1, a2) {
  return 1 - 3 * a2 + 3 * a1;
};
var b = function(a1, a2) {
  return 3 * a2 - 6 * a1;
};
var c = function(a1) {
  return 3 * a1;
};
var calcBezier2 = function(t3, a1, a2) {
  return ((a(a1, a2) * t3 + b(a1, a2)) * t3 + c(a1)) * t3;
};
var getSlope = function(t3, a1, a2) {
  return 3 * a(a1, a2) * t3 * t3 + 2 * b(a1, a2) * t3 + c(a1);
};
var subdivisionPrecision2 = 1e-7;
var subdivisionMaxIterations2 = 10;
function binarySubdivide2(aX, aA, aB, mX1, mX2) {
  var currentX;
  var currentT;
  var i2 = 0;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier2(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision2 && ++i2 < subdivisionMaxIterations2);
  return currentT;
}
var newtonIterations = 8;
var newtonMinSlope = 1e-3;
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i2 = 0; i2 < newtonIterations; ++i2) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    var currentX = calcBezier2(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
var kSplineTableSize = 11;
var kSampleStepSize = 1 / (kSplineTableSize - 1);
function cubicBezier2(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return linear;
  var sampleValues = new Float32Array(kSplineTableSize);
  for (var i2 = 0; i2 < kSplineTableSize; ++i2) {
    sampleValues[i2] = calcBezier2(i2 * kSampleStepSize, mX1, mX2);
  }
  function getTForX(aX) {
    var intervalStart = 0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= newtonMinSlope) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide2(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return function(t3) {
    return t3 === 0 || t3 === 1 ? t3 : calcBezier2(getTForX(t3), mY1, mY2);
  };
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js
function useTapGesture(_a9) {
  var onTap = _a9.onTap, onTapStart = _a9.onTapStart, onTapCancel = _a9.onTapCancel, whileTap = _a9.whileTap, visualElement2 = _a9.visualElement;
  var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;
  var isPressing = (0, import_react263.useRef)(false);
  var cancelPointerEndListeners = (0, import_react263.useRef)(null);
  function removePointerEndListener() {
    var _a10;
    (_a10 = cancelPointerEndListeners.current) === null || _a10 === void 0 ? void 0 : _a10.call(cancelPointerEndListeners);
    cancelPointerEndListeners.current = null;
  }
  function checkPointerEnd() {
    var _a10;
    removePointerEndListener();
    isPressing.current = false;
    (_a10 = visualElement2.animationState) === null || _a10 === void 0 ? void 0 : _a10.setActive(AnimationType.Tap, false);
    return !isDragActive2();
  }
  function onPointerUp(event, info) {
    if (!checkPointerEnd())
      return;
    !isNodeOrChild2(visualElement2.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);
  }
  function onPointerCancel(event, info) {
    if (!checkPointerEnd())
      return;
    onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);
  }
  function onPointerDown(event, info) {
    var _a10;
    removePointerEndListener();
    if (isPressing.current)
      return;
    isPressing.current = true;
    cancelPointerEndListeners.current = pipe6(addPointerEvent4(window, "pointerup", onPointerUp), addPointerEvent4(window, "pointercancel", onPointerCancel));
    onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);
    (_a10 = visualElement2.animationState) === null || _a10 === void 0 ? void 0 : _a10.setActive(AnimationType.Tap, true);
  }
  usePointerEvent2(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0);
  useUnmountEffect3(removePointerEndListener);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js
var makeRenderlessComponent = function(hook) {
  return function(props) {
    hook(props);
    return null;
  };
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/gestures.js
var gestureAnimations2 = {
  tap: makeRenderlessComponent(useTapGesture),
  focus: makeRenderlessComponent(useFocusGesture),
  hover: makeRenderlessComponent(useHoverGesture)
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/animations.js
var import_react264 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/shallow-compare.js
function shallowCompare2(next2, prev2) {
  if (!Array.isArray(prev2))
    return false;
  var prevLength = prev2.length;
  if (prevLength !== next2.length)
    return false;
  for (var i2 = 0; i2 < prevLength; i2++) {
    if (prev2[i2] !== next2[i2])
      return false;
  }
  return true;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/time-conversion.js
var secondsToMilliseconds2 = function(seconds) {
  return seconds * 1e3;
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/utils/easing.js
var easingLookup2 = {
  linear,
  easeIn: easeIn2,
  easeInOut: easeInOut2,
  easeOut: easeOut2,
  circIn: circIn2,
  circInOut: circInOut2,
  circOut: circOut2,
  backIn: backIn2,
  backInOut: backInOut2,
  backOut: backOut2,
  anticipate: anticipate2,
  bounceIn,
  bounceInOut,
  bounceOut
};
var easingDefinitionToFunction2 = function(definition) {
  if (Array.isArray(definition)) {
    invariant3(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
    var _a9 = __read(definition, 4), x1 = _a9[0], y1 = _a9[1], x2 = _a9[2], y2 = _a9[3];
    return cubicBezier2(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    invariant3(easingLookup2[definition] !== void 0, "Invalid easing type '" + definition + "'");
    return easingLookup2[definition];
  }
  return definition;
};
var isEasingArray2 = function(ease2) {
  return Array.isArray(ease2) && typeof ease2[0] !== "number";
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/utils/is-animatable.js
var isAnimatable2 = function(key2, value) {
  if (key2 === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && // It's animatable if we have a string
  complex2.test(value) && // And it contains numbers and/or colors
  !value.startsWith("url(")) {
    return true;
  }
  return false;
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/utils/default-transitions.js
var underDampedSpring2 = function() {
  return {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restDelta: 0.5,
    restSpeed: 10
  };
};
var criticallyDampedSpring2 = function(to) {
  return {
    type: "spring",
    stiffness: 550,
    damping: to === 0 ? 2 * Math.sqrt(550) : 30,
    restDelta: 0.01,
    restSpeed: 10
  };
};
var linearTween = function() {
  return {
    type: "keyframes",
    ease: "linear",
    duration: 0.3
  };
};
var keyframes5 = function(values2) {
  return {
    type: "keyframes",
    duration: 0.8,
    values: values2
  };
};
var defaultTransitions2 = {
  x: underDampedSpring2,
  y: underDampedSpring2,
  z: underDampedSpring2,
  rotate: underDampedSpring2,
  rotateX: underDampedSpring2,
  rotateY: underDampedSpring2,
  rotateZ: underDampedSpring2,
  scaleX: criticallyDampedSpring2,
  scaleY: criticallyDampedSpring2,
  scale: criticallyDampedSpring2,
  opacity: linearTween,
  backgroundColor: linearTween,
  color: linearTween,
  default: criticallyDampedSpring2
};
var getDefaultTransition2 = function(valueKey, to) {
  var transitionFactory;
  if (isKeyframesTarget2(to)) {
    transitionFactory = keyframes5;
  } else {
    transitionFactory = defaultTransitions2[valueKey] || defaultTransitions2.default;
  }
  return __assign({ to }, transitionFactory(to));
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.js
var defaultValueTypes2 = __assign(__assign({}, numberValueTypes2), {
  // Color props
  color: color4,
  backgroundColor: color4,
  outlineColor: color4,
  fill: color4,
  stroke: color4,
  // Border props
  borderColor: color4,
  borderTopColor: color4,
  borderRightColor: color4,
  borderBottomColor: color4,
  borderLeftColor: color4,
  filter: filter4,
  WebkitFilter: filter4
});
var getDefaultValueType2 = function(key2) {
  return defaultValueTypes2[key2];
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.js
function getAnimatableNone4(key2, value) {
  var _a9;
  var defaultValueType = getDefaultValueType2(key2);
  if (defaultValueType !== filter4)
    defaultValueType = complex2;
  return (_a9 = defaultValueType.getAnimatableNone) === null || _a9 === void 0 ? void 0 : _a9.call(defaultValueType, value);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/utils/transitions.js
function isTransitionDefined2(_a9) {
  _a9.when;
  _a9.delay;
  _a9.delayChildren;
  _a9.staggerChildren;
  _a9.staggerDirection;
  _a9.repeat;
  _a9.repeatType;
  _a9.repeatDelay;
  _a9.from;
  var transition3 = __rest(_a9, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
  return !!Object.keys(transition3).length;
}
var legacyRepeatWarning = false;
function convertTransitionToAnimationOptions(_a9) {
  var ease2 = _a9.ease, times2 = _a9.times, yoyo = _a9.yoyo, flip3 = _a9.flip, loop = _a9.loop, transition3 = __rest(_a9, ["ease", "times", "yoyo", "flip", "loop"]);
  var options2 = __assign({}, transition3);
  if (times2)
    options2["offset"] = times2;
  if (transition3.duration)
    options2["duration"] = secondsToMilliseconds2(transition3.duration);
  if (transition3.repeatDelay)
    options2.repeatDelay = secondsToMilliseconds2(transition3.repeatDelay);
  if (ease2) {
    options2["ease"] = isEasingArray2(ease2) ? ease2.map(easingDefinitionToFunction2) : easingDefinitionToFunction2(ease2);
  }
  if (transition3.type === "tween")
    options2.type = "keyframes";
  if (yoyo || loop || flip3) {
    warning3(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
    legacyRepeatWarning = true;
    if (yoyo) {
      options2.repeatType = "reverse";
    } else if (loop) {
      options2.repeatType = "loop";
    } else if (flip3) {
      options2.repeatType = "mirror";
    }
    options2.repeat = loop || yoyo || flip3 || transition3.repeat;
  }
  if (transition3.type !== "spring")
    options2.type = "keyframes";
  return options2;
}
function getDelayFromTransition(transition3, key2) {
  var _a9;
  var valueTransition = getValueTransition3(transition3, key2) || {};
  return (_a9 = valueTransition.delay) !== null && _a9 !== void 0 ? _a9 : 0;
}
function hydrateKeyframes(options2) {
  if (Array.isArray(options2.to) && options2.to[0] === null) {
    options2.to = __spreadArray([], __read(options2.to));
    options2.to[0] = options2.from;
  }
  return options2;
}
function getPopmotionAnimationOptions(transition3, options2, key2) {
  var _a9;
  if (Array.isArray(options2.to)) {
    (_a9 = transition3.duration) !== null && _a9 !== void 0 ? _a9 : transition3.duration = 0.8;
  }
  hydrateKeyframes(options2);
  if (!isTransitionDefined2(transition3)) {
    transition3 = __assign(__assign({}, transition3), getDefaultTransition2(key2, options2.to));
  }
  return __assign(__assign({}, options2), convertTransitionToAnimationOptions(transition3));
}
function getAnimation(key2, value, target, transition3, onComplete) {
  var _a9;
  var valueTransition = getValueTransition3(transition3, key2);
  var origin = (_a9 = valueTransition.from) !== null && _a9 !== void 0 ? _a9 : value.get();
  var isTargetAnimatable = isAnimatable2(key2, target);
  if (origin === "none" && isTargetAnimatable && typeof target === "string") {
    origin = getAnimatableNone4(key2, target);
  } else if (isZero(origin) && typeof target === "string") {
    origin = getZeroUnit(target);
  } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
    target = getZeroUnit(origin);
  }
  var isOriginAnimatable = isAnimatable2(key2, origin);
  warning3(isOriginAnimatable === isTargetAnimatable, "You are trying to animate " + key2 + ' from "' + origin + '" to "' + target + '". ' + origin + " is not an animatable value - to enable this animation set " + origin + " to a value animatable to " + target + " via the `style` property.");
  function start2() {
    var options2 = {
      from: origin,
      to: target,
      velocity: value.getVelocity(),
      onComplete,
      onUpdate: function(v) {
        return value.set(v);
      }
    };
    return valueTransition.type === "inertia" || valueTransition.type === "decay" ? inertia2(__assign(__assign({}, options2), valueTransition)) : animate2(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options2, key2)), { onUpdate: function(v) {
      var _a10;
      options2.onUpdate(v);
      (_a10 = valueTransition.onUpdate) === null || _a10 === void 0 ? void 0 : _a10.call(valueTransition, v);
    }, onComplete: function() {
      var _a10;
      options2.onComplete();
      (_a10 = valueTransition.onComplete) === null || _a10 === void 0 ? void 0 : _a10.call(valueTransition);
    } }));
  }
  function set2() {
    var _a10;
    value.set(target);
    onComplete();
    (_a10 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _a10 === void 0 ? void 0 : _a10.call(valueTransition);
    return { stop: function() {
    } };
  }
  return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set2 : start2;
}
function isZero(value) {
  return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
}
function getZeroUnit(potentialUnitType) {
  return typeof potentialUnitType === "number" ? 0 : getAnimatableNone4("", potentialUnitType);
}
function getValueTransition3(transition3, key2) {
  return transition3[key2] || transition3["default"] || transition3;
}
function startAnimation(key2, value, target, transition3) {
  if (transition3 === void 0) {
    transition3 = {};
  }
  return value.start(function(onComplete) {
    var delayTimer;
    var controls;
    var animation = getAnimation(key2, value, target, transition3, onComplete);
    var delay2 = getDelayFromTransition(transition3, key2);
    var start2 = function() {
      return controls = animation();
    };
    if (delay2) {
      delayTimer = setTimeout(start2, secondsToMilliseconds2(delay2));
    } else {
      start2();
    }
    return function() {
      clearTimeout(delayTimer);
      controls === null || controls === void 0 ? void 0 : controls.stop();
    };
  });
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/is-numerical-string.js
var isNumericalString2 = function(v) {
  return /^\-?\d*\.?\d+$/.test(v);
};

// node_modules/@northlight/ui/node_modules/framesync/dist/es/on-next-frame.js
var defaultTimestep3 = 1 / 60 * 1e3;
var getCurrentTime3 = typeof performance !== "undefined" ? function() {
  return performance.now();
} : function() {
  return Date.now();
};
var onNextFrame3 = typeof window !== "undefined" ? function(callback) {
  return window.requestAnimationFrame(callback);
} : function(callback) {
  return setTimeout(function() {
    return callback(getCurrentTime3());
  }, defaultTimestep3);
};

// node_modules/@northlight/ui/node_modules/framesync/dist/es/create-render-step.js
function createRenderStep4(runNextFrame4) {
  var toRun = [];
  var toRunNextFrame = [];
  var numToRun = 0;
  var isProcessing4 = false;
  var toKeepAlive = /* @__PURE__ */ new WeakSet();
  var step = {
    schedule: function(callback, keepAlive, immediate) {
      if (keepAlive === void 0) {
        keepAlive = false;
      }
      if (immediate === void 0) {
        immediate = false;
      }
      var addToCurrentFrame = immediate && isProcessing4;
      var buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing4)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: function(callback) {
      var index5 = toRunNextFrame.indexOf(callback);
      if (index5 !== -1)
        toRunNextFrame.splice(index5, 1);
      toKeepAlive.delete(callback);
    },
    process: function(frameData2) {
      var _a9;
      isProcessing4 = true;
      _a9 = [toRunNextFrame, toRun], toRun = _a9[0], toRunNextFrame = _a9[1];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (var i2 = 0; i2 < numToRun; i2++) {
          var callback = toRun[i2];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame4();
          }
        }
      }
      isProcessing4 = false;
    }
  };
  return step;
}

// node_modules/@northlight/ui/node_modules/framesync/dist/es/index.js
var maxElapsed4 = 40;
var useDefaultElapsed3 = true;
var runNextFrame3 = false;
var isProcessing3 = false;
var frame4 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder4 = ["read", "update", "preRender", "render", "postRender"];
var steps5 = stepsOrder4.reduce(function(acc, key2) {
  acc[key2] = createRenderStep4(function() {
    return runNextFrame3 = true;
  });
  return acc;
}, {});
var sync4 = stepsOrder4.reduce(function(acc, key2) {
  var step = steps5[key2];
  acc[key2] = function(process2, keepAlive, immediate) {
    if (keepAlive === void 0) {
      keepAlive = false;
    }
    if (immediate === void 0) {
      immediate = false;
    }
    if (!runNextFrame3)
      startLoop3();
    return step.schedule(process2, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync4 = stepsOrder4.reduce(function(acc, key2) {
  acc[key2] = steps5[key2].cancel;
  return acc;
}, {});
var flushSync3 = stepsOrder4.reduce(function(acc, key2) {
  acc[key2] = function() {
    return steps5[key2].process(frame4);
  };
  return acc;
}, {});
var processStep3 = function(stepId) {
  return steps5[stepId].process(frame4);
};
var processFrame3 = function(timestamp) {
  runNextFrame3 = false;
  frame4.delta = useDefaultElapsed3 ? defaultTimestep3 : Math.max(Math.min(timestamp - frame4.timestamp, maxElapsed4), 1);
  frame4.timestamp = timestamp;
  isProcessing3 = true;
  stepsOrder4.forEach(processStep3);
  isProcessing3 = false;
  if (runNextFrame3) {
    useDefaultElapsed3 = false;
    onNextFrame3(processFrame3);
  }
};
var startLoop3 = function() {
  runNextFrame3 = true;
  useDefaultElapsed3 = true;
  if (!isProcessing3)
    onNextFrame3(processFrame3);
};
var getFrameData3 = function() {
  return frame4;
};
var es_default3 = sync4;

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/array.js
function addUniqueItem2(arr, item) {
  arr.indexOf(item) === -1 && arr.push(item);
}
function removeItem3(arr, item) {
  var index5 = arr.indexOf(item);
  index5 > -1 && arr.splice(index5, 1);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/subscription-manager.js
var SubscriptionManager2 = (
  /** @class */
  function() {
    function SubscriptionManager3() {
      this.subscriptions = [];
    }
    SubscriptionManager3.prototype.add = function(handler) {
      var _this = this;
      addUniqueItem2(this.subscriptions, handler);
      return function() {
        return removeItem3(_this.subscriptions, handler);
      };
    };
    SubscriptionManager3.prototype.notify = function(a2, b2, c2) {
      var numSubscriptions = this.subscriptions.length;
      if (!numSubscriptions)
        return;
      if (numSubscriptions === 1) {
        this.subscriptions[0](a2, b2, c2);
      } else {
        for (var i2 = 0; i2 < numSubscriptions; i2++) {
          var handler = this.subscriptions[i2];
          handler && handler(a2, b2, c2);
        }
      }
    };
    SubscriptionManager3.prototype.getSize = function() {
      return this.subscriptions.length;
    };
    SubscriptionManager3.prototype.clear = function() {
      this.subscriptions.length = 0;
    };
    return SubscriptionManager3;
  }()
);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/value/index.js
var isFloat2 = function(value) {
  return !isNaN(parseFloat(value));
};
var MotionValue2 = (
  /** @class */
  function() {
    function MotionValue3(init2) {
      var _this = this;
      this.timeDelta = 0;
      this.lastUpdated = 0;
      this.updateSubscribers = new SubscriptionManager2();
      this.velocityUpdateSubscribers = new SubscriptionManager2();
      this.renderSubscribers = new SubscriptionManager2();
      this.canTrackVelocity = false;
      this.updateAndNotify = function(v, render) {
        if (render === void 0) {
          render = true;
        }
        _this.prev = _this.current;
        _this.current = v;
        var _a9 = getFrameData3(), delta2 = _a9.delta, timestamp = _a9.timestamp;
        if (_this.lastUpdated !== timestamp) {
          _this.timeDelta = delta2;
          _this.lastUpdated = timestamp;
          es_default3.postRender(_this.scheduleVelocityCheck);
        }
        if (_this.prev !== _this.current) {
          _this.updateSubscribers.notify(_this.current);
        }
        if (_this.velocityUpdateSubscribers.getSize()) {
          _this.velocityUpdateSubscribers.notify(_this.getVelocity());
        }
        if (render) {
          _this.renderSubscribers.notify(_this.current);
        }
      };
      this.scheduleVelocityCheck = function() {
        return es_default3.postRender(_this.velocityCheck);
      };
      this.velocityCheck = function(_a9) {
        var timestamp = _a9.timestamp;
        if (timestamp !== _this.lastUpdated) {
          _this.prev = _this.current;
          _this.velocityUpdateSubscribers.notify(_this.getVelocity());
        }
      };
      this.hasAnimated = false;
      this.prev = this.current = init2;
      this.canTrackVelocity = isFloat2(this.current);
    }
    MotionValue3.prototype.onChange = function(subscription) {
      return this.updateSubscribers.add(subscription);
    };
    MotionValue3.prototype.clearListeners = function() {
      this.updateSubscribers.clear();
    };
    MotionValue3.prototype.onRenderRequest = function(subscription) {
      subscription(this.get());
      return this.renderSubscribers.add(subscription);
    };
    MotionValue3.prototype.attach = function(passiveEffect) {
      this.passiveEffect = passiveEffect;
    };
    MotionValue3.prototype.set = function(v, render) {
      if (render === void 0) {
        render = true;
      }
      if (!render || !this.passiveEffect) {
        this.updateAndNotify(v, render);
      } else {
        this.passiveEffect(v, this.updateAndNotify);
      }
    };
    MotionValue3.prototype.get = function() {
      return this.current;
    };
    MotionValue3.prototype.getPrevious = function() {
      return this.prev;
    };
    MotionValue3.prototype.getVelocity = function() {
      return this.canTrackVelocity ? (
        // These casts could be avoided if parseFloat would be typed better
        velocityPerSecond2(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta)
      ) : 0;
    };
    MotionValue3.prototype.start = function(animation) {
      var _this = this;
      this.stop();
      return new Promise(function(resolve) {
        _this.hasAnimated = true;
        _this.stopAnimation = animation(resolve);
      }).then(function() {
        return _this.clearAnimation();
      });
    };
    MotionValue3.prototype.stop = function() {
      if (this.stopAnimation)
        this.stopAnimation();
      this.clearAnimation();
    };
    MotionValue3.prototype.isAnimating = function() {
      return !!this.stopAnimation;
    };
    MotionValue3.prototype.clearAnimation = function() {
      this.stopAnimation = null;
    };
    MotionValue3.prototype.destroy = function() {
      this.updateSubscribers.clear();
      this.renderSubscribers.clear();
      this.stop();
    };
    return MotionValue3;
  }()
);
function motionValue2(init2) {
  return new MotionValue2(init2);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/test.js
var testValueType2 = function(v) {
  return function(type) {
    return type.test(v);
  };
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js
var auto3 = {
  test: function(v) {
    return v === "auto";
  },
  parse: function(v) {
    return v;
  }
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js
var dimensionValueTypes2 = [number2, px5, percent2, degrees2, vw2, vh2, auto3];
var findDimensionValueType2 = function(v) {
  return dimensionValueTypes2.find(testValueType2(v));
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/value-types/find.js
var valueTypes2 = __spreadArray(__spreadArray([], __read(dimensionValueTypes2)), [color4, complex2]);
var findValueType2 = function(v) {
  return valueTypes2.find(testValueType2(v));
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/setters.js
function setMotionValue2(visualElement2, key2, value) {
  if (visualElement2.hasValue(key2)) {
    visualElement2.getValue(key2).set(value);
  } else {
    visualElement2.addValue(key2, motionValue2(value));
  }
}
function setTarget2(visualElement2, definition) {
  var resolved = resolveVariant2(visualElement2, definition);
  var _a9 = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b5 = _a9.transitionEnd, transitionEnd = _b5 === void 0 ? {} : _b5;
  _a9.transition;
  var target = __rest(_a9, ["transitionEnd", "transition"]);
  target = __assign(__assign({}, target), transitionEnd);
  for (var key2 in target) {
    var value = resolveFinalValueInKeyframes2(target[key2]);
    setMotionValue2(visualElement2, key2, value);
  }
}
function checkTargetForNewValues2(visualElement2, target, origin) {
  var _a9, _b5, _c3;
  var _d3;
  var newValueKeys = Object.keys(target).filter(function(key3) {
    return !visualElement2.hasValue(key3);
  });
  var numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (var i2 = 0; i2 < numNewValues; i2++) {
    var key2 = newValueKeys[i2];
    var targetValue = target[key2];
    var value = null;
    if (Array.isArray(targetValue)) {
      value = targetValue[0];
    }
    if (value === null) {
      value = (_b5 = (_a9 = origin[key2]) !== null && _a9 !== void 0 ? _a9 : visualElement2.readValue(key2)) !== null && _b5 !== void 0 ? _b5 : target[key2];
    }
    if (value === void 0 || value === null)
      continue;
    if (typeof value === "string" && isNumericalString2(value)) {
      value = parseFloat(value);
    } else if (!findValueType2(value) && complex2.test(targetValue)) {
      value = getAnimatableNone4(key2, targetValue);
    }
    visualElement2.addValue(key2, motionValue2(value));
    (_c3 = (_d3 = origin)[key2]) !== null && _c3 !== void 0 ? _c3 : _d3[key2] = value;
    visualElement2.setBaseTarget(key2, value);
  }
}
function getOriginFromTransition2(key2, transition3) {
  if (!transition3)
    return;
  var valueTransition = transition3[key2] || transition3["default"] || transition3;
  return valueTransition.from;
}
function getOrigin2(target, transition3, visualElement2) {
  var _a9, _b5;
  var origin = {};
  for (var key2 in target) {
    origin[key2] = (_a9 = getOriginFromTransition2(key2, transition3)) !== null && _a9 !== void 0 ? _a9 : (_b5 = visualElement2.getValue(key2)) === null || _b5 === void 0 ? void 0 : _b5.get();
  }
  return origin;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/animation.js
function animateVisualElement2(visualElement2, definition, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  visualElement2.notifyAnimationStart();
  var animation;
  if (Array.isArray(definition)) {
    var animations3 = definition.map(function(variant) {
      return animateVariant2(visualElement2, variant, options2);
    });
    animation = Promise.all(animations3);
  } else if (typeof definition === "string") {
    animation = animateVariant2(visualElement2, definition, options2);
  } else {
    var resolvedDefinition = typeof definition === "function" ? resolveVariant2(visualElement2, definition, options2.custom) : definition;
    animation = animateTarget2(visualElement2, resolvedDefinition, options2);
  }
  return animation.then(function() {
    return visualElement2.notifyAnimationComplete(definition);
  });
}
function animateVariant2(visualElement2, variant, options2) {
  var _a9;
  if (options2 === void 0) {
    options2 = {};
  }
  var resolved = resolveVariant2(visualElement2, variant, options2.custom);
  var _b5 = (resolved || {}).transition, transition3 = _b5 === void 0 ? visualElement2.getDefaultTransition() || {} : _b5;
  if (options2.transitionOverride) {
    transition3 = options2.transitionOverride;
  }
  var getAnimation2 = resolved ? function() {
    return animateTarget2(visualElement2, resolved, options2);
  } : function() {
    return Promise.resolve();
  };
  var getChildAnimations = ((_a9 = visualElement2.variantChildren) === null || _a9 === void 0 ? void 0 : _a9.size) ? function(forwardDelay) {
    if (forwardDelay === void 0) {
      forwardDelay = 0;
    }
    var _a10 = transition3.delayChildren, delayChildren = _a10 === void 0 ? 0 : _a10, staggerChildren = transition3.staggerChildren, staggerDirection = transition3.staggerDirection;
    return animateChildren2(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options2);
  } : function() {
    return Promise.resolve();
  };
  var when = transition3.when;
  if (when) {
    var _c3 = __read(when === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first = _c3[0], last2 = _c3[1];
    return first().then(last2);
  } else {
    return Promise.all([getAnimation2(), getChildAnimations(options2.delay)]);
  }
}
function animateTarget2(visualElement2, definition, _a9) {
  var _b5;
  var _c3 = _a9 === void 0 ? {} : _a9, _d3 = _c3.delay, delay2 = _d3 === void 0 ? 0 : _d3, transitionOverride = _c3.transitionOverride, type = _c3.type;
  var _e3 = visualElement2.makeTargetAnimatable(definition), _f3 = _e3.transition, transition3 = _f3 === void 0 ? visualElement2.getDefaultTransition() : _f3, transitionEnd = _e3.transitionEnd, target = __rest(_e3, ["transition", "transitionEnd"]);
  if (transitionOverride)
    transition3 = transitionOverride;
  var animations3 = [];
  var animationTypeState = type && ((_b5 = visualElement2.animationState) === null || _b5 === void 0 ? void 0 : _b5.getState()[type]);
  for (var key2 in target) {
    var value = visualElement2.getValue(key2);
    var valueTarget = target[key2];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation2(animationTypeState, key2)) {
      continue;
    }
    var animation = startAnimation(key2, value, valueTarget, __assign({ delay: delay2 }, transition3));
    animations3.push(animation);
  }
  return Promise.all(animations3).then(function() {
    transitionEnd && setTarget2(visualElement2, transitionEnd);
  });
}
function animateChildren2(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options2) {
  if (delayChildren === void 0) {
    delayChildren = 0;
  }
  if (staggerChildren === void 0) {
    staggerChildren = 0;
  }
  if (staggerDirection === void 0) {
    staggerDirection = 1;
  }
  var animations3 = [];
  var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
  var generateStaggerDuration = staggerDirection === 1 ? function(i2) {
    if (i2 === void 0) {
      i2 = 0;
    }
    return i2 * staggerChildren;
  } : function(i2) {
    if (i2 === void 0) {
      i2 = 0;
    }
    return maxStaggerDuration - i2 * staggerChildren;
  };
  Array.from(visualElement2.variantChildren).sort(sortByTreeOrder2).forEach(function(child, i2) {
    animations3.push(animateVariant2(child, variant, __assign(__assign({}, options2), { delay: delayChildren + generateStaggerDuration(i2) })).then(function() {
      return child.notifyAnimationComplete(variant);
    }));
  });
  return Promise.all(animations3);
}
function sortByTreeOrder2(a2, b2) {
  return a2.sortNodePosition(b2);
}
function shouldBlockAnimation2(_a9, key2) {
  var protectedKeys = _a9.protectedKeys, needsAnimating = _a9.needsAnimating;
  var shouldBlock = protectedKeys.hasOwnProperty(key2) && needsAnimating[key2] !== true;
  needsAnimating[key2] = false;
  return shouldBlock;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/animation-state.js
var variantPriorityOrder2 = [
  AnimationType.Animate,
  AnimationType.Hover,
  AnimationType.Tap,
  AnimationType.Drag,
  AnimationType.Focus,
  AnimationType.Exit
];
var reversePriorityOrder2 = __spreadArray([], __read(variantPriorityOrder2)).reverse();
var numAnimationTypes2 = variantPriorityOrder2.length;
function animateList2(visualElement2) {
  return function(animations3) {
    return Promise.all(animations3.map(function(_a9) {
      var animation = _a9.animation, options2 = _a9.options;
      return animateVisualElement2(visualElement2, animation, options2);
    }));
  };
}
function createAnimationState2(visualElement2) {
  var animate4 = animateList2(visualElement2);
  var state2 = createState2();
  var allAnimatedKeys = {};
  var isInitialRender = true;
  var buildResolvedTypeValues = function(acc, definition) {
    var resolved = resolveVariant2(visualElement2, definition);
    if (resolved) {
      resolved.transition;
      var transitionEnd = resolved.transitionEnd, target = __rest(resolved, ["transition", "transitionEnd"]);
      acc = __assign(__assign(__assign({}, acc), target), transitionEnd);
    }
    return acc;
  };
  function isAnimated(key2) {
    return allAnimatedKeys[key2] !== void 0;
  }
  function setAnimateFunction(makeAnimator) {
    animate4 = makeAnimator(visualElement2);
  }
  function animateChanges(options2, changedActiveType) {
    var _a9;
    var props = visualElement2.getProps();
    var context2 = visualElement2.getVariantContext(true) || {};
    var animations3 = [];
    var removedKeys = /* @__PURE__ */ new Set();
    var encounteredKeys = {};
    var removedVariantIndex = Infinity;
    var _loop_1 = function(i3) {
      var type = reversePriorityOrder2[i3];
      var typeState = state2[type];
      var prop2 = (_a9 = props[type]) !== null && _a9 !== void 0 ? _a9 : context2[type];
      var propIsVariant = isVariantLabel2(prop2);
      var activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i3;
      var isInherited = prop2 === context2[type] && prop2 !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = __assign({}, encounteredKeys);
      if (
        // If it isn't active and hasn't *just* been set as inactive
        !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
        !prop2 && !typeState.prevProp || // Or if the prop doesn't define an animation
        isAnimationControls2(prop2) || typeof prop2 === "boolean"
      ) {
        return "continue";
      }
      var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop2) || // If we're making this variant active, we want to always make it active
      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
      i3 > removedVariantIndex && propIsVariant;
      var definitionList = Array.isArray(prop2) ? prop2 : [prop2];
      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      var _b5 = typeState.prevResolvedValues, prevResolvedValues = _b5 === void 0 ? {} : _b5;
      var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
      var markToAnimate = function(key3) {
        shouldAnimateType = true;
        removedKeys.delete(key3);
        typeState.needsAnimating[key3] = true;
      };
      for (var key2 in allKeys) {
        var next2 = resolvedValues[key2];
        var prev2 = prevResolvedValues[key2];
        if (encounteredKeys.hasOwnProperty(key2))
          continue;
        if (next2 !== prev2) {
          if (isKeyframesTarget2(next2) && isKeyframesTarget2(prev2)) {
            if (!shallowCompare2(next2, prev2)) {
              markToAnimate(key2);
            } else {
              typeState.protectedKeys[key2] = true;
            }
          } else if (next2 !== void 0) {
            markToAnimate(key2);
          } else {
            removedKeys.add(key2);
          }
        } else if (next2 !== void 0 && removedKeys.has(key2)) {
          markToAnimate(key2);
        } else {
          typeState.protectedKeys[key2] = true;
        }
      }
      typeState.prevProp = prop2;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
      }
      if (isInitialRender && visualElement2.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && !isInherited) {
        animations3.push.apply(animations3, __spreadArray([], __read(definitionList.map(function(animation) {
          return {
            animation,
            options: __assign({ type }, options2)
          };
        }))));
      }
    };
    for (var i2 = 0; i2 < numAnimationTypes2; i2++) {
      _loop_1(i2);
    }
    allAnimatedKeys = __assign({}, encounteredKeys);
    if (removedKeys.size) {
      var fallbackAnimation_1 = {};
      removedKeys.forEach(function(key2) {
        var fallbackTarget = visualElement2.getBaseTarget(key2);
        if (fallbackTarget !== void 0) {
          fallbackAnimation_1[key2] = fallbackTarget;
        }
      });
      animations3.push({ animation: fallbackAnimation_1 });
    }
    var shouldAnimate = Boolean(animations3.length);
    if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate4(animations3) : Promise.resolve();
  }
  function setActive(type, isActive, options2) {
    var _a9;
    if (state2[type].isActive === isActive)
      return Promise.resolve();
    (_a9 = visualElement2.variantChildren) === null || _a9 === void 0 ? void 0 : _a9.forEach(function(child) {
      var _a10;
      return (_a10 = child.animationState) === null || _a10 === void 0 ? void 0 : _a10.setActive(type, isActive);
    });
    state2[type].isActive = isActive;
    return animateChanges(options2, type);
  }
  return {
    isAnimated,
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: function() {
      return state2;
    }
  };
}
function variantsHaveChanged(prev2, next2) {
  if (typeof next2 === "string") {
    return next2 !== prev2;
  } else if (isVariantLabels(next2)) {
    return !shallowCompare2(next2, prev2);
  }
  return false;
}
function createTypeState2(isActive) {
  if (isActive === void 0) {
    isActive = false;
  }
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState2() {
  var _a9;
  return _a9 = {}, _a9[AnimationType.Animate] = createTypeState2(true), _a9[AnimationType.Hover] = createTypeState2(), _a9[AnimationType.Tap] = createTypeState2(), _a9[AnimationType.Drag] = createTypeState2(), _a9[AnimationType.Focus] = createTypeState2(), _a9[AnimationType.Exit] = createTypeState2(), _a9;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/animations.js
var animations2 = {
  animation: makeRenderlessComponent(function(_a9) {
    var visualElement2 = _a9.visualElement, animate4 = _a9.animate;
    visualElement2.animationState || (visualElement2.animationState = createAnimationState2(visualElement2));
    if (isAnimationControls2(animate4)) {
      (0, import_react264.useEffect)(function() {
        return animate4.subscribe(visualElement2);
      }, [animate4]);
    }
  }),
  exit: makeRenderlessComponent(function(props) {
    var custom = props.custom, visualElement2 = props.visualElement;
    var _a9 = __read(usePresence2(), 2), isPresent3 = _a9[0], onExitComplete = _a9[1];
    var presenceContext = (0, import_react264.useContext)(PresenceContext2);
    (0, import_react264.useEffect)(function() {
      var _a10, _b5;
      var animation = (_a10 = visualElement2.animationState) === null || _a10 === void 0 ? void 0 : _a10.setActive(AnimationType.Exit, !isPresent3, { custom: (_b5 = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b5 !== void 0 ? _b5 : custom });
      !isPresent3 && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));
    }, [isPresent3]);
  })
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/drag/use-drag.js
var import_react265 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/PanSession.js
var PanSession3 = (
  /** @class */
  function() {
    function PanSession4(event, handlers2, _a9) {
      var _this = this;
      var _b5 = _a9 === void 0 ? {} : _a9, transformPagePoint = _b5.transformPagePoint;
      this.startEvent = null;
      this.lastMoveEvent = null;
      this.lastMoveEventInfo = null;
      this.handlers = {};
      this.updatePoint = function() {
        if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
          return;
        var info2 = getPanInfo3(_this.lastMoveEventInfo, _this.history);
        var isPanStarted = _this.startEvent !== null;
        var isDistancePastThreshold = distance4(info2.offset, { x: 0, y: 0 }) >= 3;
        if (!isPanStarted && !isDistancePastThreshold)
          return;
        var point2 = info2.point;
        var timestamp2 = getFrameData3().timestamp;
        _this.history.push(__assign(__assign({}, point2), { timestamp: timestamp2 }));
        var _a10 = _this.handlers, onStart = _a10.onStart, onMove = _a10.onMove;
        if (!isPanStarted) {
          onStart && onStart(_this.lastMoveEvent, info2);
          _this.startEvent = _this.lastMoveEvent;
        }
        onMove && onMove(_this.lastMoveEvent, info2);
      };
      this.handlePointerMove = function(event2, info2) {
        _this.lastMoveEvent = event2;
        _this.lastMoveEventInfo = transformPoint2(info2, _this.transformPagePoint);
        if (isMouseEvent3(event2) && event2.buttons === 0) {
          _this.handlePointerUp(event2, info2);
          return;
        }
        es_default3.update(_this.updatePoint, true);
      };
      this.handlePointerUp = function(event2, info2) {
        _this.end();
        var _a10 = _this.handlers, onEnd = _a10.onEnd, onSessionEnd = _a10.onSessionEnd;
        var panInfo = getPanInfo3(transformPoint2(info2, _this.transformPagePoint), _this.history);
        if (_this.startEvent && onEnd) {
          onEnd(event2, panInfo);
        }
        onSessionEnd && onSessionEnd(event2, panInfo);
      };
      if (isTouchEvent3(event) && event.touches.length > 1)
        return;
      this.handlers = handlers2;
      this.transformPagePoint = transformPagePoint;
      var info = extractEventInfo3(event);
      var initialInfo = transformPoint2(info, this.transformPagePoint);
      var point = initialInfo.point;
      var timestamp = getFrameData3().timestamp;
      this.history = [__assign(__assign({}, point), { timestamp })];
      var onSessionStart = handlers2.onSessionStart;
      onSessionStart && onSessionStart(event, getPanInfo3(initialInfo, this.history));
      this.removeListeners = pipe6(addPointerEvent4(window, "pointermove", this.handlePointerMove), addPointerEvent4(window, "pointerup", this.handlePointerUp), addPointerEvent4(window, "pointercancel", this.handlePointerUp));
    }
    PanSession4.prototype.updateHandlers = function(handlers2) {
      this.handlers = handlers2;
    };
    PanSession4.prototype.end = function() {
      this.removeListeners && this.removeListeners();
      cancelSync4.update(this.updatePoint);
    };
    return PanSession4;
  }()
);
function transformPoint2(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint2(a2, b2) {
  return { x: a2.x - b2.x, y: a2.y - b2.y };
}
function getPanInfo3(_a9, history) {
  var point = _a9.point;
  return {
    point,
    delta: subtractPoint2(point, lastDevicePoint2(history)),
    offset: subtractPoint2(point, startDevicePoint2(history)),
    velocity: getVelocity5(history, 0.1)
  };
}
function startDevicePoint2(history) {
  return history[0];
}
function lastDevicePoint2(history) {
  return history[history.length - 1];
}
function getVelocity5(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  var i2 = history.length - 1;
  var timestampedPoint = null;
  var lastPoint = lastDevicePoint2(history);
  while (i2 >= 0) {
    timestampedPoint = history[i2];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds2(timeDelta)) {
      break;
    }
    i2--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  var time2 = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time2 === 0) {
    return { x: 0, y: 0 };
  }
  var currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time2,
    y: (lastPoint.y - timestampedPoint.y) / time2
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/noop.js
function noop7(any3) {
  return any3;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/geometry/index.js
function convertBoundingBoxToAxisBox(_a9) {
  var top2 = _a9.top, left2 = _a9.left, right2 = _a9.right, bottom2 = _a9.bottom;
  return {
    x: { min: left2, max: right2 },
    y: { min: top2, max: bottom2 }
  };
}
function convertAxisBoxToBoundingBox(_a9) {
  var x = _a9.x, y = _a9.y;
  return {
    top: y.min,
    bottom: y.max,
    left: x.min,
    right: x.max
  };
}
function transformBoundingBox(_a9, transformPoint3) {
  var top2 = _a9.top, left2 = _a9.left, bottom2 = _a9.bottom, right2 = _a9.right;
  if (transformPoint3 === void 0) {
    transformPoint3 = noop7;
  }
  var topLeft = transformPoint3({ x: left2, y: top2 });
  var bottomRight = transformPoint3({ x: right2, y: bottom2 });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}
function axisBox() {
  return { x: { min: 0, max: 1 }, y: { min: 0, max: 1 } };
}
function copyAxisBox(box) {
  return {
    x: __assign({}, box.x),
    y: __assign({}, box.y)
  };
}
var zeroDelta = {
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
};
function delta() {
  return {
    x: __assign({}, zeroDelta),
    y: __assign({}, zeroDelta)
  };
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/each-axis.js
function eachAxis2(handler) {
  return [handler("x"), handler("y")];
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js
function applyConstraints2(point, _a9, elastic) {
  var min3 = _a9.min, max3 = _a9.max;
  if (min3 !== void 0 && point < min3) {
    point = elastic ? mix3(min3, point, elastic.min) : Math.max(point, min3);
  } else if (max3 !== void 0 && point > max3) {
    point = elastic ? mix3(max3, point, elastic.max) : Math.min(point, max3);
  }
  return point;
}
function calcConstrainedMinPoint(point, length3, progress4, constraints, elastic) {
  var min3 = point - length3 * progress4;
  return constraints ? applyConstraints2(min3, constraints, elastic) : min3;
}
function calcRelativeAxisConstraints2(axis, min3, max3) {
  return {
    min: min3 !== void 0 ? axis.min + min3 : void 0,
    max: max3 !== void 0 ? axis.max + max3 - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints2(layoutBox, _a9) {
  var top2 = _a9.top, left2 = _a9.left, bottom2 = _a9.bottom, right2 = _a9.right;
  return {
    x: calcRelativeAxisConstraints2(layoutBox.x, left2, right2),
    y: calcRelativeAxisConstraints2(layoutBox.y, top2, bottom2)
  };
}
function calcViewportAxisConstraints2(layoutAxis, constraintsAxis) {
  var _a9;
  var min3 = constraintsAxis.min - layoutAxis.min;
  var max3 = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    _a9 = __read([max3, min3], 2), min3 = _a9[0], max3 = _a9[1];
  }
  return {
    min: layoutAxis.min + min3,
    max: layoutAxis.min + max3
  };
}
function calcViewportConstraints2(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints2(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints2(layoutBox.y, constraintsBox.y)
  };
}
function calcPositionFromProgress(axis, constraints, progress4) {
  var axisLength = axis.max - axis.min;
  var min3 = mix3(constraints.min, constraints.max - axisLength, progress4);
  return { min: min3, max: min3 + axisLength };
}
function rebaseAxisConstraints2(layout3, constraints) {
  var relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout3.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout3.min;
  }
  return relativeConstraints;
}
var defaultElastic2 = 0.35;
function resolveDragElastic2(dragElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic2;
  }
  return {
    x: resolveAxisElastic2(dragElastic, "left", "right"),
    y: resolveAxisElastic2(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic2(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic2(dragElastic, minLabel),
    max: resolvePointElastic2(dragElastic, maxLabel)
  };
}
function resolvePointElastic2(dragElastic, label) {
  var _a9;
  return typeof dragElastic === "number" ? dragElastic : (_a9 = dragElastic[label]) !== null && _a9 !== void 0 ? _a9 : 0;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/projection/measure.js
function getBoundingBox(element, transformPagePoint) {
  var box = element.getBoundingClientRect();
  return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js
var clampProgress = function(v) {
  return clamp5(0, 1, v);
};
function isNear2(value, target, maxDistance) {
  if (target === void 0) {
    target = 0;
  }
  if (maxDistance === void 0) {
    maxDistance = 0.01;
  }
  return distance4(value, target) < maxDistance;
}
function calcLength2(axis) {
  return axis.max - axis.min;
}
function calcOrigin4(source, target) {
  var origin = 0.5;
  var sourceLength = calcLength2(source);
  var targetLength = calcLength2(target);
  if (targetLength > sourceLength) {
    origin = progress3(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress3(source.min, source.max - targetLength, target.min);
  }
  return clampProgress(origin);
}
function updateAxisDelta(delta2, source, target, origin) {
  if (origin === void 0) {
    origin = 0.5;
  }
  delta2.origin = origin;
  delta2.originPoint = mix3(source.min, source.max, delta2.origin);
  delta2.scale = calcLength2(target) / calcLength2(source);
  if (isNear2(delta2.scale, 1, 1e-4))
    delta2.scale = 1;
  delta2.translate = mix3(target.min, target.max, delta2.origin) - delta2.originPoint;
  if (isNear2(delta2.translate))
    delta2.translate = 0;
}
function updateBoxDelta(delta2, source, target, origin) {
  updateAxisDelta(delta2.x, source.x, target.x, defaultOrigin(origin.originX));
  updateAxisDelta(delta2.y, source.y, target.y, defaultOrigin(origin.originY));
}
function defaultOrigin(origin) {
  return typeof origin === "number" ? origin : 0.5;
}
function calcRelativeAxis2(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength2(relative);
}
function calcRelativeBox2(projection, parentProjection) {
  calcRelativeAxis2(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);
  calcRelativeAxis2(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.js
var compareByDepth2 = function(a2, b2) {
  return a2.depth - b2.depth;
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/projection/utils.js
function isProjecting(visualElement2) {
  var isEnabled = visualElement2.projection.isEnabled;
  return isEnabled || visualElement2.shouldResetTransform();
}
function collectProjectingAncestors(visualElement2, ancestors) {
  if (ancestors === void 0) {
    ancestors = [];
  }
  var parent = visualElement2.parent;
  if (parent)
    collectProjectingAncestors(parent, ancestors);
  if (isProjecting(visualElement2))
    ancestors.push(visualElement2);
  return ancestors;
}
function collectProjectingChildren(visualElement2) {
  var children = [];
  var addChild = function(child) {
    if (isProjecting(child))
      children.push(child);
    child.children.forEach(addChild);
  };
  visualElement2.children.forEach(addChild);
  return children.sort(compareByDepth2);
}
function updateLayoutMeasurement(visualElement2) {
  if (visualElement2.shouldResetTransform())
    return;
  var layoutState = visualElement2.getLayoutState();
  visualElement2.notifyBeforeLayoutMeasure(layoutState.layout);
  layoutState.isHydrated = true;
  layoutState.layout = visualElement2.measureViewportBox();
  layoutState.layoutCorrected = copyAxisBox(layoutState.layout);
  visualElement2.notifyLayoutMeasure(layoutState.layout, visualElement2.prevViewportBox || layoutState.layout);
  es_default3.update(function() {
    return visualElement2.rebaseProjectionTarget();
  });
}
function snapshotViewportBox(visualElement2) {
  if (visualElement2.shouldResetTransform())
    return;
  visualElement2.prevViewportBox = visualElement2.measureViewportBox(false);
  visualElement2.rebaseProjectionTarget(false, visualElement2.prevViewportBox);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/layout/utils.js
function tweenAxis(target, prev2, next2, p) {
  target.min = mix3(prev2.min, next2.min, p);
  target.max = mix3(prev2.max, next2.max, p);
}
function calcRelativeOffsetAxis(parent, child) {
  return {
    min: child.min - parent.min,
    max: child.max - parent.min
  };
}
function calcRelativeOffset(parent, child) {
  return {
    x: calcRelativeOffsetAxis(parent.x, child.x),
    y: calcRelativeOffsetAxis(parent.y, child.y)
  };
}
function checkIfParentHasChanged(prev2, next2) {
  var prevId = prev2.getLayoutId();
  var nextId = next2.getLayoutId();
  return prevId !== nextId || nextId === void 0 && prev2 !== next2;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/is-draggable.js
function isDraggable(visualElement2) {
  var _a9 = visualElement2.getProps(), drag3 = _a9.drag, _dragX = _a9._dragX;
  return drag3 && !_dragX;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js
function resetAxis(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function resetBox(box, originBox) {
  resetAxis(box.x, originBox.x);
  resetAxis(box.y, originBox.y);
}
function scalePoint2(point, scale4, originPoint) {
  var distanceFromOrigin = point - originPoint;
  var scaled = scale4 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta2(point, translate, scale4, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint2(point, boxScale, originPoint);
  }
  return scalePoint2(point, scale4, originPoint) + translate;
}
function applyAxisDelta2(axis, translate, scale4, originPoint, boxScale) {
  if (translate === void 0) {
    translate = 0;
  }
  if (scale4 === void 0) {
    scale4 = 1;
  }
  axis.min = applyPointDelta2(axis.min, translate, scale4, originPoint, boxScale);
  axis.max = applyPointDelta2(axis.max, translate, scale4, originPoint, boxScale);
}
function applyBoxDelta2(box, _a9) {
  var x = _a9.x, y = _a9.y;
  applyAxisDelta2(box.x, x.translate, x.scale, x.originPoint);
  applyAxisDelta2(box.y, y.translate, y.scale, y.originPoint);
}
function applyAxisTransforms(final, axis, transforms2, _a9) {
  var _b5 = __read(_a9, 3), key2 = _b5[0], scaleKey = _b5[1], originKey = _b5[2];
  final.min = axis.min;
  final.max = axis.max;
  var axisOrigin = transforms2[originKey] !== void 0 ? transforms2[originKey] : 0.5;
  var originPoint = mix3(axis.min, axis.max, axisOrigin);
  applyAxisDelta2(final, transforms2[key2], transforms2[scaleKey], originPoint, transforms2.scale);
}
var xKeys3 = ["x", "scaleX", "originX"];
var yKeys3 = ["y", "scaleY", "originY"];
function applyBoxTransforms(finalBox, box, transforms2) {
  applyAxisTransforms(finalBox.x, box.x, transforms2, xKeys3);
  applyAxisTransforms(finalBox.y, box.y, transforms2, yKeys3);
}
function removePointDelta2(point, translate, scale4, originPoint, boxScale) {
  point -= translate;
  point = scalePoint2(point, 1 / scale4, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint2(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta2(axis, translate, scale4, origin, boxScale) {
  if (translate === void 0) {
    translate = 0;
  }
  if (scale4 === void 0) {
    scale4 = 1;
  }
  if (origin === void 0) {
    origin = 0.5;
  }
  var originPoint = mix3(axis.min, axis.max, origin) - translate;
  axis.min = removePointDelta2(axis.min, translate, scale4, originPoint, boxScale);
  axis.max = removePointDelta2(axis.max, translate, scale4, originPoint, boxScale);
}
function removeAxisTransforms2(axis, transforms2, _a9) {
  var _b5 = __read(_a9, 3), key2 = _b5[0], scaleKey = _b5[1], originKey = _b5[2];
  removeAxisDelta2(axis, transforms2[key2], transforms2[scaleKey], transforms2[originKey], transforms2.scale);
}
function removeBoxTransforms2(box, transforms2) {
  removeAxisTransforms2(box.x, transforms2, xKeys3);
  removeAxisTransforms2(box.y, transforms2, yKeys3);
}
function applyTreeDeltas2(box, treeScale, treePath) {
  var treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  var node3;
  var delta2;
  for (var i2 = 0; i2 < treeLength; i2++) {
    node3 = treePath[i2];
    delta2 = node3.getLayoutState().delta;
    treeScale.x *= delta2.x.scale;
    treeScale.y *= delta2.y.scale;
    applyBoxDelta2(box, delta2);
    if (isDraggable(node3)) {
      applyBoxTransforms(box, box, node3.getLatestValues());
    }
  }
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/projection/convert-to-relative.js
function convertToRelativeProjection(visualElement2, isLayoutDrag) {
  if (isLayoutDrag === void 0) {
    isLayoutDrag = true;
  }
  var projectionParent = visualElement2.getProjectionParent();
  if (!projectionParent)
    return false;
  var offset3;
  if (isLayoutDrag) {
    offset3 = calcRelativeOffset(projectionParent.projection.target, visualElement2.projection.target);
    removeBoxTransforms2(offset3, projectionParent.getLatestValues());
  } else {
    offset3 = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement2.getLayoutState().layout);
  }
  eachAxis2(function(axis) {
    return visualElement2.setProjectionTargetAxis(axis, offset3[axis].min, offset3[axis].max, true);
  });
  return true;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/batch-layout.js
var unresolvedJobs = /* @__PURE__ */ new Set();
function pushJob(stack, job, pointer) {
  if (!stack[pointer])
    stack[pointer] = [];
  stack[pointer].push(job);
}
function batchLayout(callback) {
  unresolvedJobs.add(callback);
  return function() {
    return unresolvedJobs.delete(callback);
  };
}
function flushLayout() {
  if (!unresolvedJobs.size)
    return;
  var pointer = 0;
  var reads = [[]];
  var writes = [];
  var setRead = function(job) {
    return pushJob(reads, job, pointer);
  };
  var setWrite = function(job) {
    pushJob(writes, job, pointer);
    pointer++;
  };
  unresolvedJobs.forEach(function(callback) {
    callback(setRead, setWrite);
    pointer = 0;
  });
  unresolvedJobs.clear();
  var numStacks = writes.length;
  for (var i2 = 0; i2 <= numStacks; i2++) {
    reads[i2] && reads[i2].forEach(executeJob);
    writes[i2] && writes[i2].forEach(executeJob);
  }
}
var executeJob = function(job) {
  return job();
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js
var elementDragControls2 = /* @__PURE__ */ new WeakMap();
var lastPointerEvent;
var VisualElementDragControls2 = (
  /** @class */
  function() {
    function VisualElementDragControls3(_a9) {
      var visualElement2 = _a9.visualElement;
      this.isDragging = false;
      this.currentDirection = null;
      this.constraints = false;
      this.elastic = axisBox();
      this.props = {};
      this.hasMutatedConstraints = false;
      this.cursorProgress = {
        x: 0.5,
        y: 0.5
      };
      this.originPoint = {};
      this.openGlobalLock = null;
      this.panSession = null;
      this.visualElement = visualElement2;
      this.visualElement.enableLayoutProjection();
      elementDragControls2.set(visualElement2, this);
    }
    VisualElementDragControls3.prototype.start = function(originEvent, _a9) {
      var _this = this;
      var _b5 = _a9 === void 0 ? {} : _a9, _c3 = _b5.snapToCursor, snapToCursor = _c3 === void 0 ? false : _c3, cursorProgress = _b5.cursorProgress;
      var onSessionStart = function(event) {
        var _a10;
        _this.stopMotion();
        var initialPoint = getViewportPointFromEvent2(event).point;
        (_a10 = _this.cancelLayout) === null || _a10 === void 0 ? void 0 : _a10.call(_this);
        _this.cancelLayout = batchLayout(function(read2, write2) {
          var ancestors = collectProjectingAncestors(_this.visualElement);
          var children = collectProjectingChildren(_this.visualElement);
          var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));
          var hasManuallySetCursorOrigin = false;
          _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();
          write2(function() {
            tree.forEach(function(element) {
              return element.resetTransform();
            });
          });
          read2(function() {
            updateLayoutMeasurement(_this.visualElement);
            children.forEach(updateLayoutMeasurement);
          });
          write2(function() {
            tree.forEach(function(element) {
              return element.restoreTransform();
            });
            if (snapToCursor) {
              hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);
            }
          });
          read2(function() {
            var isRelativeDrag = Boolean(_this.getAxisMotionValue("x") && !_this.isExternalDrag());
            if (!isRelativeDrag) {
              _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));
            }
            _this.visualElement.scheduleUpdateLayoutProjection();
            var projection = _this.visualElement.projection;
            eachAxis2(function(axis) {
              if (!hasManuallySetCursorOrigin) {
                var _a11 = projection.target[axis], min3 = _a11.min, max3 = _a11.max;
                _this.cursorProgress[axis] = cursorProgress ? cursorProgress[axis] : progress3(min3, max3, initialPoint[axis]);
              }
              var axisValue = _this.getAxisMotionValue(axis);
              if (axisValue) {
                _this.originPoint[axis] = axisValue.get();
              }
            });
          });
          write2(function() {
            flushSync3.update();
            flushSync3.preRender();
            flushSync3.render();
            flushSync3.postRender();
          });
          read2(function() {
            return _this.resolveDragConstraints();
          });
        });
      };
      var onStart = function(event, info) {
        var _a10, _b6, _c4;
        var _d3 = _this.props, drag3 = _d3.drag, dragPropagation = _d3.dragPropagation;
        if (drag3 && !dragPropagation) {
          if (_this.openGlobalLock)
            _this.openGlobalLock();
          _this.openGlobalLock = getGlobalLock2(drag3);
          if (!_this.openGlobalLock)
            return;
        }
        flushLayout();
        _this.isDragging = true;
        _this.currentDirection = null;
        (_b6 = (_a10 = _this.props).onDragStart) === null || _b6 === void 0 ? void 0 : _b6.call(_a10, event, info);
        (_c4 = _this.visualElement.animationState) === null || _c4 === void 0 ? void 0 : _c4.setActive(AnimationType.Drag, true);
      };
      var onMove = function(event, info) {
        var _a10, _b6, _c4, _d3;
        var _e3 = _this.props, dragPropagation = _e3.dragPropagation, dragDirectionLock = _e3.dragDirectionLock;
        if (!dragPropagation && !_this.openGlobalLock)
          return;
        var offset3 = info.offset;
        if (dragDirectionLock && _this.currentDirection === null) {
          _this.currentDirection = getCurrentDirection2(offset3);
          if (_this.currentDirection !== null) {
            (_b6 = (_a10 = _this.props).onDirectionLock) === null || _b6 === void 0 ? void 0 : _b6.call(_a10, _this.currentDirection);
          }
          return;
        }
        _this.updateAxis("x", info.point, offset3);
        _this.updateAxis("y", info.point, offset3);
        (_d3 = (_c4 = _this.props).onDrag) === null || _d3 === void 0 ? void 0 : _d3.call(_c4, event, info);
        lastPointerEvent = event;
      };
      var onSessionEnd = function(event, info) {
        return _this.stop(event, info);
      };
      var transformPagePoint = this.props.transformPagePoint;
      this.panSession = new PanSession3(originEvent, {
        onSessionStart,
        onStart,
        onMove,
        onSessionEnd
      }, { transformPagePoint });
    };
    VisualElementDragControls3.prototype.resolveDragConstraints = function() {
      var _this = this;
      var _a9 = this.props, dragConstraints = _a9.dragConstraints, dragElastic = _a9.dragElastic;
      var layout3 = this.visualElement.getLayoutState().layoutCorrected;
      if (dragConstraints) {
        this.constraints = isRefObject5(dragConstraints) ? this.resolveRefConstraints(layout3, dragConstraints) : calcRelativeConstraints2(layout3, dragConstraints);
      } else {
        this.constraints = false;
      }
      this.elastic = resolveDragElastic2(dragElastic);
      if (this.constraints && !this.hasMutatedConstraints) {
        eachAxis2(function(axis) {
          if (_this.getAxisMotionValue(axis)) {
            _this.constraints[axis] = rebaseAxisConstraints2(layout3[axis], _this.constraints[axis]);
          }
        });
      }
    };
    VisualElementDragControls3.prototype.resolveRefConstraints = function(layoutBox, constraints) {
      var _a9 = this.props, onMeasureDragConstraints = _a9.onMeasureDragConstraints, transformPagePoint = _a9.transformPagePoint;
      var constraintsElement = constraints.current;
      invariant3(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
      this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);
      var measuredConstraints = calcViewportConstraints2(layoutBox, this.constraintsBox);
      if (onMeasureDragConstraints) {
        var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));
        this.hasMutatedConstraints = !!userConstraints;
        if (userConstraints) {
          measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);
        }
      }
      return measuredConstraints;
    };
    VisualElementDragControls3.prototype.cancelDrag = function() {
      var _a9, _b5;
      this.visualElement.unlockProjectionTarget();
      (_a9 = this.cancelLayout) === null || _a9 === void 0 ? void 0 : _a9.call(this);
      this.isDragging = false;
      this.panSession && this.panSession.end();
      this.panSession = null;
      if (!this.props.dragPropagation && this.openGlobalLock) {
        this.openGlobalLock();
        this.openGlobalLock = null;
      }
      (_b5 = this.visualElement.animationState) === null || _b5 === void 0 ? void 0 : _b5.setActive(AnimationType.Drag, false);
    };
    VisualElementDragControls3.prototype.stop = function(event, info) {
      var _a9, _b5, _c3;
      (_a9 = this.panSession) === null || _a9 === void 0 ? void 0 : _a9.end();
      this.panSession = null;
      var isDragging = this.isDragging;
      this.cancelDrag();
      if (!isDragging)
        return;
      var velocity = info.velocity;
      this.animateDragEnd(velocity);
      (_c3 = (_b5 = this.props).onDragEnd) === null || _c3 === void 0 ? void 0 : _c3.call(_b5, event, info);
    };
    VisualElementDragControls3.prototype.snapToCursor = function(point) {
      var _this = this;
      return eachAxis2(function(axis) {
        var drag3 = _this.props.drag;
        if (!shouldDrag2(axis, drag3, _this.currentDirection))
          return;
        var axisValue = _this.getAxisMotionValue(axis);
        if (axisValue) {
          var box = _this.visualElement.getLayoutState().layout;
          var length_1 = box[axis].max - box[axis].min;
          var center = box[axis].min + length_1 / 2;
          var offset3 = point[axis] - center;
          _this.originPoint[axis] = point[axis];
          axisValue.set(offset3);
        } else {
          _this.cursorProgress[axis] = 0.5;
          return true;
        }
      }).includes(true);
    };
    VisualElementDragControls3.prototype.updateAxis = function(axis, point, offset3) {
      var drag3 = this.props.drag;
      if (!shouldDrag2(axis, drag3, this.currentDirection))
        return;
      return this.getAxisMotionValue(axis) ? this.updateAxisMotionValue(axis, offset3) : this.updateVisualElementAxis(axis, point);
    };
    VisualElementDragControls3.prototype.updateAxisMotionValue = function(axis, offset3) {
      var axisValue = this.getAxisMotionValue(axis);
      if (!offset3 || !axisValue)
        return;
      var nextValue = this.originPoint[axis] + offset3[axis];
      var update = this.constraints ? applyConstraints2(nextValue, this.constraints[axis], this.elastic[axis]) : nextValue;
      axisValue.set(update);
    };
    VisualElementDragControls3.prototype.updateVisualElementAxis = function(axis, point) {
      var _a9;
      var axisLayout = this.visualElement.getLayoutState().layout[axis];
      var axisLength = axisLayout.max - axisLayout.min;
      var axisProgress = this.cursorProgress[axis];
      var min3 = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a9 = this.constraints) === null || _a9 === void 0 ? void 0 : _a9[axis], this.elastic[axis]);
      this.visualElement.setProjectionTargetAxis(axis, min3, min3 + axisLength);
    };
    VisualElementDragControls3.prototype.setProps = function(_a9) {
      var _b5 = _a9.drag, drag3 = _b5 === void 0 ? false : _b5, _c3 = _a9.dragDirectionLock, dragDirectionLock = _c3 === void 0 ? false : _c3, _d3 = _a9.dragPropagation, dragPropagation = _d3 === void 0 ? false : _d3, _e3 = _a9.dragConstraints, dragConstraints = _e3 === void 0 ? false : _e3, _f3 = _a9.dragElastic, dragElastic = _f3 === void 0 ? defaultElastic2 : _f3, _g3 = _a9.dragMomentum, dragMomentum = _g3 === void 0 ? true : _g3, remainingProps = __rest(_a9, ["drag", "dragDirectionLock", "dragPropagation", "dragConstraints", "dragElastic", "dragMomentum"]);
      this.props = __assign({
        drag: drag3,
        dragDirectionLock,
        dragPropagation,
        dragConstraints,
        dragElastic,
        dragMomentum
      }, remainingProps);
    };
    VisualElementDragControls3.prototype.getAxisMotionValue = function(axis) {
      var _a9 = this.props, layout3 = _a9.layout, layoutId = _a9.layoutId;
      var dragKey = "_drag" + axis.toUpperCase();
      if (this.props[dragKey]) {
        return this.props[dragKey];
      } else if (!layout3 && layoutId === void 0) {
        return this.visualElement.getValue(axis, 0);
      }
    };
    VisualElementDragControls3.prototype.isLayoutDrag = function() {
      return !this.getAxisMotionValue("x");
    };
    VisualElementDragControls3.prototype.isExternalDrag = function() {
      var _a9 = this.props, _dragX = _a9._dragX, _dragY = _a9._dragY;
      return _dragX || _dragY;
    };
    VisualElementDragControls3.prototype.animateDragEnd = function(velocity) {
      var _this = this;
      var _a9 = this.props, drag3 = _a9.drag, dragMomentum = _a9.dragMomentum, dragElastic = _a9.dragElastic, dragTransition = _a9.dragTransition;
      var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());
      var constraints = this.constraints || {};
      if (isRelative && Object.keys(constraints).length && this.isLayoutDrag()) {
        var projectionParent = this.visualElement.getProjectionParent();
        if (projectionParent) {
          var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);
          eachAxis2(function(axis) {
            var _a10 = relativeConstraints_1[axis], min3 = _a10.min, max3 = _a10.max;
            constraints[axis] = {
              min: isNaN(min3) ? void 0 : min3,
              max: isNaN(max3) ? void 0 : max3
            };
          });
        }
      }
      var momentumAnimations = eachAxis2(function(axis) {
        var _a10;
        if (!shouldDrag2(axis, drag3, _this.currentDirection)) {
          return;
        }
        var transition3 = (_a10 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a10 !== void 0 ? _a10 : {};
        var bounceStiffness = dragElastic ? 200 : 1e6;
        var bounceDamping = dragElastic ? 40 : 1e7;
        var inertia3 = __assign(__assign({
          type: "inertia",
          velocity: dragMomentum ? velocity[axis] : 0,
          bounceStiffness,
          bounceDamping,
          timeConstant: 750,
          restDelta: 1,
          restSpeed: 10
        }, dragTransition), transition3);
        return _this.getAxisMotionValue(axis) ? _this.startAxisValueAnimation(axis, inertia3) : _this.visualElement.startLayoutAnimation(axis, inertia3, isRelative);
      });
      return Promise.all(momentumAnimations).then(function() {
        var _a10, _b5;
        (_b5 = (_a10 = _this.props).onDragTransitionEnd) === null || _b5 === void 0 ? void 0 : _b5.call(_a10);
      });
    };
    VisualElementDragControls3.prototype.stopMotion = function() {
      var _this = this;
      eachAxis2(function(axis) {
        var axisValue = _this.getAxisMotionValue(axis);
        axisValue ? axisValue.stop() : _this.visualElement.stopLayoutAnimation();
      });
    };
    VisualElementDragControls3.prototype.startAxisValueAnimation = function(axis, transition3) {
      var axisValue = this.getAxisMotionValue(axis);
      if (!axisValue)
        return;
      var currentValue = axisValue.get();
      axisValue.set(currentValue);
      axisValue.set(currentValue);
      return startAnimation(axis, axisValue, 0, transition3);
    };
    VisualElementDragControls3.prototype.scalePoint = function() {
      var _this = this;
      var _a9 = this.props, drag3 = _a9.drag, dragConstraints = _a9.dragConstraints;
      if (!isRefObject5(dragConstraints) || !this.constraintsBox)
        return;
      this.stopMotion();
      var boxProgress = { x: 0, y: 0 };
      eachAxis2(function(axis) {
        boxProgress[axis] = calcOrigin4(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);
      });
      this.updateConstraints(function() {
        eachAxis2(function(axis) {
          if (!shouldDrag2(axis, drag3, null))
            return;
          var _a10 = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min3 = _a10.min, max3 = _a10.max;
          _this.visualElement.setProjectionTargetAxis(axis, min3, max3);
        });
      });
      setTimeout(flushLayout, 1);
    };
    VisualElementDragControls3.prototype.updateConstraints = function(onReady) {
      var _this = this;
      this.cancelLayout = batchLayout(function(read2, write2) {
        var ancestors = collectProjectingAncestors(_this.visualElement);
        write2(function() {
          return ancestors.forEach(function(element) {
            return element.resetTransform();
          });
        });
        read2(function() {
          return updateLayoutMeasurement(_this.visualElement);
        });
        write2(function() {
          return ancestors.forEach(function(element) {
            return element.restoreTransform();
          });
        });
        read2(function() {
          _this.resolveDragConstraints();
        });
        if (onReady)
          write2(onReady);
      });
    };
    VisualElementDragControls3.prototype.mount = function(visualElement2) {
      var _this = this;
      var element = visualElement2.getInstance();
      var stopPointerListener = addPointerEvent4(element, "pointerdown", function(event) {
        var _a9 = _this.props, drag3 = _a9.drag, _b5 = _a9.dragListener, dragListener = _b5 === void 0 ? true : _b5;
        drag3 && dragListener && _this.start(event);
      });
      var stopResizeListener = addDomEvent4(window, "resize", function() {
        _this.scalePoint();
      });
      var stopLayoutUpdateListener = visualElement2.onLayoutUpdate(function() {
        if (_this.isDragging) {
          _this.resolveDragConstraints();
        }
      });
      var prevDragCursor = visualElement2.prevDragCursor;
      if (prevDragCursor) {
        this.start(lastPointerEvent, { cursorProgress: prevDragCursor });
      }
      return function() {
        stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();
        stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();
        stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();
        _this.cancelDrag();
      };
    };
    return VisualElementDragControls3;
  }()
);
function shouldDrag2(direction2, drag3, currentDirection) {
  return (drag3 === true || drag3 === direction2) && (currentDirection === null || currentDirection === direction2);
}
function getCurrentDirection2(offset3, lockThreshold) {
  if (lockThreshold === void 0) {
    lockThreshold = 10;
  }
  var direction2 = null;
  if (Math.abs(offset3.y) > lockThreshold) {
    direction2 = "y";
  } else if (Math.abs(offset3.x) > lockThreshold) {
    direction2 = "x";
  }
  return direction2;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/drag/use-drag.js
function useDrag(props) {
  var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
  var transformPagePoint = (0, import_react265.useContext)(MotionConfigContext2).transformPagePoint;
  var dragControls = useConstant2(function() {
    return new VisualElementDragControls2({
      visualElement: visualElement2
    });
  });
  dragControls.setProps(__assign(__assign({}, props), { transformPagePoint }));
  (0, import_react265.useEffect)(function() {
    return groupDragControls && groupDragControls.subscribe(dragControls);
  }, [dragControls]);
  (0, import_react265.useEffect)(function() {
    return dragControls.mount(visualElement2);
  }, []);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js
var import_react266 = __toESM(require_react());
function usePanGesture2(_a9) {
  var onPan = _a9.onPan, onPanStart = _a9.onPanStart, onPanEnd = _a9.onPanEnd, onPanSessionStart = _a9.onPanSessionStart, visualElement2 = _a9.visualElement;
  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;
  var panSession = (0, import_react266.useRef)(null);
  var transformPagePoint = (0, import_react266.useContext)(MotionConfigContext2).transformPagePoint;
  var handlers2 = {
    onSessionStart: onPanSessionStart,
    onStart: onPanStart,
    onMove: onPan,
    onEnd: function(event, info) {
      panSession.current = null;
      onPanEnd && onPanEnd(event, info);
    }
  };
  (0, import_react266.useEffect)(function() {
    if (panSession.current !== null) {
      panSession.current.updateHandlers(handlers2);
    }
  });
  function onPointerDown(event) {
    panSession.current = new PanSession3(event, handlers2, {
      transformPagePoint
    });
  }
  usePointerEvent2(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
  useUnmountEffect3(function() {
    return panSession.current && panSession.current.end();
  });
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/drag.js
var drag2 = {
  pan: makeRenderlessComponent(usePanGesture2),
  drag: makeRenderlessComponent(useDrag)
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/layout/Animate.js
var React57 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/types.js
var Presence;
(function(Presence2) {
  Presence2[Presence2["Entering"] = 0] = "Entering";
  Presence2[Presence2["Present"] = 1] = "Present";
  Presence2[Presence2["Exiting"] = 2] = "Exiting";
})(Presence || (Presence = {}));
var VisibilityAction;
(function(VisibilityAction2) {
  VisibilityAction2[VisibilityAction2["Hide"] = 0] = "Hide";
  VisibilityAction2[VisibilityAction2["Show"] = 1] = "Show";
})(VisibilityAction || (VisibilityAction = {}));

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js
function isCSSVariable2(value) {
  return typeof value === "string" && value.startsWith("var(--");
}
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable2(current) {
  var match4 = cssVariableRegex.exec(current);
  if (!match4)
    return [,];
  var _a9 = __read(match4, 3), token2 = _a9[1], fallback = _a9[2];
  return [token2, fallback];
}
var maxDepth2 = 4;
function getVariableValue2(current, element, depth) {
  if (depth === void 0) {
    depth = 1;
  }
  invariant3(depth <= maxDepth2, 'Max CSS variable fallback depth detected in property "' + current + '". This may indicate a circular fallback dependency.');
  var _a9 = __read(parseCSSVariable2(current), 2), token2 = _a9[0], fallback = _a9[1];
  if (!token2)
    return;
  var resolved = window.getComputedStyle(element).getPropertyValue(token2);
  if (resolved) {
    return resolved.trim();
  } else if (isCSSVariable2(fallback)) {
    return getVariableValue2(fallback, element, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables2(visualElement2, _a9, transitionEnd) {
  var _b5;
  var target = __rest(_a9, []);
  var element = visualElement2.getInstance();
  if (!(element instanceof HTMLElement))
    return { target, transitionEnd };
  if (transitionEnd) {
    transitionEnd = __assign({}, transitionEnd);
  }
  visualElement2.forEachValue(function(value) {
    var current2 = value.get();
    if (!isCSSVariable2(current2))
      return;
    var resolved2 = getVariableValue2(current2, element);
    if (resolved2)
      value.set(resolved2);
  });
  for (var key2 in target) {
    var current = target[key2];
    if (!isCSSVariable2(current))
      continue;
    var resolved = getVariableValue2(current, element);
    if (!resolved)
      continue;
    target[key2] = resolved;
    if (transitionEnd)
      (_b5 = transitionEnd[key2]) !== null && _b5 !== void 0 ? _b5 : transitionEnd[key2] = current;
  }
  return { target, transitionEnd };
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js
function pixelsToPercent2(pixels, axis) {
  return pixels / (axis.max - axis.min) * 100;
}
function correctBorderRadius2(latest, _layoutState, _a9) {
  var target = _a9.target;
  if (typeof latest === "string") {
    if (px5.test(latest)) {
      latest = parseFloat(latest);
    } else {
      return latest;
    }
  }
  var x = pixelsToPercent2(latest, target.x);
  var y = pixelsToPercent2(latest, target.y);
  return x + "% " + y + "%";
}
var varToken = "_$css";
function correctBoxShadow2(latest, _a9) {
  var delta2 = _a9.delta, treeScale = _a9.treeScale;
  var original = latest;
  var containsCSSVariables = latest.includes("var(");
  var cssVariables = [];
  if (containsCSSVariables) {
    latest = latest.replace(cssVariableRegex, function(match4) {
      cssVariables.push(match4);
      return varToken;
    });
  }
  var shadow = complex2.parse(latest);
  if (shadow.length > 5)
    return original;
  var template = complex2.createTransformer(latest);
  var offset3 = typeof shadow[0] !== "number" ? 1 : 0;
  var xScale = delta2.x.scale * treeScale.x;
  var yScale = delta2.y.scale * treeScale.y;
  shadow[0 + offset3] /= xScale;
  shadow[1 + offset3] /= yScale;
  var averageScale = mix3(xScale, yScale, 0.5);
  if (typeof shadow[2 + offset3] === "number")
    shadow[2 + offset3] /= averageScale;
  if (typeof shadow[3 + offset3] === "number")
    shadow[3 + offset3] /= averageScale;
  var output = template(shadow);
  if (containsCSSVariables) {
    var i_1 = 0;
    output = output.replace(varToken, function() {
      var cssVariable = cssVariables[i_1];
      i_1++;
      return cssVariable;
    });
  }
  return output;
}
var borderCorrectionDefinition = {
  process: correctBorderRadius2
};
var defaultScaleCorrectors2 = {
  borderRadius: __assign(__assign({}, borderCorrectionDefinition), { applyTo: [
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ] }),
  borderTopLeftRadius: borderCorrectionDefinition,
  borderTopRightRadius: borderCorrectionDefinition,
  borderBottomLeftRadius: borderCorrectionDefinition,
  borderBottomRightRadius: borderCorrectionDefinition,
  boxShadow: {
    process: correctBoxShadow2
  }
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/layout/Animate.js
var progressTarget = 1e3;
var Animate = (
  /** @class */
  function(_super) {
    __extends(Animate2, _super);
    function Animate2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.frameTarget = axisBox();
      _this.currentAnimationTarget = axisBox();
      _this.isAnimating = {
        x: false,
        y: false
      };
      _this.stopAxisAnimation = {
        x: void 0,
        y: void 0
      };
      _this.isAnimatingTree = false;
      _this.animate = function(target, origin, _a9) {
        if (_a9 === void 0) {
          _a9 = {};
        }
        var originBox = _a9.originBox, targetBox = _a9.targetBox, visibilityAction = _a9.visibilityAction, shouldStackAnimate = _a9.shouldStackAnimate, onComplete = _a9.onComplete, prevParent = _a9.prevParent, config2 = __rest(_a9, ["originBox", "targetBox", "visibilityAction", "shouldStackAnimate", "onComplete", "prevParent"]);
        var _b5 = _this.props, visualElement2 = _b5.visualElement, layout3 = _b5.layout;
        if (shouldStackAnimate === false) {
          _this.isAnimatingTree = false;
          return _this.safeToRemove();
        }
        if (_this.isAnimatingTree && shouldStackAnimate !== true) {
          return;
        } else if (shouldStackAnimate) {
          _this.isAnimatingTree = true;
        }
        origin = originBox || origin;
        target = targetBox || target;
        var isRelative = false;
        var projectionParent = visualElement2.getProjectionParent();
        if (projectionParent) {
          var prevParentViewportBox = projectionParent.prevViewportBox;
          var parentLayout = projectionParent.getLayoutState().layout;
          if (prevParent) {
            if (targetBox) {
              parentLayout = prevParent.getLayoutState().layout;
            }
            if (originBox && !checkIfParentHasChanged(prevParent, projectionParent) && prevParent.prevViewportBox) {
              prevParentViewportBox = prevParent.prevViewportBox;
            }
          }
          if (prevParentViewportBox && isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {
            isRelative = true;
            origin = calcRelativeOffset(prevParentViewportBox, origin);
            target = calcRelativeOffset(parentLayout, target);
          }
        }
        var boxHasMoved = hasMoved(origin, target);
        var animations3 = eachAxis2(function(axis) {
          var _a10, _b6;
          if (layout3 === "position") {
            var targetLength = target[axis].max - target[axis].min;
            origin[axis].max = origin[axis].min + targetLength;
          }
          if (visualElement2.projection.isTargetLocked) {
            return;
          } else if (visibilityAction !== void 0) {
            visualElement2.setVisibility(visibilityAction === VisibilityAction.Show);
          } else if (boxHasMoved) {
            return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config2), { isRelative }));
          } else {
            (_b6 = (_a10 = _this.stopAxisAnimation)[axis]) === null || _b6 === void 0 ? void 0 : _b6.call(_a10);
            return visualElement2.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);
          }
        });
        visualElement2.syncRender();
        return Promise.all(animations3).then(function() {
          _this.isAnimatingTree = false;
          onComplete && onComplete();
          visualElement2.notifyLayoutAnimationComplete();
        });
      };
      return _this;
    }
    Animate2.prototype.componentDidMount = function() {
      var _this = this;
      var visualElement2 = this.props.visualElement;
      visualElement2.animateMotionValue = startAnimation;
      visualElement2.enableLayoutProjection();
      this.unsubLayoutReady = visualElement2.onLayoutUpdate(this.animate);
      visualElement2.layoutSafeToRemove = function() {
        return _this.safeToRemove();
      };
      addScaleCorrection(defaultScaleCorrectors2);
    };
    Animate2.prototype.componentWillUnmount = function() {
      var _this = this;
      this.unsubLayoutReady();
      eachAxis2(function(axis) {
        var _a9, _b5;
        return (_b5 = (_a9 = _this.stopAxisAnimation)[axis]) === null || _b5 === void 0 ? void 0 : _b5.call(_a9);
      });
    };
    Animate2.prototype.animateAxis = function(axis, target, origin, _a9) {
      var _this = this;
      var _b5, _c3;
      var _d3 = _a9 === void 0 ? {} : _a9, transition3 = _d3.transition, isRelative = _d3.isRelative;
      if (this.isAnimating[axis] && axisIsEqual(target, this.currentAnimationTarget[axis])) {
        return;
      }
      (_c3 = (_b5 = this.stopAxisAnimation)[axis]) === null || _c3 === void 0 ? void 0 : _c3.call(_b5);
      this.isAnimating[axis] = true;
      var visualElement2 = this.props.visualElement;
      var frameTarget = this.frameTarget[axis];
      var layoutProgress = visualElement2.getProjectionAnimationProgress()[axis];
      layoutProgress.clearListeners();
      layoutProgress.set(0);
      layoutProgress.set(0);
      var frame5 = function() {
        var p = layoutProgress.get() / progressTarget;
        tweenAxis(frameTarget, origin, target, p);
        visualElement2.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);
      };
      frame5();
      var unsubscribeProgress = layoutProgress.onChange(frame5);
      this.stopAxisAnimation[axis] = function() {
        _this.isAnimating[axis] = false;
        layoutProgress.stop();
        unsubscribeProgress();
      };
      this.currentAnimationTarget[axis] = target;
      var layoutTransition = transition3 || visualElement2.getDefaultTransition() || defaultLayoutTransition2;
      var animation = startAnimation(axis === "x" ? "layoutX" : "layoutY", layoutProgress, progressTarget, layoutTransition && getValueTransition3(layoutTransition, "layout")).then(this.stopAxisAnimation[axis]);
      return animation;
    };
    Animate2.prototype.safeToRemove = function() {
      var _a9, _b5;
      (_b5 = (_a9 = this.props).safeToRemove) === null || _b5 === void 0 ? void 0 : _b5.call(_a9);
    };
    Animate2.prototype.render = function() {
      return null;
    };
    return Animate2;
  }(React57.Component)
);
function AnimateLayoutContextProvider(props) {
  var _a9 = __read(usePresence2(), 2), safeToRemove = _a9[1];
  return React57.createElement(Animate, __assign({}, props, { safeToRemove }));
}
function hasMoved(a2, b2) {
  return !isZeroBox(a2) && !isZeroBox(b2) && (!axisIsEqual(a2.x, b2.x) || !axisIsEqual(a2.y, b2.y));
}
var zeroAxis = { min: 0, max: 0 };
function isZeroBox(a2) {
  return axisIsEqual(a2.x, zeroAxis) && axisIsEqual(a2.y, zeroAxis);
}
function axisIsEqual(a2, b2) {
  return a2.min === b2.min && a2.max === b2.max;
}
var defaultLayoutTransition2 = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
function isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {
  return prevParent || !prevParent && !(originBox || targetBox);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/layout/Measure.js
var import_react268 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/SharedLayoutContext.js
var import_react267 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/batcher.js
var defaultHandler = {
  layoutReady: function(child) {
    return child.notifyLayoutReady();
  }
};
function createBatcher() {
  var queue = /* @__PURE__ */ new Set();
  return {
    add: function(child) {
      return queue.add(child);
    },
    flush: function(_a9) {
      var _b5 = _a9 === void 0 ? defaultHandler : _a9, layoutReady = _b5.layoutReady, parent = _b5.parent;
      batchLayout(function(read2, write2) {
        var order3 = Array.from(queue).sort(compareByDepth2);
        var ancestors = parent ? collectProjectingAncestors(parent) : [];
        write2(function() {
          var allElements = __spreadArray(__spreadArray([], __read(ancestors)), __read(order3));
          allElements.forEach(function(element) {
            return element.resetTransform();
          });
        });
        read2(function() {
          order3.forEach(updateLayoutMeasurement);
        });
        write2(function() {
          ancestors.forEach(function(element) {
            return element.restoreTransform();
          });
          order3.forEach(layoutReady);
        });
        read2(function() {
          order3.forEach(function(child) {
            if (child.isPresent)
              child.presence = Presence.Present;
          });
        });
        write2(function() {
          flushSync3.preRender();
          flushSync3.render();
        });
        read2(function() {
          es_default3.postRender(function() {
            return order3.forEach(assignProjectionToSnapshot);
          });
          queue.clear();
        });
      });
      flushLayout();
    }
  };
}
function assignProjectionToSnapshot(child) {
  child.prevViewportBox = child.projection.target;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/context/SharedLayoutContext.js
var SharedLayoutContext = (0, import_react267.createContext)(createBatcher());
var FramerTreeLayoutContext = (0, import_react267.createContext)(createBatcher());
function isSharedLayout(context2) {
  return !!context2.forceUpdate;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/layout/Measure.js
var Measure = (
  /** @class */
  function(_super) {
    __extends(Measure2, _super);
    function Measure2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Measure2.prototype.componentDidMount = function() {
      var _a9 = this.props, syncLayout = _a9.syncLayout, framerSyncLayout = _a9.framerSyncLayout, visualElement2 = _a9.visualElement;
      isSharedLayout(syncLayout) && syncLayout.register(visualElement2);
      isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement2);
      visualElement2.onUnmount(function() {
        if (isSharedLayout(syncLayout)) {
          syncLayout.remove(visualElement2);
        }
        if (isSharedLayout(framerSyncLayout)) {
          framerSyncLayout.remove(visualElement2);
        }
      });
    };
    Measure2.prototype.getSnapshotBeforeUpdate = function() {
      var _a9 = this.props, syncLayout = _a9.syncLayout, visualElement2 = _a9.visualElement;
      if (isSharedLayout(syncLayout)) {
        syncLayout.syncUpdate();
      } else {
        snapshotViewportBox(visualElement2);
        syncLayout.add(visualElement2);
      }
      return null;
    };
    Measure2.prototype.componentDidUpdate = function() {
      var syncLayout = this.props.syncLayout;
      if (!isSharedLayout(syncLayout))
        syncLayout.flush();
    };
    Measure2.prototype.render = function() {
      return null;
    };
    return Measure2;
  }(import_react268.default.Component)
);
function MeasureContextProvider(props) {
  var syncLayout = (0, import_react268.useContext)(SharedLayoutContext);
  var framerSyncLayout = (0, import_react268.useContext)(FramerTreeLayoutContext);
  return import_react268.default.createElement(Measure, __assign({}, props, { syncLayout, framerSyncLayout }));
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/motion/features/layout/index.js
var layoutAnimations = {
  measureLayout: MeasureContextProvider,
  layoutAnimation: AnimateLayoutContextProvider
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/state.js
var createProjectionState = function() {
  return {
    isEnabled: false,
    isHydrated: false,
    isTargetLocked: false,
    target: axisBox(),
    targetFinal: axisBox()
  };
};
function createLayoutState() {
  return {
    isHydrated: false,
    layout: axisBox(),
    layoutCorrected: axisBox(),
    treeScale: { x: 1, y: 1 },
    delta: delta(),
    deltaFinal: delta(),
    deltaTransform: ""
  };
}
var zeroLayout = createLayoutState();

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js
function buildLayoutProjectionTransform(_a9, treeScale, latestTransform) {
  var x = _a9.x, y = _a9.y;
  var xTranslate = x.translate / treeScale.x;
  var yTranslate = y.translate / treeScale.y;
  var transform4 = "translate3d(" + xTranslate + "px, " + yTranslate + "px, 0) ";
  if (latestTransform) {
    var rotate2 = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
    if (rotate2)
      transform4 += "rotate(" + rotate2 + ") ";
    if (rotateX)
      transform4 += "rotateX(" + rotateX + ") ";
    if (rotateY)
      transform4 += "rotateY(" + rotateY + ") ";
  }
  transform4 += "scale(" + x.scale + ", " + y.scale + ")";
  return !latestTransform && transform4 === identityProjection ? "" : transform4;
}
function buildLayoutProjectionTransformOrigin(_a9) {
  var deltaFinal = _a9.deltaFinal;
  return deltaFinal.x.origin * 100 + "% " + deltaFinal.y.origin * 100 + "% 0";
}
var identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/lifecycles.js
var names = [
  "LayoutMeasure",
  "BeforeLayoutMeasure",
  "LayoutUpdate",
  "ViewportBoxUpdate",
  "Update",
  "Render",
  "AnimationComplete",
  "LayoutAnimationComplete",
  "AnimationStart",
  "SetAxisTarget",
  "Unmount"
];
function createLifecycles() {
  var managers = names.map(function() {
    return new SubscriptionManager2();
  });
  var propSubscriptions = {};
  var lifecycles = {
    clearAllListeners: function() {
      return managers.forEach(function(manager) {
        return manager.clear();
      });
    },
    updatePropListeners: function(props) {
      return names.forEach(function(name) {
        var _a9;
        (_a9 = propSubscriptions[name]) === null || _a9 === void 0 ? void 0 : _a9.call(propSubscriptions);
        var on = "on" + name;
        var propListener = props[on];
        if (propListener) {
          propSubscriptions[name] = lifecycles[on](propListener);
        }
      });
    }
  };
  managers.forEach(function(manager, i2) {
    lifecycles["on" + names[i2]] = function(handler) {
      return manager.add(handler);
    };
    lifecycles["notify" + names[i2]] = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return manager.notify.apply(manager, __spreadArray([], __read(args)));
    };
  });
  return lifecycles;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/motion-values.js
function updateMotionValuesFromProps2(element, next2, prev2) {
  var _a9;
  for (var key2 in next2) {
    var nextValue = next2[key2];
    var prevValue = prev2[key2];
    if (isMotionValue2(nextValue)) {
      element.addValue(key2, nextValue);
    } else if (isMotionValue2(prevValue)) {
      element.addValue(key2, motionValue2(nextValue));
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key2)) {
        var existingValue = element.getValue(key2);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        element.addValue(key2, motionValue2((_a9 = element.getStaticValue(key2)) !== null && _a9 !== void 0 ? _a9 : nextValue));
      }
    }
  }
  for (var key2 in prev2) {
    if (next2[key2] === void 0)
      element.removeValue(key2);
  }
  return next2;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/projection.js
function updateLayoutDeltas(_a9, _b5, treePath, transformOrigin2) {
  var delta2 = _a9.delta, layout3 = _a9.layout, layoutCorrected = _a9.layoutCorrected, treeScale = _a9.treeScale;
  var target = _b5.target;
  resetBox(layoutCorrected, layout3);
  applyTreeDeltas2(layoutCorrected, treeScale, treePath);
  updateBoxDelta(delta2, layoutCorrected, target, transformOrigin2);
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/utils/flat-tree.js
var FlatTree2 = (
  /** @class */
  function() {
    function FlatTree3() {
      this.children = [];
      this.isDirty = false;
    }
    FlatTree3.prototype.add = function(child) {
      addUniqueItem2(this.children, child);
      this.isDirty = true;
    };
    FlatTree3.prototype.remove = function(child) {
      removeItem3(this.children, child);
      this.isDirty = true;
    };
    FlatTree3.prototype.forEach = function(callback) {
      this.isDirty && this.children.sort(compareByDepth2);
      this.isDirty = false;
      this.children.forEach(callback);
    };
    return FlatTree3;
  }()
);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js
function setCurrentViewportBox(visualElement2) {
  var projectionParent = visualElement2.getProjectionParent();
  if (!projectionParent) {
    visualElement2.rebaseProjectionTarget();
    return;
  }
  var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement2.getLayoutState().layout);
  eachAxis2(function(axis) {
    visualElement2.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);
  });
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/index.js
var visualElement = function(_a9) {
  var _b5 = _a9.treeType, treeType = _b5 === void 0 ? "" : _b5, build = _a9.build, getBaseTarget = _a9.getBaseTarget, makeTargetAnimatable = _a9.makeTargetAnimatable, measureViewportBox2 = _a9.measureViewportBox, renderInstance = _a9.render, readValueFromInstance = _a9.readValueFromInstance, resetTransform = _a9.resetTransform, restoreTransform = _a9.restoreTransform, removeValueFromRenderState = _a9.removeValueFromRenderState, sortNodePosition = _a9.sortNodePosition, scrapeMotionValuesFromProps5 = _a9.scrapeMotionValuesFromProps;
  return function(_a10, options2) {
    var parent = _a10.parent, props = _a10.props, presenceId = _a10.presenceId, blockInitialAnimation = _a10.blockInitialAnimation, visualState = _a10.visualState;
    if (options2 === void 0) {
      options2 = {};
    }
    var latestValues = visualState.latestValues, renderState = visualState.renderState;
    var instance;
    var lifecycles = createLifecycles();
    var projection = createProjectionState();
    var projectionParent;
    var leadProjection = projection;
    var leadLatestValues = latestValues;
    var unsubscribeFromLeadVisualElement;
    var layoutState = createLayoutState();
    var crossfader;
    var hasViewportBoxUpdated = false;
    var values2 = /* @__PURE__ */ new Map();
    var valueSubscriptions = /* @__PURE__ */ new Map();
    var prevMotionValues = {};
    var projectionTargetProgress;
    var baseTarget = __assign({}, latestValues);
    var removeFromVariantTree;
    function render() {
      if (!instance)
        return;
      if (element.isProjectionReady()) {
        applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);
        updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);
      }
      triggerBuild();
      renderInstance(instance, renderState);
    }
    function triggerBuild() {
      var valuesToRender = latestValues;
      if (crossfader && crossfader.isActive()) {
        var crossfadedValues = crossfader.getCrossfadeState(element);
        if (crossfadedValues)
          valuesToRender = crossfadedValues;
      }
      build(element, renderState, valuesToRender, leadProjection, layoutState, options2, props);
    }
    function update() {
      lifecycles.notifyUpdate(latestValues);
    }
    function updateLayoutProjection() {
      if (!element.isProjectionReady())
        return;
      var delta2 = layoutState.delta, treeScale = layoutState.treeScale;
      var prevTreeScaleX = treeScale.x;
      var prevTreeScaleY = treeScale.y;
      var prevDeltaTransform = layoutState.deltaTransform;
      updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);
      hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta2);
      hasViewportBoxUpdated = false;
      var deltaTransform = buildLayoutProjectionTransform(delta2, treeScale);
      if (deltaTransform !== prevDeltaTransform || // Also compare calculated treeScale, for values that rely on this only for scale correction
      prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) {
        element.scheduleRender();
      }
      layoutState.deltaTransform = deltaTransform;
    }
    function updateTreeLayoutProjection() {
      element.layoutTree.forEach(fireUpdateLayoutProjection);
    }
    function bindToMotionValue(key3, value2) {
      var removeOnChange = value2.onChange(function(latestValue) {
        latestValues[key3] = latestValue;
        props.onUpdate && es_default3.update(update, false, true);
      });
      var removeOnRenderRequest = value2.onRenderRequest(element.scheduleRender);
      valueSubscriptions.set(key3, function() {
        removeOnChange();
        removeOnRenderRequest();
      });
    }
    var initialMotionValues = scrapeMotionValuesFromProps5(props);
    for (var key2 in initialMotionValues) {
      var value = initialMotionValues[key2];
      if (latestValues[key2] !== void 0 && isMotionValue2(value)) {
        value.set(latestValues[key2], false);
      }
    }
    var isControllingVariants2 = checkIfControllingVariants(props);
    var isVariantNode2 = checkIfVariantNode(props);
    var element = __assign(__assign({
      treeType,
      /**
       * This is a mirror of the internal instance prop, which keeps
       * VisualElement type-compatible with React's RefObject.
       */
      current: null,
      /**
       * The depth of this visual element within the visual element tree.
       */
      depth: parent ? parent.depth + 1 : 0,
      parent,
      children: /* @__PURE__ */ new Set(),
      /**
       * An ancestor path back to the root visual element. This is used
       * by layout projection to quickly recurse back up the tree.
       */
      path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [],
      layoutTree: parent ? parent.layoutTree : new FlatTree2(),
      /**
       *
       */
      presenceId,
      projection,
      /**
       * If this component is part of the variant tree, it should track
       * any children that are also part of the tree. This is essentially
       * a shadow tree to simplify logic around how to stagger over children.
       */
      variantChildren: isVariantNode2 ? /* @__PURE__ */ new Set() : void 0,
      /**
       * Whether this instance is visible. This can be changed imperatively
       * by AnimateSharedLayout, is analogous to CSS's visibility in that
       * hidden elements should take up layout, and needs enacting by the configured
       * render function.
       */
      isVisible: void 0,
      /**
       * Normally, if a component is controlled by a parent's variants, it can
       * rely on that ancestor to trigger animations further down the tree.
       * However, if a component is created after its parent is mounted, the parent
       * won't trigger that mount animation so the child needs to.
       *
       * TODO: This might be better replaced with a method isParentMounted
       */
      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),
      /**
       * This can be set by AnimatePresence to force components that mount
       * at the same time as it to mount as if they have initial={false} set.
       */
      blockInitialAnimation,
      /**
       * Determine whether this component has mounted yet. This is mostly used
       * by variant children to determine whether they need to trigger their
       * own animations on mount.
       */
      isMounted: function() {
        return Boolean(instance);
      },
      mount: function(newInstance) {
        instance = element.current = newInstance;
        element.pointTo(element);
        if (isVariantNode2 && parent && !isControllingVariants2) {
          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
        }
        parent === null || parent === void 0 ? void 0 : parent.children.add(element);
      },
      /**
       *
       */
      unmount: function() {
        cancelSync4.update(update);
        cancelSync4.render(render);
        cancelSync4.preRender(element.updateLayoutProjection);
        valueSubscriptions.forEach(function(remove2) {
          return remove2();
        });
        element.stopLayoutAnimation();
        element.layoutTree.remove(element);
        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);
        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
        lifecycles.clearAllListeners();
      },
      /**
       * Add a child visual element to our set of children.
       */
      addVariantChild: function(child) {
        var _a11;
        var closestVariantNode = element.getClosestVariantNode();
        if (closestVariantNode) {
          (_a11 = closestVariantNode.variantChildren) === null || _a11 === void 0 ? void 0 : _a11.add(child);
          return function() {
            return closestVariantNode.variantChildren.delete(child);
          };
        }
      },
      sortNodePosition: function(other) {
        if (!sortNodePosition || treeType !== other.treeType)
          return 0;
        return sortNodePosition(element.getInstance(), other.getInstance());
      },
      /**
       * Returns the closest variant node in the tree starting from
       * this visual element.
       */
      getClosestVariantNode: function() {
        return isVariantNode2 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
      },
      /**
       * A method that schedules an update to layout projections throughout
       * the tree. We inherit from the parent so there's only ever one
       * job scheduled on the next frame - that of the root visual element.
       */
      scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function() {
        return es_default3.preRender(element.updateTreeLayoutProjection, false, true);
      },
      /**
       * Expose the latest layoutId prop.
       */
      getLayoutId: function() {
        return props.layoutId;
      },
      /**
       * Returns the current instance.
       */
      getInstance: function() {
        return instance;
      },
      /**
       * Get/set the latest static values.
       */
      getStaticValue: function(key3) {
        return latestValues[key3];
      },
      setStaticValue: function(key3, value2) {
        return latestValues[key3] = value2;
      },
      /**
       * Returns the latest motion value state. Currently only used to take
       * a snapshot of the visual element - perhaps this can return the whole
       * visual state
       */
      getLatestValues: function() {
        return latestValues;
      },
      /**
       * Set the visiblity of the visual element. If it's changed, schedule
       * a render to reflect these changes.
       */
      setVisibility: function(visibility) {
        if (element.isVisible === visibility)
          return;
        element.isVisible = visibility;
        element.scheduleRender();
      },
      /**
       * Make a target animatable by Popmotion. For instance, if we're
       * trying to animate width from 100px to 100vw we need to measure 100vw
       * in pixels to determine what we really need to animate to. This is also
       * pluggable to support Framer's custom value types like Color,
       * and CSS variables.
       */
      makeTargetAnimatable: function(target, canMutate) {
        if (canMutate === void 0) {
          canMutate = true;
        }
        return makeTargetAnimatable(element, target, props, canMutate);
      },
      // Motion values ========================
      /**
       * Add a motion value and bind it to this visual element.
       */
      addValue: function(key3, value2) {
        if (element.hasValue(key3))
          element.removeValue(key3);
        values2.set(key3, value2);
        latestValues[key3] = value2.get();
        bindToMotionValue(key3, value2);
      },
      /**
       * Remove a motion value and unbind any active subscriptions.
       */
      removeValue: function(key3) {
        var _a11;
        values2.delete(key3);
        (_a11 = valueSubscriptions.get(key3)) === null || _a11 === void 0 ? void 0 : _a11();
        valueSubscriptions.delete(key3);
        delete latestValues[key3];
        removeValueFromRenderState(key3, renderState);
      },
      /**
       * Check whether we have a motion value for this key
       */
      hasValue: function(key3) {
        return values2.has(key3);
      },
      /**
       * Get a motion value for this key. If called with a default
       * value, we'll create one if none exists.
       */
      getValue: function(key3, defaultValue2) {
        var value2 = values2.get(key3);
        if (value2 === void 0 && defaultValue2 !== void 0) {
          value2 = motionValue2(defaultValue2);
          element.addValue(key3, value2);
        }
        return value2;
      },
      /**
       * Iterate over our motion values.
       */
      forEachValue: function(callback) {
        return values2.forEach(callback);
      },
      /**
       * If we're trying to animate to a previously unencountered value,
       * we need to check for it in our state and as a last resort read it
       * directly from the instance (which might have performance implications).
       */
      readValue: function(key3) {
        var _a11;
        return (_a11 = latestValues[key3]) !== null && _a11 !== void 0 ? _a11 : readValueFromInstance(instance, key3, options2);
      },
      /**
       * Set the base target to later animate back to. This is currently
       * only hydrated on creation and when we first read a value.
       */
      setBaseTarget: function(key3, value2) {
        baseTarget[key3] = value2;
      },
      /**
       * Find the base target for a value thats been removed from all animation
       * props.
       */
      getBaseTarget: function(key3) {
        if (getBaseTarget) {
          var target = getBaseTarget(props, key3);
          if (target !== void 0 && !isMotionValue2(target))
            return target;
        }
        return baseTarget[key3];
      }
    }, lifecycles), {
      /**
       * Build the renderer state based on the latest visual state.
       */
      build: function() {
        triggerBuild();
        return renderState;
      },
      /**
       * Schedule a render on the next animation frame.
       */
      scheduleRender: function() {
        es_default3.render(render, false, true);
      },
      /**
       * Synchronously fire render. It's prefered that we batch renders but
       * in many circumstances, like layout measurement, we need to run this
       * synchronously. However in those instances other measures should be taken
       * to batch reads/writes.
       */
      syncRender: render,
      /**
       * Update the provided props. Ensure any newly-added motion values are
       * added to our map, old ones removed, and listeners updated.
       */
      setProps: function(newProps) {
        props = newProps;
        lifecycles.updatePropListeners(newProps);
        prevMotionValues = updateMotionValuesFromProps2(element, scrapeMotionValuesFromProps5(props), prevMotionValues);
      },
      getProps: function() {
        return props;
      },
      // Variants ==============================
      /**
       * Returns the variant definition with a given name.
       */
      getVariant: function(name) {
        var _a11;
        return (_a11 = props.variants) === null || _a11 === void 0 ? void 0 : _a11[name];
      },
      /**
       * Returns the defined default transition on this component.
       */
      getDefaultTransition: function() {
        return props.transition;
      },
      /**
       * Used by child variant nodes to get the closest ancestor variant props.
       */
      getVariantContext: function(startAtParent) {
        if (startAtParent === void 0) {
          startAtParent = false;
        }
        if (startAtParent)
          return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
        if (!isControllingVariants2) {
          var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};
          if (props.initial !== void 0) {
            context_1.initial = props.initial;
          }
          return context_1;
        }
        var context2 = {};
        for (var i2 = 0; i2 < numVariantProps2; i2++) {
          var name_1 = variantProps2[i2];
          var prop2 = props[name_1];
          if (isVariantLabel2(prop2) || prop2 === false) {
            context2[name_1] = prop2;
          }
        }
        return context2;
      },
      // Layout projection ==============================
      /**
       * Enable layout projection for this visual element. Won't actually
       * occur until we also have hydrated layout measurements.
       */
      enableLayoutProjection: function() {
        projection.isEnabled = true;
        element.layoutTree.add(element);
      },
      /**
       * Lock the projection target, for instance when dragging, so
       * nothing else can try and animate it.
       */
      lockProjectionTarget: function() {
        projection.isTargetLocked = true;
      },
      unlockProjectionTarget: function() {
        element.stopLayoutAnimation();
        projection.isTargetLocked = false;
      },
      getLayoutState: function() {
        return layoutState;
      },
      setCrossfader: function(newCrossfader) {
        crossfader = newCrossfader;
      },
      isProjectionReady: function() {
        return projection.isEnabled && projection.isHydrated && layoutState.isHydrated;
      },
      /**
       * Start a layout animation on a given axis.
       */
      startLayoutAnimation: function(axis, transition3, isRelative) {
        if (isRelative === void 0) {
          isRelative = false;
        }
        var progress4 = element.getProjectionAnimationProgress()[axis];
        var _a11 = isRelative ? projection.relativeTarget[axis] : projection.target[axis], min3 = _a11.min, max3 = _a11.max;
        var length3 = max3 - min3;
        progress4.clearListeners();
        progress4.set(min3);
        progress4.set(min3);
        progress4.onChange(function(v) {
          element.setProjectionTargetAxis(axis, v, v + length3, isRelative);
        });
        return element.animateMotionValue(axis, progress4, 0, transition3);
      },
      /**
       * Stop layout animations.
       */
      stopLayoutAnimation: function() {
        eachAxis2(function(axis) {
          return element.getProjectionAnimationProgress()[axis].stop();
        });
      },
      /**
       * Measure the current viewport box with or without transforms.
       * Only measures axis-aligned boxes, rotate and skew must be manually
       * removed with a re-render to work.
       */
      measureViewportBox: function(withTransform) {
        if (withTransform === void 0) {
          withTransform = true;
        }
        var viewportBox = measureViewportBox2(instance, options2);
        if (!withTransform)
          removeBoxTransforms2(viewportBox, latestValues);
        return viewportBox;
      },
      /**
       * Get the motion values tracking the layout animations on each
       * axis. Lazy init if not already created.
       */
      getProjectionAnimationProgress: function() {
        projectionTargetProgress || (projectionTargetProgress = {
          x: motionValue2(0),
          y: motionValue2(0)
        });
        return projectionTargetProgress;
      },
      /**
       * Update the projection of a single axis. Schedule an update to
       * the tree layout projection.
       */
      setProjectionTargetAxis: function(axis, min3, max3, isRelative) {
        if (isRelative === void 0) {
          isRelative = false;
        }
        var target;
        if (isRelative) {
          if (!projection.relativeTarget) {
            projection.relativeTarget = axisBox();
          }
          target = projection.relativeTarget[axis];
        } else {
          projection.relativeTarget = void 0;
          target = projection.target[axis];
        }
        projection.isHydrated = true;
        target.min = min3;
        target.max = max3;
        hasViewportBoxUpdated = true;
        lifecycles.notifySetAxisTarget();
      },
      /**
       * Rebase the projection target on top of the provided viewport box
       * or the measured layout. This ensures that non-animating elements
       * don't fall out of sync differences in measurements vs projections
       * after a page scroll or other relayout.
       */
      rebaseProjectionTarget: function(force, box) {
        if (box === void 0) {
          box = layoutState.layout;
        }
        var _a11 = element.getProjectionAnimationProgress(), x = _a11.x, y = _a11.y;
        var shouldRebase = !projection.relativeTarget && !projection.isTargetLocked && !x.isAnimating() && !y.isAnimating();
        if (force || shouldRebase) {
          eachAxis2(function(axis) {
            var _a12 = box[axis], min3 = _a12.min, max3 = _a12.max;
            element.setProjectionTargetAxis(axis, min3, max3);
          });
        }
      },
      /**
       * Notify the visual element that its layout is up-to-date.
       * Currently Animate.tsx uses this to check whether a layout animation
       * needs to be performed.
       */
      notifyLayoutReady: function(config2) {
        setCurrentViewportBox(element);
        element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config2);
      },
      /**
       * Temporarily reset the transform of the instance.
       */
      resetTransform: function() {
        return resetTransform(element, instance, props);
      },
      restoreTransform: function() {
        return restoreTransform(instance, renderState);
      },
      updateLayoutProjection,
      updateTreeLayoutProjection: function() {
        element.layoutTree.forEach(fireResolveRelativeTargetBox);
        es_default3.preRender(updateTreeLayoutProjection, false, true);
      },
      getProjectionParent: function() {
        if (projectionParent === void 0) {
          var foundParent = false;
          for (var i2 = element.path.length - 1; i2 >= 0; i2--) {
            var ancestor = element.path[i2];
            if (ancestor.projection.isEnabled) {
              foundParent = ancestor;
              break;
            }
          }
          projectionParent = foundParent;
        }
        return projectionParent;
      },
      resolveRelativeTargetBox: function() {
        var relativeParent = element.getProjectionParent();
        if (!projection.relativeTarget || !relativeParent)
          return;
        calcRelativeBox2(projection, relativeParent.projection);
        if (isDraggable(relativeParent)) {
          var target = projection.target;
          applyBoxTransforms(target, target, relativeParent.getLatestValues());
        }
      },
      shouldResetTransform: function() {
        return Boolean(props._layoutResetTransform);
      },
      /**
       *
       */
      pointTo: function(newLead) {
        leadProjection = newLead.projection;
        leadLatestValues = newLead.getLatestValues();
        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
        unsubscribeFromLeadVisualElement = pipe6(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function() {
          var _a11;
          if (element.isPresent) {
            element.presence = Presence.Present;
          } else {
            (_a11 = element.layoutSafeToRemove) === null || _a11 === void 0 ? void 0 : _a11.call(element);
          }
        }));
      },
      // TODO: Clean this up
      isPresent: true,
      presence: Presence.Entering
    });
    return element;
  };
};
function fireResolveRelativeTargetBox(child) {
  child.resolveRelativeTargetBox();
}
function fireUpdateLayoutProjection(child) {
  child.updateLayoutProjection();
}
var variantProps2 = __spreadArray(["initial"], __read(variantPriorityOrder2));
var numVariantProps2 = variantProps2.length;

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js
var positionalKeys2 = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y"
]);
var isPositionalKey2 = function(key2) {
  return positionalKeys2.has(key2);
};
var hasPositionalKey2 = function(target) {
  return Object.keys(target).some(isPositionalKey2);
};
var setAndResetVelocity = function(value, to) {
  value.set(to, false);
  value.set(to);
};
var isNumOrPxType2 = function(v) {
  return v === number2 || v === px5;
};
var BoundingBoxDimension;
(function(BoundingBoxDimension2) {
  BoundingBoxDimension2["width"] = "width";
  BoundingBoxDimension2["height"] = "height";
  BoundingBoxDimension2["left"] = "left";
  BoundingBoxDimension2["right"] = "right";
  BoundingBoxDimension2["top"] = "top";
  BoundingBoxDimension2["bottom"] = "bottom";
})(BoundingBoxDimension || (BoundingBoxDimension = {}));
var getPosFromMatrix2 = function(matrix, pos) {
  return parseFloat(matrix.split(", ")[pos]);
};
var getTranslateFromMatrix2 = function(pos2, pos3) {
  return function(_bbox, _a9) {
    var transform4 = _a9.transform;
    if (transform4 === "none" || !transform4)
      return 0;
    var matrix3d = transform4.match(/^matrix3d\((.+)\)$/);
    if (matrix3d) {
      return getPosFromMatrix2(matrix3d[1], pos3);
    } else {
      var matrix = transform4.match(/^matrix\((.+)\)$/);
      if (matrix) {
        return getPosFromMatrix2(matrix[1], pos2);
      } else {
        return 0;
      }
    }
  };
};
var transformKeys2 = /* @__PURE__ */ new Set(["x", "y", "z"]);
var nonTranslationalTransformKeys2 = transformProps2.filter(function(key2) {
  return !transformKeys2.has(key2);
});
function removeNonTranslationalTransform2(visualElement2) {
  var removedTransforms = [];
  nonTranslationalTransformKeys2.forEach(function(key2) {
    var value = visualElement2.getValue(key2);
    if (value !== void 0) {
      removedTransforms.push([key2, value.get()]);
      value.set(key2.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement2.syncRender();
  return removedTransforms;
}
var positionalValues2 = {
  // Dimensions
  width: function(_a9) {
    var x = _a9.x;
    return x.max - x.min;
  },
  height: function(_a9) {
    var y = _a9.y;
    return y.max - y.min;
  },
  top: function(_bbox, _a9) {
    var top2 = _a9.top;
    return parseFloat(top2);
  },
  left: function(_bbox, _a9) {
    var left2 = _a9.left;
    return parseFloat(left2);
  },
  bottom: function(_a9, _b5) {
    var y = _a9.y;
    var top2 = _b5.top;
    return parseFloat(top2) + (y.max - y.min);
  },
  right: function(_a9, _b5) {
    var x = _a9.x;
    var left2 = _b5.left;
    return parseFloat(left2) + (x.max - x.min);
  },
  // Transform
  x: getTranslateFromMatrix2(4, 13),
  y: getTranslateFromMatrix2(5, 14)
};
var convertChangedValueTypes2 = function(target, visualElement2, changedKeys) {
  var originBbox = visualElement2.measureViewportBox();
  var element = visualElement2.getInstance();
  var elementComputedStyle = getComputedStyle(element);
  var display = elementComputedStyle.display, top2 = elementComputedStyle.top, left2 = elementComputedStyle.left, bottom2 = elementComputedStyle.bottom, right2 = elementComputedStyle.right, transform4 = elementComputedStyle.transform;
  var originComputedStyle = { top: top2, left: left2, bottom: bottom2, right: right2, transform: transform4 };
  if (display === "none") {
    visualElement2.setStaticValue("display", target.display || "block");
  }
  visualElement2.syncRender();
  var targetBbox = visualElement2.measureViewportBox();
  changedKeys.forEach(function(key2) {
    var value = visualElement2.getValue(key2);
    setAndResetVelocity(value, positionalValues2[key2](originBbox, originComputedStyle));
    target[key2] = positionalValues2[key2](targetBbox, elementComputedStyle);
  });
  return target;
};
var checkAndConvertChangedValueTypes2 = function(visualElement2, target, origin, transitionEnd) {
  if (origin === void 0) {
    origin = {};
  }
  if (transitionEnd === void 0) {
    transitionEnd = {};
  }
  target = __assign({}, target);
  transitionEnd = __assign({}, transitionEnd);
  var targetPositionalKeys = Object.keys(target).filter(isPositionalKey2);
  var removedTransformValues = [];
  var hasAttemptedToRemoveTransformValues = false;
  var changedValueTypeKeys = [];
  targetPositionalKeys.forEach(function(key2) {
    var value = visualElement2.getValue(key2);
    if (!visualElement2.hasValue(key2))
      return;
    var from2 = origin[key2];
    var to = target[key2];
    var fromType = findDimensionValueType2(from2);
    var toType;
    if (isKeyframesTarget2(to)) {
      var numKeyframes = to.length;
      for (var i2 = to[0] === null ? 1 : 0; i2 < numKeyframes; i2++) {
        if (!toType) {
          toType = findDimensionValueType2(to[i2]);
          invariant3(toType === fromType || isNumOrPxType2(fromType) && isNumOrPxType2(toType), "Keyframes must be of the same dimension as the current value");
        } else {
          invariant3(findDimensionValueType2(to[i2]) === toType, "All keyframes must be of the same type");
        }
      }
    } else {
      toType = findDimensionValueType2(to);
    }
    if (fromType !== toType) {
      if (isNumOrPxType2(fromType) && isNumOrPxType2(toType)) {
        var current = value.get();
        if (typeof current === "string") {
          value.set(parseFloat(current));
        }
        if (typeof to === "string") {
          target[key2] = parseFloat(to);
        } else if (Array.isArray(to) && toType === px5) {
          target[key2] = to.map(parseFloat);
        }
      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from2 === 0 || to === 0)) {
        if (from2 === 0) {
          value.set(toType.transform(from2));
        } else {
          target[key2] = fromType.transform(to);
        }
      } else {
        if (!hasAttemptedToRemoveTransformValues) {
          removedTransformValues = removeNonTranslationalTransform2(visualElement2);
          hasAttemptedToRemoveTransformValues = true;
        }
        changedValueTypeKeys.push(key2);
        transitionEnd[key2] = transitionEnd[key2] !== void 0 ? transitionEnd[key2] : target[key2];
        setAndResetVelocity(value, to);
      }
    }
  });
  if (changedValueTypeKeys.length) {
    var convertedTarget = convertChangedValueTypes2(target, visualElement2, changedValueTypeKeys);
    if (removedTransformValues.length) {
      removedTransformValues.forEach(function(_a9) {
        var _b5 = __read(_a9, 2), key2 = _b5[0], value = _b5[1];
        visualElement2.getValue(key2).set(value);
      });
    }
    visualElement2.syncRender();
    return { target: convertedTarget, transitionEnd };
  } else {
    return { target, transitionEnd };
  }
};
function unitConversion2(visualElement2, target, origin, transitionEnd) {
  return hasPositionalKey2(target) ? checkAndConvertChangedValueTypes2(visualElement2, target, origin, transitionEnd) : { target, transitionEnd };
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js
var parseDomVariant2 = function(visualElement2, target, origin, transitionEnd) {
  var resolved = resolveCSSVariables2(visualElement2, target, transitionEnd);
  target = resolved.target;
  transitionEnd = resolved.transitionEnd;
  return unitConversion2(visualElement2, target, origin, transitionEnd);
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/html/visual-element.js
function getComputedStyle5(element) {
  return window.getComputedStyle(element);
}
var htmlConfig = {
  treeType: "dom",
  readValueFromInstance: function(domElement, key2) {
    if (isTransformProp(key2)) {
      var defaultType = getDefaultValueType2(key2);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      var computedStyle = getComputedStyle5(domElement);
      return (isCSSVariable(key2) ? computedStyle.getPropertyValue(key2) : computedStyle[key2]) || 0;
    }
  },
  sortNodePosition: function(a2, b2) {
    return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
  },
  getBaseTarget: function(props, key2) {
    var _a9;
    return (_a9 = props.style) === null || _a9 === void 0 ? void 0 : _a9[key2];
  },
  measureViewportBox: function(element, _a9) {
    var transformPagePoint = _a9.transformPagePoint;
    return getBoundingBox(element, transformPagePoint);
  },
  /**
   * Reset the transform on the current Element. This is called as part
   * of a batched process across the entire layout tree. To remove this write
   * cycle it'd be interesting to see if it's possible to "undo" all the current
   * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms
   * works
   */
  resetTransform: function(element, domElement, props) {
    var transformTemplate2 = props.transformTemplate;
    domElement.style.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
    element.scheduleRender();
  },
  restoreTransform: function(instance, mutableState) {
    instance.style.transform = mutableState.style.transform;
  },
  removeValueFromRenderState: function(key2, _a9) {
    var vars2 = _a9.vars, style = _a9.style;
    delete vars2[key2];
    delete style[key2];
  },
  /**
   * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`
   * can be animated by Motion.
   */
  makeTargetAnimatable: function(element, _a9, _b5, isMounted) {
    var transformValues = _b5.transformValues;
    if (isMounted === void 0) {
      isMounted = true;
    }
    var transition3 = _a9.transition, transitionEnd = _a9.transitionEnd, target = __rest(_a9, ["transition", "transitionEnd"]);
    var origin = getOrigin2(target, transition3 || {}, element);
    if (transformValues) {
      if (transitionEnd)
        transitionEnd = transformValues(transitionEnd);
      if (target)
        target = transformValues(target);
      if (origin)
        origin = transformValues(origin);
    }
    if (isMounted) {
      checkTargetForNewValues2(element, target, origin);
      var parsed = parseDomVariant2(element, target, origin, transitionEnd);
      transitionEnd = parsed.transitionEnd;
      target = parsed.target;
    }
    return __assign({
      transition: transition3,
      transitionEnd
    }, target);
  },
  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3,
  build: function(element, renderState, latestValues, projection, layoutState, options2, props) {
    if (element.isVisible !== void 0) {
      renderState.style.visibility = element.isVisible ? "visible" : "hidden";
    }
    var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
    buildHTMLStyles2(renderState, latestValues, projection, layoutState, options2, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : void 0, isProjectionTranform ? buildLayoutProjectionTransformOrigin : void 0);
  },
  render: renderHTML2
};
var htmlVisualElement = visualElement(htmlConfig);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/svg/visual-element.js
var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), {
  getBaseTarget: function(props, key2) {
    return props[key2];
  },
  readValueFromInstance: function(domElement, key2) {
    var _a9;
    if (isTransformProp(key2)) {
      return ((_a9 = getDefaultValueType2(key2)) === null || _a9 === void 0 ? void 0 : _a9.default) || 0;
    }
    key2 = !camelCaseAttributes2.has(key2) ? camelToDash2(key2) : key2;
    return domElement.getAttribute(key2);
  },
  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps4,
  build: function(_element, renderState, latestValues, projection, layoutState, options2, props) {
    var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
    buildSVGAttrs2(renderState, latestValues, projection, layoutState, options2, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : void 0, isProjectionTranform ? buildLayoutProjectionTransformOrigin : void 0);
  },
  render: renderSVG2
}));

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/create-visual-element.js
var createDomVisualElement2 = function(Component7, options2) {
  return isSVGComponent2(Component7) ? svgVisualElement(options2, { enableHardwareAcceleration: false }) : htmlVisualElement(options2, { enableHardwareAcceleration: true });
};

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/motion.js
var featureBundle = __assign(__assign(__assign(__assign({}, animations2), gestureAnimations2), drag2), layoutAnimations);
var motion2 = createMotionProxy2(function(Component7, config2) {
  return createDomMotionConfig2(Component7, config2, featureBundle, createDomVisualElement2);
});

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/motion-minimal.js
var m2 = createMotionProxy2(createDomMotionConfig2);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
var React59 = __toESM(require_react());
var import_react271 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/use-force-update.js
var import_react269 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js
var React58 = __toESM(require_react());
var import_react270 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/index.js
var React60 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/animate.js
function animate3(from2, to, transition3) {
  if (transition3 === void 0) {
    transition3 = {};
  }
  var value = isMotionValue2(from2) ? from2 : motionValue2(from2);
  startAnimation("", value, to, transition3);
  return {
    stop: function() {
      return value.stop();
    }
  };
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/crossfader.js
function createCrossfader() {
  var progress4 = motionValue2(1);
  var options2 = {
    lead: void 0,
    follow: void 0,
    crossfadeOpacity: false,
    preserveFollowOpacity: false
  };
  var prevOptions = __assign({}, options2);
  var leadState = {};
  var followState = {};
  var isActive = false;
  var finalCrossfadeFrame = null;
  var prevUpdate = 0;
  function startCrossfadeAnimation(target, transition3) {
    var lead = options2.lead, follow = options2.follow;
    isActive = true;
    finalCrossfadeFrame = null;
    var hasUpdated = false;
    var onUpdate = function() {
      hasUpdated = true;
      lead && lead.scheduleRender();
      follow && follow.scheduleRender();
    };
    var onComplete = function() {
      isActive = false;
      finalCrossfadeFrame = getFrameData3().timestamp;
    };
    transition3 = transition3 && getValueTransition3(transition3, "crossfade");
    return animate3(progress4, target, __assign(__assign({}, transition3), { onUpdate, onComplete: function() {
      if (!hasUpdated) {
        progress4.set(target);
        es_default3.read(onComplete);
      } else {
        onComplete();
      }
      onUpdate();
    } }));
  }
  function updateCrossfade() {
    var _a9, _b5;
    var timestamp = getFrameData3().timestamp;
    var lead = options2.lead, follow = options2.follow;
    if (timestamp === prevUpdate || !lead)
      return;
    prevUpdate = timestamp;
    var latestLeadValues = lead.getLatestValues();
    Object.assign(leadState, latestLeadValues);
    var latestFollowValues = follow ? follow.getLatestValues() : options2.prevValues;
    Object.assign(followState, latestFollowValues);
    var p = progress4.get();
    var leadTargetOpacity = (_a9 = latestLeadValues.opacity) !== null && _a9 !== void 0 ? _a9 : 1;
    var followTargetOpacity = (_b5 = latestFollowValues === null || latestFollowValues === void 0 ? void 0 : latestFollowValues.opacity) !== null && _b5 !== void 0 ? _b5 : 1;
    if (options2.crossfadeOpacity && follow) {
      leadState.opacity = mix3(
        /**
         * If the follow child has been completely hidden we animate
         * this opacity from its previous opacity, but otherwise from completely transparent.
         */
        follow.isVisible !== false ? 0 : followTargetOpacity,
        leadTargetOpacity,
        easeCrossfadeIn2(p)
      );
      followState.opacity = options2.preserveFollowOpacity ? followTargetOpacity : mix3(followTargetOpacity, 0, easeCrossfadeOut2(p));
    } else if (!follow) {
      leadState.opacity = mix3(followTargetOpacity, leadTargetOpacity, p);
    }
    mixValues2(leadState, followState, latestLeadValues, latestFollowValues || {}, Boolean(follow), p);
  }
  return {
    isActive: function() {
      return leadState && (isActive || getFrameData3().timestamp === finalCrossfadeFrame);
    },
    fromLead: function(transition3) {
      return startCrossfadeAnimation(0, transition3);
    },
    toLead: function(transition3) {
      var initialProgress = 0;
      if (!options2.prevValues && !options2.follow) {
        initialProgress = 1;
      } else if (prevOptions.lead === options2.follow && prevOptions.follow === options2.lead) {
        initialProgress = 1 - progress4.get();
      }
      progress4.set(initialProgress);
      return startCrossfadeAnimation(1, transition3);
    },
    reset: function() {
      return progress4.set(1);
    },
    stop: function() {
      return progress4.stop();
    },
    getCrossfadeState: function(element) {
      updateCrossfade();
      if (element === options2.lead) {
        return leadState;
      } else if (element === options2.follow) {
        return followState;
      }
    },
    setOptions: function(newOptions) {
      prevOptions = options2;
      options2 = newOptions;
      leadState = {};
      followState = {};
    },
    getLatestValues: function() {
      return leadState;
    }
  };
}
var easeCrossfadeIn2 = compress2(0, 0.5, circOut2);
var easeCrossfadeOut2 = compress2(0.5, 0.95, linear);
function compress2(min3, max3, easing) {
  return function(p) {
    if (p < min3)
      return 0;
    if (p > max3)
      return 1;
    return easing(progress3(min3, max3, p));
  };
}
var borders3 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var numBorders2 = borders3.length;
function mixValues2(leadState, followState, latestLeadValues, latestFollowValues, hasFollowElement, p) {
  for (var i2 = 0; i2 < numBorders2; i2++) {
    var borderLabel = "border" + borders3[i2] + "Radius";
    var followRadius = getRadius2(latestFollowValues, borderLabel);
    var leadRadius = getRadius2(latestLeadValues, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    if (typeof followRadius === "number" && typeof leadRadius === "number") {
      var radius = Math.max(mix3(followRadius, leadRadius, p), 0);
      leadState[borderLabel] = followState[borderLabel] = radius;
    }
  }
  if (latestFollowValues.rotate || latestLeadValues.rotate) {
    var rotate2 = mix3(latestFollowValues.rotate || 0, latestLeadValues.rotate || 0, p);
    leadState.rotate = followState.rotate = rotate2;
  }
  if (!hasFollowElement && latestLeadValues.backgroundColor && latestFollowValues.backgroundColor) {
    leadState.backgroundColor = followState.backgroundColor = mixColor2(latestFollowValues.backgroundColor, latestLeadValues.backgroundColor)(p);
  }
}
function getRadius2(values2, radiusName) {
  var _a9;
  return (_a9 = values2[radiusName]) !== null && _a9 !== void 0 ? _a9 : values2.borderRadius;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/stack.js
function layoutStack() {
  var stack = /* @__PURE__ */ new Set();
  var state2 = { leadIsExiting: false };
  var prevState = __assign({}, state2);
  var prevValues;
  var prevViewportBox;
  var prevDragCursor;
  var crossfader = createCrossfader();
  var needsCrossfadeAnimation = false;
  function getFollowViewportBox() {
    return state2.follow ? state2.follow.prevViewportBox : prevViewportBox;
  }
  function getFollowLayout() {
    var _a9;
    return (_a9 = state2.follow) === null || _a9 === void 0 ? void 0 : _a9.getLayoutState().layout;
  }
  return {
    add: function(element) {
      element.setCrossfader(crossfader);
      stack.add(element);
      if (prevDragCursor)
        element.prevDragCursor = prevDragCursor;
      if (!state2.lead)
        state2.lead = element;
    },
    remove: function(element) {
      stack.delete(element);
    },
    getLead: function() {
      return state2.lead;
    },
    updateSnapshot: function() {
      if (!state2.lead)
        return;
      prevValues = crossfader.isActive() ? crossfader.getLatestValues() : state2.lead.getLatestValues();
      prevViewportBox = state2.lead.prevViewportBox;
      var dragControls = elementDragControls2.get(state2.lead);
      if (dragControls && dragControls.isDragging) {
        prevDragCursor = dragControls.cursorProgress;
      }
    },
    clearSnapshot: function() {
      prevDragCursor = prevViewportBox = void 0;
    },
    updateLeadAndFollow: function() {
      var _a9;
      prevState = __assign({}, state2);
      var lead;
      var follow;
      var order3 = Array.from(stack);
      for (var i2 = order3.length; i2--; i2 >= 0) {
        var element = order3[i2];
        if (lead)
          follow !== null && follow !== void 0 ? follow : follow = element;
        lead !== null && lead !== void 0 ? lead : lead = element;
        if (lead && follow)
          break;
      }
      state2.lead = lead;
      state2.follow = follow;
      state2.leadIsExiting = ((_a9 = state2.lead) === null || _a9 === void 0 ? void 0 : _a9.presence) === Presence.Exiting;
      crossfader.setOptions({
        lead,
        follow,
        prevValues,
        crossfadeOpacity: (follow === null || follow === void 0 ? void 0 : follow.isPresenceRoot) || (lead === null || lead === void 0 ? void 0 : lead.isPresenceRoot)
      });
      if (
        // Don't crossfade if we've just animated back from lead and switched the
        // old follow to the new lead.
        state2.lead !== prevState.follow && (prevState.lead !== state2.lead || prevState.leadIsExiting !== state2.leadIsExiting)
      ) {
        needsCrossfadeAnimation = true;
      }
    },
    animate: function(child, shouldCrossfade) {
      var _a9;
      if (shouldCrossfade === void 0) {
        shouldCrossfade = false;
      }
      if (child === state2.lead) {
        if (shouldCrossfade) {
          child.pointTo(state2.lead);
        } else {
          child.setVisibility(true);
        }
        var config2 = {};
        var prevParent = (_a9 = state2.follow) === null || _a9 === void 0 ? void 0 : _a9.getProjectionParent();
        if (prevParent) {
          config2.prevParent = prevParent;
        }
        if (child.presence === Presence.Entering) {
          config2.originBox = getFollowViewportBox();
        } else if (child.presence === Presence.Exiting) {
          config2.targetBox = getFollowLayout();
        }
        if (needsCrossfadeAnimation) {
          needsCrossfadeAnimation = false;
          var transition3 = child.getDefaultTransition();
          child.presence === Presence.Entering ? crossfader.toLead(transition3) : crossfader.fromLead(transition3);
        }
        child.notifyLayoutReady(config2);
      } else {
        if (shouldCrossfade) {
          state2.lead && child.pointTo(state2.lead);
        } else {
          child.setVisibility(false);
        }
      }
    }
  };
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/rotate.js
function resetRotate(child) {
  var hasRotate = false;
  var resetValues = {};
  for (var i2 = 0; i2 < transformAxes2.length; i2++) {
    var axis = transformAxes2[i2];
    var key2 = "rotate" + axis;
    if (!child.hasValue(key2) || child.getStaticValue(key2) === 0)
      continue;
    hasRotate = true;
    resetValues[key2] = child.getStaticValue(key2);
    child.setStaticValue(key2, 0);
  }
  if (!hasRotate)
    return;
  child.syncRender();
  for (var key2 in resetValues) {
    child.setStaticValue(key2, resetValues[key2]);
  }
  child.scheduleRender();
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/index.js
var AnimateSharedLayout2 = (
  /** @class */
  function(_super) {
    __extends(AnimateSharedLayout3, _super);
    function AnimateSharedLayout3() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.children = /* @__PURE__ */ new Set();
      _this.stacks = /* @__PURE__ */ new Map();
      _this.hasMounted = false;
      _this.updateScheduled = false;
      _this.renderScheduled = false;
      _this.syncContext = __assign(__assign({}, createBatcher()), { syncUpdate: function(force) {
        return _this.scheduleUpdate(force);
      }, forceUpdate: function() {
        _this.syncContext = __assign({}, _this.syncContext);
        _this.scheduleUpdate(true);
      }, register: function(child) {
        return _this.addChild(child);
      }, remove: function(child) {
        return _this.removeChild(child);
      } });
      return _this;
    }
    AnimateSharedLayout3.prototype.componentDidMount = function() {
      this.hasMounted = true;
    };
    AnimateSharedLayout3.prototype.componentDidUpdate = function() {
      this.startLayoutAnimation();
    };
    AnimateSharedLayout3.prototype.shouldComponentUpdate = function() {
      this.renderScheduled = true;
      return true;
    };
    AnimateSharedLayout3.prototype.startLayoutAnimation = function() {
      var _this = this;
      this.renderScheduled = this.updateScheduled = false;
      var type = this.props.type;
      this.children.forEach(function(child) {
        if (!child.isPresent) {
          child.presence = Presence.Exiting;
        } else if (child.presence !== Presence.Entering) {
          child.presence = child.presence === Presence.Exiting ? Presence.Entering : Presence.Present;
        }
      });
      this.updateStacks();
      var handler = {
        layoutReady: function(child) {
          if (child.getLayoutId() !== void 0) {
            var stack = _this.getStack(child);
            stack.animate(child, type === "crossfade");
          } else {
            child.notifyLayoutReady();
          }
        },
        parent: this.context.visualElement
      };
      this.children.forEach(function(child) {
        return _this.syncContext.add(child);
      });
      this.syncContext.flush(handler);
      this.stacks.forEach(function(stack) {
        return stack.clearSnapshot();
      });
    };
    AnimateSharedLayout3.prototype.updateStacks = function() {
      this.stacks.forEach(function(stack) {
        return stack.updateLeadAndFollow();
      });
    };
    AnimateSharedLayout3.prototype.scheduleUpdate = function(force) {
      if (force === void 0) {
        force = false;
      }
      if (!(force || !this.updateScheduled))
        return;
      this.updateScheduled = true;
      this.children.forEach(function(child) {
        resetRotate(child);
        if (child.shouldResetTransform())
          child.resetTransform();
      });
      this.children.forEach(snapshotViewportBox);
      this.stacks.forEach(function(stack) {
        return stack.updateSnapshot();
      });
      if (force || !this.renderScheduled) {
        this.renderScheduled = true;
        this.forceUpdate();
      }
    };
    AnimateSharedLayout3.prototype.addChild = function(child) {
      this.children.add(child);
      this.addToStack(child);
      child.presence = this.hasMounted ? Presence.Entering : Presence.Present;
    };
    AnimateSharedLayout3.prototype.removeChild = function(child) {
      this.scheduleUpdate();
      this.children.delete(child);
      this.removeFromStack(child);
    };
    AnimateSharedLayout3.prototype.addToStack = function(child) {
      var stack = this.getStack(child);
      stack === null || stack === void 0 ? void 0 : stack.add(child);
    };
    AnimateSharedLayout3.prototype.removeFromStack = function(child) {
      var stack = this.getStack(child);
      stack === null || stack === void 0 ? void 0 : stack.remove(child);
    };
    AnimateSharedLayout3.prototype.getStack = function(child) {
      var id3 = child.getLayoutId();
      if (id3 === void 0)
        return;
      !this.stacks.has(id3) && this.stacks.set(id3, layoutStack());
      return this.stacks.get(id3);
    };
    AnimateSharedLayout3.prototype.render = function() {
      return React60.createElement(SharedLayoutContext.Provider, { value: this.syncContext }, this.props.children);
    };
    AnimateSharedLayout3.contextType = MotionContext2;
    return AnimateSharedLayout3;
  }(React60.Component)
);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/MotionConfig/index.js
var React61 = __toESM(require_react());
var import_react272 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/components/LazyMotion/index.js
var React62 = __toESM(require_react());
var import_react273 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/features-animation.js
var domAnimation2 = __assign(__assign({ renderer: createDomVisualElement2 }, animations2), gestureAnimations2);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/render/dom/features-max.js
var domMax2 = __assign(__assign(__assign({}, domAnimation2), drag2), layoutAnimations);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/value/use-motion-value.js
var import_react274 = __toESM(require_react());
function useMotionValue2(initial) {
  var value = useConstant2(function() {
    return motionValue2(initial);
  });
  var isStatic = (0, import_react274.useContext)(MotionConfigContext2).isStatic;
  if (isStatic) {
    var _a9 = __read((0, import_react274.useState)(initial), 2), setLatest_1 = _a9[1];
    (0, import_react274.useEffect)(function() {
      return value.onChange(setLatest_1);
    }, []);
  }
  return value;
}

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/value/use-on-change.js
var import_react275 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/value/use-spring.js
var import_react276 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/value/use-velocity.js
var import_react277 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/use-reduced-motion.js
var import_react278 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/use-animation.js
var import_react279 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/utils/use-cycle.js
var import_react280 = __toESM(require_react());

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.js
var DragControls2 = (
  /** @class */
  function() {
    function DragControls3() {
      this.componentControls = /* @__PURE__ */ new Set();
    }
    DragControls3.prototype.subscribe = function(controls) {
      var _this = this;
      this.componentControls.add(controls);
      return function() {
        return _this.componentControls.delete(controls);
      };
    };
    DragControls3.prototype.start = function(event, options2) {
      this.componentControls.forEach(function(controls) {
        controls.start(event.nativeEvent || event, options2);
      });
    };
    DragControls3.prototype.updateConstraints = function(flush) {
      if (flush === void 0) {
        flush = true;
      }
      this.componentControls.forEach(function(controls) {
        controls.updateConstraints();
      });
      flush && flushLayout();
    };
    return DragControls3;
  }()
);

// node_modules/@northlight/ui/node_modules/framer-motion/dist/es/animation/use-animated-state.js
var import_react281 = __toESM(require_react());
var createObject2 = function() {
  return {};
};
var stateVisualElement = visualElement({
  build: function() {
  },
  measureViewportBox: axisBox,
  resetTransform: function() {
  },
  restoreTransform: function() {
  },
  removeValueFromRenderState: function() {
  },
  render: function() {
  },
  scrapeMotionValuesFromProps: createObject2,
  readValueFromInstance: function(_state, key2, options2) {
    return options2.initialState[key2] || 0;
  },
  makeTargetAnimatable: function(element, _a9) {
    var transition3 = _a9.transition, transitionEnd = _a9.transitionEnd, target = __rest(_a9, ["transition", "transitionEnd"]);
    var origin = getOrigin2(target, transition3 || {}, element);
    checkTargetForNewValues2(element, target, origin);
    return __assign({ transition: transition3, transitionEnd }, target);
  }
});
var useVisualState2 = makeUseVisualState2({
  scrapeMotionValuesFromProps: createObject2,
  createRenderState: createObject2
});

// node_modules/@dnd-kit/core/dist/core.esm.js
var import_react284 = __toESM(require_react());
var import_react_dom7 = __toESM(require_react_dom());

// node_modules/@dnd-kit/utilities/dist/utilities.esm.js
var import_react282 = __toESM(require_react());
function useCombinedRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return (0, import_react282.useMemo)(
    () => (node3) => {
      refs.forEach((ref) => ref(node3));
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    refs
  );
}
var canUseDOM4 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
function isWindow(element) {
  const elementString = Object.prototype.toString.call(element);
  return elementString === "[object Window]" || // In Electron context the Window object serializes to [object global]
  elementString === "[object global]";
}
function isNode3(node3) {
  return "nodeType" in node3;
}
function getWindow3(target) {
  var _target$ownerDocument, _target$ownerDocument2;
  if (!target) {
    return window;
  }
  if (isWindow(target)) {
    return target;
  }
  if (!isNode3(target)) {
    return window;
  }
  return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
}
function isDocument(node3) {
  const {
    Document
  } = getWindow3(node3);
  return node3 instanceof Document;
}
function isHTMLElement7(node3) {
  if (isWindow(node3)) {
    return false;
  }
  return node3 instanceof getWindow3(node3).HTMLElement;
}
function isSVGElement2(node3) {
  return node3 instanceof getWindow3(node3).SVGElement;
}
function getOwnerDocument5(target) {
  if (!target) {
    return document;
  }
  if (isWindow(target)) {
    return target.document;
  }
  if (!isNode3(target)) {
    return document;
  }
  if (isDocument(target)) {
    return target;
  }
  if (isHTMLElement7(target) || isSVGElement2(target)) {
    return target.ownerDocument;
  }
  return document;
}
var useIsomorphicLayoutEffect3 = canUseDOM4 ? import_react282.useLayoutEffect : import_react282.useEffect;
function useEvent(handler) {
  const handlerRef = (0, import_react282.useRef)(handler);
  useIsomorphicLayoutEffect3(() => {
    handlerRef.current = handler;
  });
  return (0, import_react282.useCallback)(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return handlerRef.current == null ? void 0 : handlerRef.current(...args);
  }, []);
}
function useInterval3() {
  const intervalRef = (0, import_react282.useRef)(null);
  const set2 = (0, import_react282.useCallback)((listener, duration) => {
    intervalRef.current = setInterval(listener, duration);
  }, []);
  const clear = (0, import_react282.useCallback)(() => {
    if (intervalRef.current !== null) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);
  return [set2, clear];
}
function useLatestValue(value, dependencies) {
  if (dependencies === void 0) {
    dependencies = [value];
  }
  const valueRef = (0, import_react282.useRef)(value);
  useIsomorphicLayoutEffect3(() => {
    if (valueRef.current !== value) {
      valueRef.current = value;
    }
  }, dependencies);
  return valueRef;
}
function useLazyMemo(callback, dependencies) {
  const valueRef = (0, import_react282.useRef)();
  return (0, import_react282.useMemo)(
    () => {
      const newValue = callback(valueRef.current);
      valueRef.current = newValue;
      return newValue;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...dependencies]
  );
}
function useNodeRef(onChange2) {
  const onChangeHandler = useEvent(onChange2);
  const node3 = (0, import_react282.useRef)(null);
  const setNodeRef = (0, import_react282.useCallback)(
    (element) => {
      if (element !== node3.current) {
        onChangeHandler == null ? void 0 : onChangeHandler(element, node3.current);
      }
      node3.current = element;
    },
    //eslint-disable-next-line
    []
  );
  return [node3, setNodeRef];
}
function usePrevious3(value) {
  const ref = (0, import_react282.useRef)();
  (0, import_react282.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var ids = {};
function useUniqueId2(prefix4, value) {
  return (0, import_react282.useMemo)(() => {
    if (value) {
      return value;
    }
    const id3 = ids[prefix4] == null ? 0 : ids[prefix4] + 1;
    ids[prefix4] = id3;
    return prefix4 + "-" + id3;
  }, [prefix4, value]);
}
function createAdjustmentFn(modifier) {
  return function(object2) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((accumulator, adjustment) => {
      const entries = Object.entries(adjustment);
      for (const [key2, valueAdjustment] of entries) {
        const value = accumulator[key2];
        if (value != null) {
          accumulator[key2] = value + modifier * valueAdjustment;
        }
      }
      return accumulator;
    }, {
      ...object2
    });
  };
}
var add3 = createAdjustmentFn(1);
var subtract5 = createAdjustmentFn(-1);
function hasViewportRelativeCoordinates(event) {
  return "clientX" in event && "clientY" in event;
}
function isKeyboardEvent(event) {
  if (!event) {
    return false;
  }
  const {
    KeyboardEvent: KeyboardEvent2
  } = getWindow3(event.target);
  return KeyboardEvent2 && event instanceof KeyboardEvent2;
}
function isTouchEvent4(event) {
  if (!event) {
    return false;
  }
  const {
    TouchEvent: TouchEvent2
  } = getWindow3(event.target);
  return TouchEvent2 && event instanceof TouchEvent2;
}
function getEventCoordinates(event) {
  if (isTouchEvent4(event)) {
    if (event.touches && event.touches.length) {
      const {
        clientX: x,
        clientY: y
      } = event.touches[0];
      return {
        x,
        y
      };
    } else if (event.changedTouches && event.changedTouches.length) {
      const {
        clientX: x,
        clientY: y
      } = event.changedTouches[0];
      return {
        x,
        y
      };
    }
  }
  if (hasViewportRelativeCoordinates(event)) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  return null;
}
var CSS2 = Object.freeze({
  Translate: {
    toString(transform4) {
      if (!transform4) {
        return;
      }
      const {
        x,
        y
      } = transform4;
      return "translate3d(" + (x ? Math.round(x) : 0) + "px, " + (y ? Math.round(y) : 0) + "px, 0)";
    }
  },
  Scale: {
    toString(transform4) {
      if (!transform4) {
        return;
      }
      const {
        scaleX,
        scaleY
      } = transform4;
      return "scaleX(" + scaleX + ") scaleY(" + scaleY + ")";
    }
  },
  Transform: {
    toString(transform4) {
      if (!transform4) {
        return;
      }
      return [CSS2.Translate.toString(transform4), CSS2.Scale.toString(transform4)].join(" ");
    }
  },
  Transition: {
    toString(_ref4) {
      let {
        property,
        duration,
        easing
      } = _ref4;
      return property + " " + duration + "ms " + easing;
    }
  }
});
var SELECTOR = "a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";
function findFirstFocusableNode(element) {
  if (element.matches(SELECTOR)) {
    return element;
  }
  return element.querySelector(SELECTOR);
}

// node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js
var import_react283 = __toESM(require_react());
var hiddenStyles = {
  display: "none"
};
function HiddenText(_ref4) {
  let {
    id: id3,
    value
  } = _ref4;
  return import_react283.default.createElement("div", {
    id: id3,
    style: hiddenStyles
  }, value);
}
function LiveRegion3(_ref4) {
  let {
    id: id3,
    announcement,
    ariaLiveType = "assertive"
  } = _ref4;
  const visuallyHidden = {
    position: "fixed",
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(100%)",
    whiteSpace: "nowrap"
  };
  return import_react283.default.createElement("div", {
    id: id3,
    style: visuallyHidden,
    role: "status",
    "aria-live": ariaLiveType,
    "aria-atomic": true
  }, announcement);
}
function useAnnouncement() {
  const [announcement, setAnnouncement] = (0, import_react283.useState)("");
  const announce = (0, import_react283.useCallback)((value) => {
    if (value != null) {
      setAnnouncement(value);
    }
  }, []);
  return {
    announce,
    announcement
  };
}

// node_modules/@dnd-kit/core/dist/core.esm.js
var DndMonitorContext = (0, import_react284.createContext)(null);
function useDndMonitor(listener) {
  const registerListener = (0, import_react284.useContext)(DndMonitorContext);
  (0, import_react284.useEffect)(() => {
    if (!registerListener) {
      throw new Error("useDndMonitor must be used within a children of <DndContext>");
    }
    const unsubscribe = registerListener(listener);
    return unsubscribe;
  }, [listener, registerListener]);
}
function useDndMonitorProvider() {
  const [listeners] = (0, import_react284.useState)(() => /* @__PURE__ */ new Set());
  const registerListener = (0, import_react284.useCallback)((listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  }, [listeners]);
  const dispatch = (0, import_react284.useCallback)((_ref4) => {
    let {
      type,
      event
    } = _ref4;
    listeners.forEach((listener) => {
      var _listener$type;
      return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
    });
  }, [listeners]);
  return [dispatch, registerListener];
}
var defaultScreenReaderInstructions = {
  draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
};
var defaultAnnouncements = {
  onDragStart(_ref4) {
    let {
      active
    } = _ref4;
    return "Picked up draggable item " + active.id + ".";
  },
  onDragOver(_ref23) {
    let {
      active,
      over
    } = _ref23;
    if (over) {
      return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
    }
    return "Draggable item " + active.id + " is no longer over a droppable area.";
  },
  onDragEnd(_ref32) {
    let {
      active,
      over
    } = _ref32;
    if (over) {
      return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
    }
    return "Draggable item " + active.id + " was dropped.";
  },
  onDragCancel(_ref4) {
    let {
      active
    } = _ref4;
    return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
  }
};
function Accessibility(_ref4) {
  let {
    announcements = defaultAnnouncements,
    container: container2,
    hiddenTextDescribedById,
    screenReaderInstructions = defaultScreenReaderInstructions
  } = _ref4;
  const {
    announce,
    announcement
  } = useAnnouncement();
  const liveRegionId = useUniqueId2("DndLiveRegion");
  const [mounted, setMounted] = (0, import_react284.useState)(false);
  (0, import_react284.useEffect)(() => {
    setMounted(true);
  }, []);
  useDndMonitor((0, import_react284.useMemo)(() => ({
    onDragStart(_ref23) {
      let {
        active
      } = _ref23;
      announce(announcements.onDragStart({
        active
      }));
    },
    onDragMove(_ref32) {
      let {
        active,
        over
      } = _ref32;
      if (announcements.onDragMove) {
        announce(announcements.onDragMove({
          active,
          over
        }));
      }
    },
    onDragOver(_ref42) {
      let {
        active,
        over
      } = _ref42;
      announce(announcements.onDragOver({
        active,
        over
      }));
    },
    onDragEnd(_ref5) {
      let {
        active,
        over
      } = _ref5;
      announce(announcements.onDragEnd({
        active,
        over
      }));
    },
    onDragCancel(_ref6) {
      let {
        active,
        over
      } = _ref6;
      announce(announcements.onDragCancel({
        active,
        over
      }));
    }
  }), [announce, announcements]));
  if (!mounted) {
    return null;
  }
  const markup = import_react284.default.createElement(import_react284.default.Fragment, null, import_react284.default.createElement(HiddenText, {
    id: hiddenTextDescribedById,
    value: screenReaderInstructions.draggable
  }), import_react284.default.createElement(LiveRegion3, {
    id: liveRegionId,
    announcement
  }));
  return container2 ? (0, import_react_dom7.createPortal)(markup, container2) : markup;
}
var Action;
(function(Action2) {
  Action2["DragStart"] = "dragStart";
  Action2["DragMove"] = "dragMove";
  Action2["DragEnd"] = "dragEnd";
  Action2["DragCancel"] = "dragCancel";
  Action2["DragOver"] = "dragOver";
  Action2["RegisterDroppable"] = "registerDroppable";
  Action2["SetDroppableDisabled"] = "setDroppableDisabled";
  Action2["UnregisterDroppable"] = "unregisterDroppable";
})(Action || (Action = {}));
function noop8() {
}
function useSensor(sensor, options2) {
  return (0, import_react284.useMemo)(
    () => ({
      sensor,
      options: options2 != null ? options2 : {}
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [sensor, options2]
  );
}
function useSensors() {
  for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {
    sensors[_key] = arguments[_key];
  }
  return (0, import_react284.useMemo)(
    () => [...sensors].filter((sensor) => sensor != null),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...sensors]
  );
}
var defaultCoordinates = Object.freeze({
  x: 0,
  y: 0
});
function distanceBetween(p1, p2) {
  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}
function getRelativeTransformOrigin(event, rect) {
  const eventCoordinates = getEventCoordinates(event);
  if (!eventCoordinates) {
    return "0 0";
  }
  const transformOrigin2 = {
    x: (eventCoordinates.x - rect.left) / rect.width * 100,
    y: (eventCoordinates.y - rect.top) / rect.height * 100
  };
  return transformOrigin2.x + "% " + transformOrigin2.y + "%";
}
function sortCollisionsAsc(_ref4, _ref23) {
  let {
    data: {
      value: a2
    }
  } = _ref4;
  let {
    data: {
      value: b2
    }
  } = _ref23;
  return a2 - b2;
}
function sortCollisionsDesc(_ref32, _ref4) {
  let {
    data: {
      value: a2
    }
  } = _ref32;
  let {
    data: {
      value: b2
    }
  } = _ref4;
  return b2 - a2;
}
function cornersOfRectangle(_ref5) {
  let {
    left: left2,
    top: top2,
    height,
    width
  } = _ref5;
  return [{
    x: left2,
    y: top2
  }, {
    x: left2 + width,
    y: top2
  }, {
    x: left2,
    y: top2 + height
  }, {
    x: left2 + width,
    y: top2 + height
  }];
}
function getFirstCollision(collisions, property) {
  if (!collisions || collisions.length === 0) {
    return null;
  }
  const [firstCollision] = collisions;
  return property ? firstCollision[property] : firstCollision;
}
function centerOfRectangle(rect, left2, top2) {
  if (left2 === void 0) {
    left2 = rect.left;
  }
  if (top2 === void 0) {
    top2 = rect.top;
  }
  return {
    x: left2 + rect.width * 0.5,
    y: top2 + rect.height * 0.5
  };
}
var closestCenter = (_ref4) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref4;
  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id: id3
    } = droppableContainer;
    const rect = droppableRects.get(id3);
    if (rect) {
      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
      collisions.push({
        id: id3,
        data: {
          droppableContainer,
          value: distBetween
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
var closestCorners = (_ref4) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref4;
  const corners = cornersOfRectangle(collisionRect);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id: id3
    } = droppableContainer;
    const rect = droppableRects.get(id3);
    if (rect) {
      const rectCorners = cornersOfRectangle(rect);
      const distances = corners.reduce((accumulator, corner, index5) => {
        return accumulator + distanceBetween(rectCorners[index5], corner);
      }, 0);
      const effectiveDistance = Number((distances / 4).toFixed(4));
      collisions.push({
        id: id3,
        data: {
          droppableContainer,
          value: effectiveDistance
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
function getIntersectionRatio(entry, target) {
  const top2 = Math.max(target.top, entry.top);
  const left2 = Math.max(target.left, entry.left);
  const right2 = Math.min(target.left + target.width, entry.left + entry.width);
  const bottom2 = Math.min(target.top + target.height, entry.top + entry.height);
  const width = right2 - left2;
  const height = bottom2 - top2;
  if (left2 < right2 && top2 < bottom2) {
    const targetArea = target.width * target.height;
    const entryArea = entry.width * entry.height;
    const intersectionArea = width * height;
    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
    return Number(intersectionRatio.toFixed(4));
  }
  return 0;
}
var rectIntersection = (_ref4) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref4;
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id: id3
    } = droppableContainer;
    const rect = droppableRects.get(id3);
    if (rect) {
      const intersectionRatio = getIntersectionRatio(rect, collisionRect);
      if (intersectionRatio > 0) {
        collisions.push({
          id: id3,
          data: {
            droppableContainer,
            value: intersectionRatio
          }
        });
      }
    }
  }
  return collisions.sort(sortCollisionsDesc);
};
function isPointWithinRect(point, rect) {
  const {
    top: top2,
    left: left2,
    bottom: bottom2,
    right: right2
  } = rect;
  return top2 <= point.y && point.y <= bottom2 && left2 <= point.x && point.x <= right2;
}
var pointerWithin = (_ref4) => {
  let {
    droppableContainers,
    droppableRects,
    pointerCoordinates
  } = _ref4;
  if (!pointerCoordinates) {
    return [];
  }
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id: id3
    } = droppableContainer;
    const rect = droppableRects.get(id3);
    if (rect && isPointWithinRect(pointerCoordinates, rect)) {
      const corners = cornersOfRectangle(rect);
      const distances = corners.reduce((accumulator, corner) => {
        return accumulator + distanceBetween(pointerCoordinates, corner);
      }, 0);
      const effectiveDistance = Number((distances / 4).toFixed(4));
      collisions.push({
        id: id3,
        data: {
          droppableContainer,
          value: effectiveDistance
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
function adjustScale(transform4, rect1, rect2) {
  return {
    ...transform4,
    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
  };
}
function getRectDelta(rect1, rect2) {
  return rect1 && rect2 ? {
    x: rect1.left - rect2.left,
    y: rect1.top - rect2.top
  } : defaultCoordinates;
}
function createRectAdjustmentFn(modifier) {
  return function adjustClientRect(rect) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((acc, adjustment) => ({
      ...acc,
      top: acc.top + modifier * adjustment.y,
      bottom: acc.bottom + modifier * adjustment.y,
      left: acc.left + modifier * adjustment.x,
      right: acc.right + modifier * adjustment.x
    }), {
      ...rect
    });
  };
}
var getAdjustedRect = createRectAdjustmentFn(1);
function parseTransform(transform4) {
  if (transform4.startsWith("matrix3d(")) {
    const transformArray = transform4.slice(9, -1).split(/, /);
    return {
      x: +transformArray[12],
      y: +transformArray[13],
      scaleX: +transformArray[0],
      scaleY: +transformArray[5]
    };
  } else if (transform4.startsWith("matrix(")) {
    const transformArray = transform4.slice(7, -1).split(/, /);
    return {
      x: +transformArray[4],
      y: +transformArray[5],
      scaleX: +transformArray[0],
      scaleY: +transformArray[3]
    };
  }
  return null;
}
function inverseTransform(rect, transform4, transformOrigin2) {
  const parsedTransform = parseTransform(transform4);
  if (!parsedTransform) {
    return rect;
  }
  const {
    scaleX,
    scaleY,
    x: translateX,
    y: translateY
  } = parsedTransform;
  const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin2);
  const y = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin2.slice(transformOrigin2.indexOf(" ") + 1));
  const w2 = scaleX ? rect.width / scaleX : rect.width;
  const h = scaleY ? rect.height / scaleY : rect.height;
  return {
    width: w2,
    height: h,
    top: y,
    right: x + w2,
    bottom: y + h,
    left: x
  };
}
var defaultOptions4 = {
  ignoreTransform: false
};
function getClientRect(element, options2) {
  if (options2 === void 0) {
    options2 = defaultOptions4;
  }
  let rect = element.getBoundingClientRect();
  if (options2.ignoreTransform) {
    const {
      transform: transform4,
      transformOrigin: transformOrigin2
    } = getWindow3(element).getComputedStyle(element);
    if (transform4) {
      rect = inverseTransform(rect, transform4, transformOrigin2);
    }
  }
  const {
    top: top2,
    left: left2,
    width,
    height,
    bottom: bottom2,
    right: right2
  } = rect;
  return {
    top: top2,
    left: left2,
    width,
    height,
    bottom: bottom2,
    right: right2
  };
}
function getTransformAgnosticClientRect(element) {
  return getClientRect(element, {
    ignoreTransform: true
  });
}
function getWindowClientRect(element) {
  const width = element.innerWidth;
  const height = element.innerHeight;
  return {
    top: 0,
    left: 0,
    right: width,
    bottom: height,
    width,
    height
  };
}
function isFixed(node3, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow3(node3).getComputedStyle(node3);
  }
  return computedStyle.position === "fixed";
}
function isScrollable(element, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow3(element).getComputedStyle(element);
  }
  const overflowRegex = /(auto|scroll|overlay)/;
  const properties2 = ["overflow", "overflowX", "overflowY"];
  return properties2.some((property) => {
    const value = computedStyle[property];
    return typeof value === "string" ? overflowRegex.test(value) : false;
  });
}
function getScrollableAncestors(element, limit) {
  const scrollParents = [];
  function findScrollableAncestors(node3) {
    if (limit != null && scrollParents.length >= limit) {
      return scrollParents;
    }
    if (!node3) {
      return scrollParents;
    }
    if (isDocument(node3) && node3.scrollingElement != null && !scrollParents.includes(node3.scrollingElement)) {
      scrollParents.push(node3.scrollingElement);
      return scrollParents;
    }
    if (!isHTMLElement7(node3) || isSVGElement2(node3)) {
      return scrollParents;
    }
    if (scrollParents.includes(node3)) {
      return scrollParents;
    }
    const computedStyle = getWindow3(element).getComputedStyle(node3);
    if (node3 !== element) {
      if (isScrollable(node3, computedStyle)) {
        scrollParents.push(node3);
      }
    }
    if (isFixed(node3, computedStyle)) {
      return scrollParents;
    }
    return findScrollableAncestors(node3.parentNode);
  }
  if (!element) {
    return scrollParents;
  }
  return findScrollableAncestors(element);
}
function getFirstScrollableAncestor(node3) {
  const [firstScrollableAncestor] = getScrollableAncestors(node3, 1);
  return firstScrollableAncestor != null ? firstScrollableAncestor : null;
}
function getScrollableElement(element) {
  if (!canUseDOM4 || !element) {
    return null;
  }
  if (isWindow(element)) {
    return element;
  }
  if (!isNode3(element)) {
    return null;
  }
  if (isDocument(element) || element === getOwnerDocument5(element).scrollingElement) {
    return window;
  }
  if (isHTMLElement7(element)) {
    return element;
  }
  return null;
}
function getScrollXCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollX;
  }
  return element.scrollLeft;
}
function getScrollYCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollY;
  }
  return element.scrollTop;
}
function getScrollCoordinates(element) {
  return {
    x: getScrollXCoordinate(element),
    y: getScrollYCoordinate(element)
  };
}
var Direction;
(function(Direction2) {
  Direction2[Direction2["Forward"] = 1] = "Forward";
  Direction2[Direction2["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));
function isDocumentScrollingElement(element) {
  if (!canUseDOM4 || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
var defaultThreshold = {
  x: 0.2,
  y: 0.2
};
function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref4, acceleration, thresholdPercentage) {
  let {
    top: top2,
    left: left2,
    right: right2,
    bottom: bottom2
  } = _ref4;
  if (acceleration === void 0) {
    acceleration = 10;
  }
  if (thresholdPercentage === void 0) {
    thresholdPercentage = defaultThreshold;
  }
  const {
    isTop,
    isBottom,
    isLeft,
    isRight
  } = getScrollPosition(scrollContainer);
  const direction2 = {
    x: 0,
    y: 0
  };
  const speed = {
    x: 0,
    y: 0
  };
  const threshold = {
    height: scrollContainerRect.height * thresholdPercentage.y,
    width: scrollContainerRect.width * thresholdPercentage.x
  };
  if (!isTop && top2 <= scrollContainerRect.top + threshold.height) {
    direction2.y = Direction.Backward;
    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top2) / threshold.height);
  } else if (!isBottom && bottom2 >= scrollContainerRect.bottom - threshold.height) {
    direction2.y = Direction.Forward;
    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom2) / threshold.height);
  }
  if (!isRight && right2 >= scrollContainerRect.right - threshold.width) {
    direction2.x = Direction.Forward;
    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right2) / threshold.width);
  } else if (!isLeft && left2 <= scrollContainerRect.left + threshold.width) {
    direction2.x = Direction.Backward;
    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left2) / threshold.width);
  }
  return {
    direction: direction2,
    speed
  };
}
function getScrollElementRect(element) {
  if (element === document.scrollingElement) {
    const {
      innerWidth,
      innerHeight
    } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }
  const {
    top: top2,
    left: left2,
    right: right2,
    bottom: bottom2
  } = element.getBoundingClientRect();
  return {
    top: top2,
    left: left2,
    right: right2,
    bottom: bottom2,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getScrollOffsets(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node3) => {
    return add3(acc, getScrollCoordinates(node3));
  }, defaultCoordinates);
}
function getScrollXOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node3) => {
    return acc + getScrollXCoordinate(node3);
  }, 0);
}
function getScrollYOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node3) => {
    return acc + getScrollYCoordinate(node3);
  }, 0);
}
function scrollIntoViewIfNeeded(element, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  if (!element) {
    return;
  }
  const {
    top: top2,
    left: left2,
    bottom: bottom2,
    right: right2
  } = measure(element);
  const firstScrollableAncestor = getFirstScrollableAncestor(element);
  if (!firstScrollableAncestor) {
    return;
  }
  if (bottom2 <= 0 || right2 <= 0 || top2 >= window.innerHeight || left2 >= window.innerWidth) {
    element.scrollIntoView({
      block: "center",
      inline: "center"
    });
  }
}
var properties = [["x", ["left", "right"], getScrollXOffset], ["y", ["top", "bottom"], getScrollYOffset]];
var Rect = class {
  constructor(rect, element) {
    this.rect = void 0;
    this.width = void 0;
    this.height = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.right = void 0;
    this.left = void 0;
    const scrollableAncestors = getScrollableAncestors(element);
    const scrollOffsets = getScrollOffsets(scrollableAncestors);
    this.rect = {
      ...rect
    };
    this.width = rect.width;
    this.height = rect.height;
    for (const [axis, keys3, getScrollOffset] of properties) {
      for (const key2 of keys3) {
        Object.defineProperty(this, key2, {
          get: () => {
            const currentOffsets = getScrollOffset(scrollableAncestors);
            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
            return this.rect[key2] + scrollOffsetsDeltla;
          },
          enumerable: true
        });
      }
    }
    Object.defineProperty(this, "rect", {
      enumerable: false
    });
  }
};
var Listeners = class {
  constructor(target) {
    this.target = void 0;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _this$target;
        return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
      });
    };
    this.target = target;
  }
  add(eventName, handler, options2) {
    var _this$target2;
    (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options2);
    this.listeners.push([eventName, handler, options2]);
  }
};
function getEventListenerTarget(target) {
  const {
    EventTarget
  } = getWindow3(target);
  return target instanceof EventTarget ? target : getOwnerDocument5(target);
}
function hasExceededDistance(delta2, measurement) {
  const dx = Math.abs(delta2.x);
  const dy = Math.abs(delta2.y);
  if (typeof measurement === "number") {
    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
  }
  if ("x" in measurement && "y" in measurement) {
    return dx > measurement.x && dy > measurement.y;
  }
  if ("x" in measurement) {
    return dx > measurement.x;
  }
  if ("y" in measurement) {
    return dy > measurement.y;
  }
  return false;
}
var EventName;
(function(EventName2) {
  EventName2["Click"] = "click";
  EventName2["DragStart"] = "dragstart";
  EventName2["Keydown"] = "keydown";
  EventName2["ContextMenu"] = "contextmenu";
  EventName2["Resize"] = "resize";
  EventName2["SelectionChange"] = "selectionchange";
  EventName2["VisibilityChange"] = "visibilitychange";
})(EventName || (EventName = {}));
function preventDefault(event) {
  event.preventDefault();
}
function stopPropagation(event) {
  event.stopPropagation();
}
var KeyboardCode;
(function(KeyboardCode2) {
  KeyboardCode2["Space"] = "Space";
  KeyboardCode2["Down"] = "ArrowDown";
  KeyboardCode2["Right"] = "ArrowRight";
  KeyboardCode2["Left"] = "ArrowLeft";
  KeyboardCode2["Up"] = "ArrowUp";
  KeyboardCode2["Esc"] = "Escape";
  KeyboardCode2["Enter"] = "Enter";
})(KeyboardCode || (KeyboardCode = {}));
var defaultKeyboardCodes = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter]
};
var defaultKeyboardCoordinateGetter = (event, _ref4) => {
  let {
    currentCoordinates
  } = _ref4;
  switch (event.code) {
    case KeyboardCode.Right:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x + 25
      };
    case KeyboardCode.Left:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x - 25
      };
    case KeyboardCode.Down:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y + 25
      };
    case KeyboardCode.Up:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y - 25
      };
  }
  return void 0;
};
var KeyboardSensor = class {
  constructor(props) {
    this.props = void 0;
    this.autoScrollEnabled = false;
    this.referenceCoordinates = void 0;
    this.listeners = void 0;
    this.windowListeners = void 0;
    this.props = props;
    const {
      event: {
        target
      }
    } = props;
    this.props = props;
    this.listeners = new Listeners(getOwnerDocument5(target));
    this.windowListeners = new Listeners(getWindow3(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    this.handleStart();
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
  }
  handleStart() {
    const {
      activeNode,
      onStart
    } = this.props;
    const node3 = activeNode.node.current;
    if (node3) {
      scrollIntoViewIfNeeded(node3);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const {
        active,
        context: context2,
        options: options2
      } = this.props;
      const {
        keyboardCodes = defaultKeyboardCodes,
        coordinateGetter = defaultKeyboardCoordinateGetter,
        scrollBehavior = "smooth"
      } = options2;
      const {
        code
      } = event;
      if (keyboardCodes.end.includes(code)) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.includes(code)) {
        this.handleCancel(event);
        return;
      }
      const {
        collisionRect
      } = context2.current;
      const currentCoordinates = collisionRect ? {
        x: collisionRect.left,
        y: collisionRect.top
      } : defaultCoordinates;
      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }
      const newCoordinates = coordinateGetter(event, {
        active,
        context: context2.current,
        currentCoordinates
      });
      if (newCoordinates) {
        const coordinatesDelta = subtract5(newCoordinates, currentCoordinates);
        const scrollDelta = {
          x: 0,
          y: 0
        };
        const {
          scrollableAncestors
        } = context2.current;
        for (const scrollContainer of scrollableAncestors) {
          const direction2 = event.code;
          const {
            isTop,
            isRight,
            isLeft,
            isBottom,
            maxScroll,
            minScroll
          } = getScrollPosition(scrollContainer);
          const scrollElementRect = getScrollElementRect(scrollContainer);
          const clampedCoordinates = {
            x: Math.min(direction2 === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction2 === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
            y: Math.min(direction2 === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction2 === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
          };
          const canScrollX = direction2 === KeyboardCode.Right && !isRight || direction2 === KeyboardCode.Left && !isLeft;
          const canScrollY = direction2 === KeyboardCode.Down && !isBottom || direction2 === KeyboardCode.Up && !isTop;
          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
            const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
            const canScrollToNewCoordinates = direction2 === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction2 === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;
            if (canScrollToNewCoordinates && !coordinatesDelta.y) {
              scrollContainer.scrollTo({
                left: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
            } else {
              scrollDelta.x = direction2 === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
            }
            if (scrollDelta.x) {
              scrollContainer.scrollBy({
                left: -scrollDelta.x,
                behavior: scrollBehavior
              });
            }
            break;
          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
            const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
            const canScrollToNewCoordinates = direction2 === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction2 === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
            if (canScrollToNewCoordinates && !coordinatesDelta.x) {
              scrollContainer.scrollTo({
                top: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
            } else {
              scrollDelta.y = direction2 === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
            }
            if (scrollDelta.y) {
              scrollContainer.scrollBy({
                top: -scrollDelta.y,
                behavior: scrollBehavior
              });
            }
            break;
          }
        }
        this.handleMove(event, add3(subtract5(newCoordinates, this.referenceCoordinates), scrollDelta));
      }
    }
  }
  handleMove(event, coordinates) {
    const {
      onMove
    } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const {
      onEnd
    } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const {
      onCancel
    } = this.props;
    event.preventDefault();
    this.detach();
    onCancel();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
};
KeyboardSensor.activators = [{
  eventName: "onKeyDown",
  handler: (event, _ref4, _ref23) => {
    let {
      keyboardCodes = defaultKeyboardCodes,
      onActivation
    } = _ref4;
    let {
      active
    } = _ref23;
    const {
      code
    } = event.nativeEvent;
    if (keyboardCodes.start.includes(code)) {
      const activator = active.activatorNode.current;
      if (activator && event.target !== activator) {
        return false;
      }
      event.preventDefault();
      onActivation == null ? void 0 : onActivation({
        event: event.nativeEvent
      });
      return true;
    }
    return false;
  }
}];
function isDistanceConstraint(constraint) {
  return Boolean(constraint && "distance" in constraint);
}
function isDelayConstraint(constraint) {
  return Boolean(constraint && "delay" in constraint);
}
var AbstractPointerSensor = class {
  constructor(props, events2, listenerTarget) {
    var _getEventCoordinates;
    if (listenerTarget === void 0) {
      listenerTarget = getEventListenerTarget(props.event.target);
    }
    this.props = void 0;
    this.events = void 0;
    this.autoScrollEnabled = true;
    this.document = void 0;
    this.activated = false;
    this.initialCoordinates = void 0;
    this.timeoutId = null;
    this.listeners = void 0;
    this.documentListeners = void 0;
    this.windowListeners = void 0;
    this.props = props;
    this.events = events2;
    const {
      event
    } = props;
    const {
      target
    } = event;
    this.props = props;
    this.events = events2;
    this.document = getOwnerDocument5(target);
    this.documentListeners = new Listeners(this.document);
    this.listeners = new Listeners(listenerTarget);
    this.windowListeners = new Listeners(getWindow3(target));
    this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
    this.handleStart = this.handleStart.bind(this);
    this.handleMove = this.handleMove.bind(this);
    this.handleEnd = this.handleEnd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.removeTextSelection = this.removeTextSelection.bind(this);
    this.attach();
  }
  attach() {
    const {
      events: events2,
      props: {
        options: {
          activationConstraint,
          bypassActivationConstraint
        }
      }
    } = this;
    this.listeners.add(events2.move.name, this.handleMove, {
      passive: false
    });
    this.listeners.add(events2.end.name, this.handleEnd);
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.DragStart, preventDefault);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    this.windowListeners.add(EventName.ContextMenu, preventDefault);
    this.documentListeners.add(EventName.Keydown, this.handleKeydown);
    if (activationConstraint) {
      if (bypassActivationConstraint != null && bypassActivationConstraint({
        event: this.props.event,
        activeNode: this.props.activeNode,
        options: this.props.options
      })) {
        return this.handleStart();
      }
      if (isDelayConstraint(activationConstraint)) {
        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
        return;
      }
      if (isDistanceConstraint(activationConstraint)) {
        return;
      }
    }
    this.handleStart();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
    setTimeout(this.documentListeners.removeAll, 50);
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  handleStart() {
    const {
      initialCoordinates
    } = this;
    const {
      onStart
    } = this.props;
    if (initialCoordinates) {
      this.activated = true;
      this.documentListeners.add(EventName.Click, stopPropagation, {
        capture: true
      });
      this.removeTextSelection();
      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
      onStart(initialCoordinates);
    }
  }
  handleMove(event) {
    var _getEventCoordinates2;
    const {
      activated,
      initialCoordinates,
      props
    } = this;
    const {
      onMove,
      options: {
        activationConstraint
      }
    } = props;
    if (!initialCoordinates) {
      return;
    }
    const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
    const delta2 = subtract5(initialCoordinates, coordinates);
    if (!activated && activationConstraint) {
      if (isDistanceConstraint(activationConstraint)) {
        if (activationConstraint.tolerance != null && hasExceededDistance(delta2, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
        if (hasExceededDistance(delta2, activationConstraint.distance)) {
          return this.handleStart();
        }
      }
      if (isDelayConstraint(activationConstraint)) {
        if (hasExceededDistance(delta2, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
      }
      return;
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    onMove(coordinates);
  }
  handleEnd() {
    const {
      onEnd
    } = this.props;
    this.detach();
    onEnd();
  }
  handleCancel() {
    const {
      onCancel
    } = this.props;
    this.detach();
    onCancel();
  }
  handleKeydown(event) {
    if (event.code === KeyboardCode.Esc) {
      this.handleCancel();
    }
  }
  removeTextSelection() {
    var _this$document$getSel;
    (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
  }
};
var events = {
  move: {
    name: "pointermove"
  },
  end: {
    name: "pointerup"
  }
};
var PointerSensor = class extends AbstractPointerSensor {
  constructor(props) {
    const {
      event
    } = props;
    const listenerTarget = getOwnerDocument5(event.target);
    super(props, events, listenerTarget);
  }
};
PointerSensor.activators = [{
  eventName: "onPointerDown",
  handler: (_ref4, _ref23) => {
    let {
      nativeEvent: event
    } = _ref4;
    let {
      onActivation
    } = _ref23;
    if (!event.isPrimary || event.button !== 0) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var events$1 = {
  move: {
    name: "mousemove"
  },
  end: {
    name: "mouseup"
  }
};
var MouseButton;
(function(MouseButton2) {
  MouseButton2[MouseButton2["RightClick"] = 2] = "RightClick";
})(MouseButton || (MouseButton = {}));
var MouseSensor = class extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$1, getOwnerDocument5(props.event.target));
  }
};
MouseSensor.activators = [{
  eventName: "onMouseDown",
  handler: (_ref4, _ref23) => {
    let {
      nativeEvent: event
    } = _ref4;
    let {
      onActivation
    } = _ref23;
    if (event.button === MouseButton.RightClick) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var events$2 = {
  move: {
    name: "touchmove"
  },
  end: {
    name: "touchend"
  }
};
var TouchSensor = class extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$2);
  }
  static setup() {
    window.addEventListener(events$2.move.name, noop10, {
      capture: false,
      passive: false
    });
    return function teardown() {
      window.removeEventListener(events$2.move.name, noop10);
    };
    function noop10() {
    }
  }
};
TouchSensor.activators = [{
  eventName: "onTouchStart",
  handler: (_ref4, _ref23) => {
    let {
      nativeEvent: event
    } = _ref4;
    let {
      onActivation
    } = _ref23;
    const {
      touches
    } = event;
    if (touches.length > 1) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var AutoScrollActivator;
(function(AutoScrollActivator2) {
  AutoScrollActivator2[AutoScrollActivator2["Pointer"] = 0] = "Pointer";
  AutoScrollActivator2[AutoScrollActivator2["DraggableRect"] = 1] = "DraggableRect";
})(AutoScrollActivator || (AutoScrollActivator = {}));
var TraversalOrder;
(function(TraversalOrder2) {
  TraversalOrder2[TraversalOrder2["TreeOrder"] = 0] = "TreeOrder";
  TraversalOrder2[TraversalOrder2["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
})(TraversalOrder || (TraversalOrder = {}));
function useAutoScroller(_ref4) {
  let {
    acceleration,
    activator = AutoScrollActivator.Pointer,
    canScroll,
    draggingRect,
    enabled,
    interval = 5,
    order: order3 = TraversalOrder.TreeOrder,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects,
    delta: delta2,
    threshold
  } = _ref4;
  const scrollIntent = useScrollIntent({
    delta: delta2,
    disabled: !enabled
  });
  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval3();
  const scrollSpeed = (0, import_react284.useRef)({
    x: 0,
    y: 0
  });
  const scrollDirection = (0, import_react284.useRef)({
    x: 0,
    y: 0
  });
  const rect = (0, import_react284.useMemo)(() => {
    switch (activator) {
      case AutoScrollActivator.Pointer:
        return pointerCoordinates ? {
          top: pointerCoordinates.y,
          bottom: pointerCoordinates.y,
          left: pointerCoordinates.x,
          right: pointerCoordinates.x
        } : null;
      case AutoScrollActivator.DraggableRect:
        return draggingRect;
    }
  }, [activator, draggingRect, pointerCoordinates]);
  const scrollContainerRef = (0, import_react284.useRef)(null);
  const autoScroll = (0, import_react284.useCallback)(() => {
    const scrollContainer = scrollContainerRef.current;
    if (!scrollContainer) {
      return;
    }
    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
    scrollContainer.scrollBy(scrollLeft, scrollTop);
  }, []);
  const sortedScrollableAncestors = (0, import_react284.useMemo)(() => order3 === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order3, scrollableAncestors]);
  (0, import_react284.useEffect)(
    () => {
      if (!enabled || !scrollableAncestors.length || !rect) {
        clearAutoScrollInterval();
        return;
      }
      for (const scrollContainer of sortedScrollableAncestors) {
        if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
          continue;
        }
        const index5 = scrollableAncestors.indexOf(scrollContainer);
        const scrollContainerRect = scrollableAncestorRects[index5];
        if (!scrollContainerRect) {
          continue;
        }
        const {
          direction: direction2,
          speed
        } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
        for (const axis of ["x", "y"]) {
          if (!scrollIntent[axis][direction2[axis]]) {
            speed[axis] = 0;
            direction2[axis] = 0;
          }
        }
        if (speed.x > 0 || speed.y > 0) {
          clearAutoScrollInterval();
          scrollContainerRef.current = scrollContainer;
          setAutoScrollInterval(autoScroll, interval);
          scrollSpeed.current = speed;
          scrollDirection.current = direction2;
          return;
        }
      }
      scrollSpeed.current = {
        x: 0,
        y: 0
      };
      scrollDirection.current = {
        x: 0,
        y: 0
      };
      clearAutoScrollInterval();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      acceleration,
      autoScroll,
      canScroll,
      clearAutoScrollInterval,
      enabled,
      interval,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(rect),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(scrollIntent),
      setAutoScrollInterval,
      scrollableAncestors,
      sortedScrollableAncestors,
      scrollableAncestorRects,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(threshold)
    ]
  );
}
var defaultScrollIntent = {
  x: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  },
  y: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  }
};
function useScrollIntent(_ref23) {
  let {
    delta: delta2,
    disabled
  } = _ref23;
  const previousDelta = usePrevious3(delta2);
  return useLazyMemo((previousIntent) => {
    if (disabled || !previousDelta || !previousIntent) {
      return defaultScrollIntent;
    }
    const direction2 = {
      x: Math.sign(delta2.x - previousDelta.x),
      y: Math.sign(delta2.y - previousDelta.y)
    };
    return {
      x: {
        [Direction.Backward]: previousIntent.x[Direction.Backward] || direction2.x === -1,
        [Direction.Forward]: previousIntent.x[Direction.Forward] || direction2.x === 1
      },
      y: {
        [Direction.Backward]: previousIntent.y[Direction.Backward] || direction2.y === -1,
        [Direction.Forward]: previousIntent.y[Direction.Forward] || direction2.y === 1
      }
    };
  }, [disabled, delta2, previousDelta]);
}
function useCachedNode(draggableNodes, id3) {
  const draggableNode = id3 !== null ? draggableNodes.get(id3) : void 0;
  const node3 = draggableNode ? draggableNode.node.current : null;
  return useLazyMemo((cachedNode) => {
    var _ref4;
    if (id3 === null) {
      return null;
    }
    return (_ref4 = node3 != null ? node3 : cachedNode) != null ? _ref4 : null;
  }, [node3, id3]);
}
function useCombineActivators(sensors, getSyntheticHandler) {
  return (0, import_react284.useMemo)(() => sensors.reduce((accumulator, sensor) => {
    const {
      sensor: Sensor
    } = sensor;
    const sensorActivators = Sensor.activators.map((activator) => ({
      eventName: activator.eventName,
      handler: getSyntheticHandler(activator.handler, sensor)
    }));
    return [...accumulator, ...sensorActivators];
  }, []), [sensors, getSyntheticHandler]);
}
var MeasuringStrategy;
(function(MeasuringStrategy2) {
  MeasuringStrategy2[MeasuringStrategy2["Always"] = 0] = "Always";
  MeasuringStrategy2[MeasuringStrategy2["BeforeDragging"] = 1] = "BeforeDragging";
  MeasuringStrategy2[MeasuringStrategy2["WhileDragging"] = 2] = "WhileDragging";
})(MeasuringStrategy || (MeasuringStrategy = {}));
var MeasuringFrequency;
(function(MeasuringFrequency2) {
  MeasuringFrequency2["Optimized"] = "optimized";
})(MeasuringFrequency || (MeasuringFrequency = {}));
var defaultValue = /* @__PURE__ */ new Map();
function useDroppableMeasuring(containers, _ref4) {
  let {
    dragging,
    dependencies,
    config: config2
  } = _ref4;
  const [queue, setQueue] = (0, import_react284.useState)(null);
  const {
    frequency,
    measure,
    strategy
  } = config2;
  const containersRef = (0, import_react284.useRef)(containers);
  const disabled = isDisabled3();
  const disabledRef = useLatestValue(disabled);
  const measureDroppableContainers = (0, import_react284.useCallback)(function(ids2) {
    if (ids2 === void 0) {
      ids2 = [];
    }
    if (disabledRef.current) {
      return;
    }
    setQueue((value) => {
      if (value === null) {
        return ids2;
      }
      return value.concat(ids2.filter((id3) => !value.includes(id3)));
    });
  }, [disabledRef]);
  const timeoutId = (0, import_react284.useRef)(null);
  const droppableRects = useLazyMemo((previousValue) => {
    if (disabled && !dragging) {
      return defaultValue;
    }
    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {
      const map2 = /* @__PURE__ */ new Map();
      for (let container2 of containers) {
        if (!container2) {
          continue;
        }
        if (queue && queue.length > 0 && !queue.includes(container2.id) && container2.rect.current) {
          map2.set(container2.id, container2.rect.current);
          continue;
        }
        const node3 = container2.node.current;
        const rect = node3 ? new Rect(measure(node3), node3) : null;
        container2.rect.current = rect;
        if (rect) {
          map2.set(container2.id, rect);
        }
      }
      return map2;
    }
    return previousValue;
  }, [containers, queue, dragging, disabled, measure]);
  (0, import_react284.useEffect)(() => {
    containersRef.current = containers;
  }, [containers]);
  (0, import_react284.useEffect)(
    () => {
      if (disabled) {
        return;
      }
      measureDroppableContainers();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [dragging, disabled]
  );
  (0, import_react284.useEffect)(
    () => {
      if (queue && queue.length > 0) {
        setQueue(null);
      }
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [JSON.stringify(queue)]
  );
  (0, import_react284.useEffect)(
    () => {
      if (disabled || typeof frequency !== "number" || timeoutId.current !== null) {
        return;
      }
      timeoutId.current = setTimeout(() => {
        measureDroppableContainers();
        timeoutId.current = null;
      }, frequency);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [frequency, disabled, measureDroppableContainers, ...dependencies]
  );
  return {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled: queue != null
  };
  function isDisabled3() {
    switch (strategy) {
      case MeasuringStrategy.Always:
        return false;
      case MeasuringStrategy.BeforeDragging:
        return dragging;
      default:
        return !dragging;
    }
  }
}
function useInitialValue(value, computeFn) {
  return useLazyMemo((previousValue) => {
    if (!value) {
      return null;
    }
    if (previousValue) {
      return previousValue;
    }
    return typeof computeFn === "function" ? computeFn(value) : value;
  }, [computeFn, value]);
}
function useInitialRect(node3, measure) {
  return useInitialValue(node3, measure);
}
function useMutationObserver(_ref4) {
  let {
    callback,
    disabled
  } = _ref4;
  const handleMutations = useEvent(callback);
  const mutationObserver = (0, import_react284.useMemo)(() => {
    if (disabled || typeof window === "undefined" || typeof window.MutationObserver === "undefined") {
      return void 0;
    }
    const {
      MutationObserver: MutationObserver2
    } = window;
    return new MutationObserver2(handleMutations);
  }, [handleMutations, disabled]);
  (0, import_react284.useEffect)(() => {
    return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
  }, [mutationObserver]);
  return mutationObserver;
}
function useResizeObserver(_ref4) {
  let {
    callback,
    disabled
  } = _ref4;
  const handleResize = useEvent(callback);
  const resizeObserver = (0, import_react284.useMemo)(
    () => {
      if (disabled || typeof window === "undefined" || typeof window.ResizeObserver === "undefined") {
        return void 0;
      }
      const {
        ResizeObserver: ResizeObserver2
      } = window;
      return new ResizeObserver2(handleResize);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [disabled]
  );
  (0, import_react284.useEffect)(() => {
    return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
  }, [resizeObserver]);
  return resizeObserver;
}
function defaultMeasure(element) {
  return new Rect(getClientRect(element), element);
}
function useRect(element, measure, fallbackRect) {
  if (measure === void 0) {
    measure = defaultMeasure;
  }
  const [rect, measureRect] = (0, import_react284.useReducer)(reducer2, null);
  const mutationObserver = useMutationObserver({
    callback(records) {
      if (!element) {
        return;
      }
      for (const record2 of records) {
        const {
          type,
          target
        } = record2;
        if (type === "childList" && target instanceof HTMLElement && target.contains(element)) {
          measureRect();
          break;
        }
      }
    }
  });
  const resizeObserver = useResizeObserver({
    callback: measureRect
  });
  useIsomorphicLayoutEffect3(() => {
    measureRect();
    if (element) {
      resizeObserver == null ? void 0 : resizeObserver.observe(element);
      mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      mutationObserver == null ? void 0 : mutationObserver.disconnect();
    }
  }, [element]);
  return rect;
  function reducer2(currentRect) {
    if (!element) {
      return null;
    }
    if (element.isConnected === false) {
      var _ref4;
      return (_ref4 = currentRect != null ? currentRect : fallbackRect) != null ? _ref4 : null;
    }
    const newRect = measure(element);
    if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
      return currentRect;
    }
    return newRect;
  }
}
function useRectDelta(rect) {
  const initialRect = useInitialValue(rect);
  return getRectDelta(rect, initialRect);
}
var defaultValue$1 = [];
function useScrollableAncestors(node3) {
  const previousNode = (0, import_react284.useRef)(node3);
  const ancestors = useLazyMemo((previousValue) => {
    if (!node3) {
      return defaultValue$1;
    }
    if (previousValue && previousValue !== defaultValue$1 && node3 && previousNode.current && node3.parentNode === previousNode.current.parentNode) {
      return previousValue;
    }
    return getScrollableAncestors(node3);
  }, [node3]);
  (0, import_react284.useEffect)(() => {
    previousNode.current = node3;
  }, [node3]);
  return ancestors;
}
function useScrollOffsets(elements) {
  const [scrollCoordinates, setScrollCoordinates] = (0, import_react284.useState)(null);
  const prevElements = (0, import_react284.useRef)(elements);
  const handleScroll2 = (0, import_react284.useCallback)((event) => {
    const scrollingElement = getScrollableElement(event.target);
    if (!scrollingElement) {
      return;
    }
    setScrollCoordinates((scrollCoordinates2) => {
      if (!scrollCoordinates2) {
        return null;
      }
      scrollCoordinates2.set(scrollingElement, getScrollCoordinates(scrollingElement));
      return new Map(scrollCoordinates2);
    });
  }, []);
  (0, import_react284.useEffect)(() => {
    const previousElements = prevElements.current;
    if (elements !== previousElements) {
      cleanup(previousElements);
      const entries = elements.map((element) => {
        const scrollableElement = getScrollableElement(element);
        if (scrollableElement) {
          scrollableElement.addEventListener("scroll", handleScroll2, {
            passive: true
          });
          return [scrollableElement, getScrollCoordinates(scrollableElement)];
        }
        return null;
      }).filter((entry) => entry != null);
      setScrollCoordinates(entries.length ? new Map(entries) : null);
      prevElements.current = elements;
    }
    return () => {
      cleanup(elements);
      cleanup(previousElements);
    };
    function cleanup(elements2) {
      elements2.forEach((element) => {
        const scrollableElement = getScrollableElement(element);
        scrollableElement == null ? void 0 : scrollableElement.removeEventListener("scroll", handleScroll2);
      });
    }
  }, [handleScroll2, elements]);
  return (0, import_react284.useMemo)(() => {
    if (elements.length) {
      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add3(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
    }
    return defaultCoordinates;
  }, [elements, scrollCoordinates]);
}
function useScrollOffsetsDelta(scrollOffsets, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }
  const initialScrollOffsets = (0, import_react284.useRef)(null);
  (0, import_react284.useEffect)(
    () => {
      initialScrollOffsets.current = null;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    dependencies
  );
  (0, import_react284.useEffect)(() => {
    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;
    if (hasScrollOffsets && !initialScrollOffsets.current) {
      initialScrollOffsets.current = scrollOffsets;
    }
    if (!hasScrollOffsets && initialScrollOffsets.current) {
      initialScrollOffsets.current = null;
    }
  }, [scrollOffsets]);
  return initialScrollOffsets.current ? subtract5(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
}
function useSensorSetup(sensors) {
  (0, import_react284.useEffect)(
    () => {
      if (!canUseDOM4) {
        return;
      }
      const teardownFns = sensors.map((_ref4) => {
        let {
          sensor
        } = _ref4;
        return sensor.setup == null ? void 0 : sensor.setup();
      });
      return () => {
        for (const teardown of teardownFns) {
          teardown == null ? void 0 : teardown();
        }
      };
    },
    // TO-DO: Sensors length could theoretically change which would not be a valid dependency
    // eslint-disable-next-line react-hooks/exhaustive-deps
    sensors.map((_ref23) => {
      let {
        sensor
      } = _ref23;
      return sensor;
    })
  );
}
function useSyntheticListeners(listeners, id3) {
  return (0, import_react284.useMemo)(() => {
    return listeners.reduce((acc, _ref4) => {
      let {
        eventName,
        handler
      } = _ref4;
      acc[eventName] = (event) => {
        handler(event, id3);
      };
      return acc;
    }, {});
  }, [listeners, id3]);
}
function useWindowRect(element) {
  return (0, import_react284.useMemo)(() => element ? getWindowClientRect(element) : null, [element]);
}
var defaultValue$2 = [];
function useRects(elements, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  const [firstElement] = elements;
  const windowRect = useWindowRect(firstElement ? getWindow3(firstElement) : null);
  const [rects, measureRects] = (0, import_react284.useReducer)(reducer2, defaultValue$2);
  const resizeObserver = useResizeObserver({
    callback: measureRects
  });
  if (elements.length > 0 && rects === defaultValue$2) {
    measureRects();
  }
  useIsomorphicLayoutEffect3(() => {
    if (elements.length) {
      elements.forEach((element) => resizeObserver == null ? void 0 : resizeObserver.observe(element));
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      measureRects();
    }
  }, [elements]);
  return rects;
  function reducer2() {
    if (!elements.length) {
      return defaultValue$2;
    }
    return elements.map((element) => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
  }
}
function getMeasurableNode(node3) {
  if (!node3) {
    return null;
  }
  if (node3.children.length > 1) {
    return node3;
  }
  const firstChild = node3.children[0];
  return isHTMLElement7(firstChild) ? firstChild : node3;
}
function useDragOverlayMeasuring(_ref4) {
  let {
    measure
  } = _ref4;
  const [rect, setRect] = (0, import_react284.useState)(null);
  const handleResize = (0, import_react284.useCallback)((entries) => {
    for (const {
      target
    } of entries) {
      if (isHTMLElement7(target)) {
        setRect((rect2) => {
          const newRect = measure(target);
          return rect2 ? {
            ...rect2,
            width: newRect.width,
            height: newRect.height
          } : newRect;
        });
        break;
      }
    }
  }, [measure]);
  const resizeObserver = useResizeObserver({
    callback: handleResize
  });
  const handleNodeChange = (0, import_react284.useCallback)((element) => {
    const node3 = getMeasurableNode(element);
    resizeObserver == null ? void 0 : resizeObserver.disconnect();
    if (node3) {
      resizeObserver == null ? void 0 : resizeObserver.observe(node3);
    }
    setRect(node3 ? measure(node3) : null);
  }, [measure, resizeObserver]);
  const [nodeRef, setRef] = useNodeRef(handleNodeChange);
  return (0, import_react284.useMemo)(() => ({
    nodeRef,
    rect,
    setRef
  }), [rect, nodeRef, setRef]);
}
var defaultSensors = [{
  sensor: PointerSensor,
  options: {}
}, {
  sensor: KeyboardSensor,
  options: {}
}];
var defaultData = {
  current: {}
};
var defaultMeasuringConfiguration = {
  draggable: {
    measure: getTransformAgnosticClientRect
  },
  droppable: {
    measure: getTransformAgnosticClientRect,
    strategy: MeasuringStrategy.WhileDragging,
    frequency: MeasuringFrequency.Optimized
  },
  dragOverlay: {
    measure: getClientRect
  }
};
var DroppableContainersMap = class extends Map {
  get(id3) {
    var _super$get;
    return id3 != null ? (_super$get = super.get(id3)) != null ? _super$get : void 0 : void 0;
  }
  toArray() {
    return Array.from(this.values());
  }
  getEnabled() {
    return this.toArray().filter((_ref4) => {
      let {
        disabled
      } = _ref4;
      return !disabled;
    });
  }
  getNodeFor(id3) {
    var _this$get$node$curren, _this$get;
    return (_this$get$node$curren = (_this$get = this.get(id3)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : void 0;
  }
};
var defaultPublicContext = {
  activatorEvent: null,
  active: null,
  activeNode: null,
  activeNodeRect: null,
  collisions: null,
  containerNodeRect: null,
  draggableNodes: /* @__PURE__ */ new Map(),
  droppableRects: /* @__PURE__ */ new Map(),
  droppableContainers: new DroppableContainersMap(),
  over: null,
  dragOverlay: {
    nodeRef: {
      current: null
    },
    rect: null,
    setRef: noop8
  },
  scrollableAncestors: [],
  scrollableAncestorRects: [],
  measuringConfiguration: defaultMeasuringConfiguration,
  measureDroppableContainers: noop8,
  windowRect: null,
  measuringScheduled: false
};
var defaultInternalContext = {
  activatorEvent: null,
  activators: [],
  active: null,
  activeNodeRect: null,
  ariaDescribedById: {
    draggable: ""
  },
  dispatch: noop8,
  draggableNodes: /* @__PURE__ */ new Map(),
  over: null,
  measureDroppableContainers: noop8
};
var InternalContext = (0, import_react284.createContext)(defaultInternalContext);
var PublicContext = (0, import_react284.createContext)(defaultPublicContext);
function getInitialState() {
  return {
    draggable: {
      active: null,
      initialCoordinates: {
        x: 0,
        y: 0
      },
      nodes: /* @__PURE__ */ new Map(),
      translate: {
        x: 0,
        y: 0
      }
    },
    droppable: {
      containers: new DroppableContainersMap()
    }
  };
}
function reducer(state2, action) {
  switch (action.type) {
    case Action.DragStart:
      return {
        ...state2,
        draggable: {
          ...state2.draggable,
          initialCoordinates: action.initialCoordinates,
          active: action.active
        }
      };
    case Action.DragMove:
      if (!state2.draggable.active) {
        return state2;
      }
      return {
        ...state2,
        draggable: {
          ...state2.draggable,
          translate: {
            x: action.coordinates.x - state2.draggable.initialCoordinates.x,
            y: action.coordinates.y - state2.draggable.initialCoordinates.y
          }
        }
      };
    case Action.DragEnd:
    case Action.DragCancel:
      return {
        ...state2,
        draggable: {
          ...state2.draggable,
          active: null,
          initialCoordinates: {
            x: 0,
            y: 0
          },
          translate: {
            x: 0,
            y: 0
          }
        }
      };
    case Action.RegisterDroppable: {
      const {
        element
      } = action;
      const {
        id: id3
      } = element;
      const containers = new DroppableContainersMap(state2.droppable.containers);
      containers.set(id3, element);
      return {
        ...state2,
        droppable: {
          ...state2.droppable,
          containers
        }
      };
    }
    case Action.SetDroppableDisabled: {
      const {
        id: id3,
        key: key2,
        disabled
      } = action;
      const element = state2.droppable.containers.get(id3);
      if (!element || key2 !== element.key) {
        return state2;
      }
      const containers = new DroppableContainersMap(state2.droppable.containers);
      containers.set(id3, {
        ...element,
        disabled
      });
      return {
        ...state2,
        droppable: {
          ...state2.droppable,
          containers
        }
      };
    }
    case Action.UnregisterDroppable: {
      const {
        id: id3,
        key: key2
      } = action;
      const element = state2.droppable.containers.get(id3);
      if (!element || key2 !== element.key) {
        return state2;
      }
      const containers = new DroppableContainersMap(state2.droppable.containers);
      containers.delete(id3);
      return {
        ...state2,
        droppable: {
          ...state2.droppable,
          containers
        }
      };
    }
    default: {
      return state2;
    }
  }
}
function RestoreFocus(_ref4) {
  let {
    disabled
  } = _ref4;
  const {
    active,
    activatorEvent,
    draggableNodes
  } = (0, import_react284.useContext)(InternalContext);
  const previousActivatorEvent = usePrevious3(activatorEvent);
  const previousActiveId = usePrevious3(active == null ? void 0 : active.id);
  (0, import_react284.useEffect)(() => {
    if (disabled) {
      return;
    }
    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
      if (!isKeyboardEvent(previousActivatorEvent)) {
        return;
      }
      if (document.activeElement === previousActivatorEvent.target) {
        return;
      }
      const draggableNode = draggableNodes.get(previousActiveId);
      if (!draggableNode) {
        return;
      }
      const {
        activatorNode,
        node: node3
      } = draggableNode;
      if (!activatorNode.current && !node3.current) {
        return;
      }
      requestAnimationFrame(() => {
        for (const element of [activatorNode.current, node3.current]) {
          if (!element) {
            continue;
          }
          const focusableNode = findFirstFocusableNode(element);
          if (focusableNode) {
            focusableNode.focus();
            break;
          }
        }
      });
    }
  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
  return null;
}
function applyModifiers(modifiers, _ref4) {
  let {
    transform: transform4,
    ...args
  } = _ref4;
  return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
    return modifier({
      transform: accumulator,
      ...args
    });
  }, transform4) : transform4;
}
function useMeasuringConfiguration(config2) {
  return (0, import_react284.useMemo)(
    () => ({
      draggable: {
        ...defaultMeasuringConfiguration.draggable,
        ...config2 == null ? void 0 : config2.draggable
      },
      droppable: {
        ...defaultMeasuringConfiguration.droppable,
        ...config2 == null ? void 0 : config2.droppable
      },
      dragOverlay: {
        ...defaultMeasuringConfiguration.dragOverlay,
        ...config2 == null ? void 0 : config2.dragOverlay
      }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [config2 == null ? void 0 : config2.draggable, config2 == null ? void 0 : config2.droppable, config2 == null ? void 0 : config2.dragOverlay]
  );
}
function useLayoutShiftScrollCompensation(_ref4) {
  let {
    activeNode,
    measure,
    initialRect,
    config: config2 = true
  } = _ref4;
  const initialized = (0, import_react284.useRef)(false);
  const {
    x,
    y
  } = typeof config2 === "boolean" ? {
    x: config2,
    y: config2
  } : config2;
  useIsomorphicLayoutEffect3(() => {
    const disabled = !x && !y;
    if (disabled || !activeNode) {
      initialized.current = false;
      return;
    }
    if (initialized.current || !initialRect) {
      return;
    }
    const node3 = activeNode == null ? void 0 : activeNode.node.current;
    if (!node3 || node3.isConnected === false) {
      return;
    }
    const rect = measure(node3);
    const rectDelta = getRectDelta(rect, initialRect);
    if (!x) {
      rectDelta.x = 0;
    }
    if (!y) {
      rectDelta.y = 0;
    }
    initialized.current = true;
    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
      const firstScrollableAncestor = getFirstScrollableAncestor(node3);
      if (firstScrollableAncestor) {
        firstScrollableAncestor.scrollBy({
          top: rectDelta.y,
          left: rectDelta.x
        });
      }
    }
  }, [activeNode, x, y, initialRect, measure]);
}
var ActiveDraggableContext = (0, import_react284.createContext)({
  ...defaultCoordinates,
  scaleX: 1,
  scaleY: 1
});
var Status;
(function(Status2) {
  Status2[Status2["Uninitialized"] = 0] = "Uninitialized";
  Status2[Status2["Initializing"] = 1] = "Initializing";
  Status2[Status2["Initialized"] = 2] = "Initialized";
})(Status || (Status = {}));
var DndContext = (0, import_react284.memo)(function DndContext2(_ref4) {
  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;
  let {
    id: id3,
    accessibility,
    autoScroll = true,
    children,
    sensors = defaultSensors,
    collisionDetection = rectIntersection,
    measuring,
    modifiers,
    ...props
  } = _ref4;
  const store = (0, import_react284.useReducer)(reducer, void 0, getInitialState);
  const [state2, dispatch] = store;
  const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
  const [status, setStatus] = (0, import_react284.useState)(Status.Uninitialized);
  const isInitialized = status === Status.Initialized;
  const {
    draggable: {
      active: activeId,
      nodes: draggableNodes,
      translate
    },
    droppable: {
      containers: droppableContainers
    }
  } = state2;
  const node3 = activeId ? draggableNodes.get(activeId) : null;
  const activeRects = (0, import_react284.useRef)({
    initial: null,
    translated: null
  });
  const active = (0, import_react284.useMemo)(() => {
    var _node$data;
    return activeId != null ? {
      id: activeId,
      // It's possible for the active node to unmount while dragging
      data: (_node$data = node3 == null ? void 0 : node3.data) != null ? _node$data : defaultData,
      rect: activeRects
    } : null;
  }, [activeId, node3]);
  const activeRef = (0, import_react284.useRef)(null);
  const [activeSensor, setActiveSensor] = (0, import_react284.useState)(null);
  const [activatorEvent, setActivatorEvent] = (0, import_react284.useState)(null);
  const latestProps = useLatestValue(props, Object.values(props));
  const draggableDescribedById = useUniqueId2("DndDescribedBy", id3);
  const enabledDroppableContainers = (0, import_react284.useMemo)(() => droppableContainers.getEnabled(), [droppableContainers]);
  const measuringConfiguration = useMeasuringConfiguration(measuring);
  const {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled
  } = useDroppableMeasuring(enabledDroppableContainers, {
    dragging: isInitialized,
    dependencies: [translate.x, translate.y],
    config: measuringConfiguration.droppable
  });
  const activeNode = useCachedNode(draggableNodes, activeId);
  const activationCoordinates = (0, import_react284.useMemo)(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
  const autoScrollOptions = getAutoScrollerOptions();
  const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
  useLayoutShiftScrollCompensation({
    activeNode: activeId ? draggableNodes.get(activeId) : null,
    config: autoScrollOptions.layoutShiftCompensation,
    initialRect: initialActiveNodeRect,
    measure: measuringConfiguration.draggable.measure
  });
  const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
  const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);
  const sensorContext = (0, import_react284.useRef)({
    activatorEvent: null,
    active: null,
    activeNode,
    collisionRect: null,
    collisions: null,
    droppableRects,
    draggableNodes,
    draggingNode: null,
    draggingNodeRect: null,
    droppableContainers,
    over: null,
    scrollableAncestors: [],
    scrollAdjustedTranslate: null
  });
  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
  const dragOverlay = useDragOverlayMeasuring({
    measure: measuringConfiguration.dragOverlay.measure
  });
  const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
  const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
  const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect);
  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);
  const windowRect = useWindowRect(draggingNode ? getWindow3(draggingNode) : null);
  const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
  const scrollableAncestorRects = useRects(scrollableAncestors);
  const modifiedTranslate = applyModifiers(modifiers, {
    transform: {
      x: translate.x - nodeRectDelta.x,
      y: translate.y - nodeRectDelta.y,
      scaleX: 1,
      scaleY: 1
    },
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect,
    over: sensorContext.current.over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  });
  const pointerCoordinates = activationCoordinates ? add3(activationCoordinates, translate) : null;
  const scrollOffsets = useScrollOffsets(scrollableAncestors);
  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);
  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
  const scrollAdjustedTranslate = add3(modifiedTranslate, scrollAdjustment);
  const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
  const collisions = active && collisionRect ? collisionDetection({
    active,
    collisionRect,
    droppableRects,
    droppableContainers: enabledDroppableContainers,
    pointerCoordinates
  }) : null;
  const overId = getFirstCollision(collisions, "id");
  const [over, setOver] = (0, import_react284.useState)(null);
  const appliedTranslate = usesDragOverlay ? modifiedTranslate : add3(modifiedTranslate, activeNodeScrollDelta);
  const transform4 = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
  const instantiateSensor = (0, import_react284.useCallback)(
    (event, _ref23) => {
      let {
        sensor: Sensor,
        options: options2
      } = _ref23;
      if (activeRef.current == null) {
        return;
      }
      const activeNode2 = draggableNodes.get(activeRef.current);
      if (!activeNode2) {
        return;
      }
      const activatorEvent2 = event.nativeEvent;
      const sensorInstance = new Sensor({
        active: activeRef.current,
        activeNode: activeNode2,
        event: activatorEvent2,
        options: options2,
        // Sensors need to be instantiated with refs for arguments that change over time
        // otherwise they are frozen in time with the stale arguments
        context: sensorContext,
        onStart(initialCoordinates) {
          const id4 = activeRef.current;
          if (id4 == null) {
            return;
          }
          const draggableNode = draggableNodes.get(id4);
          if (!draggableNode) {
            return;
          }
          const {
            onDragStart
          } = latestProps.current;
          const event2 = {
            active: {
              id: id4,
              data: draggableNode.data,
              rect: activeRects
            }
          };
          (0, import_react_dom7.unstable_batchedUpdates)(() => {
            onDragStart == null ? void 0 : onDragStart(event2);
            setStatus(Status.Initializing);
            dispatch({
              type: Action.DragStart,
              initialCoordinates,
              active: id4
            });
            dispatchMonitorEvent({
              type: "onDragStart",
              event: event2
            });
          });
        },
        onMove(coordinates) {
          dispatch({
            type: Action.DragMove,
            coordinates
          });
        },
        onEnd: createHandler(Action.DragEnd),
        onCancel: createHandler(Action.DragCancel)
      });
      (0, import_react_dom7.unstable_batchedUpdates)(() => {
        setActiveSensor(sensorInstance);
        setActivatorEvent(event.nativeEvent);
      });
      function createHandler(type) {
        return async function handler() {
          const {
            active: active2,
            collisions: collisions2,
            over: over2,
            scrollAdjustedTranslate: scrollAdjustedTranslate2
          } = sensorContext.current;
          let event2 = null;
          if (active2 && scrollAdjustedTranslate2) {
            const {
              cancelDrop
            } = latestProps.current;
            event2 = {
              activatorEvent: activatorEvent2,
              active: active2,
              collisions: collisions2,
              delta: scrollAdjustedTranslate2,
              over: over2
            };
            if (type === Action.DragEnd && typeof cancelDrop === "function") {
              const shouldCancel = await Promise.resolve(cancelDrop(event2));
              if (shouldCancel) {
                type = Action.DragCancel;
              }
            }
          }
          activeRef.current = null;
          (0, import_react_dom7.unstable_batchedUpdates)(() => {
            dispatch({
              type
            });
            setStatus(Status.Uninitialized);
            setOver(null);
            setActiveSensor(null);
            setActivatorEvent(null);
            const eventName = type === Action.DragEnd ? "onDragEnd" : "onDragCancel";
            if (event2) {
              const handler2 = latestProps.current[eventName];
              handler2 == null ? void 0 : handler2(event2);
              dispatchMonitorEvent({
                type: eventName,
                event: event2
              });
            }
          });
        };
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes]
  );
  const bindActivatorToSensorInstantiator = (0, import_react284.useCallback)((handler, sensor) => {
    return (event, active2) => {
      const nativeEvent = event.nativeEvent;
      const activeDraggableNode = draggableNodes.get(active2);
      if (
        // Another sensor is already instantiating
        activeRef.current !== null || // No active draggable
        !activeDraggableNode || // Event has already been captured
        nativeEvent.dndKit || nativeEvent.defaultPrevented
      ) {
        return;
      }
      const activationContext = {
        active: activeDraggableNode
      };
      const shouldActivate = handler(event, sensor.options, activationContext);
      if (shouldActivate === true) {
        nativeEvent.dndKit = {
          capturedBy: sensor.sensor
        };
        activeRef.current = active2;
        instantiateSensor(event, sensor);
      }
    };
  }, [draggableNodes, instantiateSensor]);
  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
  useSensorSetup(sensors);
  useIsomorphicLayoutEffect3(() => {
    if (activeNodeRect && status === Status.Initializing) {
      setStatus(Status.Initialized);
    }
  }, [activeNodeRect, status]);
  (0, import_react284.useEffect)(
    () => {
      const {
        onDragMove
      } = latestProps.current;
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        over: over2
      } = sensorContext.current;
      if (!active2 || !activatorEvent2) {
        return;
      }
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate.x,
          y: scrollAdjustedTranslate.y
        },
        over: over2
      };
      (0, import_react_dom7.unstable_batchedUpdates)(() => {
        onDragMove == null ? void 0 : onDragMove(event);
        dispatchMonitorEvent({
          type: "onDragMove",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]
  );
  (0, import_react284.useEffect)(
    () => {
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        droppableContainers: droppableContainers2,
        scrollAdjustedTranslate: scrollAdjustedTranslate2
      } = sensorContext.current;
      if (!active2 || activeRef.current == null || !activatorEvent2 || !scrollAdjustedTranslate2) {
        return;
      }
      const {
        onDragOver
      } = latestProps.current;
      const overContainer = droppableContainers2.get(overId);
      const over2 = overContainer && overContainer.rect.current ? {
        id: overContainer.id,
        rect: overContainer.rect.current,
        data: overContainer.data,
        disabled: overContainer.disabled
      } : null;
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate2.x,
          y: scrollAdjustedTranslate2.y
        },
        over: over2
      };
      (0, import_react_dom7.unstable_batchedUpdates)(() => {
        setOver(over2);
        onDragOver == null ? void 0 : onDragOver(event);
        dispatchMonitorEvent({
          type: "onDragOver",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [overId]
  );
  useIsomorphicLayoutEffect3(() => {
    sensorContext.current = {
      activatorEvent,
      active,
      activeNode,
      collisionRect,
      collisions,
      droppableRects,
      draggableNodes,
      draggingNode,
      draggingNodeRect,
      droppableContainers,
      over,
      scrollableAncestors,
      scrollAdjustedTranslate
    };
    activeRects.current = {
      initial: draggingNodeRect,
      translated: collisionRect
    };
  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
  useAutoScroller({
    ...autoScrollOptions,
    delta: translate,
    draggingRect: collisionRect,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects
  });
  const publicContext = (0, import_react284.useMemo)(() => {
    const context2 = {
      active,
      activeNode,
      activeNodeRect,
      activatorEvent,
      collisions,
      containerNodeRect,
      dragOverlay,
      draggableNodes,
      droppableContainers,
      droppableRects,
      over,
      measureDroppableContainers,
      scrollableAncestors,
      scrollableAncestorRects,
      measuringConfiguration,
      measuringScheduled,
      windowRect
    };
    return context2;
  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
  const internalContext = (0, import_react284.useMemo)(() => {
    const context2 = {
      activatorEvent,
      activators,
      active,
      activeNodeRect,
      ariaDescribedById: {
        draggable: draggableDescribedById
      },
      dispatch,
      draggableNodes,
      over,
      measureDroppableContainers
    };
    return context2;
  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
  return import_react284.default.createElement(DndMonitorContext.Provider, {
    value: registerMonitorListener
  }, import_react284.default.createElement(InternalContext.Provider, {
    value: internalContext
  }, import_react284.default.createElement(PublicContext.Provider, {
    value: publicContext
  }, import_react284.default.createElement(ActiveDraggableContext.Provider, {
    value: transform4
  }, children)), import_react284.default.createElement(RestoreFocus, {
    disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
  })), import_react284.default.createElement(Accessibility, {
    ...accessibility,
    hiddenTextDescribedById: draggableDescribedById
  }));
  function getAutoScrollerOptions() {
    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
    const autoScrollGloballyDisabled = typeof autoScroll === "object" ? autoScroll.enabled === false : autoScroll === false;
    const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;
    if (typeof autoScroll === "object") {
      return {
        ...autoScroll,
        enabled
      };
    }
    return {
      enabled
    };
  }
});
var NullContext = (0, import_react284.createContext)(null);
var defaultRole = "button";
var ID_PREFIX = "Droppable";
function useDraggable(_ref4) {
  let {
    id: id3,
    data,
    disabled = false,
    attributes
  } = _ref4;
  const key2 = useUniqueId2(ID_PREFIX);
  const {
    activators,
    activatorEvent,
    active,
    activeNodeRect,
    ariaDescribedById,
    draggableNodes,
    over
  } = (0, import_react284.useContext)(InternalContext);
  const {
    role = defaultRole,
    roleDescription = "draggable",
    tabIndex = 0
  } = attributes != null ? attributes : {};
  const isDragging = (active == null ? void 0 : active.id) === id3;
  const transform4 = (0, import_react284.useContext)(isDragging ? ActiveDraggableContext : NullContext);
  const [node3, setNodeRef] = useNodeRef();
  const [activatorNode, setActivatorNodeRef] = useNodeRef();
  const listeners = useSyntheticListeners(activators, id3);
  const dataRef = useLatestValue(data);
  useIsomorphicLayoutEffect3(
    () => {
      draggableNodes.set(id3, {
        id: id3,
        key: key2,
        node: node3,
        activatorNode,
        data: dataRef
      });
      return () => {
        const node4 = draggableNodes.get(id3);
        if (node4 && node4.key === key2) {
          draggableNodes.delete(id3);
        }
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes, id3]
  );
  const memoizedAttributes = (0, import_react284.useMemo)(() => ({
    role,
    tabIndex,
    "aria-disabled": disabled,
    "aria-pressed": isDragging && role === defaultRole ? true : void 0,
    "aria-roledescription": roleDescription,
    "aria-describedby": ariaDescribedById.draggable
  }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
  return {
    active,
    activatorEvent,
    activeNodeRect,
    attributes: memoizedAttributes,
    isDragging,
    listeners: disabled ? void 0 : listeners,
    node: node3,
    over,
    setNodeRef,
    setActivatorNodeRef,
    transform: transform4
  };
}
function useDndContext() {
  return (0, import_react284.useContext)(PublicContext);
}
var ID_PREFIX$1 = "Droppable";
var defaultResizeObserverConfig = {
  timeout: 25
};
function useDroppable(_ref4) {
  let {
    data,
    disabled = false,
    id: id3,
    resizeObserverConfig
  } = _ref4;
  const key2 = useUniqueId2(ID_PREFIX$1);
  const {
    active,
    dispatch,
    over,
    measureDroppableContainers
  } = (0, import_react284.useContext)(InternalContext);
  const previous = (0, import_react284.useRef)({
    disabled
  });
  const resizeObserverConnected = (0, import_react284.useRef)(false);
  const rect = (0, import_react284.useRef)(null);
  const callbackId = (0, import_react284.useRef)(null);
  const {
    disabled: resizeObserverDisabled,
    updateMeasurementsFor,
    timeout: resizeObserverTimeout
  } = {
    ...defaultResizeObserverConfig,
    ...resizeObserverConfig
  };
  const ids2 = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id3);
  const handleResize = (0, import_react284.useCallback)(
    () => {
      if (!resizeObserverConnected.current) {
        resizeObserverConnected.current = true;
        return;
      }
      if (callbackId.current != null) {
        clearTimeout(callbackId.current);
      }
      callbackId.current = setTimeout(() => {
        measureDroppableContainers(Array.isArray(ids2.current) ? ids2.current : [ids2.current]);
        callbackId.current = null;
      }, resizeObserverTimeout);
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [resizeObserverTimeout]
  );
  const resizeObserver = useResizeObserver({
    callback: handleResize,
    disabled: resizeObserverDisabled || !active
  });
  const handleNodeChange = (0, import_react284.useCallback)((newElement, previousElement) => {
    if (!resizeObserver) {
      return;
    }
    if (previousElement) {
      resizeObserver.unobserve(previousElement);
      resizeObserverConnected.current = false;
    }
    if (newElement) {
      resizeObserver.observe(newElement);
    }
  }, [resizeObserver]);
  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
  const dataRef = useLatestValue(data);
  (0, import_react284.useEffect)(() => {
    if (!resizeObserver || !nodeRef.current) {
      return;
    }
    resizeObserver.disconnect();
    resizeObserverConnected.current = false;
    resizeObserver.observe(nodeRef.current);
  }, [nodeRef, resizeObserver]);
  useIsomorphicLayoutEffect3(
    () => {
      dispatch({
        type: Action.RegisterDroppable,
        element: {
          id: id3,
          key: key2,
          disabled,
          node: nodeRef,
          rect,
          data: dataRef
        }
      });
      return () => dispatch({
        type: Action.UnregisterDroppable,
        key: key2,
        id: id3
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [id3]
  );
  (0, import_react284.useEffect)(() => {
    if (disabled !== previous.current.disabled) {
      dispatch({
        type: Action.SetDroppableDisabled,
        id: id3,
        key: key2,
        disabled
      });
      previous.current.disabled = disabled;
    }
  }, [id3, key2, disabled, dispatch]);
  return {
    active,
    rect,
    isOver: (over == null ? void 0 : over.id) === id3,
    node: nodeRef,
    over,
    setNodeRef
  };
}
function AnimationManager(_ref4) {
  let {
    animation,
    children
  } = _ref4;
  const [clonedChildren, setClonedChildren] = (0, import_react284.useState)(null);
  const [element, setElement] = (0, import_react284.useState)(null);
  const previousChildren = usePrevious3(children);
  if (!children && !clonedChildren && previousChildren) {
    setClonedChildren(previousChildren);
  }
  useIsomorphicLayoutEffect3(() => {
    if (!element) {
      return;
    }
    const key2 = clonedChildren == null ? void 0 : clonedChildren.key;
    const id3 = clonedChildren == null ? void 0 : clonedChildren.props.id;
    if (key2 == null || id3 == null) {
      setClonedChildren(null);
      return;
    }
    Promise.resolve(animation(id3, element)).then(() => {
      setClonedChildren(null);
    });
  }, [animation, clonedChildren, element]);
  return import_react284.default.createElement(import_react284.default.Fragment, null, children, clonedChildren ? (0, import_react284.cloneElement)(clonedChildren, {
    ref: setElement
  }) : null);
}
var defaultTransform = {
  x: 0,
  y: 0,
  scaleX: 1,
  scaleY: 1
};
function NullifiedContextProvider(_ref4) {
  let {
    children
  } = _ref4;
  return import_react284.default.createElement(InternalContext.Provider, {
    value: defaultInternalContext
  }, import_react284.default.createElement(ActiveDraggableContext.Provider, {
    value: defaultTransform
  }, children));
}
var baseStyles = {
  position: "fixed",
  touchAction: "none"
};
var defaultTransition2 = (activatorEvent) => {
  const isKeyboardActivator = isKeyboardEvent(activatorEvent);
  return isKeyboardActivator ? "transform 250ms ease" : void 0;
};
var PositionedOverlay = (0, import_react284.forwardRef)((_ref4, ref) => {
  let {
    as,
    activatorEvent,
    adjustScale: adjustScale2,
    children,
    className,
    rect,
    style,
    transform: transform4,
    transition: transition3 = defaultTransition2
  } = _ref4;
  if (!rect) {
    return null;
  }
  const scaleAdjustedTransform = adjustScale2 ? transform4 : {
    ...transform4,
    scaleX: 1,
    scaleY: 1
  };
  const styles2 = {
    ...baseStyles,
    width: rect.width,
    height: rect.height,
    top: rect.top,
    left: rect.left,
    transform: CSS2.Transform.toString(scaleAdjustedTransform),
    transformOrigin: adjustScale2 && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : void 0,
    transition: typeof transition3 === "function" ? transition3(activatorEvent) : transition3,
    ...style
  };
  return import_react284.default.createElement(as, {
    className,
    style: styles2,
    ref
  }, children);
});
var defaultDropAnimationSideEffects = (options2) => (_ref4) => {
  let {
    active,
    dragOverlay
  } = _ref4;
  const originalStyles = {};
  const {
    styles: styles2,
    className
  } = options2;
  if (styles2 != null && styles2.active) {
    for (const [key2, value] of Object.entries(styles2.active)) {
      if (value === void 0) {
        continue;
      }
      originalStyles[key2] = active.node.style.getPropertyValue(key2);
      active.node.style.setProperty(key2, value);
    }
  }
  if (styles2 != null && styles2.dragOverlay) {
    for (const [key2, value] of Object.entries(styles2.dragOverlay)) {
      if (value === void 0) {
        continue;
      }
      dragOverlay.node.style.setProperty(key2, value);
    }
  }
  if (className != null && className.active) {
    active.node.classList.add(className.active);
  }
  if (className != null && className.dragOverlay) {
    dragOverlay.node.classList.add(className.dragOverlay);
  }
  return function cleanup() {
    for (const [key2, value] of Object.entries(originalStyles)) {
      active.node.style.setProperty(key2, value);
    }
    if (className != null && className.active) {
      active.node.classList.remove(className.active);
    }
  };
};
var defaultKeyframeResolver = (_ref23) => {
  let {
    transform: {
      initial,
      final
    }
  } = _ref23;
  return [{
    transform: CSS2.Transform.toString(initial)
  }, {
    transform: CSS2.Transform.toString(final)
  }];
};
var defaultDropAnimationConfiguration = {
  duration: 250,
  easing: "ease",
  keyframes: defaultKeyframeResolver,
  sideEffects: defaultDropAnimationSideEffects({
    styles: {
      active: {
        opacity: "0"
      }
    }
  })
};
function useDropAnimation(_ref32) {
  let {
    config: config2,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  } = _ref32;
  return useEvent((id3, node3) => {
    if (config2 === null) {
      return;
    }
    const activeDraggable = draggableNodes.get(id3);
    if (!activeDraggable) {
      return;
    }
    const activeNode = activeDraggable.node.current;
    if (!activeNode) {
      return;
    }
    const measurableNode = getMeasurableNode(node3);
    if (!measurableNode) {
      return;
    }
    const {
      transform: transform4
    } = getWindow3(node3).getComputedStyle(node3);
    const parsedTransform = parseTransform(transform4);
    if (!parsedTransform) {
      return;
    }
    const animation = typeof config2 === "function" ? config2 : createDefaultDropAnimation(config2);
    scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);
    return animation({
      active: {
        id: id3,
        data: activeDraggable.data,
        node: activeNode,
        rect: measuringConfiguration.draggable.measure(activeNode)
      },
      draggableNodes,
      dragOverlay: {
        node: node3,
        rect: measuringConfiguration.dragOverlay.measure(measurableNode)
      },
      droppableContainers,
      measuringConfiguration,
      transform: parsedTransform
    });
  });
}
function createDefaultDropAnimation(options2) {
  const {
    duration,
    easing,
    sideEffects,
    keyframes: keyframes6
  } = {
    ...defaultDropAnimationConfiguration,
    ...options2
  };
  return (_ref4) => {
    let {
      active,
      dragOverlay,
      transform: transform4,
      ...rest
    } = _ref4;
    if (!duration) {
      return;
    }
    const delta2 = {
      x: dragOverlay.rect.left - active.rect.left,
      y: dragOverlay.rect.top - active.rect.top
    };
    const scale4 = {
      scaleX: transform4.scaleX !== 1 ? active.rect.width * transform4.scaleX / dragOverlay.rect.width : 1,
      scaleY: transform4.scaleY !== 1 ? active.rect.height * transform4.scaleY / dragOverlay.rect.height : 1
    };
    const finalTransform = {
      x: transform4.x - delta2.x,
      y: transform4.y - delta2.y,
      ...scale4
    };
    const animationKeyframes = keyframes6({
      ...rest,
      active,
      dragOverlay,
      transform: {
        initial: transform4,
        final: finalTransform
      }
    });
    const [firstKeyframe] = animationKeyframes;
    const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];
    if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {
      return;
    }
    const cleanup = sideEffects == null ? void 0 : sideEffects({
      active,
      dragOverlay,
      ...rest
    });
    const animation = dragOverlay.node.animate(animationKeyframes, {
      duration,
      easing,
      fill: "forwards"
    });
    return new Promise((resolve) => {
      animation.onfinish = () => {
        cleanup == null ? void 0 : cleanup();
        resolve();
      };
    });
  };
}
var key = 0;
function useKey(id3) {
  return (0, import_react284.useMemo)(() => {
    if (id3 == null) {
      return;
    }
    key++;
    return key;
  }, [id3]);
}
var DragOverlay = import_react284.default.memo((_ref4) => {
  let {
    adjustScale: adjustScale2 = false,
    children,
    dropAnimation: dropAnimationConfig,
    style,
    transition: transition3,
    modifiers,
    wrapperElement = "div",
    className,
    zIndex: zIndex2 = 999
  } = _ref4;
  const {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggableNodes,
    droppableContainers,
    dragOverlay,
    over,
    measuringConfiguration,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  } = useDndContext();
  const transform4 = (0, import_react284.useContext)(ActiveDraggableContext);
  const key2 = useKey(active == null ? void 0 : active.id);
  const modifiedTransform = applyModifiers(modifiers, {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect: dragOverlay.rect,
    over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    transform: transform4,
    windowRect
  });
  const initialRect = useInitialValue(activeNodeRect);
  const dropAnimation = useDropAnimation({
    config: dropAnimationConfig,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  });
  const ref = initialRect ? dragOverlay.setRef : void 0;
  return import_react284.default.createElement(NullifiedContextProvider, null, import_react284.default.createElement(AnimationManager, {
    animation: dropAnimation
  }, active && key2 ? import_react284.default.createElement(PositionedOverlay, {
    key: key2,
    id: active.id,
    ref,
    as: wrapperElement,
    activatorEvent,
    adjustScale: adjustScale2,
    className,
    transition: transition3,
    rect: initialRect,
    style: {
      zIndex: zIndex2,
      ...style
    },
    transform: modifiedTransform
  }, children) : null));
});

// node_modules/@dnd-kit/sortable/dist/sortable.esm.js
var import_react285 = __toESM(require_react());
function arrayMove(array, from2, to) {
  const newArray = array.slice();
  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from2, 1)[0]);
  return newArray;
}
function arraySwap(array, from2, to) {
  const newArray = array.slice();
  newArray[from2] = array[to];
  newArray[to] = array[from2];
  return newArray;
}
function getSortedRects(items, rects) {
  return items.reduce((accumulator, id3, index5) => {
    const rect = rects.get(id3);
    if (rect) {
      accumulator[index5] = rect;
    }
    return accumulator;
  }, Array(items.length));
}
function isValidIndex(index5) {
  return index5 !== null && index5 >= 0;
}
function itemsEqual(a2, b2) {
  if (a2 === b2) {
    return true;
  }
  if (a2.length !== b2.length) {
    return false;
  }
  for (let i2 = 0; i2 < a2.length; i2++) {
    if (a2[i2] !== b2[i2]) {
      return false;
    }
  }
  return true;
}
function normalizeDisabled(disabled) {
  if (typeof disabled === "boolean") {
    return {
      draggable: disabled,
      droppable: disabled
    };
  }
  return disabled;
}
var defaultScale = {
  scaleX: 1,
  scaleY: 1
};
var horizontalListSortingStrategy = (_ref4) => {
  var _rects$activeIndex;
  let {
    rects,
    activeNodeRect: fallbackActiveRect,
    activeIndex,
    overIndex,
    index: index5
  } = _ref4;
  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
  if (!activeNodeRect) {
    return null;
  }
  const itemGap = getItemGap(rects, index5, activeIndex);
  if (index5 === activeIndex) {
    const newIndexRect = rects[overIndex];
    if (!newIndexRect) {
      return null;
    }
    return {
      x: activeIndex < overIndex ? newIndexRect.left + newIndexRect.width - (activeNodeRect.left + activeNodeRect.width) : newIndexRect.left - activeNodeRect.left,
      y: 0,
      ...defaultScale
    };
  }
  if (index5 > activeIndex && index5 <= overIndex) {
    return {
      x: -activeNodeRect.width - itemGap,
      y: 0,
      ...defaultScale
    };
  }
  if (index5 < activeIndex && index5 >= overIndex) {
    return {
      x: activeNodeRect.width + itemGap,
      y: 0,
      ...defaultScale
    };
  }
  return {
    x: 0,
    y: 0,
    ...defaultScale
  };
};
function getItemGap(rects, index5, activeIndex) {
  const currentRect = rects[index5];
  const previousRect = rects[index5 - 1];
  const nextRect = rects[index5 + 1];
  if (!currentRect || !previousRect && !nextRect) {
    return 0;
  }
  if (activeIndex < index5) {
    return previousRect ? currentRect.left - (previousRect.left + previousRect.width) : nextRect.left - (currentRect.left + currentRect.width);
  }
  return nextRect ? nextRect.left - (currentRect.left + currentRect.width) : currentRect.left - (previousRect.left + previousRect.width);
}
var rectSortingStrategy = (_ref4) => {
  let {
    rects,
    activeIndex,
    overIndex,
    index: index5
  } = _ref4;
  const newRects = arrayMove(rects, overIndex, activeIndex);
  const oldRect = rects[index5];
  const newRect = newRects[index5];
  if (!newRect || !oldRect) {
    return null;
  }
  return {
    x: newRect.left - oldRect.left,
    y: newRect.top - oldRect.top,
    scaleX: newRect.width / oldRect.width,
    scaleY: newRect.height / oldRect.height
  };
};
var rectSwappingStrategy = (_ref4) => {
  let {
    activeIndex,
    index: index5,
    rects,
    overIndex
  } = _ref4;
  let oldRect;
  let newRect;
  if (index5 === activeIndex) {
    oldRect = rects[index5];
    newRect = rects[overIndex];
  }
  if (index5 === overIndex) {
    oldRect = rects[index5];
    newRect = rects[activeIndex];
  }
  if (!newRect || !oldRect) {
    return null;
  }
  return {
    x: newRect.left - oldRect.left,
    y: newRect.top - oldRect.top,
    scaleX: newRect.width / oldRect.width,
    scaleY: newRect.height / oldRect.height
  };
};
var defaultScale$1 = {
  scaleX: 1,
  scaleY: 1
};
var verticalListSortingStrategy = (_ref4) => {
  var _rects$activeIndex;
  let {
    activeIndex,
    activeNodeRect: fallbackActiveRect,
    index: index5,
    rects,
    overIndex
  } = _ref4;
  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
  if (!activeNodeRect) {
    return null;
  }
  if (index5 === activeIndex) {
    const overIndexRect = rects[overIndex];
    if (!overIndexRect) {
      return null;
    }
    return {
      x: 0,
      y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top,
      ...defaultScale$1
    };
  }
  const itemGap = getItemGap$1(rects, index5, activeIndex);
  if (index5 > activeIndex && index5 <= overIndex) {
    return {
      x: 0,
      y: -activeNodeRect.height - itemGap,
      ...defaultScale$1
    };
  }
  if (index5 < activeIndex && index5 >= overIndex) {
    return {
      x: 0,
      y: activeNodeRect.height + itemGap,
      ...defaultScale$1
    };
  }
  return {
    x: 0,
    y: 0,
    ...defaultScale$1
  };
};
function getItemGap$1(clientRects, index5, activeIndex) {
  const currentRect = clientRects[index5];
  const previousRect = clientRects[index5 - 1];
  const nextRect = clientRects[index5 + 1];
  if (!currentRect) {
    return 0;
  }
  if (activeIndex < index5) {
    return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;
  }
  return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;
}
var ID_PREFIX2 = "Sortable";
var Context = import_react285.default.createContext({
  activeIndex: -1,
  containerId: ID_PREFIX2,
  disableTransforms: false,
  items: [],
  overIndex: -1,
  useDragOverlay: false,
  sortedRects: [],
  strategy: rectSortingStrategy,
  disabled: {
    draggable: false,
    droppable: false
  }
});
function SortableContext(_ref4) {
  let {
    children,
    id: id3,
    items: userDefinedItems,
    strategy = rectSortingStrategy,
    disabled: disabledProp = false
  } = _ref4;
  const {
    active,
    dragOverlay,
    droppableRects,
    over,
    measureDroppableContainers
  } = useDndContext();
  const containerId = useUniqueId2(ID_PREFIX2, id3);
  const useDragOverlay = Boolean(dragOverlay.rect !== null);
  const items = (0, import_react285.useMemo)(() => userDefinedItems.map((item) => typeof item === "object" && "id" in item ? item.id : item), [userDefinedItems]);
  const isDragging = active != null;
  const activeIndex = active ? items.indexOf(active.id) : -1;
  const overIndex = over ? items.indexOf(over.id) : -1;
  const previousItemsRef = (0, import_react285.useRef)(items);
  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);
  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;
  const disabled = normalizeDisabled(disabledProp);
  useIsomorphicLayoutEffect3(() => {
    if (itemsHaveChanged && isDragging) {
      measureDroppableContainers(items);
    }
  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers]);
  (0, import_react285.useEffect)(() => {
    previousItemsRef.current = items;
  }, [items]);
  const contextValue = (0, import_react285.useMemo)(
    () => ({
      activeIndex,
      containerId,
      disabled,
      disableTransforms,
      items,
      overIndex,
      useDragOverlay,
      sortedRects: getSortedRects(items, droppableRects),
      strategy
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]
  );
  return import_react285.default.createElement(Context.Provider, {
    value: contextValue
  }, children);
}
var defaultNewIndexGetter = (_ref4) => {
  let {
    id: id3,
    items,
    activeIndex,
    overIndex
  } = _ref4;
  return arrayMove(items, activeIndex, overIndex).indexOf(id3);
};
var defaultAnimateLayoutChanges = (_ref23) => {
  let {
    containerId,
    isSorting,
    wasDragging,
    index: index5,
    items,
    newIndex,
    previousItems,
    previousContainerId,
    transition: transition3
  } = _ref23;
  if (!transition3 || !wasDragging) {
    return false;
  }
  if (previousItems !== items && index5 === newIndex) {
    return false;
  }
  if (isSorting) {
    return true;
  }
  return newIndex !== index5 && containerId === previousContainerId;
};
var defaultTransition3 = {
  duration: 200,
  easing: "ease"
};
var transitionProperty2 = "transform";
var disabledTransition = CSS2.Transition.toString({
  property: transitionProperty2,
  duration: 0,
  easing: "linear"
});
var defaultAttributes = {
  roleDescription: "sortable"
};
function useDerivedTransform(_ref4) {
  let {
    disabled,
    index: index5,
    node: node3,
    rect
  } = _ref4;
  const [derivedTransform, setDerivedtransform] = (0, import_react285.useState)(null);
  const previousIndex = (0, import_react285.useRef)(index5);
  useIsomorphicLayoutEffect3(() => {
    if (!disabled && index5 !== previousIndex.current && node3.current) {
      const initial = rect.current;
      if (initial) {
        const current = getClientRect(node3.current, {
          ignoreTransform: true
        });
        const delta2 = {
          x: initial.left - current.left,
          y: initial.top - current.top,
          scaleX: initial.width / current.width,
          scaleY: initial.height / current.height
        };
        if (delta2.x || delta2.y) {
          setDerivedtransform(delta2);
        }
      }
    }
    if (index5 !== previousIndex.current) {
      previousIndex.current = index5;
    }
  }, [disabled, index5, node3, rect]);
  (0, import_react285.useEffect)(() => {
    if (derivedTransform) {
      setDerivedtransform(null);
    }
  }, [derivedTransform]);
  return derivedTransform;
}
function useSortable(_ref4) {
  let {
    animateLayoutChanges = defaultAnimateLayoutChanges,
    attributes: userDefinedAttributes,
    disabled: localDisabled,
    data: customData,
    getNewIndex = defaultNewIndexGetter,
    id: id3,
    strategy: localStrategy,
    resizeObserverConfig,
    transition: transition3 = defaultTransition3
  } = _ref4;
  const {
    items,
    containerId,
    activeIndex,
    disabled: globalDisabled,
    disableTransforms,
    sortedRects,
    overIndex,
    useDragOverlay,
    strategy: globalStrategy
  } = (0, import_react285.useContext)(Context);
  const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);
  const index5 = items.indexOf(id3);
  const data = (0, import_react285.useMemo)(() => ({
    sortable: {
      containerId,
      index: index5,
      items
    },
    ...customData
  }), [containerId, customData, index5, items]);
  const itemsAfterCurrentSortable = (0, import_react285.useMemo)(() => items.slice(items.indexOf(id3)), [items, id3]);
  const {
    rect,
    node: node3,
    isOver,
    setNodeRef: setDroppableNodeRef
  } = useDroppable({
    id: id3,
    data,
    disabled: disabled.droppable,
    resizeObserverConfig: {
      updateMeasurementsFor: itemsAfterCurrentSortable,
      ...resizeObserverConfig
    }
  });
  const {
    active,
    activatorEvent,
    activeNodeRect,
    attributes,
    setNodeRef: setDraggableNodeRef,
    listeners,
    isDragging,
    over,
    setActivatorNodeRef,
    transform: transform4
  } = useDraggable({
    id: id3,
    data,
    attributes: {
      ...defaultAttributes,
      ...userDefinedAttributes
    },
    disabled: disabled.draggable
  });
  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);
  const isSorting = Boolean(active);
  const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);
  const shouldDisplaceDragSource = !useDragOverlay && isDragging;
  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform4 : null;
  const strategy = localStrategy != null ? localStrategy : globalStrategy;
  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({
    rects: sortedRects,
    activeNodeRect,
    activeIndex,
    overIndex,
    index: index5
  }) : null;
  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({
    id: id3,
    items,
    activeIndex,
    overIndex
  }) : index5;
  const activeId = active == null ? void 0 : active.id;
  const previous = (0, import_react285.useRef)({
    activeId,
    items,
    newIndex,
    containerId
  });
  const itemsHaveChanged = items !== previous.current.items;
  const shouldAnimateLayoutChanges = animateLayoutChanges({
    active,
    containerId,
    isDragging,
    isSorting,
    id: id3,
    index: index5,
    items,
    newIndex: previous.current.newIndex,
    previousItems: previous.current.items,
    previousContainerId: previous.current.containerId,
    transition: transition3,
    wasDragging: previous.current.activeId != null
  });
  const derivedTransform = useDerivedTransform({
    disabled: !shouldAnimateLayoutChanges,
    index: index5,
    node: node3,
    rect
  });
  (0, import_react285.useEffect)(() => {
    if (isSorting && previous.current.newIndex !== newIndex) {
      previous.current.newIndex = newIndex;
    }
    if (containerId !== previous.current.containerId) {
      previous.current.containerId = containerId;
    }
    if (items !== previous.current.items) {
      previous.current.items = items;
    }
  }, [isSorting, newIndex, containerId, items]);
  (0, import_react285.useEffect)(() => {
    if (activeId === previous.current.activeId) {
      return;
    }
    if (activeId && !previous.current.activeId) {
      previous.current.activeId = activeId;
      return;
    }
    const timeoutId = setTimeout(() => {
      previous.current.activeId = activeId;
    }, 50);
    return () => clearTimeout(timeoutId);
  }, [activeId]);
  return {
    active,
    activeIndex,
    attributes,
    data,
    rect,
    index: index5,
    newIndex,
    items,
    isOver,
    isSorting,
    isDragging,
    listeners,
    node: node3,
    overIndex,
    over,
    setNodeRef,
    setActivatorNodeRef,
    setDroppableNodeRef,
    setDraggableNodeRef,
    transform: derivedTransform != null ? derivedTransform : finalTransform,
    transition: getTransition()
  };
  function getTransition() {
    if (
      // Temporarily disable transitions for a single frame to set up derived transforms
      derivedTransform || // Or to prevent items jumping to back to their "new" position when items change
      itemsHaveChanged && previous.current.newIndex === index5
    ) {
      return disabledTransition;
    }
    if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition3) {
      return void 0;
    }
    if (isSorting || shouldAnimateLayoutChanges) {
      return CSS2.Transition.toString({
        ...transition3,
        property: transitionProperty2
      });
    }
    return void 0;
  }
}
function normalizeLocalDisabled(localDisabled, globalDisabled) {
  var _localDisabled$dragga, _localDisabled$droppa;
  if (typeof localDisabled === "boolean") {
    return {
      draggable: localDisabled,
      // Backwards compatibility
      droppable: false
    };
  }
  return {
    draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,
    droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable
  };
}
function hasSortableData(entry) {
  if (!entry) {
    return false;
  }
  const data = entry.data.current;
  if (data && "sortable" in data && typeof data.sortable === "object" && "containerId" in data.sortable && "items" in data.sortable && "index" in data.sortable) {
    return true;
  }
  return false;
}
var directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];
var sortableKeyboardCoordinates = (event, _ref4) => {
  let {
    context: {
      active,
      collisionRect,
      droppableRects,
      droppableContainers,
      over,
      scrollableAncestors
    }
  } = _ref4;
  if (directions.includes(event.code)) {
    event.preventDefault();
    if (!active || !collisionRect) {
      return;
    }
    const filteredContainers = [];
    droppableContainers.getEnabled().forEach((entry) => {
      if (!entry || entry != null && entry.disabled) {
        return;
      }
      const rect = droppableRects.get(entry.id);
      if (!rect) {
        return;
      }
      switch (event.code) {
        case KeyboardCode.Down:
          if (collisionRect.top < rect.top) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Up:
          if (collisionRect.top > rect.top) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Left:
          if (collisionRect.left > rect.left) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Right:
          if (collisionRect.left < rect.left) {
            filteredContainers.push(entry);
          }
          break;
      }
    });
    const collisions = closestCorners({
      active,
      collisionRect,
      droppableRects,
      droppableContainers: filteredContainers,
      pointerCoordinates: null
    });
    let closestId = getFirstCollision(collisions, "id");
    if (closestId === (over == null ? void 0 : over.id) && collisions.length > 1) {
      closestId = collisions[1].id;
    }
    if (closestId != null) {
      const activeDroppable = droppableContainers.get(active.id);
      const newDroppable = droppableContainers.get(closestId);
      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;
      const newNode = newDroppable == null ? void 0 : newDroppable.node.current;
      if (newNode && newRect && activeDroppable && newDroppable) {
        const newScrollAncestors = getScrollableAncestors(newNode);
        const hasDifferentScrollAncestors = newScrollAncestors.some((element, index5) => scrollableAncestors[index5] !== element);
        const hasSameContainer = isSameContainer(activeDroppable, newDroppable);
        const isAfterActive = isAfter(activeDroppable, newDroppable);
        const offset3 = hasDifferentScrollAncestors || !hasSameContainer ? {
          x: 0,
          y: 0
        } : {
          x: isAfterActive ? collisionRect.width - newRect.width : 0,
          y: isAfterActive ? collisionRect.height - newRect.height : 0
        };
        const rectCoordinates = {
          x: newRect.left,
          y: newRect.top
        };
        const newCoordinates = offset3.x && offset3.y ? rectCoordinates : subtract5(rectCoordinates, offset3);
        return newCoordinates;
      }
    }
  }
  return void 0;
};
function isSameContainer(a2, b2) {
  if (!hasSortableData(a2) || !hasSortableData(b2)) {
    return false;
  }
  return a2.data.current.sortable.containerId === b2.data.current.sortable.containerId;
}
function isAfter(a2, b2) {
  if (!hasSortableData(a2) || !hasSortableData(b2)) {
    return false;
  }
  if (!isSameContainer(a2, b2)) {
    return false;
  }
  return a2.data.current.sortable.index < b2.data.current.sortable.index;
}

// node_modules/@dnd-kit/modifiers/dist/modifiers.esm.js
function createSnapModifier(gridSize) {
  return (_ref4) => {
    let {
      transform: transform4
    } = _ref4;
    return {
      ...transform4,
      x: Math.ceil(transform4.x / gridSize) * gridSize,
      y: Math.ceil(transform4.y / gridSize) * gridSize
    };
  };
}
var restrictToHorizontalAxis = (_ref4) => {
  let {
    transform: transform4
  } = _ref4;
  return {
    ...transform4,
    y: 0
  };
};
function restrictToBoundingRect(transform4, rect, boundingRect) {
  const value = {
    ...transform4
  };
  if (rect.top + transform4.y <= boundingRect.top) {
    value.y = boundingRect.top - rect.top;
  } else if (rect.bottom + transform4.y >= boundingRect.top + boundingRect.height) {
    value.y = boundingRect.top + boundingRect.height - rect.bottom;
  }
  if (rect.left + transform4.x <= boundingRect.left) {
    value.x = boundingRect.left - rect.left;
  } else if (rect.right + transform4.x >= boundingRect.left + boundingRect.width) {
    value.x = boundingRect.left + boundingRect.width - rect.right;
  }
  return value;
}
var restrictToParentElement = (_ref4) => {
  let {
    containerNodeRect,
    draggingNodeRect,
    transform: transform4
  } = _ref4;
  if (!draggingNodeRect || !containerNodeRect) {
    return transform4;
  }
  return restrictToBoundingRect(transform4, draggingNodeRect, containerNodeRect);
};
var restrictToFirstScrollableAncestor = (_ref4) => {
  let {
    draggingNodeRect,
    transform: transform4,
    scrollableAncestorRects
  } = _ref4;
  const firstScrollableAncestorRect = scrollableAncestorRects[0];
  if (!draggingNodeRect || !firstScrollableAncestorRect) {
    return transform4;
  }
  return restrictToBoundingRect(transform4, draggingNodeRect, firstScrollableAncestorRect);
};
var restrictToVerticalAxis = (_ref4) => {
  let {
    transform: transform4
  } = _ref4;
  return {
    ...transform4,
    x: 0
  };
};
var restrictToWindowEdges = (_ref4) => {
  let {
    transform: transform4,
    draggingNodeRect,
    windowRect
  } = _ref4;
  if (!draggingNodeRect || !windowRect) {
    return transform4;
  }
  return restrictToBoundingRect(transform4, draggingNodeRect, windowRect);
};
var snapCenterToCursor = (_ref4) => {
  let {
    activatorEvent,
    draggingNodeRect,
    transform: transform4
  } = _ref4;
  if (draggingNodeRect && activatorEvent) {
    const activatorCoordinates = getEventCoordinates(activatorEvent);
    if (!activatorCoordinates) {
      return transform4;
    }
    const offsetX = activatorCoordinates.x - draggingNodeRect.left;
    const offsetY = activatorCoordinates.y - draggingNodeRect.top;
    return {
      ...transform4,
      x: transform4.x + offsetX - draggingNodeRect.width / 2,
      y: transform4.y + offsetY - draggingNodeRect.height / 2
    };
  }
  return transform4;
};

// node_modules/react-window/node_modules/memoize-one/dist/memoize-one.esm.js
var safeIsNaN2 = Number.isNaN || function ponyfill2(value) {
  return typeof value === "number" && value !== value;
};
function isEqual3(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN2(first) && safeIsNaN2(second)) {
    return true;
  }
  return false;
}
function areInputsEqual2(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i2 = 0; i2 < newInputs.length; i2++) {
    if (!isEqual3(newInputs[i2], lastInputs[i2])) {
      return false;
    }
  }
  return true;
}
function memoizeOne2(resultFn, isEqual4) {
  if (isEqual4 === void 0) {
    isEqual4 = areInputsEqual2;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual4(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
var memoize_one_esm_default = memoizeOne2;

// node_modules/react-window/dist/index.esm.js
var import_react286 = __toESM(require_react());
var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
var now2 = hasNativePerformanceNow ? function() {
  return performance.now();
} : function() {
  return Date.now();
};
function cancelTimeout(timeoutID) {
  cancelAnimationFrame(timeoutID.id);
}
function requestTimeout(callback, delay2) {
  var start2 = now2();
  function tick() {
    if (now2() - start2 >= delay2) {
      callback.call(null);
    } else {
      timeoutID.id = requestAnimationFrame(tick);
    }
  }
  var timeoutID = {
    id: requestAnimationFrame(tick)
  };
  return timeoutID;
}
var size3 = -1;
function getScrollbarSize(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }
  if (size3 === -1 || recalculate) {
    var div = document.createElement("div");
    var style = div.style;
    style.width = "50px";
    style.height = "50px";
    style.overflow = "scroll";
    document.body.appendChild(div);
    size3 = div.offsetWidth - div.clientWidth;
    document.body.removeChild(div);
  }
  return size3;
}
var cachedRTLResult = null;
function getRTLOffsetType(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }
  if (cachedRTLResult === null || recalculate) {
    var outerDiv = document.createElement("div");
    var outerStyle = outerDiv.style;
    outerStyle.width = "50px";
    outerStyle.height = "50px";
    outerStyle.overflow = "scroll";
    outerStyle.direction = "rtl";
    var innerDiv = document.createElement("div");
    var innerStyle = innerDiv.style;
    innerStyle.width = "100px";
    innerStyle.height = "100px";
    outerDiv.appendChild(innerDiv);
    document.body.appendChild(outerDiv);
    if (outerDiv.scrollLeft > 0) {
      cachedRTLResult = "positive-descending";
    } else {
      outerDiv.scrollLeft = 1;
      if (outerDiv.scrollLeft === 0) {
        cachedRTLResult = "negative";
      } else {
        cachedRTLResult = "positive-ascending";
      }
    }
    document.body.removeChild(outerDiv);
    return cachedRTLResult;
  }
  return cachedRTLResult;
}
var IS_SCROLLING_DEBOUNCE_INTERVAL = 150;
var defaultItemKey = function defaultItemKey2(_ref4) {
  var columnIndex = _ref4.columnIndex, data = _ref4.data, rowIndex = _ref4.rowIndex;
  return rowIndex + ":" + columnIndex;
};
var devWarningsOverscanCount = null;
var devWarningsOverscanRowsColumnsCount = null;
var devWarningsTagName = null;
if (true) {
  if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
    devWarningsOverscanCount = /* @__PURE__ */ new WeakSet();
    devWarningsOverscanRowsColumnsCount = /* @__PURE__ */ new WeakSet();
    devWarningsTagName = /* @__PURE__ */ new WeakSet();
  }
}
function createGridComponent(_ref23) {
  var _class;
  var getColumnOffset3 = _ref23.getColumnOffset, getColumnStartIndexForOffset3 = _ref23.getColumnStartIndexForOffset, getColumnStopIndexForStartIndex3 = _ref23.getColumnStopIndexForStartIndex, getColumnWidth3 = _ref23.getColumnWidth, getEstimatedTotalHeight4 = _ref23.getEstimatedTotalHeight, getEstimatedTotalWidth4 = _ref23.getEstimatedTotalWidth, getOffsetForColumnAndAlignment3 = _ref23.getOffsetForColumnAndAlignment, getOffsetForRowAndAlignment3 = _ref23.getOffsetForRowAndAlignment, getRowHeight3 = _ref23.getRowHeight, getRowOffset3 = _ref23.getRowOffset, getRowStartIndexForOffset3 = _ref23.getRowStartIndexForOffset, getRowStopIndexForStartIndex3 = _ref23.getRowStopIndexForStartIndex, initInstanceProps5 = _ref23.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref23.shouldResetStyleCacheOnItemSizeChange, validateProps5 = _ref23.validateProps;
  return _class = function(_PureComponent) {
    _inheritsLoose(Grid3, _PureComponent);
    function Grid3(props) {
      var _this;
      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps5(_this.props, _assertThisInitialized(_this));
      _this._resetIsScrollingTimeoutId = null;
      _this._outerRef = void 0;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        horizontalScrollDirection: "forward",
        scrollLeft: typeof _this.props.initialScrollLeft === "number" ? _this.props.initialScrollLeft : 0,
        scrollTop: typeof _this.props.initialScrollTop === "number" ? _this.props.initialScrollTop : 0,
        scrollUpdateWasRequested: false,
        verticalScrollDirection: "forward"
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm_default(function(overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {
        return _this.props.onItemsRendered({
          overscanColumnStartIndex,
          overscanColumnStopIndex,
          overscanRowStartIndex,
          overscanRowStopIndex,
          visibleColumnStartIndex,
          visibleColumnStopIndex,
          visibleRowStartIndex,
          visibleRowStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm_default(function(scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          horizontalScrollDirection,
          scrollLeft,
          scrollTop,
          verticalScrollDirection,
          scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;
      _this._getItemStyle = function(rowIndex, columnIndex) {
        var _this$props = _this.props, columnWidth = _this$props.columnWidth, direction2 = _this$props.direction, rowHeight = _this$props.rowHeight;
        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction2, shouldResetStyleCacheOnItemSizeChange && rowHeight);
        var key2 = rowIndex + ":" + columnIndex;
        var style;
        if (itemStyleCache.hasOwnProperty(key2)) {
          style = itemStyleCache[key2];
        } else {
          var _offset = getColumnOffset3(_this.props, columnIndex, _this._instanceProps);
          var isRtl = direction2 === "rtl";
          itemStyleCache[key2] = style = {
            position: "absolute",
            left: isRtl ? void 0 : _offset,
            right: isRtl ? _offset : void 0,
            top: getRowOffset3(_this.props, rowIndex, _this._instanceProps),
            height: getRowHeight3(_this.props, rowIndex, _this._instanceProps),
            width: getColumnWidth3(_this.props, columnIndex, _this._instanceProps)
          };
        }
        return style;
      };
      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm_default(function(_, __, ___) {
        return {};
      });
      _this._onScroll = function(event) {
        var _event$currentTarget = event.currentTarget, clientHeight = _event$currentTarget.clientHeight, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop, scrollHeight = _event$currentTarget.scrollHeight, scrollWidth = _event$currentTarget.scrollWidth;
        _this.setState(function(prevState) {
          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
            return null;
          }
          var direction2 = _this.props.direction;
          var calculatedScrollLeft = scrollLeft;
          if (direction2 === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                calculatedScrollLeft = -scrollLeft;
                break;
              case "positive-descending":
                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));
          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
            scrollLeft: calculatedScrollLeft,
            scrollTop: calculatedScrollTop,
            verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward",
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._outerRefSetter = function(ref) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref;
        if (typeof outerRef === "function") {
          outerRef(ref);
        } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
          outerRef.current = ref;
        }
      };
      _this._resetIsScrollingDebounced = function() {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }
        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);
      };
      _this._resetIsScrolling = function() {
        _this._resetIsScrollingTimeoutId = null;
        _this.setState({
          isScrolling: false
        }, function() {
          _this._getItemStyleCache(-1);
        });
      };
      return _this;
    }
    Grid3.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps(nextProps, prevState);
      validateProps5(nextProps);
      return null;
    };
    var _proto = Grid3.prototype;
    _proto.scrollTo = function scrollTo2(_ref32) {
      var scrollLeft = _ref32.scrollLeft, scrollTop = _ref32.scrollTop;
      if (scrollLeft !== void 0) {
        scrollLeft = Math.max(0, scrollLeft);
      }
      if (scrollTop !== void 0) {
        scrollTop = Math.max(0, scrollTop);
      }
      this.setState(function(prevState) {
        if (scrollLeft === void 0) {
          scrollLeft = prevState.scrollLeft;
        }
        if (scrollTop === void 0) {
          scrollTop = prevState.scrollTop;
        }
        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
          return null;
        }
        return {
          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
          scrollLeft,
          scrollTop,
          scrollUpdateWasRequested: true,
          verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward"
        };
      }, this._resetIsScrollingDebounced);
    };
    _proto.scrollToItem = function scrollToItem(_ref4) {
      var _ref4$align = _ref4.align, align = _ref4$align === void 0 ? "auto" : _ref4$align, columnIndex = _ref4.columnIndex, rowIndex = _ref4.rowIndex;
      var _this$props2 = this.props, columnCount = _this$props2.columnCount, height = _this$props2.height, rowCount = _this$props2.rowCount, width = _this$props2.width;
      var _this$state = this.state, scrollLeft = _this$state.scrollLeft, scrollTop = _this$state.scrollTop;
      var scrollbarSize = getScrollbarSize();
      if (columnIndex !== void 0) {
        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));
      }
      if (rowIndex !== void 0) {
        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));
      }
      var estimatedTotalHeight = getEstimatedTotalHeight4(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth4(this.props, this._instanceProps);
      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;
      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;
      this.scrollTo({
        scrollLeft: columnIndex !== void 0 ? getOffsetForColumnAndAlignment3(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,
        scrollTop: rowIndex !== void 0 ? getOffsetForRowAndAlignment3(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop
      });
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props, initialScrollLeft = _this$props3.initialScrollLeft, initialScrollTop = _this$props3.initialScrollTop;
      if (this._outerRef != null) {
        var outerRef = this._outerRef;
        if (typeof initialScrollLeft === "number") {
          outerRef.scrollLeft = initialScrollLeft;
        }
        if (typeof initialScrollTop === "number") {
          outerRef.scrollTop = initialScrollTop;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      var direction2 = this.props.direction;
      var _this$state2 = this.state, scrollLeft = _this$state2.scrollLeft, scrollTop = _this$state2.scrollTop, scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction2 === "rtl") {
          switch (getRTLOffsetType()) {
            case "negative":
              outerRef.scrollLeft = -scrollLeft;
              break;
            case "positive-ascending":
              outerRef.scrollLeft = scrollLeft;
              break;
            default:
              var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;
              break;
          }
        } else {
          outerRef.scrollLeft = Math.max(0, scrollLeft);
        }
        outerRef.scrollTop = Math.max(0, scrollTop);
      }
      this._callPropsCallbacks();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };
    _proto.render = function render() {
      var _this$props4 = this.props, children = _this$props4.children, className = _this$props4.className, columnCount = _this$props4.columnCount, direction2 = _this$props4.direction, height = _this$props4.height, innerRef = _this$props4.innerRef, innerElementType = _this$props4.innerElementType, innerTagName = _this$props4.innerTagName, itemData = _this$props4.itemData, _this$props4$itemKey = _this$props4.itemKey, itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey, outerElementType = _this$props4.outerElementType, outerTagName = _this$props4.outerTagName, rowCount = _this$props4.rowCount, style = _this$props4.style, useIsScrolling = _this$props4.useIsScrolling, width = _this$props4.width;
      var isScrolling = this.state.isScrolling;
      var _this$_getHorizontalR = this._getHorizontalRangeToRender(), columnStartIndex = _this$_getHorizontalR[0], columnStopIndex = _this$_getHorizontalR[1];
      var _this$_getVerticalRan = this._getVerticalRangeToRender(), rowStartIndex = _this$_getVerticalRan[0], rowStopIndex = _this$_getVerticalRan[1];
      var items = [];
      if (columnCount > 0 && rowCount) {
        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {
          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {
            items.push((0, import_react286.createElement)(children, {
              columnIndex: _columnIndex,
              data: itemData,
              isScrolling: useIsScrolling ? isScrolling : void 0,
              key: itemKey({
                columnIndex: _columnIndex,
                data: itemData,
                rowIndex: _rowIndex
              }),
              rowIndex: _rowIndex,
              style: this._getItemStyle(_rowIndex, _columnIndex)
            }));
          }
        }
      }
      var estimatedTotalHeight = getEstimatedTotalHeight4(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth4(this.props, this._instanceProps);
      return (0, import_react286.createElement)(outerElementType || outerTagName || "div", {
        className,
        onScroll: this._onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: "relative",
          height,
          width,
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          willChange: "transform",
          direction: direction2
        }, style)
      }, (0, import_react286.createElement)(innerElementType || innerTagName || "div", {
        children: items,
        ref: innerRef,
        style: {
          height: estimatedTotalHeight,
          pointerEvents: isScrolling ? "none" : void 0,
          width: estimatedTotalWidth
        }
      }));
    };
    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      var _this$props5 = this.props, columnCount = _this$props5.columnCount, onItemsRendered = _this$props5.onItemsRendered, onScroll = _this$props5.onScroll, rowCount = _this$props5.rowCount;
      if (typeof onItemsRendered === "function") {
        if (columnCount > 0 && rowCount > 0) {
          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(), _overscanColumnStartIndex = _this$_getHorizontalR2[0], _overscanColumnStopIndex = _this$_getHorizontalR2[1], _visibleColumnStartIndex = _this$_getHorizontalR2[2], _visibleColumnStopIndex = _this$_getHorizontalR2[3];
          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(), _overscanRowStartIndex = _this$_getVerticalRan2[0], _overscanRowStopIndex = _this$_getVerticalRan2[1], _visibleRowStartIndex = _this$_getVerticalRan2[2], _visibleRowStopIndex = _this$_getVerticalRan2[3];
          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);
        }
      }
      if (typeof onScroll === "function") {
        var _this$state3 = this.state, _horizontalScrollDirection = _this$state3.horizontalScrollDirection, _scrollLeft = _this$state3.scrollLeft, _scrollTop = _this$state3.scrollTop, _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested, _verticalScrollDirection = _this$state3.verticalScrollDirection;
        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);
      }
    };
    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {
      var _this$props6 = this.props, columnCount = _this$props6.columnCount, overscanColumnCount = _this$props6.overscanColumnCount, overscanColumnsCount = _this$props6.overscanColumnsCount, overscanCount = _this$props6.overscanCount, rowCount = _this$props6.rowCount;
      var _this$state4 = this.state, horizontalScrollDirection = _this$state4.horizontalScrollDirection, isScrolling = _this$state4.isScrolling, scrollLeft = _this$state4.scrollLeft;
      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;
      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getColumnStartIndexForOffset3(this.props, scrollLeft, this._instanceProps);
      var stopIndex = getColumnStopIndexForStartIndex3(this.props, startIndex, scrollLeft, this._instanceProps);
      var overscanBackward = !isScrolling || horizontalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || horizontalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {
      var _this$props7 = this.props, columnCount = _this$props7.columnCount, overscanCount = _this$props7.overscanCount, overscanRowCount = _this$props7.overscanRowCount, overscanRowsCount = _this$props7.overscanRowsCount, rowCount = _this$props7.rowCount;
      var _this$state5 = this.state, isScrolling = _this$state5.isScrolling, verticalScrollDirection = _this$state5.verticalScrollDirection, scrollTop = _this$state5.scrollTop;
      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;
      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getRowStartIndexForOffset3(this.props, scrollTop, this._instanceProps);
      var stopIndex = getRowStopIndexForStartIndex3(this.props, startIndex, scrollTop, this._instanceProps);
      var overscanBackward = !isScrolling || verticalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || verticalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    return Grid3;
  }(import_react286.PureComponent), _class.defaultProps = {
    direction: "ltr",
    itemData: void 0,
    useIsScrolling: false
  }, _class;
}
var validateSharedProps = function validateSharedProps2(_ref5, _ref6) {
  var children = _ref5.children, direction2 = _ref5.direction, height = _ref5.height, innerTagName = _ref5.innerTagName, outerTagName = _ref5.outerTagName, overscanColumnsCount = _ref5.overscanColumnsCount, overscanCount = _ref5.overscanCount, overscanRowsCount = _ref5.overscanRowsCount, width = _ref5.width;
  var instance = _ref6.instance;
  if (true) {
    if (typeof overscanCount === "number") {
      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {
        devWarningsOverscanCount.add(instance);
        console.warn("The overscanCount prop has been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
      }
    }
    if (typeof overscanColumnsCount === "number" || typeof overscanRowsCount === "number") {
      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {
        devWarningsOverscanRowsColumnsCount.add(instance);
        console.warn("The overscanColumnsCount and overscanRowsCount props have been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
      }
    }
    if (innerTagName != null || outerTagName != null) {
      if (devWarningsTagName && !devWarningsTagName.has(instance)) {
        devWarningsTagName.add(instance);
        console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
      }
    }
    if (children == null) {
      throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children === null ? "null" : typeof children) + '" was specified.'));
    }
    switch (direction2) {
      case "ltr":
      case "rtl":
        break;
      default:
        throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction2 + '" was specified.'));
    }
    if (typeof width !== "number") {
      throw Error('An invalid "width" prop has been specified. Grids must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
    }
    if (typeof height !== "number") {
      throw Error('An invalid "height" prop has been specified. Grids must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
    }
  }
};
var DEFAULT_ESTIMATED_ITEM_SIZE = 50;
var getEstimatedTotalHeight = function getEstimatedTotalHeight2(_ref4, _ref23) {
  var rowCount = _ref4.rowCount;
  var rowMetadataMap = _ref23.rowMetadataMap, estimatedRowHeight = _ref23.estimatedRowHeight, lastMeasuredRowIndex = _ref23.lastMeasuredRowIndex;
  var totalSizeOfMeasuredRows = 0;
  if (lastMeasuredRowIndex >= rowCount) {
    lastMeasuredRowIndex = rowCount - 1;
  }
  if (lastMeasuredRowIndex >= 0) {
    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};
var getEstimatedTotalWidth = function getEstimatedTotalWidth2(_ref32, _ref4) {
  var columnCount = _ref32.columnCount;
  var columnMetadataMap = _ref4.columnMetadataMap, estimatedColumnWidth = _ref4.estimatedColumnWidth, lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;
  var totalSizeOfMeasuredRows = 0;
  if (lastMeasuredColumnIndex >= columnCount) {
    lastMeasuredColumnIndex = columnCount - 1;
  }
  if (lastMeasuredColumnIndex >= 0) {
    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};
var getItemMetadata = function getItemMetadata2(itemType, props, index5, instanceProps) {
  var itemMetadataMap, itemSize, lastMeasuredIndex;
  if (itemType === "column") {
    itemMetadataMap = instanceProps.columnMetadataMap;
    itemSize = props.columnWidth;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    itemSize = props.rowHeight;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }
  if (index5 > lastMeasuredIndex) {
    var offset3 = 0;
    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset3 = itemMetadata.offset + itemMetadata.size;
    }
    for (var i2 = lastMeasuredIndex + 1; i2 <= index5; i2++) {
      var size4 = itemSize(i2);
      itemMetadataMap[i2] = {
        offset: offset3,
        size: size4
      };
      offset3 += size4;
    }
    if (itemType === "column") {
      instanceProps.lastMeasuredColumnIndex = index5;
    } else {
      instanceProps.lastMeasuredRowIndex = index5;
    }
  }
  return itemMetadataMap[index5];
};
var findNearestItem = function findNearestItem2(itemType, props, instanceProps, offset3) {
  var itemMetadataMap, lastMeasuredIndex;
  if (itemType === "column") {
    itemMetadataMap = instanceProps.columnMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
  if (lastMeasuredItemOffset >= offset3) {
    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset3);
  } else {
    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset3);
  }
};
var findNearestItemBinarySearch = function findNearestItemBinarySearch2(itemType, props, instanceProps, high, low, offset3) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;
    if (currentOffset === offset3) {
      return middle;
    } else if (currentOffset < offset3) {
      low = middle + 1;
    } else if (currentOffset > offset3) {
      high = middle - 1;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
var findNearestItemExponentialSearch = function findNearestItemExponentialSearch2(itemType, props, instanceProps, index5, offset3) {
  var itemCount = itemType === "column" ? props.columnCount : props.rowCount;
  var interval = 1;
  while (index5 < itemCount && getItemMetadata(itemType, props, index5, instanceProps).offset < offset3) {
    index5 += interval;
    interval *= 2;
  }
  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index5, itemCount - 1), Math.floor(index5 / 2), offset3);
};
var getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment2(itemType, props, index5, align, scrollOffset, instanceProps, scrollbarSize) {
  var size4 = itemType === "column" ? props.width : props.height;
  var itemMetadata = getItemMetadata(itemType, props, index5, instanceProps);
  var estimatedTotalSize = itemType === "column" ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);
  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size4, itemMetadata.offset));
  var minOffset = Math.max(0, itemMetadata.offset - size4 + scrollbarSize + itemMetadata.size);
  if (align === "smart") {
    if (scrollOffset >= minOffset - size4 && scrollOffset <= maxOffset + size4) {
      align = "auto";
    } else {
      align = "center";
    }
  }
  switch (align) {
    case "start":
      return maxOffset;
    case "end":
      return minOffset;
    case "center":
      return Math.round(minOffset + (maxOffset - minOffset) / 2);
    case "auto":
    default:
      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
        return scrollOffset;
      } else if (minOffset > maxOffset) {
        return minOffset;
      } else if (scrollOffset < minOffset) {
        return minOffset;
      } else {
        return maxOffset;
      }
  }
};
var VariableSizeGrid = createGridComponent({
  getColumnOffset: function getColumnOffset(props, index5, instanceProps) {
    return getItemMetadata("column", props, index5, instanceProps).offset;
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {
    return findNearestItem("column", props, instanceProps, scrollLeft);
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {
    var columnCount = props.columnCount, width = props.width;
    var itemMetadata = getItemMetadata("column", props, startIndex, instanceProps);
    var maxOffset = scrollLeft + width;
    var offset3 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < columnCount - 1 && offset3 < maxOffset) {
      stopIndex++;
      offset3 += getItemMetadata("column", props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  getColumnWidth: function getColumnWidth(props, index5, instanceProps) {
    return instanceProps.columnMetadataMap[index5].size;
  },
  getEstimatedTotalHeight,
  getEstimatedTotalWidth,
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index5, align, scrollOffset, instanceProps, scrollbarSize) {
    return getOffsetForIndexAndAlignment("column", props, index5, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index5, align, scrollOffset, instanceProps, scrollbarSize) {
    return getOffsetForIndexAndAlignment("row", props, index5, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getRowOffset: function getRowOffset(props, index5, instanceProps) {
    return getItemMetadata("row", props, index5, instanceProps).offset;
  },
  getRowHeight: function getRowHeight(props, index5, instanceProps) {
    return instanceProps.rowMetadataMap[index5].size;
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {
    return findNearestItem("row", props, instanceProps, scrollTop);
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {
    var rowCount = props.rowCount, height = props.height;
    var itemMetadata = getItemMetadata("row", props, startIndex, instanceProps);
    var maxOffset = scrollTop + height;
    var offset3 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < rowCount - 1 && offset3 < maxOffset) {
      stopIndex++;
      offset3 += getItemMetadata("row", props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  initInstanceProps: function initInstanceProps(props, instance) {
    var _ref5 = props, estimatedColumnWidth = _ref5.estimatedColumnWidth, estimatedRowHeight = _ref5.estimatedRowHeight;
    var instanceProps = {
      columnMetadataMap: {},
      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,
      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,
      lastMeasuredColumnIndex: -1,
      lastMeasuredRowIndex: -1,
      rowMetadataMap: {}
    };
    instance.resetAfterColumnIndex = function(columnIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instance.resetAfterIndices({
        columnIndex,
        shouldForceUpdate
      });
    };
    instance.resetAfterRowIndex = function(rowIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instance.resetAfterIndices({
        rowIndex,
        shouldForceUpdate
      });
    };
    instance.resetAfterIndices = function(_ref6) {
      var columnIndex = _ref6.columnIndex, rowIndex = _ref6.rowIndex, _ref6$shouldForceUpda = _ref6.shouldForceUpdate, shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;
      if (typeof columnIndex === "number") {
        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);
      }
      if (typeof rowIndex === "number") {
        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);
      }
      instance._getItemStyleCache(-1);
      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };
    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps(_ref7) {
    var columnWidth = _ref7.columnWidth, rowHeight = _ref7.rowHeight;
    if (true) {
      if (typeof columnWidth !== "function") {
        throw Error('An invalid "columnWidth" prop has been specified. Value should be a function. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
      } else if (typeof rowHeight !== "function") {
        throw Error('An invalid "rowHeight" prop has been specified. Value should be a function. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
      }
    }
  }
});
var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;
var defaultItemKey$1 = function defaultItemKey3(index5, data) {
  return index5;
};
var devWarningsDirection = null;
var devWarningsTagName$1 = null;
if (true) {
  if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
    devWarningsDirection = /* @__PURE__ */ new WeakSet();
    devWarningsTagName$1 = /* @__PURE__ */ new WeakSet();
  }
}
function createListComponent(_ref4) {
  var _class;
  var getItemOffset3 = _ref4.getItemOffset, getEstimatedTotalSize4 = _ref4.getEstimatedTotalSize, getItemSize3 = _ref4.getItemSize, getOffsetForIndexAndAlignment5 = _ref4.getOffsetForIndexAndAlignment, getStartIndexForOffset3 = _ref4.getStartIndexForOffset, getStopIndexForStartIndex3 = _ref4.getStopIndexForStartIndex, initInstanceProps5 = _ref4.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref4.shouldResetStyleCacheOnItemSizeChange, validateProps5 = _ref4.validateProps;
  return _class = function(_PureComponent) {
    _inheritsLoose(List3, _PureComponent);
    function List3(props) {
      var _this;
      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps5(_this.props, _assertThisInitialized(_this));
      _this._outerRef = void 0;
      _this._resetIsScrollingTimeoutId = null;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        scrollDirection: "forward",
        scrollOffset: typeof _this.props.initialScrollOffset === "number" ? _this.props.initialScrollOffset : 0,
        scrollUpdateWasRequested: false
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm_default(function(overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
        return _this.props.onItemsRendered({
          overscanStartIndex,
          overscanStopIndex,
          visibleStartIndex,
          visibleStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm_default(function(scrollDirection, scrollOffset, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          scrollDirection,
          scrollOffset,
          scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;
      _this._getItemStyle = function(index5) {
        var _this$props = _this.props, direction2 = _this$props.direction, itemSize = _this$props.itemSize, layout3 = _this$props.layout;
        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout3, shouldResetStyleCacheOnItemSizeChange && direction2);
        var style;
        if (itemStyleCache.hasOwnProperty(index5)) {
          style = itemStyleCache[index5];
        } else {
          var _offset = getItemOffset3(_this.props, index5, _this._instanceProps);
          var size4 = getItemSize3(_this.props, index5, _this._instanceProps);
          var isHorizontal = direction2 === "horizontal" || layout3 === "horizontal";
          var isRtl = direction2 === "rtl";
          var offsetHorizontal = isHorizontal ? _offset : 0;
          itemStyleCache[index5] = style = {
            position: "absolute",
            left: isRtl ? void 0 : offsetHorizontal,
            right: isRtl ? offsetHorizontal : void 0,
            top: !isHorizontal ? _offset : 0,
            height: !isHorizontal ? size4 : "100%",
            width: isHorizontal ? size4 : "100%"
          };
        }
        return style;
      };
      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm_default(function(_, __, ___) {
        return {};
      });
      _this._onScrollHorizontal = function(event) {
        var _event$currentTarget = event.currentTarget, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollWidth = _event$currentTarget.scrollWidth;
        _this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollLeft) {
            return null;
          }
          var direction2 = _this.props.direction;
          var scrollOffset = scrollLeft;
          if (direction2 === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                scrollOffset = -scrollLeft;
                break;
              case "positive-descending":
                scrollOffset = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._onScrollVertical = function(event) {
        var _event$currentTarget2 = event.currentTarget, clientHeight = _event$currentTarget2.clientHeight, scrollHeight = _event$currentTarget2.scrollHeight, scrollTop = _event$currentTarget2.scrollTop;
        _this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollTop) {
            return null;
          }
          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._outerRefSetter = function(ref) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref;
        if (typeof outerRef === "function") {
          outerRef(ref);
        } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
          outerRef.current = ref;
        }
      };
      _this._resetIsScrollingDebounced = function() {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }
        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
      };
      _this._resetIsScrolling = function() {
        _this._resetIsScrollingTimeoutId = null;
        _this.setState({
          isScrolling: false
        }, function() {
          _this._getItemStyleCache(-1, null);
        });
      };
      return _this;
    }
    List3.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps$1(nextProps, prevState);
      validateProps5(nextProps);
      return null;
    };
    var _proto = List3.prototype;
    _proto.scrollTo = function scrollTo2(scrollOffset) {
      scrollOffset = Math.max(0, scrollOffset);
      this.setState(function(prevState) {
        if (prevState.scrollOffset === scrollOffset) {
          return null;
        }
        return {
          scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
          scrollOffset,
          scrollUpdateWasRequested: true
        };
      }, this._resetIsScrollingDebounced);
    };
    _proto.scrollToItem = function scrollToItem(index5, align) {
      if (align === void 0) {
        align = "auto";
      }
      var _this$props2 = this.props, itemCount = _this$props2.itemCount, layout3 = _this$props2.layout;
      var scrollOffset = this.state.scrollOffset;
      index5 = Math.max(0, Math.min(index5, itemCount - 1));
      var scrollbarSize = 0;
      if (this._outerRef) {
        var outerRef = this._outerRef;
        if (layout3 === "vertical") {
          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;
        } else {
          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;
        }
      }
      this.scrollTo(getOffsetForIndexAndAlignment5(this.props, index5, align, scrollOffset, this._instanceProps, scrollbarSize));
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props, direction2 = _this$props3.direction, initialScrollOffset = _this$props3.initialScrollOffset, layout3 = _this$props3.layout;
      if (typeof initialScrollOffset === "number" && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction2 === "horizontal" || layout3 === "horizontal") {
          outerRef.scrollLeft = initialScrollOffset;
        } else {
          outerRef.scrollTop = initialScrollOffset;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      var _this$props4 = this.props, direction2 = _this$props4.direction, layout3 = _this$props4.layout;
      var _this$state = this.state, scrollOffset = _this$state.scrollOffset, scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;
      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction2 === "horizontal" || layout3 === "horizontal") {
          if (direction2 === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                outerRef.scrollLeft = -scrollOffset;
                break;
              case "positive-ascending":
                outerRef.scrollLeft = scrollOffset;
                break;
              default:
                var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                break;
            }
          } else {
            outerRef.scrollLeft = scrollOffset;
          }
        } else {
          outerRef.scrollTop = scrollOffset;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };
    _proto.render = function render() {
      var _this$props5 = this.props, children = _this$props5.children, className = _this$props5.className, direction2 = _this$props5.direction, height = _this$props5.height, innerRef = _this$props5.innerRef, innerElementType = _this$props5.innerElementType, innerTagName = _this$props5.innerTagName, itemCount = _this$props5.itemCount, itemData = _this$props5.itemData, _this$props5$itemKey = _this$props5.itemKey, itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey, layout3 = _this$props5.layout, outerElementType = _this$props5.outerElementType, outerTagName = _this$props5.outerTagName, style = _this$props5.style, useIsScrolling = _this$props5.useIsScrolling, width = _this$props5.width;
      var isScrolling = this.state.isScrolling;
      var isHorizontal = direction2 === "horizontal" || layout3 === "horizontal";
      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;
      var _this$_getRangeToRend = this._getRangeToRender(), startIndex = _this$_getRangeToRend[0], stopIndex = _this$_getRangeToRend[1];
      var items = [];
      if (itemCount > 0) {
        for (var _index = startIndex; _index <= stopIndex; _index++) {
          items.push((0, import_react286.createElement)(children, {
            data: itemData,
            key: itemKey(_index, itemData),
            index: _index,
            isScrolling: useIsScrolling ? isScrolling : void 0,
            style: this._getItemStyle(_index)
          }));
        }
      }
      var estimatedTotalSize = getEstimatedTotalSize4(this.props, this._instanceProps);
      return (0, import_react286.createElement)(outerElementType || outerTagName || "div", {
        className,
        onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: "relative",
          height,
          width,
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          willChange: "transform",
          direction: direction2
        }, style)
      }, (0, import_react286.createElement)(innerElementType || innerTagName || "div", {
        children: items,
        ref: innerRef,
        style: {
          height: isHorizontal ? "100%" : estimatedTotalSize,
          pointerEvents: isScrolling ? "none" : void 0,
          width: isHorizontal ? estimatedTotalSize : "100%"
        }
      }));
    };
    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      if (typeof this.props.onItemsRendered === "function") {
        var itemCount = this.props.itemCount;
        if (itemCount > 0) {
          var _this$_getRangeToRend2 = this._getRangeToRender(), _overscanStartIndex = _this$_getRangeToRend2[0], _overscanStopIndex = _this$_getRangeToRend2[1], _visibleStartIndex = _this$_getRangeToRend2[2], _visibleStopIndex = _this$_getRangeToRend2[3];
          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
        }
      }
      if (typeof this.props.onScroll === "function") {
        var _this$state2 = this.state, _scrollDirection = _this$state2.scrollDirection, _scrollOffset = _this$state2.scrollOffset, _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
      }
    };
    _proto._getRangeToRender = function _getRangeToRender() {
      var _this$props6 = this.props, itemCount = _this$props6.itemCount, overscanCount = _this$props6.overscanCount;
      var _this$state3 = this.state, isScrolling = _this$state3.isScrolling, scrollDirection = _this$state3.scrollDirection, scrollOffset = _this$state3.scrollOffset;
      if (itemCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getStartIndexForOffset3(this.props, scrollOffset, this._instanceProps);
      var stopIndex = getStopIndexForStartIndex3(this.props, startIndex, scrollOffset, this._instanceProps);
      var overscanBackward = !isScrolling || scrollDirection === "backward" ? Math.max(1, overscanCount) : 1;
      var overscanForward = !isScrolling || scrollDirection === "forward" ? Math.max(1, overscanCount) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    return List3;
  }(import_react286.PureComponent), _class.defaultProps = {
    direction: "ltr",
    itemData: void 0,
    layout: "vertical",
    overscanCount: 2,
    useIsScrolling: false
  }, _class;
}
var validateSharedProps$1 = function validateSharedProps3(_ref23, _ref32) {
  var children = _ref23.children, direction2 = _ref23.direction, height = _ref23.height, layout3 = _ref23.layout, innerTagName = _ref23.innerTagName, outerTagName = _ref23.outerTagName, width = _ref23.width;
  var instance = _ref32.instance;
  if (true) {
    if (innerTagName != null || outerTagName != null) {
      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {
        devWarningsTagName$1.add(instance);
        console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
      }
    }
    var isHorizontal = direction2 === "horizontal" || layout3 === "horizontal";
    switch (direction2) {
      case "horizontal":
      case "vertical":
        if (devWarningsDirection && !devWarningsDirection.has(instance)) {
          devWarningsDirection.add(instance);
          console.warn('The direction prop should be either "ltr" (default) or "rtl". Please use the layout prop to specify "vertical" (default) or "horizontal" orientation.');
        }
        break;
      case "ltr":
      case "rtl":
        break;
      default:
        throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction2 + '" was specified.'));
    }
    switch (layout3) {
      case "horizontal":
      case "vertical":
        break;
      default:
        throw Error('An invalid "layout" prop has been specified. Value should be either "horizontal" or "vertical". ' + ('"' + layout3 + '" was specified.'));
    }
    if (children == null) {
      throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children === null ? "null" : typeof children) + '" was specified.'));
    }
    if (isHorizontal && typeof width !== "number") {
      throw Error('An invalid "width" prop has been specified. Horizontal lists must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
    } else if (!isHorizontal && typeof height !== "number") {
      throw Error('An invalid "height" prop has been specified. Vertical lists must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
    }
  }
};
var DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;
var getItemMetadata$1 = function getItemMetadata3(props, index5, instanceProps) {
  var _ref4 = props, itemSize = _ref4.itemSize;
  var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  if (index5 > lastMeasuredIndex) {
    var offset3 = 0;
    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset3 = itemMetadata.offset + itemMetadata.size;
    }
    for (var i2 = lastMeasuredIndex + 1; i2 <= index5; i2++) {
      var size4 = itemSize(i2);
      itemMetadataMap[i2] = {
        offset: offset3,
        size: size4
      };
      offset3 += size4;
    }
    instanceProps.lastMeasuredIndex = index5;
  }
  return itemMetadataMap[index5];
};
var findNearestItem$1 = function findNearestItem3(props, instanceProps, offset3) {
  var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
  if (lastMeasuredItemOffset >= offset3) {
    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset3);
  } else {
    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset3);
  }
};
var findNearestItemBinarySearch$1 = function findNearestItemBinarySearch3(props, instanceProps, high, low, offset3) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;
    if (currentOffset === offset3) {
      return middle;
    } else if (currentOffset < offset3) {
      low = middle + 1;
    } else if (currentOffset > offset3) {
      high = middle - 1;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
var findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch3(props, instanceProps, index5, offset3) {
  var itemCount = props.itemCount;
  var interval = 1;
  while (index5 < itemCount && getItemMetadata$1(props, index5, instanceProps).offset < offset3) {
    index5 += interval;
    interval *= 2;
  }
  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index5, itemCount - 1), Math.floor(index5 / 2), offset3);
};
var getEstimatedTotalSize = function getEstimatedTotalSize2(_ref23, _ref32) {
  var itemCount = _ref23.itemCount;
  var itemMetadataMap = _ref32.itemMetadataMap, estimatedItemSize = _ref32.estimatedItemSize, lastMeasuredIndex = _ref32.lastMeasuredIndex;
  var totalSizeOfMeasuredItems = 0;
  if (lastMeasuredIndex >= itemCount) {
    lastMeasuredIndex = itemCount - 1;
  }
  if (lastMeasuredIndex >= 0) {
    var itemMetadata = itemMetadataMap[lastMeasuredIndex];
    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;
  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
};
var VariableSizeList = createListComponent({
  getItemOffset: function getItemOffset(props, index5, instanceProps) {
    return getItemMetadata$1(props, index5, instanceProps).offset;
  },
  getItemSize: function getItemSize(props, index5, instanceProps) {
    return instanceProps.itemMetadataMap[index5].size;
  },
  getEstimatedTotalSize,
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment3(props, index5, align, scrollOffset, instanceProps, scrollbarSize) {
    var direction2 = props.direction, height = props.height, layout3 = props.layout, width = props.width;
    var isHorizontal = direction2 === "horizontal" || layout3 === "horizontal";
    var size4 = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, index5, instanceProps);
    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);
    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size4, itemMetadata.offset));
    var minOffset = Math.max(0, itemMetadata.offset - size4 + itemMetadata.size + scrollbarSize);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size4 && scrollOffset <= maxOffset + size4) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        return Math.round(minOffset + (maxOffset - minOffset) / 2);
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getStartIndexForOffset: function getStartIndexForOffset(props, offset3, instanceProps) {
    return findNearestItem$1(props, instanceProps, offset3);
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {
    var direction2 = props.direction, height = props.height, itemCount = props.itemCount, layout3 = props.layout, width = props.width;
    var isHorizontal = direction2 === "horizontal" || layout3 === "horizontal";
    var size4 = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);
    var maxOffset = scrollOffset + size4;
    var offset3 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < itemCount - 1 && offset3 < maxOffset) {
      stopIndex++;
      offset3 += getItemMetadata$1(props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  initInstanceProps: function initInstanceProps2(props, instance) {
    var _ref4 = props, estimatedItemSize = _ref4.estimatedItemSize;
    var instanceProps = {
      itemMetadataMap: {},
      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,
      lastMeasuredIndex: -1
    };
    instance.resetAfterIndex = function(index5, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index5 - 1);
      instance._getItemStyleCache(-1);
      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };
    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps2(_ref5) {
    var itemSize = _ref5.itemSize;
    if (true) {
      if (typeof itemSize !== "function") {
        throw Error('An invalid "itemSize" prop has been specified. Value should be a function. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
      }
    }
  }
});
var FixedSizeGrid = createGridComponent({
  getColumnOffset: function getColumnOffset2(_ref4, index5) {
    var columnWidth = _ref4.columnWidth;
    return index5 * columnWidth;
  },
  getColumnWidth: function getColumnWidth2(_ref23, index5) {
    var columnWidth = _ref23.columnWidth;
    return columnWidth;
  },
  getRowOffset: function getRowOffset2(_ref32, index5) {
    var rowHeight = _ref32.rowHeight;
    return index5 * rowHeight;
  },
  getRowHeight: function getRowHeight2(_ref4, index5) {
    var rowHeight = _ref4.rowHeight;
    return rowHeight;
  },
  getEstimatedTotalHeight: function getEstimatedTotalHeight3(_ref5) {
    var rowCount = _ref5.rowCount, rowHeight = _ref5.rowHeight;
    return rowHeight * rowCount;
  },
  getEstimatedTotalWidth: function getEstimatedTotalWidth3(_ref6) {
    var columnCount = _ref6.columnCount, columnWidth = _ref6.columnWidth;
    return columnWidth * columnCount;
  },
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment2(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {
    var columnCount = _ref7.columnCount, columnWidth = _ref7.columnWidth, width = _ref7.width;
    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);
    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);
    if (align === "smart") {
      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(width / 2)) {
          return 0;
        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
          return lastColumnOffset;
        } else {
          return middleOffset;
        }
      case "auto":
      default:
        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
          return scrollLeft;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollLeft < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment2(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {
    var rowHeight = _ref8.rowHeight, height = _ref8.height, rowCount = _ref8.rowCount;
    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);
    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);
    if (align === "smart") {
      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(height / 2)) {
          return 0;
        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
          return lastRowOffset;
        } else {
          return middleOffset;
        }
      case "auto":
      default:
        if (scrollTop >= minOffset && scrollTop <= maxOffset) {
          return scrollTop;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollTop < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset2(_ref9, scrollLeft) {
    var columnWidth = _ref9.columnWidth, columnCount = _ref9.columnCount;
    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex2(_ref10, startIndex, scrollLeft) {
    var columnWidth = _ref10.columnWidth, columnCount = _ref10.columnCount, width = _ref10.width;
    var left2 = startIndex * columnWidth;
    var numVisibleColumns = Math.ceil((width + scrollLeft - left2) / columnWidth);
    return Math.max(0, Math.min(
      columnCount - 1,
      startIndex + numVisibleColumns - 1
      // -1 is because stop index is inclusive
    ));
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset2(_ref11, scrollTop) {
    var rowHeight = _ref11.rowHeight, rowCount = _ref11.rowCount;
    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex2(_ref12, startIndex, scrollTop) {
    var rowHeight = _ref12.rowHeight, rowCount = _ref12.rowCount, height = _ref12.height;
    var top2 = startIndex * rowHeight;
    var numVisibleRows = Math.ceil((height + scrollTop - top2) / rowHeight);
    return Math.max(0, Math.min(
      rowCount - 1,
      startIndex + numVisibleRows - 1
      // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps3(props) {
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps3(_ref13) {
    var columnWidth = _ref13.columnWidth, rowHeight = _ref13.rowHeight;
    if (true) {
      if (typeof columnWidth !== "number") {
        throw Error('An invalid "columnWidth" prop has been specified. Value should be a number. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
      }
      if (typeof rowHeight !== "number") {
        throw Error('An invalid "rowHeight" prop has been specified. Value should be a number. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
      }
    }
  }
});
var FixedSizeList = createListComponent({
  getItemOffset: function getItemOffset2(_ref4, index5) {
    var itemSize = _ref4.itemSize;
    return index5 * itemSize;
  },
  getItemSize: function getItemSize2(_ref23, index5) {
    var itemSize = _ref23.itemSize;
    return itemSize;
  },
  getEstimatedTotalSize: function getEstimatedTotalSize3(_ref32) {
    var itemCount = _ref32.itemCount, itemSize = _ref32.itemSize;
    return itemSize * itemCount;
  },
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment4(_ref4, index5, align, scrollOffset, instanceProps, scrollbarSize) {
    var direction2 = _ref4.direction, height = _ref4.height, itemCount = _ref4.itemCount, itemSize = _ref4.itemSize, layout3 = _ref4.layout, width = _ref4.width;
    var isHorizontal = direction2 === "horizontal" || layout3 === "horizontal";
    var size4 = isHorizontal ? width : height;
    var lastItemOffset = Math.max(0, itemCount * itemSize - size4);
    var maxOffset = Math.min(lastItemOffset, index5 * itemSize);
    var minOffset = Math.max(0, index5 * itemSize - size4 + itemSize + scrollbarSize);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size4 && scrollOffset <= maxOffset + size4) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center": {
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(size4 / 2)) {
          return 0;
        } else if (middleOffset > lastItemOffset + Math.floor(size4 / 2)) {
          return lastItemOffset;
        } else {
          return middleOffset;
        }
      }
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getStartIndexForOffset: function getStartIndexForOffset2(_ref5, offset3) {
    var itemCount = _ref5.itemCount, itemSize = _ref5.itemSize;
    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset3 / itemSize)));
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex2(_ref6, startIndex, scrollOffset) {
    var direction2 = _ref6.direction, height = _ref6.height, itemCount = _ref6.itemCount, itemSize = _ref6.itemSize, layout3 = _ref6.layout, width = _ref6.width;
    var isHorizontal = direction2 === "horizontal" || layout3 === "horizontal";
    var offset3 = startIndex * itemSize;
    var size4 = isHorizontal ? width : height;
    var numVisibleItems = Math.ceil((size4 + scrollOffset - offset3) / itemSize);
    return Math.max(0, Math.min(
      itemCount - 1,
      startIndex + numVisibleItems - 1
      // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps4(props) {
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps4(_ref7) {
    var itemSize = _ref7.itemSize;
    if (true) {
      if (typeof itemSize !== "number") {
        throw Error('An invalid "itemSize" prop has been specified. Value should be a number. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
      }
    }
  }
});

// node_modules/react-virtualized-auto-sizer/dist/react-virtualized-auto-sizer.esm.js
var import_react287 = __toESM(require_react());
var windowObject;
if (typeof window !== "undefined") {
  windowObject = window;
} else if (typeof self !== "undefined") {
  windowObject = self;
} else {
  windowObject = global;
}
var cancelFrame2 = null;
var requestFrame = null;
var TIMEOUT_DURATION = 20;
var clearTimeoutFn = windowObject.clearTimeout;
var setTimeoutFn = windowObject.setTimeout;
var cancelAnimationFrameFn = windowObject.cancelAnimationFrame || windowObject.mozCancelAnimationFrame || windowObject.webkitCancelAnimationFrame;
var requestAnimationFrameFn = windowObject.requestAnimationFrame || windowObject.mozRequestAnimationFrame || windowObject.webkitRequestAnimationFrame;
if (cancelAnimationFrameFn == null || requestAnimationFrameFn == null) {
  cancelFrame2 = clearTimeoutFn;
  requestFrame = function requestAnimationFrameViaSetTimeout(callback) {
    return setTimeoutFn(callback, TIMEOUT_DURATION);
  };
} else {
  cancelFrame2 = function cancelFrame3([animationFrameID, timeoutID]) {
    cancelAnimationFrameFn(animationFrameID);
    clearTimeoutFn(timeoutID);
  };
  requestFrame = function requestAnimationFrameWithSetTimeoutFallback(callback) {
    const animationFrameID = requestAnimationFrameFn(function animationFrameCallback() {
      clearTimeoutFn(timeoutID);
      callback();
    });
    const timeoutID = setTimeoutFn(function timeoutCallback() {
      cancelAnimationFrameFn(animationFrameID);
      callback();
    }, TIMEOUT_DURATION);
    return [animationFrameID, timeoutID];
  };
}
function createDetectElementResize(nonce) {
  let animationKeyframes;
  let animationName;
  let animationStartEvent;
  let animationStyle;
  let checkTriggers;
  let resetTriggers;
  let scrollListener;
  const attachEvent = typeof document !== "undefined" && document.attachEvent;
  if (!attachEvent) {
    resetTriggers = function(element) {
      const triggers = element.__resizeTriggers__, expand = triggers.firstElementChild, contract = triggers.lastElementChild, expandChild = expand.firstElementChild;
      contract.scrollLeft = contract.scrollWidth;
      contract.scrollTop = contract.scrollHeight;
      expandChild.style.width = expand.offsetWidth + 1 + "px";
      expandChild.style.height = expand.offsetHeight + 1 + "px";
      expand.scrollLeft = expand.scrollWidth;
      expand.scrollTop = expand.scrollHeight;
    };
    checkTriggers = function(element) {
      return element.offsetWidth !== element.__resizeLast__.width || element.offsetHeight !== element.__resizeLast__.height;
    };
    scrollListener = function(e) {
      if (e.target.className && typeof e.target.className.indexOf === "function" && e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0) {
        return;
      }
      const element = this;
      resetTriggers(this);
      if (this.__resizeRAF__) {
        cancelFrame2(this.__resizeRAF__);
      }
      this.__resizeRAF__ = requestFrame(function animationFrame() {
        if (checkTriggers(element)) {
          element.__resizeLast__.width = element.offsetWidth;
          element.__resizeLast__.height = element.offsetHeight;
          element.__resizeListeners__.forEach(function forEachResizeListener(fn2) {
            fn2.call(element, e);
          });
        }
      });
    };
    let animation = false;
    let keyframeprefix = "";
    animationStartEvent = "animationstart";
    const domPrefixes = "Webkit Moz O ms".split(" ");
    let startEvents = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" ");
    let pfx = "";
    {
      const elm = document.createElement("fakeelement");
      if (elm.style.animationName !== void 0) {
        animation = true;
      }
      if (animation === false) {
        for (let i2 = 0; i2 < domPrefixes.length; i2++) {
          if (elm.style[domPrefixes[i2] + "AnimationName"] !== void 0) {
            pfx = domPrefixes[i2];
            keyframeprefix = "-" + pfx.toLowerCase() + "-";
            animationStartEvent = startEvents[i2];
            animation = true;
            break;
          }
        }
      }
    }
    animationName = "resizeanim";
    animationKeyframes = "@" + keyframeprefix + "keyframes " + animationName + " { from { opacity: 0; } to { opacity: 0; } } ";
    animationStyle = keyframeprefix + "animation: 1ms " + animationName + "; ";
  }
  const createStyles = function(doc) {
    if (!doc.getElementById("detectElementResize")) {
      const css7 = (animationKeyframes ? animationKeyframes : "") + ".resize-triggers { " + (animationStyle ? animationStyle : "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }', head2 = doc.head || doc.getElementsByTagName("head")[0], style = doc.createElement("style");
      style.id = "detectElementResize";
      style.type = "text/css";
      if (nonce != null) {
        style.setAttribute("nonce", nonce);
      }
      if (style.styleSheet) {
        style.styleSheet.cssText = css7;
      } else {
        style.appendChild(doc.createTextNode(css7));
      }
      head2.appendChild(style);
    }
  };
  const addResizeListener = function(element, fn2) {
    if (attachEvent) {
      element.attachEvent("onresize", fn2);
    } else {
      if (!element.__resizeTriggers__) {
        const doc = element.ownerDocument;
        const elementStyle = windowObject.getComputedStyle(element);
        if (elementStyle && elementStyle.position === "static") {
          element.style.position = "relative";
        }
        createStyles(doc);
        element.__resizeLast__ = {};
        element.__resizeListeners__ = [];
        (element.__resizeTriggers__ = doc.createElement("div")).className = "resize-triggers";
        const expandTrigger = doc.createElement("div");
        expandTrigger.className = "expand-trigger";
        expandTrigger.appendChild(doc.createElement("div"));
        const contractTrigger = doc.createElement("div");
        contractTrigger.className = "contract-trigger";
        element.__resizeTriggers__.appendChild(expandTrigger);
        element.__resizeTriggers__.appendChild(contractTrigger);
        element.appendChild(element.__resizeTriggers__);
        resetTriggers(element);
        element.addEventListener("scroll", scrollListener, true);
        if (animationStartEvent) {
          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
            if (e.animationName === animationName) {
              resetTriggers(element);
            }
          };
          element.__resizeTriggers__.addEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
        }
      }
      element.__resizeListeners__.push(fn2);
    }
  };
  const removeResizeListener = function(element, fn2) {
    if (attachEvent) {
      element.detachEvent("onresize", fn2);
    } else {
      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn2), 1);
      if (!element.__resizeListeners__.length) {
        element.removeEventListener("scroll", scrollListener, true);
        if (element.__resizeTriggers__.__animationListener__) {
          element.__resizeTriggers__.removeEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
          element.__resizeTriggers__.__animationListener__ = null;
        }
        try {
          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
        } catch (e) {
        }
      }
    }
  };
  return {
    addResizeListener,
    removeResizeListener
  };
}
var AutoSizer = class extends import_react287.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      height: this.props.defaultHeight || 0,
      scaledHeight: this.props.defaultHeight || 0,
      scaledWidth: this.props.defaultWidth || 0,
      width: this.props.defaultWidth || 0
    };
    this._autoSizer = null;
    this._detectElementResize = null;
    this._parentNode = null;
    this._resizeObserver = null;
    this._timeoutId = null;
    this._onResize = () => {
      this._timeoutId = null;
      const {
        disableHeight,
        disableWidth,
        onResize
      } = this.props;
      if (this._parentNode) {
        const style = window.getComputedStyle(this._parentNode) || {};
        const paddingLeft = parseFloat(style.paddingLeft || "0");
        const paddingRight = parseFloat(style.paddingRight || "0");
        const paddingTop = parseFloat(style.paddingTop || "0");
        const paddingBottom = parseFloat(style.paddingBottom || "0");
        const rect = this._parentNode.getBoundingClientRect();
        const scaledHeight = rect.height - paddingTop - paddingBottom;
        const scaledWidth = rect.width - paddingLeft - paddingRight;
        const height = this._parentNode.offsetHeight - paddingTop - paddingBottom;
        const width = this._parentNode.offsetWidth - paddingLeft - paddingRight;
        if (!disableHeight && (this.state.height !== height || this.state.scaledHeight !== scaledHeight) || !disableWidth && (this.state.width !== width || this.state.scaledWidth !== scaledWidth)) {
          this.setState({
            height,
            width,
            scaledHeight,
            scaledWidth
          });
          if (typeof onResize === "function") {
            onResize({
              height,
              scaledHeight,
              scaledWidth,
              width
            });
          }
        }
      }
    };
    this._setRef = (autoSizer) => {
      this._autoSizer = autoSizer;
    };
  }
  componentDidMount() {
    const {
      nonce
    } = this.props;
    const parentNode = this._autoSizer ? this._autoSizer.parentNode : null;
    if (parentNode != null && parentNode.ownerDocument && parentNode.ownerDocument.defaultView && parentNode instanceof parentNode.ownerDocument.defaultView.HTMLElement) {
      this._parentNode = parentNode;
      const ResizeObserverInstance = parentNode.ownerDocument.defaultView.ResizeObserver;
      if (ResizeObserverInstance != null) {
        this._resizeObserver = new ResizeObserverInstance(() => {
          this._timeoutId = setTimeout(this._onResize, 0);
        });
        this._resizeObserver.observe(parentNode);
      } else {
        this._detectElementResize = createDetectElementResize(nonce);
        this._detectElementResize.addResizeListener(parentNode, this._onResize);
      }
      this._onResize();
    }
  }
  componentWillUnmount() {
    if (this._parentNode) {
      if (this._detectElementResize) {
        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
      }
      if (this._timeoutId !== null) {
        clearTimeout(this._timeoutId);
      }
      if (this._resizeObserver) {
        this._resizeObserver.disconnect();
      }
    }
  }
  render() {
    const {
      children,
      defaultHeight,
      defaultWidth,
      disableHeight = false,
      disableWidth = false,
      nonce,
      onResize,
      style = {},
      tagName = "div",
      ...rest
    } = this.props;
    const {
      height,
      scaledHeight,
      scaledWidth,
      width
    } = this.state;
    const outerStyle = {
      overflow: "visible"
    };
    const childParams = {};
    let bailoutOnChildren = false;
    if (!disableHeight) {
      if (height === 0) {
        bailoutOnChildren = true;
      }
      outerStyle.height = 0;
      childParams.height = height;
      childParams.scaledHeight = scaledHeight;
    }
    if (!disableWidth) {
      if (width === 0) {
        bailoutOnChildren = true;
      }
      outerStyle.width = 0;
      childParams.width = width;
      childParams.scaledWidth = scaledWidth;
    }
    return (0, import_react287.createElement)(tagName, {
      ref: this._setRef,
      style: {
        ...outerStyle,
        ...style
      },
      ...rest
    }, !bailoutOnChildren && children(childParams));
  }
};

// node_modules/@northlight/ui/dist/es/northlight.js
var import_react_avatar_editor = __toESM(require_dist());

// node_modules/react-number-format/dist/react-number-format.es.js
var import_react288 = __toESM(require_react());
function __rest2(s, e) {
  var t3 = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) {
      t3[p] = s[p];
    }
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") {
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s); i2 < p.length; i2++) {
      if (e.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i2])) {
        t3[p[i2]] = s[p[i2]];
      }
    }
  }
  return t3;
}
var SourceType;
(function(SourceType2) {
  SourceType2["event"] = "event";
  SourceType2["props"] = "prop";
})(SourceType || (SourceType = {}));
function noop9() {
}
function memoizeOnce(cb2) {
  var lastArgs;
  var lastValue = void 0;
  return function() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    if (lastArgs && args.length === lastArgs.length && args.every(function(value, index5) {
      return value === lastArgs[index5];
    })) {
      return lastValue;
    }
    lastArgs = args;
    lastValue = cb2.apply(void 0, args);
    return lastValue;
  };
}
function charIsNumber(char2) {
  return !!(char2 || "").match(/\d/);
}
function isNil(val) {
  return val === null || val === void 0;
}
function isNanValue(val) {
  return typeof val === "number" && isNaN(val);
}
function isNotValidValue(val) {
  return isNil(val) || isNanValue(val) || typeof val === "number" && !isFinite(val);
}
function escapeRegExp(str) {
  return str.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
}
function getThousandsGroupRegex(thousandsGroupStyle) {
  switch (thousandsGroupStyle) {
    case "lakh":
      return /(\d+?)(?=(\d\d)+(\d)(?!\d))(\.\d+)?/g;
    case "wan":
      return /(\d)(?=(\d{4})+(?!\d))/g;
    case "thousand":
    default:
      return /(\d)(?=(\d{3})+(?!\d))/g;
  }
}
function applyThousandSeparator(str, thousandSeparator, thousandsGroupStyle) {
  var thousandsGroupRegex = getThousandsGroupRegex(thousandsGroupStyle);
  var index5 = str.search(/[1-9]/);
  index5 = index5 === -1 ? str.length : index5;
  return str.substring(0, index5) + str.substring(index5, str.length).replace(thousandsGroupRegex, "$1" + thousandSeparator);
}
function usePersistentCallback(cb2) {
  var callbackRef = (0, import_react288.useRef)(cb2);
  callbackRef.current = cb2;
  var persistentCbRef = (0, import_react288.useRef)(function() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    return callbackRef.current.apply(callbackRef, args);
  });
  return persistentCbRef.current;
}
function splitDecimal(numStr, allowNegative) {
  if (allowNegative === void 0)
    allowNegative = true;
  var hasNegation = numStr[0] === "-";
  var addNegation = hasNegation && allowNegative;
  numStr = numStr.replace("-", "");
  var parts = numStr.split(".");
  var beforeDecimal = parts[0];
  var afterDecimal = parts[1] || "";
  return {
    beforeDecimal,
    afterDecimal,
    hasNegation,
    addNegation
  };
}
function fixLeadingZero(numStr) {
  if (!numStr) {
    return numStr;
  }
  var isNegative = numStr[0] === "-";
  if (isNegative) {
    numStr = numStr.substring(1, numStr.length);
  }
  var parts = numStr.split(".");
  var beforeDecimal = parts[0].replace(/^0+/, "") || "0";
  var afterDecimal = parts[1] || "";
  return (isNegative ? "-" : "") + beforeDecimal + (afterDecimal ? "." + afterDecimal : "");
}
function limitToScale(numStr, scale4, fixedDecimalScale) {
  var str = "";
  var filler = fixedDecimalScale ? "0" : "";
  for (var i2 = 0; i2 <= scale4 - 1; i2++) {
    str += numStr[i2] || filler;
  }
  return str;
}
function repeat(str, count) {
  return Array(count + 1).join(str);
}
function toNumericString(num) {
  var _num = num + "";
  var sign = _num[0] === "-" ? "-" : "";
  if (sign) {
    _num = _num.substring(1);
  }
  var ref = _num.split(/[eE]/g);
  var coefficient = ref[0];
  var exponent = ref[1];
  exponent = Number(exponent);
  if (!exponent) {
    return sign + coefficient;
  }
  coefficient = coefficient.replace(".", "");
  var decimalIndex = 1 + exponent;
  var coffiecientLn = coefficient.length;
  if (decimalIndex < 0) {
    coefficient = "0." + repeat("0", Math.abs(decimalIndex)) + coefficient;
  } else if (decimalIndex >= coffiecientLn) {
    coefficient = coefficient + repeat("0", decimalIndex - coffiecientLn);
  } else {
    coefficient = (coefficient.substring(0, decimalIndex) || "0") + "." + coefficient.substring(decimalIndex);
  }
  return sign + coefficient;
}
function roundToPrecision(numStr, scale4, fixedDecimalScale) {
  if (["", "-"].indexOf(numStr) !== -1) {
    return numStr;
  }
  var shouldHaveDecimalSeparator = (numStr.indexOf(".") !== -1 || fixedDecimalScale) && scale4;
  var ref = splitDecimal(numStr);
  var beforeDecimal = ref.beforeDecimal;
  var afterDecimal = ref.afterDecimal;
  var hasNegation = ref.hasNegation;
  var floatValue = parseFloat("0." + (afterDecimal || "0"));
  var floatValueStr = afterDecimal.length <= scale4 ? "0." + afterDecimal : floatValue.toFixed(scale4);
  var roundedDecimalParts = floatValueStr.split(".");
  var intPart = beforeDecimal;
  if (beforeDecimal && Number(roundedDecimalParts[0])) {
    intPart = beforeDecimal.split("").reverse().reduce(function(roundedStr, current, idx) {
      if (roundedStr.length > idx) {
        return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);
      }
      return current + roundedStr;
    }, roundedDecimalParts[0]);
  }
  var decimalPart = limitToScale(roundedDecimalParts[1] || "", scale4, fixedDecimalScale);
  var negation = hasNegation ? "-" : "";
  var decimalSeparator = shouldHaveDecimalSeparator ? "." : "";
  return "" + negation + intPart + decimalSeparator + decimalPart;
}
function setCaretPosition(el, caretPos) {
  el.value = el.value;
  if (el !== null) {
    if (el.createTextRange) {
      var range2 = el.createTextRange();
      range2.move("character", caretPos);
      range2.select();
      return true;
    }
    if (el.selectionStart || el.selectionStart === 0) {
      el.focus();
      el.setSelectionRange(caretPos, caretPos);
      return true;
    }
    el.focus();
    return false;
  }
}
var findChangeRange = memoizeOnce(function(prevValue, newValue) {
  var i2 = 0, j = 0;
  var prevLength = prevValue.length;
  var newLength = newValue.length;
  while (prevValue[i2] === newValue[i2] && i2 < prevLength) {
    i2++;
  }
  while (prevValue[prevLength - 1 - j] === newValue[newLength - 1 - j] && newLength - j > i2 && prevLength - j > i2) {
    j++;
  }
  return {
    from: { start: i2, end: prevLength - j },
    to: { start: i2, end: newLength - j }
  };
});
function clamp6(num, min3, max3) {
  return Math.min(Math.max(num, min3), max3);
}
function geInputCaretPosition(el) {
  return Math.max(el.selectionStart, el.selectionEnd);
}
function addInputMode() {
  return typeof navigator !== "undefined" && !(navigator.platform && /iPhone|iPod/.test(navigator.platform));
}
function getDefaultChangeMeta(value) {
  return {
    from: {
      start: 0,
      end: 0
    },
    to: {
      start: 0,
      end: value.length
    },
    lastValue: ""
  };
}
function defaultIsCharacterSame(ref) {
  var currentValue = ref.currentValue;
  var formattedValue = ref.formattedValue;
  var currentValueIndex = ref.currentValueIndex;
  var formattedValueIndex = ref.formattedValueIndex;
  return currentValue[currentValueIndex] === formattedValue[formattedValueIndex];
}
function getCaretPosition(newFormattedValue, lastFormattedValue, curValue, curCaretPos, boundary, isValidInputCharacter, isCharacterSame) {
  if (isCharacterSame === void 0)
    isCharacterSame = defaultIsCharacterSame;
  var firstAllowedPosition = boundary.findIndex(function(b2) {
    return b2;
  });
  var prefixFormat = newFormattedValue.slice(0, firstAllowedPosition);
  if (!lastFormattedValue && !curValue.startsWith(prefixFormat)) {
    lastFormattedValue = prefixFormat;
    curValue = prefixFormat + curValue;
    curCaretPos = curCaretPos + prefixFormat.length;
  }
  var curValLn = curValue.length;
  var formattedValueLn = newFormattedValue.length;
  var addedIndexMap = {};
  var indexMap = new Array(curValLn);
  for (var i2 = 0; i2 < curValLn; i2++) {
    indexMap[i2] = -1;
    for (var j = 0, jLn = formattedValueLn; j < jLn; j++) {
      var isCharSame = isCharacterSame({
        currentValue: curValue,
        lastValue: lastFormattedValue,
        formattedValue: newFormattedValue,
        currentValueIndex: i2,
        formattedValueIndex: j
      });
      if (isCharSame && addedIndexMap[j] !== true) {
        indexMap[i2] = j;
        addedIndexMap[j] = true;
        break;
      }
    }
  }
  var pos = curCaretPos;
  while (pos < curValLn && (indexMap[pos] === -1 || !isValidInputCharacter(curValue[pos]))) {
    pos++;
  }
  var endIndex = pos === curValLn || indexMap[pos] === -1 ? formattedValueLn : indexMap[pos];
  pos = curCaretPos - 1;
  while (pos > 0 && indexMap[pos] === -1) {
    pos--;
  }
  var startIndex = pos === -1 || indexMap[pos] === -1 ? 0 : indexMap[pos] + 1;
  if (startIndex > endIndex) {
    return endIndex;
  }
  return curCaretPos - startIndex < endIndex - curCaretPos ? startIndex : endIndex;
}
function getCaretPosInBoundary(value, caretPos, boundary, direction2) {
  var valLn = value.length;
  caretPos = clamp6(caretPos, 0, valLn);
  if (direction2 === "left") {
    while (caretPos >= 0 && !boundary[caretPos]) {
      caretPos--;
    }
    if (caretPos === -1) {
      caretPos = boundary.indexOf(true);
    }
  } else {
    while (caretPos <= valLn && !boundary[caretPos]) {
      caretPos++;
    }
    if (caretPos > valLn) {
      caretPos = boundary.lastIndexOf(true);
    }
  }
  if (caretPos === -1) {
    caretPos = valLn;
  }
  return caretPos;
}
function caretUnknownFormatBoundary(formattedValue) {
  var boundaryAry = Array.from({ length: formattedValue.length + 1 }).map(function() {
    return true;
  });
  for (var i2 = 0, ln = boundaryAry.length; i2 < ln; i2++) {
    boundaryAry[i2] = Boolean(charIsNumber(formattedValue[i2]) || charIsNumber(formattedValue[i2 - 1]));
  }
  return boundaryAry;
}
function useInternalValues(value, defaultValue2, valueIsNumericString, format2, removeFormatting2, onValueChange) {
  if (onValueChange === void 0)
    onValueChange = noop9;
  var getValues = usePersistentCallback(function(value2, valueIsNumericString2) {
    var formattedValue, numAsString;
    if (isNotValidValue(value2)) {
      numAsString = "";
      formattedValue = "";
    } else if (typeof value2 === "number" || valueIsNumericString2) {
      numAsString = typeof value2 === "number" ? toNumericString(value2) : value2;
      formattedValue = format2(numAsString);
    } else {
      numAsString = removeFormatting2(value2, void 0);
      formattedValue = format2(numAsString);
    }
    return { formattedValue, numAsString };
  });
  var ref = (0, import_react288.useState)(function() {
    return getValues(isNil(value) ? defaultValue2 : value, valueIsNumericString);
  });
  var values2 = ref[0];
  var setValues3 = ref[1];
  var _onValueChange = function(newValues2, sourceInfo) {
    if (newValues2.formattedValue !== values2.formattedValue) {
      setValues3({
        formattedValue: newValues2.formattedValue,
        numAsString: newValues2.value
      });
    }
    onValueChange(newValues2, sourceInfo);
  };
  var _value = value;
  var _valueIsNumericString = valueIsNumericString;
  if (isNil(value)) {
    _value = values2.numAsString;
    _valueIsNumericString = true;
  }
  var newValues = getValues(_value, _valueIsNumericString);
  (0, import_react288.useMemo)(function() {
    setValues3(newValues);
  }, [newValues.formattedValue]);
  return [values2, _onValueChange];
}
function defaultRemoveFormatting(value) {
  return value.replace(/[^0-9]/g, "");
}
function defaultFormat(value) {
  return value;
}
function NumberFormatBase(props) {
  var type = props.type;
  if (type === void 0)
    type = "text";
  var displayType = props.displayType;
  if (displayType === void 0)
    displayType = "input";
  var customInput = props.customInput;
  var renderText = props.renderText;
  var getInputRef = props.getInputRef;
  var format2 = props.format;
  if (format2 === void 0)
    format2 = defaultFormat;
  var removeFormatting2 = props.removeFormatting;
  if (removeFormatting2 === void 0)
    removeFormatting2 = defaultRemoveFormatting;
  var defaultValue2 = props.defaultValue;
  var valueIsNumericString = props.valueIsNumericString;
  var onValueChange = props.onValueChange;
  var isAllowed = props.isAllowed;
  var onChange2 = props.onChange;
  if (onChange2 === void 0)
    onChange2 = noop9;
  var onKeyDown = props.onKeyDown;
  if (onKeyDown === void 0)
    onKeyDown = noop9;
  var onMouseUp = props.onMouseUp;
  if (onMouseUp === void 0)
    onMouseUp = noop9;
  var onFocus4 = props.onFocus;
  if (onFocus4 === void 0)
    onFocus4 = noop9;
  var onBlur3 = props.onBlur;
  if (onBlur3 === void 0)
    onBlur3 = noop9;
  var propValue = props.value;
  var getCaretBoundary2 = props.getCaretBoundary;
  if (getCaretBoundary2 === void 0)
    getCaretBoundary2 = caretUnknownFormatBoundary;
  var isValidInputCharacter = props.isValidInputCharacter;
  if (isValidInputCharacter === void 0)
    isValidInputCharacter = charIsNumber;
  var isCharacterSame = props.isCharacterSame;
  var otherProps = __rest2(props, ["type", "displayType", "customInput", "renderText", "getInputRef", "format", "removeFormatting", "defaultValue", "valueIsNumericString", "onValueChange", "isAllowed", "onChange", "onKeyDown", "onMouseUp", "onFocus", "onBlur", "value", "getCaretBoundary", "isValidInputCharacter", "isCharacterSame"]);
  var ref = useInternalValues(propValue, defaultValue2, Boolean(valueIsNumericString), format2, removeFormatting2, onValueChange);
  var ref_0 = ref[0];
  var formattedValue = ref_0.formattedValue;
  var numAsString = ref_0.numAsString;
  var onFormattedValueChange = ref[1];
  var lastUpdatedValue = (0, import_react288.useRef)({ formattedValue, numAsString });
  var _onValueChange = function(values2, source) {
    lastUpdatedValue.current = { formattedValue: values2.formattedValue, numAsString: values2.value };
    onFormattedValueChange(values2, source);
  };
  var ref$1 = (0, import_react288.useState)(false);
  var mounted = ref$1[0];
  var setMounted = ref$1[1];
  var focusedElm = (0, import_react288.useRef)(null);
  var timeout = (0, import_react288.useRef)({
    setCaretTimeout: null,
    focusTimeout: null
  });
  (0, import_react288.useEffect)(function() {
    setMounted(true);
    return function() {
      clearTimeout(timeout.current.setCaretTimeout);
      clearTimeout(timeout.current.focusTimeout);
    };
  }, []);
  var _format = format2;
  var getValueObject = function(formattedValue2, numAsString2) {
    var floatValue = parseFloat(numAsString2);
    return {
      formattedValue: formattedValue2,
      value: numAsString2,
      floatValue: isNaN(floatValue) ? void 0 : floatValue
    };
  };
  var setPatchedCaretPosition = function(el, caretPos, currentValue) {
    if (el.selectionStart === 0 && el.selectionEnd === el.value.length) {
      return;
    }
    setCaretPosition(el, caretPos);
    timeout.current.setCaretTimeout = setTimeout(function() {
      if (el.value === currentValue && el.selectionStart !== caretPos) {
        setCaretPosition(el, caretPos);
      }
    }, 0);
  };
  var correctCaretPosition = function(value, caretPos, direction2) {
    return getCaretPosInBoundary(value, caretPos, getCaretBoundary2(value), direction2);
  };
  var getNewCaretPosition = function(inputValue, newFormattedValue, caretPos) {
    var caretBoundary = getCaretBoundary2(newFormattedValue);
    var updatedCaretPos = getCaretPosition(newFormattedValue, formattedValue, inputValue, caretPos, caretBoundary, isValidInputCharacter, isCharacterSame);
    updatedCaretPos = getCaretPosInBoundary(newFormattedValue, updatedCaretPos, caretBoundary);
    return updatedCaretPos;
  };
  var updateValueAndCaretPosition = function(params) {
    var newFormattedValue = params.formattedValue;
    if (newFormattedValue === void 0)
      newFormattedValue = "";
    var input = params.input;
    var source = params.source;
    var event = params.event;
    var numAsString2 = params.numAsString;
    var caretPos;
    if (input) {
      var inputValue = params.inputValue || input.value;
      var currentCaretPosition2 = geInputCaretPosition(input);
      input.value = newFormattedValue;
      caretPos = getNewCaretPosition(inputValue, newFormattedValue, currentCaretPosition2);
      if (caretPos !== void 0) {
        setPatchedCaretPosition(input, caretPos, newFormattedValue);
      }
    }
    if (newFormattedValue !== formattedValue) {
      _onValueChange(getValueObject(newFormattedValue, numAsString2), { event, source });
    }
  };
  (0, import_react288.useEffect)(function() {
    var ref2 = lastUpdatedValue.current;
    var lastFormattedValue = ref2.formattedValue;
    var lastNumAsString = ref2.numAsString;
    if (formattedValue !== lastFormattedValue && (formattedValue !== numAsString || lastFormattedValue !== lastNumAsString)) {
      _onValueChange(getValueObject(formattedValue, numAsString), {
        event: void 0,
        source: SourceType.props
      });
    }
  }, [formattedValue, numAsString]);
  var currentCaretPosition = focusedElm.current ? geInputCaretPosition(focusedElm.current) : void 0;
  var useIsomorphicLayoutEffect4 = typeof window !== "undefined" ? import_react288.useLayoutEffect : import_react288.useEffect;
  useIsomorphicLayoutEffect4(function() {
    var input = focusedElm.current;
    if (formattedValue !== lastUpdatedValue.current.formattedValue && input) {
      var caretPos = getNewCaretPosition(lastUpdatedValue.current.formattedValue, formattedValue, currentCaretPosition);
      input.value = formattedValue;
      setPatchedCaretPosition(input, caretPos, formattedValue);
    }
  }, [formattedValue]);
  var formatInputValue = function(inputValue, event, source) {
    var changeRange = findChangeRange(formattedValue, inputValue);
    var changeMeta = Object.assign(Object.assign({}, changeRange), { lastValue: formattedValue });
    var _numAsString = removeFormatting2(inputValue, changeMeta);
    var _formattedValue = _format(_numAsString);
    _numAsString = removeFormatting2(_formattedValue, void 0);
    if (isAllowed && !isAllowed(getValueObject(_formattedValue, _numAsString))) {
      var input = event.target;
      var currentCaretPosition2 = geInputCaretPosition(input);
      var caretPos = getNewCaretPosition(inputValue, formattedValue, currentCaretPosition2);
      input.value = formattedValue;
      setPatchedCaretPosition(input, caretPos, formattedValue);
      return false;
    }
    updateValueAndCaretPosition({
      formattedValue: _formattedValue,
      numAsString: _numAsString,
      inputValue,
      event,
      source,
      input: event.target
    });
    return true;
  };
  var _onChange = function(e) {
    var el = e.target;
    var inputValue = el.value;
    var changed = formatInputValue(inputValue, e, SourceType.event);
    if (changed) {
      onChange2(e);
    }
  };
  var _onKeyDown = function(e) {
    var el = e.target;
    var key2 = e.key;
    var selectionStart = el.selectionStart;
    var selectionEnd = el.selectionEnd;
    var value = el.value;
    if (value === void 0)
      value = "";
    var expectedCaretPosition;
    if (key2 === "ArrowLeft" || key2 === "Backspace") {
      expectedCaretPosition = Math.max(selectionStart - 1, 0);
    } else if (key2 === "ArrowRight") {
      expectedCaretPosition = Math.min(selectionStart + 1, value.length);
    } else if (key2 === "Delete") {
      expectedCaretPosition = selectionStart;
    }
    if (expectedCaretPosition === void 0 || selectionStart !== selectionEnd) {
      onKeyDown(e);
      return;
    }
    var newCaretPosition = expectedCaretPosition;
    if (key2 === "ArrowLeft" || key2 === "ArrowRight") {
      var direction2 = key2 === "ArrowLeft" ? "left" : "right";
      newCaretPosition = correctCaretPosition(value, expectedCaretPosition, direction2);
      if (newCaretPosition !== expectedCaretPosition) {
        e.preventDefault();
      }
    } else if (key2 === "Delete" && !isValidInputCharacter(value[expectedCaretPosition])) {
      newCaretPosition = correctCaretPosition(value, expectedCaretPosition, "right");
    } else if (key2 === "Backspace" && !isValidInputCharacter(value[expectedCaretPosition])) {
      newCaretPosition = correctCaretPosition(value, expectedCaretPosition, "left");
    }
    if (newCaretPosition !== expectedCaretPosition) {
      setPatchedCaretPosition(el, newCaretPosition, value);
    }
    if (e.isUnitTestRun) {
      setPatchedCaretPosition(el, newCaretPosition, value);
    }
    onKeyDown(e);
  };
  var _onMouseUp = function(e) {
    var el = e.target;
    var selectionStart = el.selectionStart;
    var selectionEnd = el.selectionEnd;
    var value = el.value;
    if (value === void 0)
      value = "";
    if (selectionStart === selectionEnd) {
      var caretPosition = correctCaretPosition(value, selectionStart);
      if (caretPosition !== selectionStart) {
        setPatchedCaretPosition(el, caretPosition, value);
      }
    }
    onMouseUp(e);
  };
  var _onFocus = function(e) {
    if (e.persist) {
      e.persist();
    }
    var el = e.target;
    var currentTarget = e.currentTarget;
    focusedElm.current = el;
    timeout.current.focusTimeout = setTimeout(function() {
      var selectionStart = el.selectionStart;
      var selectionEnd = el.selectionEnd;
      var value = el.value;
      if (value === void 0)
        value = "";
      var caretPosition = correctCaretPosition(value, selectionStart);
      if (caretPosition !== selectionStart && !(selectionStart === 0 && selectionEnd === value.length)) {
        setPatchedCaretPosition(el, caretPosition, value);
      }
      onFocus4(Object.assign(Object.assign({}, e), { currentTarget }));
    }, 0);
  };
  var _onBlur = function(e) {
    focusedElm.current = null;
    clearTimeout(timeout.current.focusTimeout);
    clearTimeout(timeout.current.setCaretTimeout);
    onBlur3(e);
  };
  var inputMode = mounted && addInputMode() ? "numeric" : void 0;
  var inputProps = Object.assign({ inputMode }, otherProps, {
    type,
    value: formattedValue,
    onChange: _onChange,
    onKeyDown: _onKeyDown,
    onMouseUp: _onMouseUp,
    onFocus: _onFocus,
    onBlur: _onBlur
  });
  if (displayType === "text") {
    return renderText ? import_react288.default.createElement(import_react288.default.Fragment, null, renderText(formattedValue, otherProps) || null) : import_react288.default.createElement("span", Object.assign({}, otherProps, { ref: getInputRef }), formattedValue);
  } else if (customInput) {
    var CustomInput2 = customInput;
    return import_react288.default.createElement(CustomInput2, Object.assign({}, inputProps, { ref: getInputRef }));
  }
  return import_react288.default.createElement("input", Object.assign({}, inputProps, { ref: getInputRef }));
}
function format(numStr, props) {
  var decimalScale = props.decimalScale;
  var fixedDecimalScale = props.fixedDecimalScale;
  var prefix4 = props.prefix;
  if (prefix4 === void 0)
    prefix4 = "";
  var suffix = props.suffix;
  if (suffix === void 0)
    suffix = "";
  var allowNegative = props.allowNegative;
  var thousandsGroupStyle = props.thousandsGroupStyle;
  if (thousandsGroupStyle === void 0)
    thousandsGroupStyle = "thousand";
  if (numStr === "" || numStr === "-") {
    return numStr;
  }
  var ref = getSeparators(props);
  var thousandSeparator = ref.thousandSeparator;
  var decimalSeparator = ref.decimalSeparator;
  var hasDecimalSeparator = decimalScale !== 0 && numStr.indexOf(".") !== -1 || decimalScale && fixedDecimalScale;
  var ref$1 = splitDecimal(numStr, allowNegative);
  var beforeDecimal = ref$1.beforeDecimal;
  var afterDecimal = ref$1.afterDecimal;
  var addNegation = ref$1.addNegation;
  if (decimalScale !== void 0) {
    afterDecimal = limitToScale(afterDecimal, decimalScale, !!fixedDecimalScale);
  }
  if (thousandSeparator) {
    beforeDecimal = applyThousandSeparator(beforeDecimal, thousandSeparator, thousandsGroupStyle);
  }
  if (prefix4) {
    beforeDecimal = prefix4 + beforeDecimal;
  }
  if (suffix) {
    afterDecimal = afterDecimal + suffix;
  }
  if (addNegation) {
    beforeDecimal = "-" + beforeDecimal;
  }
  numStr = beforeDecimal + (hasDecimalSeparator && decimalSeparator || "") + afterDecimal;
  return numStr;
}
function getSeparators(props) {
  var decimalSeparator = props.decimalSeparator;
  if (decimalSeparator === void 0)
    decimalSeparator = ".";
  var thousandSeparator = props.thousandSeparator;
  var allowedDecimalSeparators = props.allowedDecimalSeparators;
  if (thousandSeparator === true) {
    thousandSeparator = ",";
  }
  if (!allowedDecimalSeparators) {
    allowedDecimalSeparators = [decimalSeparator, "."];
  }
  return {
    decimalSeparator,
    thousandSeparator,
    allowedDecimalSeparators
  };
}
function handleNegation(value, allowNegative) {
  if (value === void 0)
    value = "";
  var negationRegex = new RegExp("(-)");
  var doubleNegationRegex = new RegExp("(-)(.)*(-)");
  var hasNegation = negationRegex.test(value);
  var removeNegation = doubleNegationRegex.test(value);
  value = value.replace(/-/g, "");
  if (hasNegation && !removeNegation && allowNegative) {
    value = "-" + value;
  }
  return value;
}
function getNumberRegex(decimalSeparator, global2) {
  return new RegExp("(^-)|[0-9]|" + escapeRegExp(decimalSeparator), global2 ? "g" : void 0);
}
function isNumericString(val, prefix4, suffix) {
  if (val === "") {
    return true;
  }
  return !(prefix4 === null || prefix4 === void 0 ? void 0 : prefix4.match(/\d/)) && !(suffix === null || suffix === void 0 ? void 0 : suffix.match(/\d/)) && typeof val === "string" && !isNaN(Number(val));
}
function removeFormatting(value, changeMeta, props) {
  var assign2;
  if (changeMeta === void 0)
    changeMeta = getDefaultChangeMeta(value);
  var allowNegative = props.allowNegative;
  var prefix4 = props.prefix;
  if (prefix4 === void 0)
    prefix4 = "";
  var suffix = props.suffix;
  if (suffix === void 0)
    suffix = "";
  var decimalScale = props.decimalScale;
  var from2 = changeMeta.from;
  var to = changeMeta.to;
  var start2 = to.start;
  var end2 = to.end;
  var ref = getSeparators(props);
  var allowedDecimalSeparators = ref.allowedDecimalSeparators;
  var decimalSeparator = ref.decimalSeparator;
  var isBeforeDecimalSeparator = value[end2] === decimalSeparator;
  if (charIsNumber(value) && (value === prefix4 || value === suffix) && changeMeta.lastValue === "") {
    return value;
  }
  if (end2 - start2 === 1 && allowedDecimalSeparators.indexOf(value[start2]) !== -1) {
    var separator = decimalScale === 0 ? "" : decimalSeparator;
    value = value.substring(0, start2) + separator + value.substring(start2 + 1, value.length);
  }
  var stripNegation = function(value2, start3, end3) {
    var hasNegation2 = false;
    var hasDoubleNegation = false;
    if (prefix4.startsWith("-")) {
      hasNegation2 = false;
    } else if (value2.startsWith("--")) {
      hasNegation2 = false;
      hasDoubleNegation = true;
    } else if (suffix.startsWith("-") && value2.length === suffix.length) {
      hasNegation2 = false;
    } else if (value2[0] === "-") {
      hasNegation2 = true;
    }
    var charsToRemove = hasNegation2 ? 1 : 0;
    if (hasDoubleNegation) {
      charsToRemove = 2;
    }
    if (charsToRemove) {
      value2 = value2.substring(charsToRemove);
      start3 -= charsToRemove;
      end3 -= charsToRemove;
    }
    return { value: value2, start: start3, end: end3, hasNegation: hasNegation2 };
  };
  var toMetadata = stripNegation(value, start2, end2);
  var hasNegation = toMetadata.hasNegation;
  assign2 = toMetadata, value = assign2.value, start2 = assign2.start, end2 = assign2.end;
  var ref$1 = stripNegation(changeMeta.lastValue, from2.start, from2.end);
  var fromStart = ref$1.start;
  var fromEnd = ref$1.end;
  var lastValue = ref$1.value;
  var updatedSuffixPart = value.substring(start2, end2);
  if (value.length && lastValue.length && (fromStart > lastValue.length - suffix.length || fromEnd < prefix4.length) && !(updatedSuffixPart && suffix.startsWith(updatedSuffixPart))) {
    value = lastValue;
  }
  var startIndex = 0;
  if (value.startsWith(prefix4)) {
    startIndex += prefix4.length;
  } else if (start2 < prefix4.length) {
    startIndex = start2;
  }
  value = value.substring(startIndex);
  end2 -= startIndex;
  var endIndex = value.length;
  var suffixStartIndex = value.length - suffix.length;
  if (value.endsWith(suffix)) {
    endIndex = suffixStartIndex;
  } else if (end2 > suffixStartIndex) {
    endIndex = end2;
  } else if (end2 > value.length - suffix.length) {
    endIndex = end2;
  }
  value = value.substring(0, endIndex);
  value = handleNegation(hasNegation ? "-" + value : value, allowNegative);
  value = (value.match(getNumberRegex(decimalSeparator, true)) || []).join("");
  var firstIndex = value.indexOf(decimalSeparator);
  value = value.replace(new RegExp(escapeRegExp(decimalSeparator), "g"), function(match4, index5) {
    return index5 === firstIndex ? "." : "";
  });
  var ref$2 = splitDecimal(value, allowNegative);
  var beforeDecimal = ref$2.beforeDecimal;
  var afterDecimal = ref$2.afterDecimal;
  var addNegation = ref$2.addNegation;
  if (to.end - to.start < from2.end - from2.start && beforeDecimal === "" && isBeforeDecimalSeparator && !parseFloat(afterDecimal)) {
    value = addNegation ? "-" : "";
  }
  return value;
}
function getCaretBoundary(formattedValue, props) {
  var prefix4 = props.prefix;
  if (prefix4 === void 0)
    prefix4 = "";
  var suffix = props.suffix;
  if (suffix === void 0)
    suffix = "";
  var boundaryAry = Array.from({ length: formattedValue.length + 1 }).map(function() {
    return true;
  });
  var hasNegation = formattedValue[0] === "-";
  boundaryAry.fill(false, 0, prefix4.length + (hasNegation ? 1 : 0));
  var valLn = formattedValue.length;
  boundaryAry.fill(false, valLn - suffix.length + 1, valLn + 1);
  return boundaryAry;
}
function validateAndUpdateProps(props) {
  var ref = getSeparators(props);
  var thousandSeparator = ref.thousandSeparator;
  var decimalSeparator = ref.decimalSeparator;
  var prefix4 = props.prefix;
  if (prefix4 === void 0)
    prefix4 = "";
  var allowNegative = props.allowNegative;
  if (allowNegative === void 0)
    allowNegative = true;
  if (thousandSeparator === decimalSeparator) {
    throw new Error("\n        Decimal separator can't be same as thousand separator.\n        thousandSeparator: " + thousandSeparator + ' (thousandSeparator = {true} is same as thousandSeparator = ",")\n        decimalSeparator: ' + decimalSeparator + " (default value for decimalSeparator is .)\n     ");
  }
  if (prefix4.startsWith("-") && allowNegative) {
    console.error("\n      Prefix can't start with '-' when allowNegative is true.\n      prefix: " + prefix4 + "\n      allowNegative: " + allowNegative + "\n    ");
    allowNegative = false;
  }
  return Object.assign(Object.assign({}, props), { allowNegative });
}
function useNumericFormat(props) {
  props = validateAndUpdateProps(props);
  var _decimalSeparator = props.decimalSeparator;
  var _allowedDecimalSeparators = props.allowedDecimalSeparators;
  var thousandsGroupStyle = props.thousandsGroupStyle;
  var suffix = props.suffix;
  var allowNegative = props.allowNegative;
  var allowLeadingZeros = props.allowLeadingZeros;
  var onKeyDown = props.onKeyDown;
  if (onKeyDown === void 0)
    onKeyDown = noop9;
  var onBlur3 = props.onBlur;
  if (onBlur3 === void 0)
    onBlur3 = noop9;
  var thousandSeparator = props.thousandSeparator;
  var decimalScale = props.decimalScale;
  var fixedDecimalScale = props.fixedDecimalScale;
  var prefix4 = props.prefix;
  if (prefix4 === void 0)
    prefix4 = "";
  var defaultValue2 = props.defaultValue;
  var value = props.value;
  var valueIsNumericString = props.valueIsNumericString;
  var onValueChange = props.onValueChange;
  var restProps = __rest2(props, ["decimalSeparator", "allowedDecimalSeparators", "thousandsGroupStyle", "suffix", "allowNegative", "allowLeadingZeros", "onKeyDown", "onBlur", "thousandSeparator", "decimalScale", "fixedDecimalScale", "prefix", "defaultValue", "value", "valueIsNumericString", "onValueChange"]);
  var ref = getSeparators(props);
  var decimalSeparator = ref.decimalSeparator;
  var allowedDecimalSeparators = ref.allowedDecimalSeparators;
  var _format = function(numStr) {
    return format(numStr, props);
  };
  var _removeFormatting = function(inputValue, changeMeta) {
    return removeFormatting(inputValue, changeMeta, props);
  };
  var _value = isNil(value) ? defaultValue2 : value;
  var _valueIsNumericString = valueIsNumericString !== null && valueIsNumericString !== void 0 ? valueIsNumericString : isNumericString(_value, prefix4, suffix);
  if (!isNil(value)) {
    _valueIsNumericString = _valueIsNumericString || typeof value === "number";
  } else if (!isNil(defaultValue2)) {
    _valueIsNumericString = _valueIsNumericString || typeof defaultValue2 === "number";
  }
  var roundIncomingValueToPrecision = function(value2) {
    if (isNotValidValue(value2)) {
      return value2;
    }
    if (typeof value2 === "number") {
      value2 = toNumericString(value2);
    }
    if (_valueIsNumericString && typeof decimalScale === "number") {
      return roundToPrecision(value2, decimalScale, Boolean(fixedDecimalScale));
    }
    return value2;
  };
  var ref$1 = useInternalValues(roundIncomingValueToPrecision(value), roundIncomingValueToPrecision(defaultValue2), Boolean(_valueIsNumericString), _format, _removeFormatting, onValueChange);
  var ref$1_0 = ref$1[0];
  var numAsString = ref$1_0.numAsString;
  var formattedValue = ref$1_0.formattedValue;
  var _onValueChange = ref$1[1];
  var _onKeyDown = function(e) {
    var el = e.target;
    var key2 = e.key;
    var selectionStart = el.selectionStart;
    var selectionEnd = el.selectionEnd;
    var value2 = el.value;
    if (value2 === void 0)
      value2 = "";
    if (selectionStart !== selectionEnd) {
      onKeyDown(e);
      return;
    }
    if (key2 === "Backspace" && value2[0] === "-" && selectionStart === prefix4.length + 1 && allowNegative) {
      setCaretPosition(el, 1);
    }
    if (decimalScale && fixedDecimalScale) {
      if (key2 === "Backspace" && value2[selectionStart - 1] === decimalSeparator) {
        setCaretPosition(el, selectionStart - 1);
        e.preventDefault();
      } else if (key2 === "Delete" && value2[selectionStart] === decimalSeparator) {
        e.preventDefault();
      }
    }
    if ((allowedDecimalSeparators === null || allowedDecimalSeparators === void 0 ? void 0 : allowedDecimalSeparators.includes(key2)) && value2[selectionStart] === decimalSeparator) {
      setCaretPosition(el, selectionStart + 1);
    }
    var _thousandSeparator = thousandSeparator === true ? "," : thousandSeparator;
    if (key2 === "Backspace" && value2[selectionStart - 1] === _thousandSeparator) {
      setCaretPosition(el, selectionStart - 1);
    }
    if (key2 === "Delete" && value2[selectionStart] === _thousandSeparator) {
      setCaretPosition(el, selectionStart + 1);
    }
    onKeyDown(e);
  };
  var _onBlur = function(e) {
    var _value2 = numAsString;
    if (!_value2.match(/\d/g)) {
      _value2 = "";
    }
    if (!allowLeadingZeros) {
      _value2 = fixLeadingZero(_value2);
    }
    if (fixedDecimalScale && decimalScale) {
      _value2 = roundToPrecision(_value2, decimalScale, fixedDecimalScale);
    }
    if (_value2 !== numAsString) {
      var formattedValue2 = format(_value2, props);
      _onValueChange({
        formattedValue: formattedValue2,
        value: _value2,
        floatValue: parseFloat(_value2)
      }, {
        event: e,
        source: SourceType.event
      });
    }
    onBlur3(e);
  };
  var isValidInputCharacter = function(inputChar) {
    if (inputChar === decimalSeparator) {
      return true;
    }
    return charIsNumber(inputChar);
  };
  var isCharacterSame = function(ref2) {
    var currentValue = ref2.currentValue;
    var lastValue = ref2.lastValue;
    var formattedValue2 = ref2.formattedValue;
    var currentValueIndex = ref2.currentValueIndex;
    var formattedValueIndex = ref2.formattedValueIndex;
    var curChar = currentValue[currentValueIndex];
    var newChar = formattedValue2[formattedValueIndex];
    var typedRange = findChangeRange(lastValue, currentValue);
    var to = typedRange.to;
    if (currentValueIndex >= to.start && currentValueIndex < to.end && allowedDecimalSeparators && allowedDecimalSeparators.includes(curChar) && newChar === decimalSeparator) {
      return true;
    }
    return curChar === newChar;
  };
  return Object.assign(Object.assign({}, restProps), {
    value: formattedValue,
    valueIsNumericString: false,
    isValidInputCharacter,
    isCharacterSame,
    onValueChange: _onValueChange,
    format: _format,
    removeFormatting: _removeFormatting,
    getCaretBoundary: function(formattedValue2) {
      return getCaretBoundary(formattedValue2, props);
    },
    onKeyDown: _onKeyDown,
    onBlur: _onBlur
  });
}
function NumericFormat(props) {
  var numericFormatProps = useNumericFormat(props);
  return import_react288.default.createElement(NumberFormatBase, Object.assign({}, numericFormatProps));
}

// node_modules/@northlight/ui/dist/es/northlight.js
var import_react_input_mask = __toESM(require_react_input_mask());
var __defProp$2q = Object.defineProperty;
var __getOwnPropSymbols$2q = Object.getOwnPropertySymbols;
var __hasOwnProp$2q = Object.prototype.hasOwnProperty;
var __propIsEnum$2q = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2q = (obj, key2, value) => key2 in obj ? __defProp$2q(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2q = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2q.call(b2, prop2))
      __defNormalProp$2q(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2q)
    for (var prop2 of __getOwnPropSymbols$2q(b2)) {
      if (__propIsEnum$2q.call(b2, prop2))
        __defNormalProp$2q(a2, prop2, b2[prop2]);
    }
  return a2;
};
var Accordion3 = (props) => import_react291.default.createElement(Accordion, __spreadValues$2q({}, props));
var __defProp$2p = Object.defineProperty;
var __getOwnPropSymbols$2p = Object.getOwnPropertySymbols;
var __hasOwnProp$2p = Object.prototype.hasOwnProperty;
var __propIsEnum$2p = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2p = (obj, key2, value) => key2 in obj ? __defProp$2p(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2p = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2p.call(b2, prop2))
      __defNormalProp$2p(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2p)
    for (var prop2 of __getOwnPropSymbols$2p(b2)) {
      if (__propIsEnum$2p.call(b2, prop2))
        __defNormalProp$2p(a2, prop2, b2[prop2]);
    }
  return a2;
};
var AccordionButton3 = (props) => import_react291.default.createElement(AccordionButton, __spreadValues$2p({}, props));
var __defProp$2o = Object.defineProperty;
var __getOwnPropSymbols$2o = Object.getOwnPropertySymbols;
var __hasOwnProp$2o = Object.prototype.hasOwnProperty;
var __propIsEnum$2o = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2o = (obj, key2, value) => key2 in obj ? __defProp$2o(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2o = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2o.call(b2, prop2))
      __defNormalProp$2o(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2o)
    for (var prop2 of __getOwnPropSymbols$2o(b2)) {
      if (__propIsEnum$2o.call(b2, prop2))
        __defNormalProp$2o(a2, prop2, b2[prop2]);
    }
  return a2;
};
var AccordionPanel3 = (props) => import_react291.default.createElement(AccordionPanel, __spreadValues$2o({}, props));
var __defProp$2n = Object.defineProperty;
var __getOwnPropSymbols$2n = Object.getOwnPropertySymbols;
var __hasOwnProp$2n = Object.prototype.hasOwnProperty;
var __propIsEnum$2n = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2n = (obj, key2, value) => key2 in obj ? __defProp$2n(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2n = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2n.call(b2, prop2))
      __defNormalProp$2n(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2n)
    for (var prop2 of __getOwnPropSymbols$2n(b2)) {
      if (__propIsEnum$2n.call(b2, prop2))
        __defNormalProp$2n(a2, prop2, b2[prop2]);
    }
  return a2;
};
var AccordionItem3 = (props) => import_react291.default.createElement(AccordionItem, __spreadValues$2n({}, props));
var useDebounce = (value, delay2) => {
  const [debouncedValue, setDebouncedValue] = (0, import_react291.useState)(value);
  (0, import_react291.useEffect)(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay2);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay2]);
  return debouncedValue;
};
var useLoadingMessage = (prefix4 = "", delay2 = 300) => {
  const [dots, setDots] = (0, import_react291.useState)(".");
  useInterval(() => {
    if (dots.length === 3) {
      setDots(".");
    } else {
      setDots(`${dots}.`);
    }
  }, delay2);
  return `${prefix4}${dots}`;
};
var smoothScrollToBottom = (div) => {
  const totalSteps = 50;
  let currentStep = 0;
  const targetScrollTop = div.scrollHeight - div.clientHeight;
  const originalScrollTop = div.scrollTop;
  const scrollInterval = setInterval(() => {
    if (currentStep >= totalSteps) {
      clearInterval(scrollInterval);
    } else {
      currentStep += 1;
      const scrollProgress = currentStep / totalSteps;
      const easing = 1 - (1 - scrollProgress) * (1 - scrollProgress);
      div.scrollTop = originalScrollTop + (targetScrollTop - originalScrollTop) * easing;
    }
  }, 20);
};
var useScrollToBottom = (scrollView, messages) => {
  (0, import_react291.useEffect)(() => {
    const div = scrollView.current;
    if (div) {
      smoothScrollToBottom(div);
    }
  }, [messages]);
};
var useArrowFocus = (columns2) => {
  const {
    focusNext: next2,
    focusPrevious: previous,
    focusFirst,
    focusLast
  } = $9bf71ea28793e738$export$10c5169755ce7bd7();
  const defaultOpts = {
    ArrowRight: {
      wrap: true,
      repeat: 1
    },
    ArrowLeft: {
      wrap: true,
      repeat: 1
    },
    ArrowDown: {
      wrap: false,
      repeat: columns2
    },
    ArrowUp: {
      wrap: false,
      repeat: columns2
    }
  };
  const focusPrevious = ({
    repeat: repeat2,
    wrap: wrap6
  } = defaultOpts.ArrowLeft) => {
    for (let i2 = 0; i2 < repeat2; i2 += 1) {
      previous({ wrap: wrap6 });
    }
  };
  const focusNext = ({
    repeat: repeat2,
    wrap: wrap6
  } = defaultOpts.ArrowRight) => {
    for (let i2 = 0; i2 < repeat2; i2 += 1) {
      next2({ wrap: wrap6 });
    }
  };
  const defaultArrows = (e) => {
    switch (e.key) {
      case "ArrowRight":
        focusNext(defaultOpts.ArrowRight);
        break;
      case "ArrowLeft":
        focusPrevious(defaultOpts.ArrowLeft);
        break;
      case "ArrowDown":
        e.preventDefault();
        focusNext(defaultOpts.ArrowDown);
        break;
      case "ArrowUp":
        e.preventDefault();
        focusPrevious(defaultOpts.ArrowUp);
        break;
    }
  };
  return {
    defaultArrows,
    focusPrevious,
    focusNext,
    focusFirst,
    focusLast
  };
};
var useSelectCallbacks = ({
  onChange: onChange2,
  onAdd,
  onRemove,
  isMulti = false,
  value
}) => {
  const items = (0, import_react291.useRef)(value);
  const handleChange = (val, event) => {
    var _a9;
    onChange2(val, event);
    if (!isMulti && !(0, import_ramda.isNil)(val)) {
      onAdd(val.value);
    } else if (!(0, import_ramda.isNil)(val) && val.length > items.current.length) {
      onAdd((_a9 = (0, import_ramda.last)(val)) == null ? void 0 : _a9.value);
    } else {
      const removedItems = (0, import_ramda.map)(
        (0, import_ramda.prop)("value"),
        (0, import_ramda.difference)(
          isMulti ? items.current : [items.current],
          val
        )
      );
      onRemove(removedItems.length === 1 ? removedItems[0] : removedItems);
    }
    items.current = val;
  };
  return handleChange;
};
var isBetween = (point, min3, max3) => point >= min3 && point <= max3;
var useOutsideRectClick = (ref, callback) => {
  const stateRef = (0, import_react291.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false
  });
  const state2 = stateRef.current;
  (0, import_react291.useEffect)(() => {
    const handleMouseClick = (event) => {
      let clientX;
      let clientY;
      if (event instanceof MouseEvent) {
        clientX = event.clientX;
        clientY = event.clientY;
      } else if (event instanceof TouchEvent && event.changedTouches[0]) {
        clientX = event.changedTouches[0].clientX;
        clientY = event.changedTouches[0].clientY;
      }
      if ((0, import_ramda.isNil)(clientX) || (0, import_ramda.isNil)(clientY))
        return;
      if ((0, import_ramda.isNil)(ref == null ? void 0 : ref.current))
        return;
      const {
        top: top2,
        right: right2,
        left: left2,
        bottom: bottom2
      } = ref.current.getBoundingClientRect();
      const isInBound = isBetween(clientX, left2, right2) && isBetween(clientY, top2, bottom2);
      if (isInBound)
        return;
      callback(event);
    };
    const onPointerDown = () => {
      state2.isPointerDown = true;
    };
    const onMouseUp = (event) => {
      if (state2.ignoreEmulatedMouseEvents) {
        state2.ignoreEmulatedMouseEvents = false;
        return;
      }
      if (state2.isPointerDown) {
        state2.isPointerDown = false;
        handleMouseClick(event);
      }
    };
    const onTouchEnd = (event) => {
      state2.ignoreEmulatedMouseEvents = true;
      if (state2.isPointerDown) {
        state2.isPointerDown = false;
        handleMouseClick(event);
      }
    };
    document.addEventListener("mousedown", onPointerDown, true);
    document.addEventListener("mouseup", onMouseUp, true);
    document.addEventListener("touchstart", onPointerDown, true);
    document.addEventListener("touchend", onTouchEnd, true);
    return () => {
      document.removeEventListener("mousedown", onPointerDown, true);
      document.removeEventListener("mouseup", onMouseUp, true);
      document.removeEventListener("touchstart", onPointerDown, true);
      document.removeEventListener("touchend", onTouchEnd, true);
    };
  }, []);
};
var useScreenSize = () => {
  const screenSizes = useMediaQuery(["(min-width: 1280px)", "(min-width: 1024px)"]);
  if (screenSizes[0]) {
    return "lg";
  }
  if (screenSizes[1]) {
    return "md";
  }
  return "sm";
};
var useDidUpdateEffect = (effect5, dependencies) => {
  const didMountRef = (0, import_react291.useRef)(false);
  (0, import_react291.useEffect)(() => {
    if (didMountRef.current) {
      effect5();
    }
    didMountRef.current = true;
  }, dependencies);
};
var luminosity = (hexcolor) => {
  let color5 = hexcolor;
  if (color5.slice(0, 1) === "#") {
    color5 = color5.slice(1);
  }
  if (color5.length === 3) {
    color5 = color5.split("").map((hex3) => hex3 + hex3).join("");
  }
  const r3 = parseInt(color5.substring(0, 2), 16);
  const g = parseInt(color5.substring(2, 4), 16);
  const b2 = parseInt(color5.substring(4, 6), 16);
  const brightness = (r3 * 299 + g * 587 + b2 * 114) / 1e3;
  return brightness;
};
var getContrastColor = (color5) => {
  const colorTwo = useToken("colors", "text.default");
  const colorOne = useToken("colors", "text.inverted");
  const colorInHex = useToken("colors", color5);
  const l1 = luminosity(colorOne);
  const l2 = luminosity(colorTwo);
  const threshold = (l1 + l2) / 2;
  const brightColor = l1 > l2 ? colorOne : colorTwo;
  const darkColor = l1 > l2 ? colorTwo : colorOne;
  return luminosity(colorInHex) >= threshold ? darkColor : brightColor;
};
var ring2 = {
  _focusVisible: {
    outline: "none",
    ring: "2px",
    ringColor: "border.wcag",
    ringOffset: "1px"
  }
};
var highlight = {
  px: "1",
  py: "0.5",
  rounded: "6",
  bg: "teal.100",
  fontWeight: "bold"
};
var getShades = (startShade, endShade) => {
  let start2;
  let end2;
  if (!endShade) {
    start2 = startShade;
    end2 = startShade;
  } else if (endShade > startShade) {
    start2 = startShade;
    end2 = endShade;
  } else {
    start2 = endShade;
    end2 = startShade;
  }
  return Object.keys(color).reduce((colors3, color5) => {
    if (color5 === "mono")
      return colors3;
    return colors3.concat(
      Object.keys(color[color5]).filter(
        (value) => parseInt(value, 10) >= start2 && parseInt(value, 10) <= end2
      ).map((shade) => color[color5][shade])
    );
  }, []);
};
var getInitials = (name) => {
  const [firstName, lastName] = name.toUpperCase().split(" ");
  return firstName && lastName ? `${firstName[0]}${lastName[0]}` : firstName[0];
};
function getFieldError(name, errors) {
  const nameWithoutRightBracket = (0, import_ramda.replace)(/]/g, "", name);
  const leftBracketAndDot = /[.[\]]/g;
  const fieldErrorPath = (0, import_ramda.split)(leftBracketAndDot, nameWithoutRightBracket);
  const fieldError = (0, import_ramda.path)(fieldErrorPath, errors);
  return fieldError;
}
var __defProp$2m = Object.defineProperty;
var __getOwnPropSymbols$2m = Object.getOwnPropertySymbols;
var __hasOwnProp$2m = Object.prototype.hasOwnProperty;
var __propIsEnum$2m = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2m = (obj, key2, value) => key2 in obj ? __defProp$2m(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2m = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2m.call(b2, prop2))
      __defNormalProp$2m(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2m)
    for (var prop2 of __getOwnPropSymbols$2m(b2)) {
      if (__propIsEnum$2m.call(b2, prop2))
        __defNormalProp$2m(a2, prop2, b2[prop2]);
    }
  return a2;
};
var passPropsToChild = (child, styles2) => (0, import_react291.isValidElement)(child) ? (0, import_react291.cloneElement)(child, __spreadValues$2m({}, styles2)) : child;
var __defProp$2l = Object.defineProperty;
var __getOwnPropSymbols$2l = Object.getOwnPropertySymbols;
var __hasOwnProp$2l = Object.prototype.hasOwnProperty;
var __propIsEnum$2l = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2l = (obj, key2, value) => key2 in obj ? __defProp$2l(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2l = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2l.call(b2, prop2))
      __defNormalProp$2l(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2l)
    for (var prop2 of __getOwnPropSymbols$2l(b2)) {
      if (__propIsEnum$2l.call(b2, prop2))
        __defNormalProp$2l(a2, prop2, b2[prop2]);
    }
  return a2;
};
var getChildrenWithProps = (children, styles2, predicate = import_ramda.T) => {
  const childrenAsArr = import_react291.Children.toArray(children);
  const childrenWithoutFocus = childrenAsArr.map((child, i2) => predicate(child, i2) ? passPropsToChild(child, __spreadValues$2l({}, styles2)) : child);
  return childrenWithoutFocus;
};
var addAlpha = (color5, alpha3 = 1) => {
  const colorInHex = useToken("colors", color5);
  const limitAlpha = Math.min(Math.max(alpha3, 0), 1);
  const opacity = Math.round(limitAlpha * 255);
  return `${colorInHex}${opacity.toString(16).toUpperCase()}`;
};
var createDebounceFunctionInstance = (delay2) => {
  let timeout;
  return (fn2) => (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      fn2(...args);
    }, delay2);
  };
};
var CustomTheme = (0, import_react291.createContext)("webappTheme");
var useCurrentTheme = () => {
  const theme3 = (0, import_react291.useContext)(CustomTheme);
  return theme3;
};
var clamp7 = (minValue, maxValue, value) => Math.min(Math.max(value, minValue), maxValue);
var useResizeWidth = ({
  stationaryEdge = "left",
  minWidthPx = 0,
  maxWidthPx = Number.MAX_SAFE_INTEGER,
  defaultWidthPx
}) => {
  const [adjustableWidth, setAdjustableWidth] = (0, import_react291.useState)(defaultWidthPx);
  const resizeProps = {
    onMouseDown: (e) => {
      e.preventDefault();
      const startX = e.clientX;
      const onMouseMove = (event) => {
        const newWidth = stationaryEdge === "left" ? adjustableWidth + (event.clientX - startX) : adjustableWidth - (event.clientX - startX);
        setAdjustableWidth(clamp7(minWidthPx, maxWidthPx, newWidth));
      };
      const onMouseUp = () => {
        document.removeEventListener("mousemove", onMouseMove);
        document.removeEventListener("mouseup", onMouseUp);
      };
      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
    }
  };
  return {
    adjustableWidth,
    setAdjustableWidth,
    resizeProps
  };
};
var __defProp$2k = Object.defineProperty;
var __defProps$w = Object.defineProperties;
var __getOwnPropDescs$w = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2k = Object.getOwnPropertySymbols;
var __hasOwnProp$2k = Object.prototype.hasOwnProperty;
var __propIsEnum$2k = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2k = (obj, key2, value) => key2 in obj ? __defProp$2k(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2k = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2k.call(b2, prop2))
      __defNormalProp$2k(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2k)
    for (var prop2 of __getOwnPropSymbols$2k(b2)) {
      if (__propIsEnum$2k.call(b2, prop2))
        __defNormalProp$2k(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$w = (a2, b2) => __defProps$w(a2, __getOwnPropDescs$w(b2));
var customSelectStyles = {
  container: (provided) => __spreadProps$w(__spreadValues$2k({}, provided), {
    width: "100%",
    color: "text.default"
  }),
  option: (provided, state2) => __spreadProps$w(__spreadValues$2k({}, provided), {
    background: state2.isFocused && "background.select.option-focus",
    _active: {
      background: "background.select.option-active"
    }
  }),
  valueContainer: (provided) => __spreadProps$w(__spreadValues$2k({}, provided), {
    paddingInlineStart: "padding-inline.select.default"
  }),
  downChevron: (provided) => __spreadProps$w(__spreadValues$2k({}, provided), {
    color: "icon.select.default"
  }),
  placeholder: (provided) => __spreadProps$w(__spreadValues$2k({}, provided), {
    color: "text.select.placeholder"
  }),
  multiValue: (provided, state2) => {
    var _a9;
    const background2 = state2.data.isFixed ? "background.select.option-disabled" : (_a9 = state2.data.color) != null ? _a9 : provided.bgColor;
    return __spreadProps$w(__spreadValues$2k({}, provided), {
      bgColor: background2,
      color: getContrastColor(background2)
    });
  },
  menuList: (provided) => __spreadProps$w(__spreadValues$2k({}, provided), {
    bgColor: "background.default"
  })
};
var __defProp$2j2 = Object.defineProperty;
var __defProps$v = Object.defineProperties;
var __getOwnPropDescs$v = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2j2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2j2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2j2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2j2 = (obj, key2, value) => key2 in obj ? __defProp$2j2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2j2 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2j2.call(b2, prop2))
      __defNormalProp$2j2(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2j2)
    for (var prop2 of __getOwnPropSymbols$2j2(b2)) {
      if (__propIsEnum$2j2.call(b2, prop2))
        __defNormalProp$2j2(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$v = (a2, b2) => __defProps$v(a2, __getOwnPropDescs$v(b2));
var tagsInputStyles = (isFocused, borderColor) => __spreadProps$v(__spreadValues$2j2({}, customSelectStyles), {
  container: (provided) => __spreadProps$v(__spreadValues$2j2({}, provided), {
    w: "full",
    height: "100%",
    resize: "vertical",
    overflow: "auto",
    minHeight: "20",
    borderColor: "select.default",
    borderRadius: "select.default",
    transitionDuration: "normal",
    transitionProperty: "box-shadow",
    color: "text.default",
    boxShadow: isFocused ? `0 0 0 1px ${borderColor}` : "none"
  }),
  control: (provided) => __spreadProps$v(__spreadValues$2j2({}, provided), {
    minHeight: "20",
    height: "100%",
    alignItems: "start"
  }),
  valueContainer: (provided) => __spreadProps$v(__spreadValues$2j2({}, provided), {
    paddingInlineStart: "padding-inline.select.default",
    overflowY: "auto",
    maxH: "100%"
  })
});
var __defProp$2i = Object.defineProperty;
var __defProps$u = Object.defineProperties;
var __getOwnPropDescs$u = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2i = Object.getOwnPropertySymbols;
var __hasOwnProp$2i = Object.prototype.hasOwnProperty;
var __propIsEnum$2i = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2i = (obj, key2, value) => key2 in obj ? __defProp$2i(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2i = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2i.call(b2, prop2))
      __defNormalProp$2i(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2i)
    for (var prop2 of __getOwnPropSymbols$2i(b2)) {
      if (__propIsEnum$2i.call(b2, prop2))
        __defNormalProp$2i(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$u = (a2, b2) => __defProps$u(a2, __getOwnPropDescs$u(b2));
var __objRest$1N = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2i.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2i)
    for (var prop2 of __getOwnPropSymbols$2i(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2i.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
function TagsInput(_a9) {
  var _b5 = _a9, {
    options: options2,
    onChange: onChange2 = import_ramda.identity,
    isLoading,
    loadingList = () => null,
    "data-testid": testId,
    value = []
  } = _b5, rest = __objRest$1N(_b5, [
    "options",
    "onChange",
    "isLoading",
    "loadingList",
    "data-testid",
    "value"
  ]);
  const [borderColor] = useToken("border.select", ["focus"]);
  const [menuIsOpen, setMenuIsOpen] = (0, import_react291.useState)(false);
  const [inputValue, setInputValue] = (0, import_react291.useState)("");
  const [selectedOptions, setSelectedOptions] = (0, import_react291.useState)(value);
  const [isFocused, setIsFocused] = (0, import_react291.useState)(false);
  (0, import_react291.useEffect)(() => {
    setSelectedOptions(value);
  }, [value.length]);
  const CustomSelect = creatable_select_default;
  const handleChange = (values2, actionMeta) => {
    setSelectedOptions(values2);
    onChange2(values2, actionMeta);
  };
  const isValidNewOption2 = (input, availableOptions) => {
    const optionAlreadyExists = (0, import_ramda.any)(
      (option) => option.value === input,
      availableOptions
    );
    return !(0, import_ramda.isEmpty)(input) && !optionAlreadyExists;
  };
  const addNewOption = (newOption) => {
    onChange2(selectedOptions, { action: "select-option", option: newOption });
    setSelectedOptions((0, import_ramda.append)(newOption));
  };
  const isInputChangeValid = (newInput, event) => isValidNewOption2(newInput, selectedOptions) && newInput !== "" && newInput !== "," && newInput.endsWith(",") && event.action !== "input-blur";
  const clearInput = () => {
    setInputValue("");
  };
  const handleInputChange2 = (newInput, event) => {
    setInputValue(newInput);
    if (!isInputChangeValid(newInput, event))
      return;
    const newOption = {
      value: (0, import_ramda.init)(newInput),
      label: (0, import_ramda.init)(newInput).slice(0, -1)
    };
    addNewOption(newOption);
    clearInput();
  };
  const handleKeyDown = (event) => {
    if (!isValidNewOption2(inputValue, selectedOptions) && !(0, import_ramda.isEmpty)(inputValue) && event.key !== " ") {
      clearInput();
      event.preventDefault();
      return;
    }
    if ((event.key === "Enter" || event.key === "Tab") && !(0, import_ramda.isEmpty)(inputValue)) {
      const newOption = { value: inputValue, label: inputValue };
      addNewOption(newOption);
      clearInput();
      event.preventDefault();
    }
  };
  const handleFocus = () => {
    setIsFocused(true);
    if (options2 && options2.length > 0) {
      setMenuIsOpen(true);
    }
  };
  return import_react291.default.createElement(Box, { w: "full", "data-testid": testId }, import_react291.default.createElement(
    CustomSelect,
    __spreadValues$2i(__spreadProps$u(__spreadValues$2i({
      isMulti: true,
      menuPortalTarget: document.body,
      placeholder: "Type something and press Enter or comma...",
      options: options2,
      useBasicStyles: true,
      closeMenuOnSelect: false,
      hideSelectedOptions: false,
      isClearable: false,
      onChange: handleChange,
      onInputChange: handleInputChange2,
      onKeyDown: handleKeyDown,
      inputValue,
      selectedOptionStyle: "check",
      chakraStyles: tagsInputStyles(isFocused, borderColor),
      onFocus: handleFocus,
      isValidNewOption: isValidNewOption2,
      onBlur: () => {
        setMenuIsOpen(false);
        setIsFocused(false);
      },
      menuIsOpen,
      isLoading
    }, isLoading && { components: { MenuList: loadingList } }), {
      value: selectedOptions,
      components: {
        DropdownIndicator: () => null
      },
      formatCreateLabel: (textInputValue) => `Add tag "${textInputValue}"`
    }), rest)
  ));
}
var __defProp$2h = Object.defineProperty;
var __getOwnPropSymbols$2h = Object.getOwnPropertySymbols;
var __hasOwnProp$2h = Object.prototype.hasOwnProperty;
var __propIsEnum$2h = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2h = (obj, key2, value) => key2 in obj ? __defProp$2h(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2h = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2h.call(b2, prop2))
      __defNormalProp$2h(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2h)
    for (var prop2 of __getOwnPropSymbols$2h(b2)) {
      if (__propIsEnum$2h.call(b2, prop2))
        __defNormalProp$2h(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1M = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2h.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2h)
    for (var prop2 of __getOwnPropSymbols$2h(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2h.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var OrganizationLogo = (_a9) => {
  var _b5 = _a9, {
    name,
    image,
    variant = "square"
  } = _b5, rest = __objRest$1M(_b5, [
    "name",
    "image",
    "variant"
  ]);
  const getInitials2 = (orgName) => orgName[0].toUpperCase();
  const {
    container: container2,
    text
  } = useMultiStyleConfig("Avatar", __spreadValues$2h({ variant, image }, rest));
  return import_react291.default.createElement(
    chakra.div,
    __spreadValues$2h({
      __css: container2,
      "data-testid": "organization-logo-test-id"
    }, rest),
    image ? import_react291.default.createElement(
      chakra.img,
      {
        alt: name,
        src: image
      }
    ) : import_react291.default.createElement(chakra.span, { __css: text }, getInitials2(name))
  );
};
var __defProp$2g = Object.defineProperty;
var __getOwnPropSymbols$2g = Object.getOwnPropertySymbols;
var __hasOwnProp$2g = Object.prototype.hasOwnProperty;
var __propIsEnum$2g = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2g = (obj, key2, value) => key2 in obj ? __defProp$2g(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2g = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2g.call(b2, prop2))
      __defNormalProp$2g(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2g)
    for (var prop2 of __getOwnPropSymbols$2g(b2)) {
      if (__propIsEnum$2g.call(b2, prop2))
        __defNormalProp$2g(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1L = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2g.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2g)
    for (var prop2 of __getOwnPropSymbols$2g(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2g.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Alert$1 = (_a9) => {
  var _b5 = _a9, {
    variant = "success",
    children
  } = _b5, rest = __objRest$1L(_b5, [
    "variant",
    "children"
  ]);
  return import_react291.default.createElement(Alert, __spreadValues$2g({ variant }, rest), children);
};
var __defProp$2f = Object.defineProperty;
var __getOwnPropSymbols$2f = Object.getOwnPropertySymbols;
var __hasOwnProp$2f = Object.prototype.hasOwnProperty;
var __propIsEnum$2f = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2f = (obj, key2, value) => key2 in obj ? __defProp$2f(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2f = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2f.call(b2, prop2))
      __defNormalProp$2f(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2f)
    for (var prop2 of __getOwnPropSymbols$2f(b2)) {
      if (__propIsEnum$2f.call(b2, prop2))
        __defNormalProp$2f(a2, prop2, b2[prop2]);
    }
  return a2;
};
var AspectRatio2 = (props) => import_react291.default.createElement(AspectRatio, __spreadValues$2f({}, props));
var __defProp$2e = Object.defineProperty;
var __getOwnPropSymbols$2e = Object.getOwnPropertySymbols;
var __hasOwnProp$2e = Object.prototype.hasOwnProperty;
var __propIsEnum$2e = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2e = (obj, key2, value) => key2 in obj ? __defProp$2e(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2e = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2e.call(b2, prop2))
      __defNormalProp$2e(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2e)
    for (var prop2 of __getOwnPropSymbols$2e(b2)) {
      if (__propIsEnum$2e.call(b2, prop2))
        __defNormalProp$2e(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1K = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2e.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2e)
    for (var prop2 of __getOwnPropSymbols$2e(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2e.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Icon$1 = forwardRef3((_a9, ref) => {
  var _b5 = _a9, {
    as: As,
    size: size4,
    color: color5,
    boxSize
  } = _b5, rest = __objRest$1K(_b5, [
    "as",
    "size",
    "color",
    "boxSize"
  ]);
  const CustomIcon = As != null ? As : () => import_react291.default.createElement(Icon, null);
  const styles2 = useStyleConfig("Icon", { size: size4, color: color5, boxSize });
  return import_react291.default.createElement(
    Icon,
    __spreadValues$2e({
      ref,
      sx: styles2
    }, rest),
    import_react291.default.createElement(CustomIcon, null)
  );
});
var AvatarBadge3 = ({
  notificationCount = 0
}) => {
  const { badge } = useMultiStyleConfig("Avatar");
  return import_react291.default.createElement(chakra.span, { sx: badge }, notificationCount > 999 ? "999+" : notificationCount);
};
var __defProp$2d = Object.defineProperty;
var __getOwnPropSymbols$2d = Object.getOwnPropertySymbols;
var __hasOwnProp$2d = Object.prototype.hasOwnProperty;
var __propIsEnum$2d = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2d = (obj, key2, value) => key2 in obj ? __defProp$2d(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2d = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2d.call(b2, prop2))
      __defNormalProp$2d(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2d)
    for (var prop2 of __getOwnPropSymbols$2d(b2)) {
      if (__propIsEnum$2d.call(b2, prop2))
        __defNormalProp$2d(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1J = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2d.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2d)
    for (var prop2 of __getOwnPropSymbols$2d(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2d.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Avatar$1 = (_a9) => {
  var _b5 = _a9, {
    variant = "square",
    notificationCount = 0,
    name,
    image,
    size: size4
  } = _b5, rest = __objRest$1J(_b5, [
    "variant",
    "notificationCount",
    "name",
    "image",
    "size"
  ]);
  const { container: container2, text, userImage, icon } = useMultiStyleConfig("Avatar", {
    variant,
    image,
    size: size4,
    name
  });
  return import_react291.default.createElement(Box, __spreadValues$2d({ __css: container2, "data-testid": "avatar-test-id" }, rest), image ? import_react291.default.createElement(
    chakra.img,
    {
      alt: name,
      src: image,
      sx: userImage
    }
  ) : name ? import_react291.default.createElement(chakra.span, { sx: text }, getInitials(name)) : import_react291.default.createElement(
    Icon$1,
    {
      as: variant === "square" ? SvgUserSquareDuo : SvgBusinessContactDuo,
      sx: icon,
      "aria-label": "user-avatar"
    }
  ), notificationCount > 0 && import_react291.default.createElement(AvatarBadge3, { notificationCount }));
};
var __defProp$2c = Object.defineProperty;
var __getOwnPropSymbols$2c = Object.getOwnPropertySymbols;
var __hasOwnProp$2c = Object.prototype.hasOwnProperty;
var __propIsEnum$2c = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2c = (obj, key2, value) => key2 in obj ? __defProp$2c(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2c = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2c.call(b2, prop2))
      __defNormalProp$2c(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2c)
    for (var prop2 of __getOwnPropSymbols$2c(b2)) {
      if (__propIsEnum$2c.call(b2, prop2))
        __defNormalProp$2c(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1I = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2c.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2c)
    for (var prop2 of __getOwnPropSymbols$2c(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2c.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var H1$1 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1I(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("H1", { sx });
  return import_react291.default.createElement(
    Heading,
    __spreadValues$2c({
      as: "h1",
      sx: styles2,
      ref
    }, rest),
    children
  );
});
var __defProp$2b = Object.defineProperty;
var __getOwnPropSymbols$2b = Object.getOwnPropertySymbols;
var __hasOwnProp$2b = Object.prototype.hasOwnProperty;
var __propIsEnum$2b = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2b = (obj, key2, value) => key2 in obj ? __defProp$2b(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2b = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2b.call(b2, prop2))
      __defNormalProp$2b(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2b)
    for (var prop2 of __getOwnPropSymbols$2b(b2)) {
      if (__propIsEnum$2b.call(b2, prop2))
        __defNormalProp$2b(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1H2 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2b.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2b)
    for (var prop2 of __getOwnPropSymbols$2b(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2b.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var H2$1 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1H2(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("H2", { sx });
  return import_react291.default.createElement(
    Heading,
    __spreadValues$2b({
      as: "h2",
      sx: styles2,
      ref
    }, rest),
    children
  );
});
var __defProp$2a = Object.defineProperty;
var __getOwnPropSymbols$2a = Object.getOwnPropertySymbols;
var __hasOwnProp$2a = Object.prototype.hasOwnProperty;
var __propIsEnum$2a = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2a = (obj, key2, value) => key2 in obj ? __defProp$2a(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2a = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2a.call(b2, prop2))
      __defNormalProp$2a(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2a)
    for (var prop2 of __getOwnPropSymbols$2a(b2)) {
      if (__propIsEnum$2a.call(b2, prop2))
        __defNormalProp$2a(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1G = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2a.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2a)
    for (var prop2 of __getOwnPropSymbols$2a(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2a.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var H3$1 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1G(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("H3", { sx });
  return import_react291.default.createElement(
    Heading,
    __spreadValues$2a({
      as: "h3",
      sx: styles2,
      ref
    }, rest),
    children
  );
});
var __defProp$29 = Object.defineProperty;
var __getOwnPropSymbols$29 = Object.getOwnPropertySymbols;
var __hasOwnProp$29 = Object.prototype.hasOwnProperty;
var __propIsEnum$29 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$29 = (obj, key2, value) => key2 in obj ? __defProp$29(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$29 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$29.call(b2, prop2))
      __defNormalProp$29(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$29)
    for (var prop2 of __getOwnPropSymbols$29(b2)) {
      if (__propIsEnum$29.call(b2, prop2))
        __defNormalProp$29(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1F = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$29.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$29)
    for (var prop2 of __getOwnPropSymbols$29(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$29.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var H4$1 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1F(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("H4", { sx });
  return import_react291.default.createElement(
    Heading,
    __spreadValues$29({
      as: "h4",
      sx: styles2,
      ref
    }, rest),
    children
  );
});
var __defProp$28 = Object.defineProperty;
var __getOwnPropSymbols$28 = Object.getOwnPropertySymbols;
var __hasOwnProp$28 = Object.prototype.hasOwnProperty;
var __propIsEnum$28 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$28 = (obj, key2, value) => key2 in obj ? __defProp$28(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$28 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$28.call(b2, prop2))
      __defNormalProp$28(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$28)
    for (var prop2 of __getOwnPropSymbols$28(b2)) {
      if (__propIsEnum$28.call(b2, prop2))
        __defNormalProp$28(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1E = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$28.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$28)
    for (var prop2 of __getOwnPropSymbols$28(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$28.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var H5$1 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1E(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("H5", { sx });
  return import_react291.default.createElement(
    Heading,
    __spreadValues$28({
      as: "h5",
      sx: styles2,
      ref
    }, rest),
    children
  );
});
var __defProp$27 = Object.defineProperty;
var __getOwnPropSymbols$27 = Object.getOwnPropertySymbols;
var __hasOwnProp$27 = Object.prototype.hasOwnProperty;
var __propIsEnum$27 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$27 = (obj, key2, value) => key2 in obj ? __defProp$27(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$27 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$27.call(b2, prop2))
      __defNormalProp$27(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$27)
    for (var prop2 of __getOwnPropSymbols$27(b2)) {
      if (__propIsEnum$27.call(b2, prop2))
        __defNormalProp$27(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1D = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$27.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$27)
    for (var prop2 of __getOwnPropSymbols$27(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$27.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var H6$1 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1D(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("H6", { sx });
  return import_react291.default.createElement(
    Heading,
    __spreadValues$27({
      as: "h6",
      sx: styles2,
      ref
    }, rest),
    children
  );
});
var __defProp$26 = Object.defineProperty;
var __getOwnPropSymbols$26 = Object.getOwnPropertySymbols;
var __hasOwnProp$26 = Object.prototype.hasOwnProperty;
var __propIsEnum$26 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$26 = (obj, key2, value) => key2 in obj ? __defProp$26(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$26 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$26.call(b2, prop2))
      __defNormalProp$26(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$26)
    for (var prop2 of __getOwnPropSymbols$26(b2)) {
      if (__propIsEnum$26.call(b2, prop2))
        __defNormalProp$26(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1C = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$26.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$26)
    for (var prop2 of __getOwnPropSymbols$26(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$26.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var P$1 = (_a9) => {
  var _b5 = _a9, {
    children,
    variant = "16",
    sx = {}
  } = _b5, rest = __objRest$1C(_b5, [
    "children",
    "variant",
    "sx"
  ]);
  const styles2 = useStyleConfig("P", { variant, sx });
  return import_react291.default.createElement(
    Text,
    __spreadValues$26({
      variant,
      sx: styles2
    }, rest),
    children
  );
};
var __defProp$25 = Object.defineProperty;
var __getOwnPropSymbols$25 = Object.getOwnPropertySymbols;
var __hasOwnProp$25 = Object.prototype.hasOwnProperty;
var __propIsEnum$25 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$25 = (obj, key2, value) => key2 in obj ? __defProp$25(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$25 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$25.call(b2, prop2))
      __defNormalProp$25(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$25)
    for (var prop2 of __getOwnPropSymbols$25(b2)) {
      if (__propIsEnum$25.call(b2, prop2))
        __defNormalProp$25(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1B = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$25.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$25)
    for (var prop2 of __getOwnPropSymbols$25(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$25.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Blockquote$1 = (_a9) => {
  var _b5 = _a9, { children, sx = {} } = _b5, rest = __objRest$1B(_b5, ["children", "sx"]);
  const styles2 = useStyleConfig("Blockquote", { sx });
  return import_react291.default.createElement(Text, __spreadValues$25({ as: "span", sx: styles2 }, rest), children);
};
var __defProp$24 = Object.defineProperty;
var __getOwnPropSymbols$24 = Object.getOwnPropertySymbols;
var __hasOwnProp$24 = Object.prototype.hasOwnProperty;
var __propIsEnum$24 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$24 = (obj, key2, value) => key2 in obj ? __defProp$24(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$24 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$24.call(b2, prop2))
      __defNormalProp$24(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$24)
    for (var prop2 of __getOwnPropSymbols$24(b2)) {
      if (__propIsEnum$24.call(b2, prop2))
        __defNormalProp$24(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1A = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$24.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$24)
    for (var prop2 of __getOwnPropSymbols$24(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$24.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Capitalized$1 = (_a9) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1A(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("Capitalized", { sx });
  return import_react291.default.createElement(
    Text,
    __spreadValues$24({
      as: "span",
      sx: styles2
    }, rest),
    children
  );
};
var __defProp$23 = Object.defineProperty;
var __getOwnPropSymbols$23 = Object.getOwnPropertySymbols;
var __hasOwnProp$23 = Object.prototype.hasOwnProperty;
var __propIsEnum$23 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$23 = (obj, key2, value) => key2 in obj ? __defProp$23(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$23 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$23.call(b2, prop2))
      __defNormalProp$23(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$23)
    for (var prop2 of __getOwnPropSymbols$23(b2)) {
      if (__propIsEnum$23.call(b2, prop2))
        __defNormalProp$23(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1z = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$23.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$23)
    for (var prop2 of __getOwnPropSymbols$23(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$23.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Lead$1 = (_a9) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1z(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("Lead", { sx });
  return import_react291.default.createElement(
    Text,
    __spreadValues$23({
      as: "span",
      sx: styles2
    }, rest),
    children
  );
};
var __defProp$22 = Object.defineProperty;
var __getOwnPropSymbols$22 = Object.getOwnPropertySymbols;
var __hasOwnProp$22 = Object.prototype.hasOwnProperty;
var __propIsEnum$22 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$22 = (obj, key2, value) => key2 in obj ? __defProp$22(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$22 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$22.call(b2, prop2))
      __defNormalProp$22(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$22)
    for (var prop2 of __getOwnPropSymbols$22(b2)) {
      if (__propIsEnum$22.call(b2, prop2))
        __defNormalProp$22(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1y = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$22.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$22)
    for (var prop2 of __getOwnPropSymbols$22(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$22.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Small$1 = (_a9) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1y(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("Small", { sx });
  return import_react291.default.createElement(
    Text,
    __spreadValues$22({
      as: "small",
      sx: styles2
    }, rest),
    children
  );
};
var __defProp$21 = Object.defineProperty;
var __getOwnPropSymbols$21 = Object.getOwnPropertySymbols;
var __hasOwnProp$21 = Object.prototype.hasOwnProperty;
var __propIsEnum$21 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$21 = (obj, key2, value) => key2 in obj ? __defProp$21(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$21 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$21.call(b2, prop2))
      __defNormalProp$21(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$21)
    for (var prop2 of __getOwnPropSymbols$21(b2)) {
      if (__propIsEnum$21.call(b2, prop2))
        __defNormalProp$21(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1x = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$21.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$21)
    for (var prop2 of __getOwnPropSymbols$21(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$21.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Tiny$1 = (_a9) => {
  var _b5 = _a9, {
    children,
    sx = {}
  } = _b5, rest = __objRest$1x(_b5, [
    "children",
    "sx"
  ]);
  const styles2 = useStyleConfig("Tiny", { sx });
  return import_react291.default.createElement(
    Text,
    __spreadValues$21({
      as: "span",
      sx: styles2
    }, rest),
    children
  );
};
var __defProp$20 = Object.defineProperty;
var __getOwnPropSymbols$20 = Object.getOwnPropertySymbols;
var __hasOwnProp$20 = Object.prototype.hasOwnProperty;
var __propIsEnum$20 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$20 = (obj, key2, value) => key2 in obj ? __defProp$20(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$20 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$20.call(b2, prop2))
      __defNormalProp$20(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$20)
    for (var prop2 of __getOwnPropSymbols$20(b2)) {
      if (__propIsEnum$20.call(b2, prop2))
        __defNormalProp$20(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1w = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$20.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$20)
    for (var prop2 of __getOwnPropSymbols$20(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$20.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Label$1 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children,
    size: size4 = "sm",
    sx = {}
  } = _b5, rest = __objRest$1w(_b5, [
    "children",
    "size",
    "sx"
  ]);
  const styles2 = useStyleConfig("Label", { sx, size: size4 });
  return import_react291.default.createElement(
    FormLabel,
    __spreadValues$20({
      sx: styles2,
      requiredIndicator: import_react291.default.createElement(VisuallyHidden, null),
      ref
    }, rest),
    children
  );
});
var __defProp$1$ = Object.defineProperty;
var __getOwnPropSymbols$1$ = Object.getOwnPropertySymbols;
var __hasOwnProp$1$ = Object.prototype.hasOwnProperty;
var __propIsEnum$1$ = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1$ = (obj, key2, value) => key2 in obj ? __defProp$1$(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1$ = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1$.call(b2, prop2))
      __defNormalProp$1$(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1$)
    for (var prop2 of __getOwnPropSymbols$1$(b2)) {
      if (__propIsEnum$1$.call(b2, prop2))
        __defNormalProp$1$(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1v = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1$.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1$)
    for (var prop2 of __getOwnPropSymbols$1$(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1$.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var NumVal$1 = (0, import_react291.forwardRef)(
  (_a9, ref) => {
    var _b5 = _a9, { children, size: size4 = "sm", sx = {} } = _b5, rest = __objRest$1v(_b5, ["children", "size", "sx"]);
    const styles2 = useStyleConfig("NumVal", { sx, size: size4 });
    return import_react291.default.createElement(
      Text,
      __spreadValues$1$({
        as: "span",
        sx: styles2,
        ref
      }, rest),
      children
    );
  }
);
var positiveOrZero = (0, import_ramda.ifElse)((0, import_ramda.gt)(0), (0, import_ramda.always)(0), import_ramda.identity);
var EMPTY_RECT = {
  clientWidht: 0,
  clientHeight: 0
};
var EMPTY_WINDOW = {
  innerWidth: 0,
  innerHeight: 0
};
var OverflowGroup = ({
  children,
  max: initMax = 0,
  childrenProps,
  onChange: onChange2 = import_ramda.identity,
  rect
}) => {
  const [max3, setMax] = (0, import_react291.useState)(typeof rect === "undefined" ? initMax : 0);
  const [windowState, setWindowState] = (0, import_react291.useState)(EMPTY_WINDOW);
  const isLocked = (0, import_react291.useRef)(false);
  const nbrChildren = import_react291.Children.count(children);
  const updateMax = () => {
    if (!rect)
      return;
    if (rect.scrollHeight <= rect.clientHeight && rect.scrollWidth <= rect.clientWidth && max3 < nbrChildren && !isLocked.current && max3 < initMax) {
      setMax(import_ramda.inc);
    }
    if (rect.scrollHeight > rect.clientHeight || rect.scrollWidth > rect.clientWidth) {
      setMax(import_ramda.dec);
      isLocked.current = true;
    }
  };
  const rectDependency = (0, import_ramda.defaultTo)(EMPTY_RECT, rect);
  (0, import_react291.useEffect)(updateMax, [
    rectDependency.clientWidth,
    rectDependency.clientHeight,
    nbrChildren,
    max3,
    windowState.innerHeight,
    windowState.innerHeight,
    initMax
  ]);
  (0, import_react291.useEffect)(() => {
    isLocked.current = false;
  }, [rectDependency.clientHeight, rectDependency.clientWidth]);
  const handleResize = () => {
    setTimeout(() => {
      isLocked.current = false;
      setWindowState({
        innerWidth: window.innerWidth,
        innerHeight: window.innerHeight
      });
    }, 200);
  };
  (0, import_react291.useEffect)(() => {
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);
  (0, import_react291.useEffect)(() => {
    const nbrRemainingChildren = positiveOrZero(nbrChildren - max3);
    onChange2(nbrRemainingChildren);
  }, [max3, nbrChildren]);
  const shownChildren = (0, import_ramda.take)(
    max3,
    getChildrenWithProps(children, (0, import_ramda.defaultTo)({}, childrenProps))
  );
  return import_react291.default.createElement(import_react291.default.Fragment, null, shownChildren);
};
var useOverflowGroup = () => {
  const [rect, setRect] = (0, import_react291.useState)(null);
  const containerRef = (node3) => {
    if (node3) {
      setRect(node3);
    }
  };
  return { rect, containerRef };
};
var __defProp$1_ = Object.defineProperty;
var __getOwnPropSymbols$1_ = Object.getOwnPropertySymbols;
var __hasOwnProp$1_ = Object.prototype.hasOwnProperty;
var __propIsEnum$1_ = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1_ = (obj, key2, value) => key2 in obj ? __defProp$1_(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1_ = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1_.call(b2, prop2))
      __defNormalProp$1_(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1_)
    for (var prop2 of __getOwnPropSymbols$1_(b2)) {
      if (__propIsEnum$1_.call(b2, prop2))
        __defNormalProp$1_(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1u = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1_.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1_)
    for (var prop2 of __getOwnPropSymbols$1_(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1_.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var AvatarGroup3 = (_a9) => {
  var _b5 = _a9, {
    children,
    max: max3 = Infinity,
    spacing: spacing4 = "-4"
  } = _b5, rest = __objRest$1u(_b5, [
    "children",
    "max",
    "spacing"
  ]);
  const [nbrRemainingAvatars, setNbrRemainingAvatars] = (0, import_react291.useState)(0);
  return import_react291.default.createElement(HStack, __spreadValues$1_({ bgColor: "background.default" }, rest), import_react291.default.createElement(HStack, { spacing: spacing4 }, import_react291.default.createElement(OverflowGroup, { max: max3, onChange: setNbrRemainingAvatars }, children)), nbrRemainingAvatars > 0 && import_react291.default.createElement(Small$1, { sx: { color: "blue.500" } }, "+", nbrRemainingAvatars));
};
var __defProp$1Z = Object.defineProperty;
var __getOwnPropSymbols$1Z = Object.getOwnPropertySymbols;
var __hasOwnProp$1Z = Object.prototype.hasOwnProperty;
var __propIsEnum$1Z = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1Z = (obj, key2, value) => key2 in obj ? __defProp$1Z(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1Z = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1Z.call(b2, prop2))
      __defNormalProp$1Z(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1Z)
    for (var prop2 of __getOwnPropSymbols$1Z(b2)) {
      if (__propIsEnum$1Z.call(b2, prop2))
        __defNormalProp$1Z(a2, prop2, b2[prop2]);
    }
  return a2;
};
var Badge$1 = (0, import_react291.forwardRef)((props, ref) => import_react291.default.createElement(Badge, __spreadValues$1Z({ ref }, props)));
var __defProp$1Y = Object.defineProperty;
var __getOwnPropSymbols$1Y = Object.getOwnPropertySymbols;
var __hasOwnProp$1Y = Object.prototype.hasOwnProperty;
var __propIsEnum$1Y = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1Y = (obj, key2, value) => key2 in obj ? __defProp$1Y(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1Y = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1Y.call(b2, prop2))
      __defNormalProp$1Y(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1Y)
    for (var prop2 of __getOwnPropSymbols$1Y(b2)) {
      if (__propIsEnum$1Y.call(b2, prop2))
        __defNormalProp$1Y(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1t = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1Y.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1Y)
    for (var prop2 of __getOwnPropSymbols$1Y(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1Y.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Blinker$1 = (_a9) => {
  var _b5 = _a9, {
    color: color5 = "",
    size: size4,
    isBlinking = true
  } = _b5, rest = __objRest$1t(_b5, [
    "color",
    "size",
    "isBlinking"
  ]);
  const styles2 = useStyleConfig("Blinker", { color: color5, size: size4, isBlinking });
  return import_react291.default.createElement(Box, __spreadValues$1Y({ sx: styles2, "data-testid": "blinker-test-id" }, rest));
};
var __defProp$1X = Object.defineProperty;
var __getOwnPropSymbols$1X = Object.getOwnPropertySymbols;
var __hasOwnProp$1X = Object.prototype.hasOwnProperty;
var __propIsEnum$1X = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1X = (obj, key2, value) => key2 in obj ? __defProp$1X(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1X = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1X.call(b2, prop2))
      __defNormalProp$1X(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1X)
    for (var prop2 of __getOwnPropSymbols$1X(b2)) {
      if (__propIsEnum$1X.call(b2, prop2))
        __defNormalProp$1X(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1s = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1X.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1X)
    for (var prop2 of __getOwnPropSymbols$1X(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1X.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Spinner$1 = (_a9) => {
  var rest = __objRest$1s(_a9, []);
  return import_react291.default.createElement(Spinner, __spreadValues$1X({}, rest));
};
var __defProp$1W = Object.defineProperty;
var __getOwnPropSymbols$1W = Object.getOwnPropertySymbols;
var __hasOwnProp$1W = Object.prototype.hasOwnProperty;
var __propIsEnum$1W = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1W = (obj, key2, value) => key2 in obj ? __defProp$1W(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1W = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1W.call(b2, prop2))
      __defNormalProp$1W(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1W)
    for (var prop2 of __getOwnPropSymbols$1W(b2)) {
      if (__propIsEnum$1W.call(b2, prop2))
        __defNormalProp$1W(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1r = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1W.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1W)
    for (var prop2 of __getOwnPropSymbols$1W(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1W.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SpinnerSizeMap = {
  xs: "xs",
  sm: "sm",
  md: "sm",
  lg: "md"
};
var Button$1 = (0, import_react291.forwardRef)(
  (_a9, ref) => {
    var _b5 = _a9, { variant = "default", children, size: size4 = "md" } = _b5, rest = __objRest$1r(_b5, ["variant", "children", "size"]);
    return import_react291.default.createElement(
      Button,
      __spreadValues$1W({
        variant,
        ref,
        size: size4,
        spinner: import_react291.default.createElement(
          Spinner$1,
          {
            size: SpinnerSizeMap[size4]
          }
        )
      }, rest),
      children
    );
  }
);
var __defProp$1V = Object.defineProperty;
var __getOwnPropSymbols$1V = Object.getOwnPropertySymbols;
var __hasOwnProp$1V = Object.prototype.hasOwnProperty;
var __propIsEnum$1V = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1V = (obj, key2, value) => key2 in obj ? __defProp$1V(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1V = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1V.call(b2, prop2))
      __defNormalProp$1V(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1V)
    for (var prop2 of __getOwnPropSymbols$1V(b2)) {
      if (__propIsEnum$1V.call(b2, prop2))
        __defNormalProp$1V(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1q = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1V.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1V)
    for (var prop2 of __getOwnPropSymbols$1V(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1V.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Checkbox$1 = (_a9) => {
  var _b5 = _a9, {
    value,
    onChange: onChange2,
    name,
    size: size4 = "md",
    variant = "default"
  } = _b5, rest = __objRest$1q(_b5, [
    "value",
    "onChange",
    "name",
    "size",
    "variant"
  ]);
  return import_react291.default.createElement(
    Checkbox,
    __spreadValues$1V({
      size: size4,
      id: name,
      onChange: onChange2,
      isChecked: value,
      variant
    }, rest)
  );
};
var shouldTrim = (value) => (0, import_ramda.is)(Array, value) ? import_ramda.values : import_ramda.identity;
var trimFormValues = (obj) => {
  const newObj = obj;
  (0, import_ramda.forEach)((property) => {
    const value = obj[property];
    if ((0, import_ramda.is)(Object, value)) {
      const format2 = shouldTrim(value);
      newObj[property] = format2(trimFormValues(value));
    }
    if ((0, import_ramda.is)(String, value)) {
      newObj[property] = (0, import_ramda.trim)(value);
    }
  }, (0, import_ramda.keys)(obj));
  return newObj;
};
var __defProp$1U = Object.defineProperty;
var __getOwnPropSymbols$1U = Object.getOwnPropertySymbols;
var __hasOwnProp$1U = Object.prototype.hasOwnProperty;
var __propIsEnum$1U = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1U = (obj, key2, value) => key2 in obj ? __defProp$1U(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1U = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1U.call(b2, prop2))
      __defNormalProp$1U(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1U)
    for (var prop2 of __getOwnPropSymbols$1U(b2)) {
      if (__propIsEnum$1U.call(b2, prop2))
        __defNormalProp$1U(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1p = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1U.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1U)
    for (var prop2 of __getOwnPropSymbols$1U(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1U.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Form = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    initialValues,
    onSubmit,
    children,
    validate: validate2,
    formSettings = { mode: "onChange" },
    methods = void 0,
    enableReinitialize = false,
    shouldTrim: shouldTrim2 = true,
    innerFormStyle = {},
    joiSchema
  } = _b5, rest = __objRest$1p(_b5, [
    "initialValues",
    "onSubmit",
    "children",
    "validate",
    "formSettings",
    "methods",
    "enableReinitialize",
    "shouldTrim",
    "innerFormStyle",
    "joiSchema"
  ]);
  const customResolver = (values2, _context, _options) => ({
    values: values2,
    errors: validate2(values2)
  });
  const getResolver = () => {
    if (validate2)
      return customResolver;
    if (joiSchema)
      return n2(joiSchema);
    return void 0;
  };
  const newMethods = methods || useForm(__spreadValues$1U({
    defaultValues: initialValues,
    resolver: getResolver()
  }, formSettings));
  (0, import_react291.useImperativeHandle)(ref, (0, import_ramda.always)(newMethods), []);
  if (enableReinitialize) {
    const initalValuesImage = (0, import_react291.useRef)({});
    (0, import_react291.useEffect)(() => {
      if (!(0, import_ramda.equals)(initalValuesImage.current, initialValues)) {
        newMethods == null ? void 0 : newMethods.reset(initialValues);
        initalValuesImage.current = initialValues;
      }
    }, [initialValues]);
  }
  const formatValues = (values2) => {
    if (!shouldTrim2) {
      return values2;
    }
    return trimFormValues(values2);
  };
  const handleSubmit = newMethods.formState.isValid ? newMethods.handleSubmit(
    (values2) => onSubmit(formatValues(values2), newMethods)
  ) : (e) => {
    newMethods.trigger();
    e.preventDefault();
  };
  return import_react291.default.createElement(FormProvider, __spreadValues$1U(__spreadValues$1U({}, newMethods), rest), import_react291.default.createElement("form", { style: __spreadValues$1U({ width: "100%" }, innerFormStyle), onSubmit: handleSubmit }, typeof children === "function" ? children(newMethods) : children));
});
var __defProp$1T = Object.defineProperty;
var __defProps$t = Object.defineProperties;
var __getOwnPropDescs$t = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1T = Object.getOwnPropertySymbols;
var __hasOwnProp$1T = Object.prototype.hasOwnProperty;
var __propIsEnum$1T = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1T = (obj, key2, value) => key2 in obj ? __defProp$1T(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1T = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1T.call(b2, prop2))
      __defNormalProp$1T(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1T)
    for (var prop2 of __getOwnPropSymbols$1T(b2)) {
      if (__propIsEnum$1T.call(b2, prop2))
        __defNormalProp$1T(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$t = (a2, b2) => __defProps$t(a2, __getOwnPropDescs$t(b2));
var __objRest$1o = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1T.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1T)
    for (var prop2 of __getOwnPropSymbols$1T(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1T.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FormLabel3 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children: label
  } = _b5, rest = __objRest$1o(_b5, [
    "children"
  ]);
  return import_react291.default.createElement(
    Label$1,
    __spreadProps$t(__spreadValues$1T({
      size: "sm",
      sx: {
        width: "80%",
        maxWidth: "45ch",
        marginBottom: 1,
        marginInlineEnd: 3
      },
      requiredIndicator: void 0
    }, rest), {
      ref
    }),
    label
  );
});
var __defProp$1S = Object.defineProperty;
var __getOwnPropSymbols$1S = Object.getOwnPropertySymbols;
var __hasOwnProp$1S = Object.prototype.hasOwnProperty;
var __propIsEnum$1S = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1S = (obj, key2, value) => key2 in obj ? __defProp$1S(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1S = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1S.call(b2, prop2))
      __defNormalProp$1S(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1S)
    for (var prop2 of __getOwnPropSymbols$1S(b2)) {
      if (__propIsEnum$1S.call(b2, prop2))
        __defNormalProp$1S(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1n = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1S.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1S)
    for (var prop2 of __getOwnPropSymbols$1S(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1S.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var BaseField = (_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    children,
    direction: direction2 = "column",
    isRequired = false,
    noLabelConnection = false,
    validate: validate2,
    control: passedControl
  } = _b5, rest = __objRest$1n(_b5, [
    "name",
    "label",
    "children",
    "direction",
    "isRequired",
    "noLabelConnection",
    "validate",
    "control"
  ]);
  const methods = useFormContext();
  const { formState: { errors } } = methods;
  const control = passedControl != null ? passedControl : methods.control;
  const fieldError = getFieldError(name, errors);
  return import_react291.default.createElement(FormControl, { isInvalid: !!fieldError, isRequired, ref }, import_react291.default.createElement(
    Stack,
    __spreadValues$1S({
      spacing: "auto",
      direction: direction2,
      alignItems: direction2 === "column" ? "stretch" : "center"
    }, rest),
    label && import_react291.default.createElement(FormLabel3, { htmlFor: noLabelConnection ? void 0 : name, mb: 1 }, label),
    import_react291.default.createElement(
      Controller,
      {
        name,
        control,
        rules: validate2,
        render: ({ field }) => children(field, methods)
      }
    )
  ), import_react291.default.createElement(FormErrorMessage, null, fieldError && (fieldError == null ? void 0 : fieldError.message)));
};
var Field = (0, import_react291.forwardRef)(BaseField);
var useSetValueRefreshed = () => {
  const { setValue, watch } = useFormContext();
  const setValueRefreshed = (name, value, options2) => {
    watch(name);
    setValue(name, value, options2);
  };
  return setValueRefreshed;
};
var __defProp$1R = Object.defineProperty;
var __getOwnPropSymbols$1R = Object.getOwnPropertySymbols;
var __hasOwnProp$1R = Object.prototype.hasOwnProperty;
var __propIsEnum$1R = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1R = (obj, key2, value) => key2 in obj ? __defProp$1R(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1R = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1R.call(b2, prop2))
      __defNormalProp$1R(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1R)
    for (var prop2 of __getOwnPropSymbols$1R(b2)) {
      if (__propIsEnum$1R.call(b2, prop2))
        __defNormalProp$1R(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1m = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1R.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1R)
    for (var prop2 of __getOwnPropSymbols$1R(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1R.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var CheckboxField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    variant,
    isRequired,
    validate: validate2,
    onChange: onChangeCallback = import_ramda.identity,
    direction: direction2 = "row",
    labelPlacement = "left",
    labelSize = "md"
  } = _b5, rest = __objRest$1m(_b5, [
    "name",
    "label",
    "variant",
    "isRequired",
    "validate",
    "onChange",
    "direction",
    "labelPlacement",
    "labelSize"
  ]);
  return import_react291.default.createElement(
    Box,
    {
      w: label ? "full" : "fit-content",
      display: "inline-flex"
    },
    import_react291.default.createElement(
      Field,
      {
        name,
        label: "",
        isRequired,
        direction: direction2,
        validate: validate2,
        ref
      },
      ({ onChange: onChange2, value }) => import_react291.default.createElement(
        Flex,
        {
          gap: 2,
          direction: labelPlacement === "left" ? "row-reverse" : "row"
        },
        import_react291.default.createElement(
          Checkbox$1,
          __spreadValues$1R({
            name,
            onChange: (e) => {
              onChange2(e);
              onChangeCallback(e);
            },
            value,
            variant,
            "data-testid": "checkbox-field-test-id"
          }, rest)
        ),
        import_react291.default.createElement(Label$1, { htmlFor: name, sx: { fontWeight: "normal" }, size: labelSize }, label)
      )
    )
  );
});
var __defProp$1Q = Object.defineProperty;
var __getOwnPropSymbols$1Q = Object.getOwnPropertySymbols;
var __hasOwnProp$1Q = Object.prototype.hasOwnProperty;
var __propIsEnum$1Q = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1Q = (obj, key2, value) => key2 in obj ? __defProp$1Q(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1Q = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1Q.call(b2, prop2))
      __defNormalProp$1Q(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1Q)
    for (var prop2 of __getOwnPropSymbols$1Q(b2)) {
      if (__propIsEnum$1Q.call(b2, prop2))
        __defNormalProp$1Q(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1l = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1Q.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1Q)
    for (var prop2 of __getOwnPropSymbols$1Q(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1Q.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var IconButton2 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    variant = "default",
    icon,
    "aria-label": ariaLabel,
    children
  } = _b5, rest = __objRest$1l(_b5, [
    "variant",
    "icon",
    "aria-label",
    "children"
  ]);
  var _a24;
  const IconComponent = icon != null ? icon : children;
  const IconWithSize = (0, import_react291.cloneElement)(IconComponent, { size: (_a24 = IconComponent.props.size) != null ? _a24 : rest.size });
  return import_react291.default.createElement(
    IconButton,
    __spreadValues$1Q({
      variant,
      icon: IconWithSize,
      "aria-label": ariaLabel,
      ref
    }, rest)
  );
});
var columns = 5;
var paletteColors = getShades(100, 500);
var defaultColors = getShades(500);
var ColorButton = (0, import_react291.forwardRef)(({
  color: color5,
  onClick,
  size: size4,
  selected = false
}, ref) => {
  if (!color5)
    return import_react291.default.createElement(Box, null);
  const { defaultArrows, focusPrevious, focusNext } = useArrowFocus(columns);
  const onKeyDown = (e) => {
    switch (e.key) {
      case "PageUp":
        e.preventDefault();
        focusPrevious({ wrap: false, repeat: columns * 5 });
        break;
      case "PageDown":
        e.preventDefault();
        focusNext({ wrap: false, repeat: columns * 5 });
        break;
      default:
        defaultArrows(e);
        break;
    }
  };
  const { colorButton } = useMultiStyleConfig("ColorPicker", { size: size4 });
  return import_react291.default.createElement(
    IconButton2,
    {
      bg: color5,
      ref,
      onKeyDown,
      "aria-label": `select-${color5}`,
      onClick,
      sx: colorButton,
      icon: import_react291.default.createElement(Icon$1, { as: SvgCheckDuo, boxSize: selected ? void 0 : "0" }),
      color: getContrastColor(color5)
    }
  );
});
var __defProp$1P = Object.defineProperty;
var __getOwnPropSymbols$1P = Object.getOwnPropertySymbols;
var __hasOwnProp$1P = Object.prototype.hasOwnProperty;
var __propIsEnum$1P = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1P = (obj, key2, value) => key2 in obj ? __defProp$1P(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1P = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1P.call(b2, prop2))
      __defNormalProp$1P(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1P)
    for (var prop2 of __getOwnPropSymbols$1P(b2)) {
      if (__propIsEnum$1P.call(b2, prop2))
        __defNormalProp$1P(a2, prop2, b2[prop2]);
    }
  return a2;
};
var Popover$1 = (props) => import_react291.default.createElement(Popover, __spreadValues$1P({ isLazy: true }, props));
var ColorsExpandButton = ({
  onClick,
  size: size4,
  expanded
}) => {
  const { defaultArrows, focusPrevious, focusFirst } = useArrowFocus(columns);
  const { colorButton } = useMultiStyleConfig("ColorPicker", { size: size4 });
  const onKeyDown = (e) => {
    switch (e.key) {
      case "Tab":
        focusFirst();
        break;
      case "ArrowUp":
        e.preventDefault();
        focusPrevious({ wrap: true, repeat: 1 });
        break;
      case "PageUp":
        e.preventDefault();
        focusPrevious({ wrap: false, repeat: columns * 5 });
        break;
      default:
        defaultArrows(e);
        break;
    }
  };
  return import_react291.default.createElement(
    IconButton2,
    {
      variant: "ghost",
      onKeyDown,
      "aria-label": "display more colors",
      onClick,
      sx: colorButton
    },
    import_react291.default.createElement(Icon$1, { as: expanded ? SvgChevronUpDuo : SvgChevronDownDuo })
  );
};
var __defProp$1O = Object.defineProperty;
var __getOwnPropSymbols$1O = Object.getOwnPropertySymbols;
var __hasOwnProp$1O = Object.prototype.hasOwnProperty;
var __propIsEnum$1O = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1O = (obj, key2, value) => key2 in obj ? __defProp$1O(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1O = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1O.call(b2, prop2))
      __defNormalProp$1O(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1O)
    for (var prop2 of __getOwnPropSymbols$1O(b2)) {
      if (__propIsEnum$1O.call(b2, prop2))
        __defNormalProp$1O(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1k = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1O.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1O)
    for (var prop2 of __getOwnPropSymbols$1O(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1O.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ColorPicker$1 = (_a9) => {
  var _b5 = _a9, {
    onChange: onChange2 = () => {
    },
    colors: colors3 = defaultColors,
    expandedColors = paletteColors,
    value = null,
    name,
    size: size4 = "md",
    popoverProps
  } = _b5, rest = __objRest$1k(_b5, [
    "onChange",
    "colors",
    "expandedColors",
    "value",
    "name",
    "size",
    "popoverProps"
  ]);
  const { isOpen, onToggle, onClose } = useDisclosure();
  const [expanded, setExpanded] = useBoolean();
  const [selectedColor, setSelectedColor] = (0, import_react291.useState)(value);
  const [visibleColors, setVisibleColors] = (0, import_react291.useState)(colors3);
  const initialFocusRef = (0, import_react291.useRef)(null);
  const {
    trigger: trigger2,
    heading
  } = useMultiStyleConfig("ColorPicker", { selectedColor, size: size4 });
  const parsedValue = value && useToken("colors", value);
  const baseColors = [...colors3];
  for (let i2 = 0; i2 < baseColors.length % columns; i2 += 1) {
    baseColors.push("");
  }
  (0, import_react291.useEffect)(() => {
    if (value === "") {
      setSelectedColor(null);
    } else {
      setSelectedColor(parsedValue);
    }
  }, [value]);
  (0, import_react291.useEffect)(() => {
    if (expanded) {
      setVisibleColors((prev2) => prev2.concat(expandedColors));
    } else {
      setVisibleColors(baseColors);
    }
  }, [expanded]);
  const expandColors = () => {
    setExpanded.toggle();
  };
  const getNumberOfColumns = () => {
    if (expanded)
      return columns;
    if (colors3.length < columns && colors3.length > 2) {
      return colors3.length;
    }
    if (colors3.length < columns) {
      return 3;
    }
    return columns;
  };
  const shouldBeFocused = (index5) => selectedColor ? index5 === visibleColors.findIndex((colorVal) => colorVal === selectedColor) : index5 === 0;
  const handleSelect = (color5) => {
    onToggle();
    setSelectedColor(color5);
    onChange2(color5);
  };
  return import_react291.default.createElement(Box, { "data-testid": "color-picker-test-id" }, import_react291.default.createElement(
    Popover$1,
    __spreadValues$1O({
      isOpen,
      onClose,
      initialFocusRef
    }, popoverProps),
    import_react291.default.createElement(PopoverTrigger, null, import_react291.default.createElement(
      IconButton2,
      __spreadValues$1O({
        onClick: onToggle,
        "aria-label": name || "color picker",
        name,
        sx: trigger2,
        size: size4,
        icon: import_react291.default.createElement(Icon$1, { as: SvgColorsDuo })
      }, rest)
    )),
    import_react291.default.createElement(PopoverContent, { w: "auto", boxShadow: "md", p: 2, bgColor: "background.default" }, import_react291.default.createElement(Stack, null, import_react291.default.createElement(
      PopoverHeader,
      {
        color: "text.default",
        sx: heading
      },
      "Pick a color"
    ), import_react291.default.createElement(PopoverBody, { p: 0 }, import_react291.default.createElement(Stack, { alignItems: "center", p: 0, spacing: 0 }, import_react291.default.createElement($9bf71ea28793e738$export$20e40289641fbbb6, null, import_react291.default.createElement(
      SimpleGrid,
      {
        columns: getNumberOfColumns(),
        spacing: 2,
        overflowY: "scroll",
        maxH: 72,
        pr: 2,
        pl: 4,
        py: 1
      },
      visibleColors.map((color5, index5) => import_react291.default.createElement(
        ColorButton,
        {
          color: color5,
          key: `${color5}-button-${index5}`,
          selected: color5 === selectedColor,
          ref: shouldBeFocused(index5) ? initialFocusRef : void 0,
          size: size4,
          onClick: () => handleSelect(color5)
        }
      ))
    ), expandedColors.length > 0 && import_react291.default.createElement(
      ColorsExpandButton,
      {
        onClick: expandColors,
        expanded,
        size: size4
      }
    ))))))
  ));
};
var __defProp$1N = Object.defineProperty;
var __getOwnPropSymbols$1N = Object.getOwnPropertySymbols;
var __hasOwnProp$1N = Object.prototype.hasOwnProperty;
var __propIsEnum$1N = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1N = (obj, key2, value) => key2 in obj ? __defProp$1N(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1N = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1N.call(b2, prop2))
      __defNormalProp$1N(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1N)
    for (var prop2 of __getOwnPropSymbols$1N(b2)) {
      if (__propIsEnum$1N.call(b2, prop2))
        __defNormalProp$1N(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1j = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1N.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1N)
    for (var prop2 of __getOwnPropSymbols$1N(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1N.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ColorPickerField = (_a9) => {
  var _b5 = _a9, {
    name,
    label,
    direction: direction2,
    isRequired,
    validate: validate2
  } = _b5, rest = __objRest$1j(_b5, [
    "name",
    "label",
    "direction",
    "isRequired",
    "validate"
  ]);
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      validate: validate2
    },
    ({ onChange: onChange2, value }) => import_react291.default.createElement(
      ColorPicker$1,
      __spreadValues$1N({
        name,
        onChange: onChange2,
        value
      }, rest)
    )
  );
};
var __defProp$1M = Object.defineProperty;
var __defProps$s = Object.defineProperties;
var __getOwnPropDescs$s = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1M = Object.getOwnPropertySymbols;
var __hasOwnProp$1M = Object.prototype.hasOwnProperty;
var __propIsEnum$1M = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1M = (obj, key2, value) => key2 in obj ? __defProp$1M(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1M = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1M.call(b2, prop2))
      __defNormalProp$1M(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1M)
    for (var prop2 of __getOwnPropSymbols$1M(b2)) {
      if (__propIsEnum$1M.call(b2, prop2))
        __defNormalProp$1M(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$s = (a2, b2) => __defProps$s(a2, __getOwnPropDescs$s(b2));
var FlipButtonContext = (0, import_react291.createContext)(null);
var useFlipButtonState = (props, isMulti) => isMulti ? $587d3ad58be6d31f$export$daff6da51032a415(props) : $a54cdc5c1942b639$export$bca9d026f8e704eb(props);
var useFlipButtonGroup = (props, state2, isMulti) => {
  const propsWithLabel = __spreadProps$s(__spreadValues$1M({}, props), {
    "aria-label": `${isMulti ? "Checkbox" : "Radio"}-button-group`
  });
  return isMulti ? $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(
    propsWithLabel,
    state2
  ).groupProps : $430f30ed08ec25fa$export$62b9571f283ff5c2(
    propsWithLabel,
    state2
  ).radioGroupProps;
};
var useFlipButton = (props, isMulti) => {
  const state2 = useFlipButtonState(props, isMulti);
  const flipButtonGroupProps = useFlipButtonGroup(props, state2, isMulti);
  return { state: state2, flipButtonGroupProps };
};
var __defProp$1L = Object.defineProperty;
var __defProps$r = Object.defineProperties;
var __getOwnPropDescs$r = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1L = Object.getOwnPropertySymbols;
var __hasOwnProp$1L = Object.prototype.hasOwnProperty;
var __propIsEnum$1L = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1L = (obj, key2, value) => key2 in obj ? __defProp$1L(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1L = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1L.call(b2, prop2))
      __defNormalProp$1L(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1L)
    for (var prop2 of __getOwnPropSymbols$1L(b2)) {
      if (__propIsEnum$1L.call(b2, prop2))
        __defNormalProp$1L(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$r = (a2, b2) => __defProps$r(a2, __getOwnPropDescs$r(b2));
var __objRest$1i = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1L.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1L)
    for (var prop2 of __getOwnPropSymbols$1L(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1L.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FlipButton$1 = (props) => {
  const _a9 = props, {
    children,
    size: size4,
    variant,
    isMulti,
    isDisabled: isDisabled3 = false,
    icon,
    value,
    iconPlacement = "left"
  } = _a9, rest = __objRest$1i(_a9, [
    "children",
    "size",
    "variant",
    "isMulti",
    "isDisabled",
    "icon",
    "value",
    "iconPlacement"
  ]);
  const state2 = (0, import_react291.useContext)(FlipButtonContext);
  const ref = (0, import_react291.useRef)(null);
  const propsWithoutChildren = (0, import_ramda.omit)(["children"], __spreadProps$r(__spreadValues$1L({}, props), { "aria-label": `${isMulti ? "Checkbox" : "Radio"}-input for ${value}` }));
  const { inputProps } = isMulti ? $fba3e38d5ca8983f$export$353b32fc6898d37d(propsWithoutChildren, state2, ref) : $0d5c49892c1215da$export$37b0961d2f4751e2(propsWithoutChildren, state2, ref);
  const { button, buttonIcon } = useMultiStyleConfig("FlipButton", { size: size4, variant });
  const { focusProps, isFocusVisible: isFocused } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const focusStyles = {
    outline: "none",
    ring: "2px",
    ringColor: "border.wcag",
    ringOffset: "1px"
  };
  const focusRing2 = isFocused ? focusStyles : {};
  const isSelected = isMulti ? state2.isSelected(value) : state2.selectedValue === value;
  const flipButtonProps = __spreadProps$r(__spreadValues$1L({}, $3ef42575df84b30b$export$9d1611c77c2fe928(inputProps, focusProps)), {
    ref,
    style: { opacity: "0", width: "0", height: "0" },
    "aria-label": isMulti ? "Checkbox-input" : "Radio-input"
  });
  const containerProps = {
    "aria-checked": isSelected,
    "aria-disabled": isDisabled3,
    sx: focusRing2,
    as: "label",
    cursor: "pointer"
  };
  return typeof children === "function" ? children(__spreadValues$1L({
    state: state2,
    containerProps,
    flipButtonProps,
    isFocused,
    isSelected,
    isDisabled: isDisabled3,
    isMulti: isMulti || false,
    focusRing: focusRing2,
    value
  }, rest)) : import_react291.default.createElement(
    HStack,
    {
      spacing: isSelected && iconPlacement !== "none" || icon ? 2 : 0,
      sx: (0, import_ramda.mergeAll)([button, isFocused ? focusStyles : {}, { flexDirection: iconPlacement === "left" ? "row" : "row-reverse" }]),
      "aria-checked": isSelected,
      "aria-disabled": isDisabled3,
      as: "label"
    },
    import_react291.default.createElement("input", __spreadValues$1L({}, flipButtonProps)),
    icon && iconPlacement !== "none" ? import_react291.default.createElement(Icon$1, { as: icon || SvgCheckSolid, sx: buttonIcon }) : isSelected && iconPlacement !== "none" && import_react291.default.createElement(SlideFade, { in: isSelected }, import_react291.default.createElement(Icon$1, { as: icon || SvgCheckSolid, sx: buttonIcon })),
    import_react291.default.createElement(Text, { textAlign: "center" }, children)
  );
};
var __defProp$1K = Object.defineProperty;
var __defProps$q = Object.defineProperties;
var __getOwnPropDescs$q = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1K = Object.getOwnPropertySymbols;
var __hasOwnProp$1K = Object.prototype.hasOwnProperty;
var __propIsEnum$1K = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1K = (obj, key2, value) => key2 in obj ? __defProp$1K(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1K = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1K.call(b2, prop2))
      __defNormalProp$1K(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1K)
    for (var prop2 of __getOwnPropSymbols$1K(b2)) {
      if (__propIsEnum$1K.call(b2, prop2))
        __defNormalProp$1K(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$q = (a2, b2) => __defProps$q(a2, __getOwnPropDescs$q(b2));
var __objRest$1h = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1K.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1K)
    for (var prop2 of __getOwnPropSymbols$1K(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1K.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FlipButtonGroup = (props) => {
  const _a9 = props, {
    isMulti = false,
    name,
    children,
    direction: direction2 = "row",
    isDisabled: isDisabled3 = false,
    iconPlacement = "left",
    size: size4,
    variant,
    icon,
    sx = {}
  } = _a9, rest = __objRest$1h(_a9, [
    "isMulti",
    "name",
    "children",
    "direction",
    "isDisabled",
    "iconPlacement",
    "size",
    "variant",
    "icon",
    "sx"
  ]);
  const { state: state2, flipButtonGroupProps } = useFlipButton(props, isMulti);
  const numberOfButtons = import_react291.Children.count(children);
  const childrenWithProps = import_react291.Children.toArray(children).map(
    (child) => (0, import_react291.isValidElement)(child) ? (0, import_react291.cloneElement)(child, __spreadValues$1K({
      key: child.props.value,
      isMulti,
      variant,
      isDisabled: isDisabled3,
      iconPlacement,
      icon,
      size: size4
    }, child.props)) : child
  );
  const { container: container2 } = useMultiStyleConfig("FlipButton", {
    size: size4,
    variant,
    numberOfButtons,
    sx
  });
  const restWithoutOnChange = (0, import_ramda.omit)(["onChange"], rest);
  return import_react291.default.createElement(
    Stack,
    __spreadValues$1K(__spreadProps$q(__spreadValues$1K({}, flipButtonGroupProps), {
      direction: direction2,
      id: name,
      spacing: 0,
      sx: container2
    }), restWithoutOnChange),
    import_react291.default.createElement(FlipButtonContext.Provider, { value: state2 }, childrenWithProps)
  );
};
var __defProp$1J = Object.defineProperty;
var __getOwnPropSymbols$1J = Object.getOwnPropertySymbols;
var __hasOwnProp$1J = Object.prototype.hasOwnProperty;
var __propIsEnum$1J = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1J = (obj, key2, value) => key2 in obj ? __defProp$1J(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1J = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1J.call(b2, prop2))
      __defNormalProp$1J(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1J)
    for (var prop2 of __getOwnPropSymbols$1J(b2)) {
      if (__propIsEnum$1J.call(b2, prop2))
        __defNormalProp$1J(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1g = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1J.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1J)
    for (var prop2 of __getOwnPropSymbols$1J(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1J.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FlipButtonGroupField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    children,
    direction: direction2,
    isRequired,
    iconPlacement = "left",
    onChange: onChangeCallback = import_ramda.identity,
    validate: validate2
  } = _b5, rest = __objRest$1g(_b5, [
    "name",
    "label",
    "children",
    "direction",
    "isRequired",
    "iconPlacement",
    "onChange",
    "validate"
  ]);
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      validate: validate2,
      ref
    },
    ({ onChange: onChange2, value }) => import_react291.default.createElement(
      FlipButtonGroup,
      __spreadValues$1J({
        name,
        onChange: (e) => {
          onChange2(e);
          onChangeCallback(e);
        },
        direction: direction2,
        value,
        iconPlacement
      }, rest),
      children
    )
  );
});
var scrollbarStyles = {
  "::-webkit-scrollbar": {
    width: "8px",
    height: "8px"
  },
  "::-webkit-scrollbar-track": {
    background: "background.scrollbar.track"
  },
  "::-webkit-scrollbar-thumb": {
    borderRadius: "scrollbar.thumb",
    border: "2px solid",
    borderColor: "border.scrollbar.thumb",
    backgroundClip: "padding-box !important",
    background: "background.scrollbar.thumb"
  },
  "::-webkit-scrollbar-thumb:hover": {
    borderRadius: "scrollbar.thumb",
    border: "1px solid ",
    borderColor: "border.scrollbar.thumb",
    backgroundClip: "padding-box !important",
    background: "background.scrollbar.thumb"
  }
};
var Breadcrumb3 = {
  parts: ["link", "separator"],
  baseStyle: {
    link: {
      padding: [0.5, 1],
      color: "primary",
      fontWeight: "600",
      fontSize: "semibold",
      _hover: {
        bg: "blue.50",
        borderRadius: "base",
        textDecor: "none"
      }
    },
    separator: {
      color: "gray.300",
      fontSize: "semibold"
    }
  }
};
var Button2 = {
  sizes: {
    xs: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      height: sizing2.button.xs,
      minWidth: sizing2.button.xs,
      paddingInlineStart: spacing4["padding-inline"].button.xs,
      paddingInlineEnd: spacing4["padding-inline"].button.xs
    }),
    sm: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      height: sizing2.button.sm,
      minWidth: sizing2.button.sm,
      paddingInlineStart: spacing4["padding-inline"].button.md,
      paddingInlineEnd: spacing4["padding-inline"].button.md
    }),
    md: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      height: sizing2.button.md,
      minWidth: sizing2.button.md,
      paddingInlineStart: spacing4["padding-inline"].button.md,
      paddingInlineEnd: spacing4["padding-inline"].button.md
    }),
    lg: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      height: sizing2.button.lg,
      minWidth: sizing2.button.lg,
      paddingInlineStart: spacing4["padding-inline"].button.lg,
      paddingInlineEnd: spacing4["padding-inline"].button.lg
    })
  },
  baseStyle: ({ theme: { colors: color5, radii: borderRadius3 } }) => ({
    color: color5.text.default,
    borderRadius: borderRadius3.button.default,
    _focusVisible: {
      ring: "2px",
      ringColor: color5.border.wcag,
      ringOffset: "1px"
    }
  }),
  variants: {
    default: ({ theme: { colors: color5 } }) => ({
      bgColor: color5.background.button.default,
      _hover: {
        bgColor: color5.background.button["default-hover"]
      },
      _active: {
        bgColor: color5.background.button["default-active"]
      }
    }),
    danger: ({ theme: { colors: color5 } }) => ({
      bgColor: color5.background.button.danger,
      color: color5.text.button.danger,
      _hover: {
        bg: color5.background.button["danger-hover"],
        _disabled: {
          bgColor: color5.background.button.danger
        }
      },
      _active: {
        bgColor: color5.background.button["danger-active"]
      }
    }),
    success: ({ theme: { colors: color5 } }) => ({
      bgColor: color5.background.button.success,
      color: color5.text.button.success,
      _hover: {
        bg: color5.background.button["success-hover"],
        _disabled: {
          bgColor: color5.background.button.success
        }
      },
      _active: {
        bgColor: color5.background.button["success-active"]
      }
    }),
    brand: ({ theme: { colors: color5 } }) => ({
      color: color5.text.inverted,
      bgColor: color5.background.button.brand,
      _hover: {
        bg: color5.background.button["brand-hover"],
        _disabled: {
          bgColor: color5.background.button.brand
        }
      },
      _active: {
        bgColor: color5.background.button["brand-active"]
      }
    }),
    brandSubdued: ({ theme: { colors: color5 } }) => ({
      color: color5.text.button.link,
      bgColor: color5.background.button.ghost,
      _hover: {
        bg: color5.background.button.brand,
        color: color5.text.inverted,
        _disabled: {
          bgColor: color5.background.button.ghost,
          color: color5.text.button.link
        }
      },
      _active: {
        bg: color5.background.button["brand-hover"],
        color: color5.text.inverted
      }
    }),
    link: ({ theme: { colors: color5 } }) => ({
      textDecoration: "underline",
      color: color5.text.button.link,
      bgColor: color5.background.button.link,
      _hover: {
        color: color5.text.button["link-hover"],
        bgColor: color5.background.button["link-hover"]
      },
      _active: {
        color: color5.text.button["link-hover"],
        bgColor: color5.background.button["link-active"]
      }
    }),
    outline: ({ theme: { colors: color5 } }) => ({
      color: color5.text.default,
      _hover: {
        bg: color5.background.button["ghost-hover"]
      },
      _active: {
        bg: color5.background.button["ghost-active"]
      }
    }),
    ghost: ({ theme: { colors: color5 } }) => ({
      color: color5.text.default,
      bgColor: color5.background.button.ghost,
      _hover: {
        bg: color5.background.button["ghost-hover"],
        _disabled: {
          bgColor: color5.background.button.ghost
        }
      },
      _active: {
        bgColor: color5.background.button["ghost-active"]
      }
    }),
    ai: ({ theme: { colors: color5 } }) => ({
      color: color5.text.inverted,
      bgColor: color5.bg.ai.default,
      _hover: {
        bgColor: color5.bg.ai.hover,
        _disabled: {
          bgColor: color5.bg.ai.default
        }
      },
      _active: {
        bgColor: color5.bg.ai.active
      }
    }),
    aiSubdued: ({ theme: { colors: color5 } }) => ({
      color: color5.ai,
      bgColor: color5.background.button.ghost,
      _hover: {
        bg: color5.bg.ai.default,
        color: color5.text.inverted,
        _disabled: {
          bgColor: color5.background.button.ghost,
          color: color5.ai
        }
      },
      _active: {
        bg: color5.bg.ai.hover,
        color: color5.text.inverted
      }
    })
  },
  defaultProps: {
    size: "md"
  }
};
var pulseRing = keyframes`
0% {
  transform: scale(0.33);
}
30% {
  transform: scale(0.66);
},
40%,
50% {
  opacity: 0;
}
100% {
  opacity: 0;
}
`;
var Blinker = {
  baseStyle: ({ theme: { colors: palette }, color: color5, isBlinking }) => ({
    position: "relative",
    borderRadius: "50%",
    bgColor: color5 === "" ? palette.blue["500"] : color5,
    _before: isBlinking ? {
      content: "''",
      position: "absolute",
      display: "block",
      width: "300%",
      height: "300%",
      marginLeft: "-100%",
      marginTop: "-100%",
      borderRadius: "50%",
      bgColor: color5 === "" ? "blue.500" : color5,
      animation: `2.25s ${pulseRing} cubic-bezier(0.455, 0.03, 0.515, 0.955) -0.4s infinite`,
      zIndex: "base"
    } : {}
  }),
  sizes: {
    "2xs": ({ theme: { sizes: sizing2 } }) => ({
      height: sizing2.blinker["2xs"],
      width: sizing2.blinker["2xs"]
    }),
    xs: ({ theme: { sizes: sizing2 } }) => ({
      height: sizing2.blinker.xs,
      width: sizing2.blinker.xs
    }),
    sm: ({ theme: { sizes: sizing2 } }) => ({
      height: sizing2.blinker.sm,
      width: sizing2.blinker.sm
    }),
    md: ({ theme: { sizes: sizing2 } }) => ({
      height: sizing2.blinker.md,
      width: sizing2.blinker.md
    }),
    lg: ({ theme: { sizes: sizing2 } }) => ({
      height: sizing2.blinker.lg,
      width: sizing2.blinker.lg
    })
  },
  defaultProps: {
    size: "md",
    color: "blue.500"
  }
};
var Checkbox3 = {
  parts: ["control", "label"],
  sizes: {
    sm: {
      control: {
        fontSize: 5
      }
    },
    md: {
      control: {
        fontSize: 7
      }
    },
    lg: {
      control: {
        fontSize: 8
      }
    }
  },
  baseStyle: ({ theme: { colors: color5, opacity } }) => ({
    control: {
      borderColor: color5.border.checkbox.default,
      bg: color5.background.checkbox.default,
      borderWidth: 2,
      _checked: {
        borderColor: color5.border.checkbox.checked,
        bg: color5.background.checkbox.checked,
        _hover: {
          borderColor: color5.border.checkbox.checked,
          bg: color5.background.checkbox.checked
        }
      },
      _invalid: {
        borderColor: color5.border.checkbox.error,
        bg: color5.background.checkbox.default,
        _checked: {
          bg: color5.background.checkbox.error
        },
        _hover: {
          borderColor: color5.border.checkbox.error,
          bg: color5.background.checkbox.default
        }
      },
      _focusVisible: {
        ring: "2px",
        ringColor: color5.border.wcag,
        ringOffset: "1px"
      },
      _hover: {
        borderColor: color5.border.checkbox["default-hover"],
        bg: color5.background.checkbox.default
      },
      _disabled: {
        borderColor: color5.border.checkbox.disabled,
        bg: color5.background.checkbox.disabled,
        opacity: opacity.checkbox.disabled,
        _checked: {
          borderColor: color5.border.checkbox.checked,
          bg: color5.background.checkbox.checked,
          opacity: opacity.checkbox.disabled,
          color: "white",
          _hover: {
            borderColor: color5.border.checkbox.checked,
            bg: color5.background.checkbox.checked,
            opacity: opacity.checkbox.disabled
          }
        },
        _hover: {
          borderColor: color5.border.checkbox.disabled,
          bg: color5.background.checkbox.disabled,
          opacity: opacity.checkbox.disabled
        }
      }
    }
  }),
  variants: {
    default: ({ theme: { radii: borderRadius3 } }) => ({
      control: {
        borderRadius: borderRadius3.checkbox.default
      }
    }),
    rounded: ({ theme: { radii: borderRadius3 } }) => ({
      control: {
        borderRadius: borderRadius3.checkbox.full
      }
    })
  }
};
var Input7 = {
  parts: ["field", "addon"],
  baseStyle: ({ theme: { colors: color5 } }) => ({
    field: {
      color: color5.text.default,
      _placeholder: {
        color: color5.text.input.placeholder,
        opacity: 1
      }
    }
  }),
  variants: {
    outline: ({ theme: {
      colors: color5,
      space: spacing4,
      radii: borderRadius3,
      borders: borderWidth,
      opacity
    } }) => ({
      field: {
        paddingInlineStart: spacing4["padding-inline"].input.default,
        paddingInlineEnd: spacing4["padding-inline"].input.default,
        bgColor: color5.background.input["outline-default"],
        borderRadius: borderRadius3.input.outline,
        borderWidth: borderWidth.input.default,
        borderColor: color5.border.input.default,
        _readOnly: {
          _focusVisible: {
            borderColor: color5.border.input.readonly
          },
          _hover: {
            borderColor: color5.border.input.readonly
          }
        },
        _focusVisible: {
          bgColor: color5.background.input["outline-focus"],
          borderColor: color5.border.input.focus,
          _invalid: {
            boxShadow: `0 0 0 1px ${color5.border.input.error}`,
            bgColor: color5.background.input["outline-error"],
            borderColor: color5.border.input.error
          }
        },
        _hover: {
          bgColor: color5.background.input["outline-hover"],
          borderColor: color5.border.input["default-hover"]
        },
        _invalid: {
          bgColor: color5.background.input["outline-error"],
          borderColor: color5.border.input.error
        },
        _disabled: {
          bgColor: color5.background.input["outline-disabled"],
          borderColor: color5.border.input.disabled,
          opacity: opacity.input.disabled
        }
      },
      addon: {
        border: "none",
        background: "none",
        color: color5.text.default
      }
    }),
    filled: ({ theme: {
      colors: color5,
      space: spacing4,
      radii: borderRadius3,
      borders: borderWidth,
      opacity
    } }) => ({
      field: {
        paddingInlineStart: spacing4["padding-inline"].input.default,
        paddingInlineEnd: spacing4["padding-inline"].input.default,
        borderRadius: borderRadius3.input.filled,
        borderWidth: borderWidth.input.default,
        bgColor: color5.background.input["filled-default"],
        _readOnly: {
          _focusVisible: {
            borderColor: color5.border.input.readonly
          },
          _hover: {
            bgColor: color5.background.input["filled-default"]
          }
        },
        _hover: {
          bgColor: color5.background.input["filled-hover"]
        },
        _focusVisible: {
          boxShadow: `0 0 0 1px ${color5.border.input.focus}`,
          borderColor: color5.border.input.focus,
          bgColor: color5.background.input["filled-focus"],
          _readOnly: {
            bgColor: color5.background.input["filled-default"]
          },
          _invalid: {
            boxShadow: `0 0 0 1px ${color5.border.input.error}`,
            bgColor: color5.background.input["outline-error"],
            borderColor: color5.border.input.error
          }
        },
        _invalid: {
          boxShadow: `0 0 0 1px ${color5.border.input.error}`,
          bgColor: color5.background.input["filled-error"],
          borderColor: color5.border.input.error
        },
        _disabled: {
          bgColor: color5.background.input["filled-disabled"],
          borderColor: color5.border.input.disabled,
          opacity: opacity.input.disabled
        }
      }
    }),
    flushed: ({ theme: {
      colors: color5,
      space: spacing4,
      radii: borderRadius3,
      borders: borderWidth,
      opacity
    } }) => ({
      field: {
        paddingInlineStart: spacing4["padding-inline"].input.flushed,
        paddingInlineEnd: spacing4["padding-inline"].input.flushed,
        bgColor: color5.background.input["flushed-default"],
        borderRadius: borderRadius3.input.flushed,
        borderBottomWidth: borderWidth.input.default,
        borderBottomColor: color5.border.input.default,
        _readOnly: {
          _focusVisible: {
            borderColor: color5.border.input.readonly
          },
          _hover: {
            borderColor: color5.border.input.readonly
          }
        },
        _hover: {
          bgColor: color5.background.input["flushed-hover"],
          borderColor: color5.border.input["default-hover"]
        },
        _focusVisible: {
          _hover: {
            boxShadow: `0 1px 0 0 ${color5.border.input.focus}`,
            borderColor: color5.border.input.focus
          },
          _invalid: {
            boxShadow: `0 1px 0 0 ${color5.border.input.error}`,
            borderColor: color5.border.input.error,
            bgColor: color5.background.input["flushed-error"]
          }
        },
        _invalid: {
          _hover: {
            boxShadow: `0 1px 0 0 ${color5.border.input.error}`,
            borderColor: color5.border.input.error
          },
          bgColor: color5.background.input["flushed-error"]
        },
        _disabled: {
          bgColor: color5.background.input["flushed-disabled"],
          borderColor: color5.border.input.disabled,
          opacity: opacity.input.disabled
        }
      }
    }),
    ai: ({ theme: {
      colors: color5,
      space: spacing4,
      radii: borderRadius3,
      borders: borderWidth,
      opacity
    } }) => ({
      field: {
        paddingInlineStart: spacing4["padding-inline"].input.default,
        paddingInlineEnd: spacing4["padding-inline"].input.default,
        bgColor: color5.background.input["outline-default"],
        borderRadius: borderRadius3.input.outline,
        borderWidth: borderWidth.input.default,
        borderColor: color5.border.input.default,
        _readOnly: {
          _focusVisible: {
            borderColor: color5.border.input.readonly
          },
          _hover: {
            borderColor: color5.border.input.readonly
          }
        },
        _focusVisible: {
          bgColor: color5.background.input["outline-focus"],
          _hover: {
            boxShadow: `0 0 0 1px ${color5.border.ai}`,
            borderColor: color5.border.ai
          },
          _invalid: {
            boxShadow: `0 0 0 1px ${color5.border.input.error}`,
            bgColor: color5.background.input["outline-error"],
            borderColor: color5.border.input.error
          }
        },
        _hover: {
          bgColor: color5.background.input["outline-hover"],
          borderColor: color5.border.input["default-hover"]
        },
        _invalid: {
          bgColor: color5.background.input["outline-error"],
          borderColor: color5.border.input.error
        },
        _disabled: {
          bgColor: color5.background.input["outline-disabled"],
          borderColor: color5.border.input.disabled,
          opacity: opacity.input.disabled
        }
      },
      addon: {
        border: "none",
        background: "none",
        color: color5.text.default
      }
    })
  }
};
var PinInput$1 = {
  variants: {
    outline: ({ theme: {
      radii: borderRadius3,
      borders: borderWidth,
      colors: color5,
      space: spacing4,
      opacity
    } }) => ({
      borderColor: color5.border.input.default,
      borderRadius: borderRadius3.input.outline,
      borderWidth: borderWidth.input.default,
      bg: color5.background.input["outline-default"],
      color: color5.text.default,
      paddingInline: spacing4["padding-inline"].input.default,
      _hover: {
        bg: color5.background.input["outline-hover"],
        borderColor: color5.border.input["default-hover"]
      },
      _focus: {
        borderColor: color5.border.input.focus,
        bg: color5.background.input["outline-focus"]
      },
      _invalid: {
        bg: color5.background.input["outline-error"],
        borderColor: color5.border.input.error,
        _placeholder: {
          color: "transparent"
        }
      },
      _disabled: {
        bg: color5.background.input["outline-disabled"],
        borderColor: color5.border.input.disabled,
        opacity: opacity.input.disabled,
        _hover: {
          bg: color5.background.input["outline-disabled"],
          borderColor: color5.border.input.disabled
        }
      },
      _placeholder: {
        color: color5.text.input.placeholder
      },
      _readonly: {
        borderColor: color5.border.input.readonly
      }
    })
  }
};
var Select$1 = {
  parts: ["field", "icon"],
  baseStyle: ({ theme: {
    radii: borderRadius3,
    borders: borderWidth,
    colors: color5,
    space: spacing4
  } }) => ({
    field: {
      paddingInlineStart: spacing4["padding-inline"].select.default,
      paddingInlineEnd: spacing4["padding-inline"].select.default,
      borderWidth: borderWidth.select,
      color: color5.text.default,
      borderColor: color5.border.select.default,
      borderRadius: borderRadius3.select.default,
      _hover: {
        borderColor: color5.border.select["default-hover"]
      },
      _focusVisible: {
        borderColor: color5.border.select.focus,
        boxShadow: `0 0 0 1px ${color5.border.select.focus}`
      },
      _invalid: {
        borderColor: color5.border.select.error,
        boxShadow: "none"
      },
      _readOnly: {
        borderWidth: borderWidth.select,
        borderColor: color5.border.select.readonly,
        _focusVisible: {
          borderColor: color5.border.select.readonly
        }
      },
      _disabled: {
        borderColor: color5.border.select.disabled,
        bg: color5.background.select.disabled,
        _hover: {
          borderColor: color5.border.select.disabled
        }
      },
      _placeholder: {
        color: color5.text.select.placeholder
      }
    },
    icon: {
      color: color5.icon.select.default
    }
  }),
  variants: {
    outline: {},
    ai: ({ theme: { colors: color5 } }) => ({
      field: {
        _focusVisible: {
          borderColor: color5.border.ai,
          boxShadow: `0 0 0 1px ${color5.border.ai}`
        }
      }
    })
  }
};
var Radio$1 = {
  parts: ["control", "label", "container"],
  sizes: {
    sm: ({ theme: { borders: borderWidth } }) => ({
      control: {
        _checked: {
          borderWidth: borderWidth.radio["checked-sm"]
        }
      }
    }),
    md: ({ theme: { borders: borderWidth } }) => ({
      control: {
        _checked: {
          borderWidth: borderWidth.radio["checked-md"]
        }
      }
    }),
    lg: ({ theme: { borders: borderWidth } }) => ({
      control: {
        _checked: {
          borderWidth: borderWidth.radio["checked-lg"]
        }
      }
    })
  },
  baseStyle: ({ theme: { borders: borderWidth, colors: color5 } }) => ({
    control: {
      borderColor: color5.border.radio.default,
      bg: color5.background.radio.default,
      borderWidth: borderWidth.radio.default,
      _checked: {
        borderColor: color5.border.radio.checked,
        bg: color5.background.radio.checked,
        _hover: {
          borderColor: color5.border.radio.checked,
          bg: color5.background.radio.checked
        }
      },
      _hover: {
        borderColor: color5.border.radio["default-hover"],
        bg: color5.background.radio.default
      },
      _disabled: {
        borderColor: color5.border.radio.disabled,
        bg: color5.background.radio.disabled,
        _hover: {
          borderColor: color5.border.radio.disabled,
          bg: color5.background.radio.disabled
        }
      },
      _invalid: {
        borderColor: color5.border.radio.error,
        bg: color5.background.radio.error,
        borderWidth: borderWidth.radio.default,
        _hover: {
          borderColor: color5.border.radio.error,
          bg: color5.background.radio.error,
          borderWidth: borderWidth.radio.default
        }
      },
      _focusVisible: {
        ring: "2px",
        ringColor: color5.border.wcag,
        ringOffset: "1px"
      }
    },
    defaultProps: {
      size: "md"
    }
  })
};
var Tabs$1 = {
  parts: ["tab"],
  variants: {
    "soft-rounded": ({ theme: { colors: color5 } }) => ({
      tab: {
        borderRadius: 999,
        color: color5.text.subdued,
        _selected: {
          bg: color5.background.tabs["soft-rounded-active"],
          color: color5.text.tabs["soft-rounded-active"]
        },
        _focusVisible: {
          ring: "2px",
          ringColor: color5.border.wcag,
          ringOffset: "1px"
        }
      }
    }),
    ai: ({ theme: { colors: color5 } }) => ({
      tab: {
        borderRadius: 999,
        _selected: {
          bgColor: color5.bg.ai.default,
          color: color5.text.inverted
        },
        _focusVisible: {
          ring: "2px",
          ringColor: color5.border.wcag,
          ringOffset: "1px"
        }
      }
    })
  }
};
var Textarea$1 = {
  baseStyle: ({ theme: {
    space: spacing4,
    colors: color5,
    borders: borderWidth,
    radii: borderRadius3
  } }) => ({
    paddingInlineStart: spacing4["padding-inline"].textarea.default,
    paddingInlineEnd: spacing4["padding-inline"].textarea.default,
    borderRadius: borderRadius3.textarea.default,
    borderWidth: borderWidth.textarea.default,
    borderColor: color5.border.textarea.default,
    color: color5.text.default,
    bgColor: color5.background.textarea.default,
    _hover: {
      borderColor: color5.border.textarea["default-hover"],
      bgColor: color5.background.textarea.hover
    },
    _focusVisible: {
      borderColor: color5.border.textarea.focus,
      boxShadow: `0 0 0 1px ${color5.border.textarea.focus}`,
      bgColor: color5.background.textarea.active
    },
    _invalid: {
      boxShadow: "none",
      borderColor: color5.border.textarea.error,
      bgColor: color5.background.textarea.error
    },
    _readOnly: {
      _focusVisible: {
        borderColor: color5.border.textarea.readonly,
        bgColor: color5.background.textarea.default
      },
      _hover: {
        borderColor: color5.border.textarea.readonly
      }
    },
    _disabled: {
      bgColor: color5.background.textarea.disabled,
      _hover: {
        borderColor: color5.border.textarea.default
      }
    },
    _placeholder: {
      color: color5.text.textarea.placeholder
    }
  }),
  variants: {
    outline: {},
    ai: ({ theme: { colors: color5 } }) => ({
      _focusVisible: {
        _hover: {
          boxShadow: `0 0 0 1px ${color5.border.ai}`,
          borderColor: color5.border.ai
        }
      }
    })
  }
};
var Link4 = {
  baseStyle: ({ colorScheme }) => ({
    _focus: {
      ring: "2px",
      ringColor: `${colorScheme}.100`,
      ringOffset: "1px"
    }
  }),
  defaultProps: {
    colorScheme: "mediatoolBlue"
  }
};
var Switch$1 = {
  baseStyle: ({ theme: { colors: color5, opacity } }) => ({
    _disabled: {
      opacity: opacity.switch.disabled
    },
    track: {
      bgColor: color5.background.switch.default,
      _checked: {
        bgColor: color5.background.switch["default-checked"]
      },
      _focusVisible: {
        ring: "2px",
        ringColor: color5.border.wcag,
        ringOffset: "1px"
      }
    },
    thumb: {
      bgColor: color5.background.switch.thumb
    }
  })
};
var Tag$1 = {
  parts: ["container"],
  baseStyle: {
    container: {
      fontWeight: "semibold"
    }
  },
  sizes: {
    sm: {
      container: {
        borderRadius: "tag.default"
      }
    },
    md: {
      container: {
        borderRadius: "tag.default"
      }
    },
    lg: {
      container: {
        borderRadius: "tag.default"
      }
    }
  },
  variants: {
    solid: ({ theme: { colors: colors3 }, bgColor, colorScheme }) => {
      const tagBgColor = bgColor != null ? bgColor : colors3[colorScheme] && colors3[colorScheme][500] ? colors3[colorScheme][500] : colorScheme;
      const tagColor = getContrastColor(useToken("colors", tagBgColor));
      return {
        container: {
          bgColor: tagBgColor,
          color: tagColor
        }
      };
    },
    subtle: ({ theme: { colors: colors3 }, colorScheme, bgColor }) => {
      const tagBgColor = bgColor != null ? bgColor : colors3[colorScheme] && colors3[colorScheme][100] ? colors3[colorScheme][100] : colorScheme;
      const tagColor = getContrastColor(useToken("colors", tagBgColor));
      return {
        container: {
          bgColor: tagBgColor,
          color: tagColor
        }
      };
    },
    ai: {
      container: {
        bgColor: "bg.ai.default",
        color: "text.inverted"
      }
    }
  },
  defaultProps: {
    size: "md",
    colorScheme: "background.tag.default"
  }
};
var Alert3 = {
  parts: ["container", "title", "description"],
  baseStyle: ({ theme: {
    radii: borderRadius3,
    colors: color5,
    space: coreSpacing
  } }) => ({
    container: {
      borderRadius: borderRadius3.toast.default,
      color: color5.text.default,
      paddingEnd: coreSpacing[8],
      width: "auto",
      display: "flex"
    }
  }),
  variants: {
    success: ({ theme: { colors: color5 } }) => ({
      container: {
        bgColor: color5.background.toast.success
      }
    }),
    warning: ({ theme: { colors: color5 } }) => ({
      container: {
        bgColor: color5.background.toast.warning
      }
    }),
    info: ({ theme: { colors: color5 } }) => ({
      container: {
        bgColor: color5.background.toast.info
      }
    }),
    error: ({ theme: { colors: color5 } }) => ({
      container: {
        bgColor: color5.background.toast.error,
        color: color5.text.toast.error
      }
    }),
    ai: ({ theme: { colors: color5 } }) => ({
      container: {
        bgColor: color5.bg.ai.default,
        color: color5.text.inverted
      }
    }),
    default: ({ theme: { colors: color5 } }) => ({
      container: {
        bgColor: color5.bg.layer,
        color: color5.text.default
      }
    }),
    ghost: ({ theme: { colors: color5 } }) => ({
      container: {
        bgColor: color5.bg.base,
        color: color5.text.default,
        borderWidth: "xs",
        borderColor: color5.border.default,
        borderStyle: "solid"
      }
    })
  }
};
var NumberInput$1 = {
  parts: ["root", "field", "stepper", "stepperGroup"],
  sizes: {
    sm: ({ theme: { radii: borderRadius3, sizes: sizing2 } }) => ({
      field: {
        borderRadius: borderRadius3.input.outline
      },
      stepperGroup: {
        height: sizing2["8"]
      }
    }),
    md: ({ theme: { sizes: sizing2 } }) => ({
      stepperGroup: {
        height: sizing2["10"]
      }
    }),
    lg: ({ theme: { sizes: sizing2 } }) => ({
      stepperGroup: {
        height: sizing2["12"]
      }
    })
  },
  baseStyle: ({ theme: {
    sizes: sizing2,
    space: spacing4,
    colors: color5,
    radii: borderRadius3,
    borders: borderWidth,
    opacity
  }, isReadOnly }) => ({
    root: {
      borderRadius: borderRadius3.input.outline
    },
    field: {
      minWidth: sizing2["44"],
      paddingInlineStart: spacing4["padding-inline"].input.default,
      paddingInlineEnd: spacing4["padding-inline"].input.default,
      WebkitPaddingStart: spacing4["padding-inline"].input.default,
      WebkitPaddingEnd: spacing4["padding-inline"].input.default,
      color: color5.text.default,
      bg: color5.background.input["outline-default"],
      borderWidth: borderWidth.input.default,
      borderColor: color5.border.input.default,
      paddingRight: spacing4.paddingRight["number-input"].field,
      _hover: {
        bg: color5.background.input["outline-hover"],
        borderColor: color5.border.input["default-hover"]
      },
      _focusVisible: {
        bg: color5.background.input["outline-focus"],
        borderColor: color5.border.input.focus,
        boxShadow: `0 0 0 1px ${color5.border.textarea.focus}`
      },
      _invalid: {
        bg: color5.background.input["outline-error"],
        borderColor: color5.border.input.error,
        boxShadow: `0 0 0 1px ${color5.border.input.error}`
      },
      _disabled: {
        bg: color5.background.input["outline-disabled"],
        opacity: opacity.input.disabled,
        borderColor: color5.border.input.disabled
      },
      _readOnly: {
        _focusVisible: {
          borderColor: color5.border.input.readonly,
          boxShadow: "none"
        },
        _hover: {
          borderColor: color5.border.input.readonly
        }
      }
    },
    stepperGroup: {
      width: "auto",
      paddingRight: spacing4.paddingRight["number-input"].stepper
    },
    stepper: {
      _first: {
        border: "none",
        borderTopRightRadius: borderRadius3["input-stepper"].default,
        borderRadius: borderRadius3["input-stepper"].default,
        bg: color5.background["input-stepper"].default,
        opacity: isReadOnly ? opacity.input.disabled : "auto",
        _hover: {
          bg: isReadOnly ? "none" : color5.background["input-stepper"].hover
        },
        _active: {
          bg: color5.background["input-stepper"].active
        },
        _disabled: {
          bg: color5.background["input-stepper"].disabled,
          color: color5.icon["input-stepper"].disabled
        }
      },
      _last: {
        border: "none",
        bg: color5.background["input-stepper"].default,
        borderBottomRightRadius: borderRadius3["input-stepper"].default,
        borderRadius: borderRadius3["input-stepper"].default,
        opacity: isReadOnly ? opacity.input.disabled : "auto",
        _hover: {
          bg: isReadOnly ? "none" : color5.background["input-stepper"].hover
        },
        _active: {
          bg: color5.background["input-stepper"].active
        },
        _disabled: {
          bg: color5.background["input-stepper"].disabled,
          color: color5.icon["input-stepper"].disabled
        }
      }
    }
  })
};
var NotificationIconButton$1 = {
  parts: ["container", "notifier"],
  sizes: {
    xs: {
      notifier: {
        top: "0.5",
        right: "0.5"
      }
    },
    sm: {
      notifier: {
        top: "0.5",
        right: "0.5"
      }
    },
    md: {
      notifier: {
        top: "1",
        right: "1"
      }
    },
    lg: {
      notifier: {
        top: "2",
        right: "2"
      }
    }
  },
  variants: {
    link: {
      notifier: {
        position: "absolute",
        top: "0",
        right: "0",
        zIndex: "base"
      }
    }
  },
  baseStyle: () => ({
    container: {
      position: "relative"
    },
    notifier: {
      position: "absolute",
      top: "1",
      right: "1",
      zIndex: "base"
    }
  })
};
var __defProp$1I = Object.defineProperty;
var __getOwnPropSymbols$1I = Object.getOwnPropertySymbols;
var __hasOwnProp$1I = Object.prototype.hasOwnProperty;
var __propIsEnum$1I = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1I = (obj, key2, value) => key2 in obj ? __defProp$1I(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1I = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1I.call(b2, prop2))
      __defNormalProp$1I(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1I)
    for (var prop2 of __getOwnPropSymbols$1I(b2)) {
      if (__propIsEnum$1I.call(b2, prop2))
        __defNormalProp$1I(a2, prop2, b2[prop2]);
    }
  return a2;
};
var Calendar$1 = {
  parts: ["container", "dateSelect", "dayLabel", "rangeCalendarContainer"],
  baseStyle: ({ theme: {
    space: spacing4,
    sizes: sizing2,
    colors: color5
  } }) => ({
    container: {
      p: spacing4[2],
      w: sizing2[64],
      bgColor: "background.default",
      border: "1px solid",
      borderColor: "border.input.default",
      borderRadius: "input.outline"
    },
    rangeCalendarContainer: {
      p: "3",
      w: "128",
      bgColor: "background.default",
      borderRadius: "input.outline"
    },
    dateSelect: __spreadValues$1I({
      fontWeight: "semibold",
      border: "none",
      padding: "1",
      borderRadius: "md",
      color: color5.text.default,
      bgColor: color5.background.button.ghost,
      _hover: {
        cursor: "pointer",
        bgColor: color5.background.button["ghost-hover"]
      },
      _active: {
        bgColor: color5.background.button["ghost-active"]
      }
    }, ring2),
    dayLabel: {
      color: color5.gray[600],
      fontSize: "xs",
      p: spacing4[2]
    }
  })
};
var DragAndDrop$1 = {
  parts: ["dropZone"],
  baseStyle: ({ sx }) => ({
    dropZone: (0, import_ramda.merge)({
      borderWidth: "sm",
      borderStyle: "dashed",
      borderColor: "border.default",
      padding: "4",
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      gap: "4",
      justifyContent: "center",
      textAlign: "center",
      minH: "56",
      minW: "56",
      bgColor: "bg.filled"
    }, sx)
  })
};
var DatePicker$1 = {
  parts: ["group", "styledField", "dateField", "dateSegment"],
  baseStyle: ({ theme: { colors: color5, opacity } }) => ({
    group: {
      position: "relative",
      alignItems: "center",
      flex: 1
    },
    styledField: {
      bgColor: "background.default",
      _focusWithin: {
        bgColor: color5.background.input["outline-focus"],
        borderColor: color5.border.textarea.focus,
        boxShadow: `0 0 0 1px ${color5.border.textarea.focus}`
      },
      _invalid: {
        boxShadow: `0 0 0 1px ${color5.border.input.error}`,
        borderColor: color5.border.input.error
      },
      _disabled: {
        bgColor: color5.background.input["outline-disabled"],
        borderColor: color5.border.input.disabled,
        opacity: opacity.input.disabled
      }
    },
    dateField: {
      width: "100%",
      height: "100%",
      alignItems: "center"
    },
    dateSegment: {
      caretColor: "transparent",
      boxSizing: "content-box",
      textAlign: "center",
      outline: "none",
      rounded: "md",
      _focus: {
        bgColor: "blue.500",
        color: color5.text.inverted
      },
      _placeholder: {
        color: "red.500"
      }
    }
  }),
  variants: {
    outline: ({
      theme: { colors: color5, radii: borderRadius3, borders: borderWidth }
    }) => ({
      styledField: {
        bgColor: color5.background.input["outline-default"],
        borderRadius: borderRadius3.input.outline,
        borderWidth: borderWidth.input.default,
        borderColor: color5.border.input.default
      }
    }),
    filled: ({
      theme: { colors: color5, radii: borderRadius3, borders: borderWidth }
    }) => ({
      styledField: {
        bgColor: color5.background.input["filled-default"],
        borderRadius: borderRadius3.input.filled,
        borderWidth: borderWidth.input.default,
        borderColor: color5.background.input["filled-default"]
      }
    })
  }
};
var FlipButton = {
  parts: ["container", "button", "buttonIcon"],
  sizes: {
    xs: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      button: {
        height: sizing2["flip-button"].xs,
        minWidth: sizing2["flip-button"].xs,
        paddingInlineStart: spacing4["padding-inline"]["flip-button"].xs,
        paddingInlineEnd: spacing4["padding-inline"]["flip-button"].xs,
        fontSize: "xs"
      },
      buttonIcon: {
        boxSize: sizing2.icon.xs
      }
    }),
    sm: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      button: {
        height: sizing2["flip-button"].sm,
        minWidth: sizing2["flip-button"].sm,
        paddingInlineStart: spacing4["padding-inline"]["flip-button"].md,
        paddingInlineEnd: spacing4["padding-inline"]["flip-button"].md,
        fontSize: "sm",
        buttonIcon: {
          boxSize: sizing2.icon.sm
        }
      }
    }),
    md: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      button: {
        height: sizing2["flip-button"].md,
        minWidth: sizing2["flip-button"].md,
        paddingInlineStart: spacing4["padding-inline"]["flip-button"].md,
        paddingInlineEnd: spacing4["padding-inline"]["flip-button"].md,
        fontSize: "md",
        buttonIcon: {
          boxSize: sizing2.icon.md
        }
      }
    }),
    lg: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      button: {
        height: sizing2["flip-button"].lg,
        minWidth: sizing2["flip-button"].lg,
        paddingInlineStart: spacing4["padding-inline"]["flip-button"].lg,
        paddingInlineEnd: spacing4["padding-inline"]["flip-button"].lg,
        fontSize: "lg",
        buttonIcon: {
          boxSize: sizing2.icon.lg
        }
      }
    })
  },
  baseStyle: ({ theme: {
    space: spacing4,
    sizes: sizing2,
    colors: color5,
    opacity,
    radii: borderRadius3,
    fontWeights: coreFontWeight
  }, numberOfButtons }) => ({
    container: {
      borderRadius: borderRadius3["flip-button"].default,
      paddingInlineStart: spacing4["padding-inline"]["flip-button-group"].default,
      paddingInlineEnd: spacing4["padding-inline"]["flip-button-group"].default,
      paddingY: spacing4.paddingY["flip-button-group"].default,
      disply: "grid",
      width: "100%",
      gap: spacing4["padding-inline"]["flip-button"].gap,
      gridTemplateColumns: `repeat(${numberOfButtons}, minmax(${sizing2[32]}, 1fr))`,
      gridTemplateRows: "1fr",
      overflowX: "auto"
    },
    button: {
      width: "100%",
      justifyContent: "center",
      alignItems: "center",
      color: color5.text["flip-button"].default,
      cursor: "pointer",
      borderRadius: borderRadius3["flip-button"].default,
      fontWeight: coreFontWeight.semiBold,
      _disabled: {
        opacity: opacity["flip-button"].disabled
      },
      _checked: {
        color: color5.text["flip-button"].inverted
      }
    }
  }),
  variants: {
    default: ({ theme: { colors: color5 }, sx }) => ({
      container: (0, import_ramda.merge)({
        bgColor: color5.background["flip-button"]["default-deselected-blue"]
      }, sx),
      button: {
        bgColor: color5.background["flip-button"]["default-deselected-blue"],
        _hover: {
          bgColor: color5.background["flip-button"]["hover-deselected-blue"]
        },
        _checked: {
          bgColor: color5.background["flip-button"]["default-selected-blue"],
          _hover: {
            bgColor: color5.background["flip-button"]["default-selected-blue"]
          }
        }
      }
    }),
    brand: ({ theme: { colors: color5 }, sx }) => ({
      container: (0, import_ramda.merge)({
        bgColor: color5.background["flip-button"]["default-deselected-brand"]
      }, sx),
      button: {
        bgColor: color5.background["flip-button"]["default-deselected-brand"],
        _hover: {
          bgColor: color5.background["flip-button"]["hover-deselected-brand"]
        },
        _checked: {
          bgColor: color5.background["flip-button"]["default-selected-brand"],
          _hover: {
            bgColor: color5.background["flip-button"]["default-selected-brand"]
          }
        }
      }
    }),
    ai: ({ theme: { colors: color5 }, sx }) => ({
      container: (0, import_ramda.merge)({
        bgColor: color5.background["flip-button"]["default-deselected-brand"]
      }, sx),
      button: {
        bgColor: "transparent",
        _hover: {
          bgColor: "transparent"
        },
        _checked: {
          bgColor: color5.bg.ai.default,
          _hover: {
            bgColor: color5.bg.ai.default
          }
        }
      }
    })
  },
  defaultProps: {
    size: "md",
    variant: "default"
  }
};
var Spinner2 = {
  baseStyle: ({ theme: { colors: color5, borders: borderWidth } }) => ({
    borderWidth: borderWidth.spinner.default,
    color: color5.background.spinner.thumb,
    borderBottomColor: color5.background.spinner.track,
    borderLeftColor: color5.background.spinner.track
  })
};
var possibleBgColors = getShades(400, 600);
var getAvatarBgColor = (image, name, color5) => {
  if (image)
    return color5.background.avatar.image;
  if (name)
    return randomColor({ string: name, colors: possibleBgColors });
  return color5.background.avatar.default;
};
var Avatar2 = {
  parts: ["container", "text", "badge", "icon"],
  sizes: {
    "2xs": ({ theme: { sizes: sizing2 } }) => ({
      container: {
        width: sizing2.avatar["2xs"],
        height: sizing2.avatar["2xs"]
      },
      text: {
        lineHeight: sizing2.avatar["2xs"],
        fontSize: "3xs"
      }
    }),
    xs: ({ theme: { sizes: sizing2 } }) => ({
      container: {
        width: sizing2.avatar.xs,
        height: sizing2.avatar.xs
      },
      text: {
        lineHeight: sizing2.avatar.xs,
        fontSize: "xs"
      }
    }),
    sm: ({ theme: { sizes: sizing2 } }) => ({
      container: {
        width: sizing2.avatar.sm,
        height: sizing2.avatar.sm
      },
      text: {
        lineHeight: sizing2.avatar.sm,
        fontSize: "sm"
      },
      icon: {
        boxSize: sizing2.avatar.sm
      }
    }),
    md: ({ theme: { sizes: sizing2 } }) => ({
      container: {
        width: sizing2.avatar.md,
        height: sizing2.avatar.md
      },
      text: {
        lineHeight: sizing2.avatar.md,
        fontSize: "md"
      },
      icon: {
        boxSize: sizing2.avatar.md
      }
    }),
    lg: ({ theme: { sizes: sizing2 } }) => ({
      container: {
        width: sizing2.avatar.lg,
        height: sizing2.avatar.lg
      },
      text: {
        lineHeight: sizing2.avatar.lg,
        fontSize: "lg"
      },
      icon: {
        boxSize: sizing2.avatar.lg
      }
    }),
    xl: ({ theme: { sizes: sizing2 } }) => ({
      container: {
        width: sizing2.avatar.xl,
        height: sizing2.avatar.xl
      },
      text: {
        lineHeight: sizing2.avatar.xl,
        fontSize: "2xl"
      }
    }),
    "2xl": ({ theme: { sizes: sizing2 } }) => ({
      container: {
        width: sizing2.avatar["2xl"],
        height: sizing2.avatar["2xl"]
      },
      text: {
        lineHeight: sizing2.avatar["2xl"],
        fontSize: "4xl"
      }
    })
  },
  baseStyle: ({ theme: {
    colors: color5,
    sizes: sizing2,
    radii: borderRadius3
  }, image, name }) => {
    const avatarBgColor = getAvatarBgColor(image, name, color5);
    return {
      container: {
        bgColor: avatarBgColor,
        color: getContrastColor(avatarBgColor),
        display: "grid",
        placeItems: "center",
        objectFit: "cover",
        position: "relative"
      },
      userImage: {
        width: "100%",
        height: "100%",
        objectFit: "cover"
      },
      badge: {
        position: "absolute",
        bottom: `-${sizing2["1"]}`,
        right: `-${sizing2["1"]}`,
        minWidth: sizing2["5"],
        height: sizing2["5"],
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        fontSize: "xs",
        fontWeight: "semibold",
        padding: sizing2["0a"],
        bgColor: color5.red["500"],
        color: color5.text.inverted,
        borderRadius: borderRadius3.avatar.square,
        border: "none"
      }
    };
  },
  variants: {
    square: ({ theme: { radii: borderRadius3 } }) => ({
      container: {
        aspectRatio: "1 / 1",
        borderRadius: borderRadius3.avatar.square,
        "> img": {
          borderRadius: borderRadius3.avatar.square,
          aspectRatio: "1 / 1"
        }
      },
      badge: {
        borderRadius: borderRadius3.avatar.square
      }
    }),
    rounded: ({ theme: { radii: borderRadius3 } }) => ({
      container: {
        aspectRatio: "1 / 1",
        borderRadius: borderRadius3.avatar.rounded,
        "> img": {
          borderRadius: borderRadius3.avatar.rounded,
          aspectRatio: "1 / 1"
        }
      },
      badge: {
        borderRadius: borderRadius3.avatar.rounded
      }
    })
  }
};
var CloseButton3 = {
  baseStyle: ({ theme: { colors: color5 } }) => ({
    color: color5.text.default,
    bgColor: color5.background.button.ghost,
    _hover: {
      bg: color5.background.button["ghost-hover"],
      _disabled: {
        bgColor: color5.background.button.ghost
      }
    },
    _active: {
      bgColor: color5.background.button["ghost-active"]
    },
    _focusVisible: {
      ring: "2px",
      ringColor: color5.border.wcag,
      ringOffset: "1px"
    }
  }),
  defaultProps: {
    size: "md"
  }
};
var Modal$1 = {
  parts: ["overlay", "closeButton", "dialog"],
  sizes: {
    huge: {
      dialog: {
        width: "90%",
        maxW: "96rem",
        aspectRatio: "16/9"
      }
    }
  },
  baseStyle: ({ theme: theme3 }) => {
    const {
      typography: { headings: { h4 } }
    } = theme3;
    return {
      overlay: {
        bgColor: "background.modal.overlay",
        backdropFilter: "blur(8px)"
      },
      closeButton: {
        top: 4,
        right: 4
      },
      dialog: {
        bgColor: "background.default",
        borderRadius: "modal.dialog"
      },
      header: {
        fontSize: h4.fontSize,
        paddingTop: "paddingTop.modal.header",
        paddingBottom: "paddingBottom.modal.header",
        border: "modal.header",
        borderBottomColor: "border.modal.header",
        borderBottomStyle: "solid"
      },
      body: {
        paddingTop: "paddingTop.modal.body",
        paddingBottom: "paddingBottom.modal.body"
      },
      footer: {
        paddingTop: "paddingTop.modal.footer",
        paddingBottom: "paddingBottom.modal.footer"
      }
    };
  }
};
var $arrowBg3 = cssVar2("popper-arrow-bg");
var $arrowBorder = cssVar2("popper-arrow-shadow-color");
var Tooltip$1 = {
  baseStyle: ({
    theme: { colors: color5, space: spacing4, radii: borderRadius3 }
  }) => ({
    color: color5.text.inverted,
    paddingInline: spacing4["padding-inline"].tooltip.default,
    paddingY: spacing4.paddingY.tooltip.default,
    borderRadius: borderRadius3.tooltip.default,
    backgroundColor: color5.background.tooltip.default,
    [$arrowBg3.variable]: color5.background.tooltip.default
  }),
  variants: {
    default: ({ theme: { colors: color5 } }) => ({
      bgColor: "bg.tertiary.default",
      color: color5.text.inverted,
      [$arrowBg3.variable]: color5.bg.tertiary.default,
      [$arrowBorder.variable]: color5.bg.tertiary.default
    }),
    success: ({ theme: { colors: color5 } }) => ({
      color: "text.over.success",
      bgColor: "success-alt",
      [$arrowBg3.variable]: color5["success-alt"]
    }),
    info: ({ theme: { colors: color5 } }) => ({
      color: "text.over.brand",
      bgColor: "brand-alt",
      [$arrowBg3.variable]: color5["brand-alt"]
    }),
    ghost: ({ theme: { colors: color5 } }) => ({
      color: "text.default",
      bgColor: color5.bg.base,
      borderWidth: "xs",
      borderColor: color5.border.default,
      [$arrowBorder.variable]: color5.border.default,
      borderStyle: "solid",
      [$arrowBg3.variable]: color5.bg.base
    }),
    warning: ({ theme: { colors: color5 } }) => ({
      color: "text.over.warning",
      bgColor: color5["info-alt"],
      [$arrowBg3.variable]: color5["info-alt"]
    }),
    danger: ({ theme: { colors: color5 } }) => ({
      color: "text.over.error",
      bgColor: color5["destructive-alt"],
      [$arrowBg3.variable]: color5["destructive-alt"]
    }),
    ai: ({ theme: { colors: color5 } }) => ({
      bgColor: color5.bg.ai.default,
      [$arrowBg3.variable]: color5.bg.ai.default
    })
  }
};
var Icon2 = {
  sizes: {
    xs: {
      boxSize: "icon.xs"
    },
    sm: {
      boxSize: "icon.sm"
    },
    md: {
      boxSize: "icon.md"
    },
    lg: {
      boxSize: "icon.lg"
    }
  },
  baseStyle: ({ boxSize, color: color5 }) => ({
    boxSize: boxSize || "icon.default",
    color: color5 || "inherit"
  })
};
var ClipboardInput$1 = {
  parts: ["button", "icon", "tooltip"],
  sizes: {
    sm: ({ theme: { sizes: sizing2, space: spacing4 } }) => ({
      button: {
        height: sizing2.button.xs,
        minWidth: sizing2.button.xs
      },
      icon: {
        boxSize: sizing2.icon.xs
      },
      tooltip: {
        paddingInline: spacing4["padding-inline"].tooltip.sm,
        paddingY: spacing4.paddingY.tooltip.sm
      }
    }),
    md: ({ theme: { sizes: sizing2 } }) => ({
      button: {
        height: sizing2.button.sm,
        minWidth: sizing2.button.sm
      },
      icon: {
        boxSize: sizing2.icon.sm
      }
    }),
    lg: ({ theme: { sizes: sizing2 } }) => ({
      button: {
        height: sizing2.button.md,
        minWidth: sizing2.button.md
      },
      icon: {
        boxSize: sizing2.icon.md
      }
    })
  }
};
var ColorPicker = {
  parts: ["colorButton", "trigger", "heading"],
  baseStyle: ({ theme: theme3, selectedColor }) => {
    const { sizes: sizing2, colors: color5 } = theme3;
    return {
      heading: {
        border: "none",
        paddingInlineStart: sizing2["4"],
        paddingInlineEnd: sizing2["2"],
        paddingBottom: sizing2["0"],
        fontSize: "md",
        fontWeight: "semibold"
      },
      trigger: {
        bgColor: selectedColor != null ? selectedColor : color5.background.button.default,
        color: selectedColor ? getContrastColor(selectedColor) : "unset",
        _hover: {
          bgColor: selectedColor != null ? selectedColor : color5.background.button["default-hover"]
        },
        _active: {
          bgColor: selectedColor != null ? selectedColor : color5.background.button["default-active"]
        }
      },
      colorButton: {
        height: sizing2.button.sm,
        minWidth: sizing2.button.sm,
        _hover: {
          ring: "2px",
          ringOffset: "1px",
          ringColor: `${color5.border.input["default-hover"]}`
        }
      }
    };
  },
  sizes: {
    sm: ({ theme: { sizes: sizing2 } }) => ({
      trigger: {
        height: sizing2.button.sm,
        minWidth: sizing2.button.sm
      }
    }),
    md: ({ theme: { sizes: sizing2 } }) => ({
      trigger: {
        height: sizing2.button.md,
        minWidth: sizing2.button.md
      }
    }),
    lg: ({ theme: { sizes: sizing2 } }) => ({
      trigger: {
        height: sizing2.button.lg,
        minWidth: sizing2.button.lg
      }
    })
  }
};
var Step$1 = {
  parts: ["step", "label", "description"],
  baseStyle: ({ theme: {
    colors: color5,
    fontWeights: fontWeights2,
    space: spacing4,
    borders: borderWidth
  } }) => ({
    step: {
      justifyContent: "start",
      alignItems: "start",
      bgColor: color5.background.step.default,
      borderTopWidth: borderWidth.step.default,
      borderColor: color5.border.step.default,
      borderBottom: "none",
      paddingInline: spacing4["padding-inline"].step.default,
      color: color5.text.subdued,
      _hover: {
        bgColor: color5.background.step.hover,
        borderColor: color5.border.step.hover
      },
      _disabled: {
        cursor: "not-allowed",
        _hover: { borderColor: color5.border.step.default }
      },
      _active: {
        bgColor: color5.background.step.active
      },
      _selected: {
        bgColor: color5.background.step.selected,
        borderColor: color5.border.step.selected,
        color: color5.border.step.selected,
        _hover: {
          borderColor: color5.border.step.selected,
          color: color5.border.step.selected
        }
      }
    },
    label: {
      color: "inherit",
      pt: spacing4.paddingTop.step.label,
      textAlign: "start",
      fontWeight: fontWeights2.bold
    },
    description: {
      textAlign: "start",
      fontWeight: fontWeights2.semiBold,
      color: color5.text.default
    }
  })
};
var StepList$1 = {
  baseStyle: ({ theme: { sizes: sizing2 }, tabs }) => ({
    display: "grid",
    width: "100%",
    gridTemplateColumns: `repeat(${tabs}, minmax(${sizing2[32]}, 1fr))`,
    gridTemplateRows: "1fr",
    overflowX: "auto",
    borderBottom: "none",
    paddingBottom: sizing2[2]
  })
};
var H1 = {
  baseStyle: ({ theme: theme3, sx }) => {
    const {
      colors: color5,
      typography: { headings: { h1 } }
    } = theme3;
    return (0, import_ramda.merge)({
      color: color5.text.default,
      fontFamily: h1.fontFamily,
      fontWeight: h1.fontWeight,
      lineHeight: h1.lineHeight,
      fontSize: h1.fontSize,
      letterSpacing: h1.letterSpacing,
      textTransform: h1.textCase
    }, sx);
  }
};
var H2 = {
  baseStyle: ({ theme: theme3, sx }) => {
    const {
      colors: color5,
      typography: { headings: { h2 } }
    } = theme3;
    return (0, import_ramda.merge)({
      color: color5.text.default,
      fontFamily: h2.fontFamily,
      fontWeight: h2.fontWeight,
      lineHeight: h2.lineHeight,
      fontSize: h2.fontSize,
      letterSpacing: h2.letterSpacing,
      textTransform: h2.textCase
    }, sx);
  }
};
var H3 = {
  baseStyle: ({ theme: theme3, sx }) => {
    const {
      colors: color5,
      typography: { headings: { h3 } }
    } = theme3;
    return (0, import_ramda.merge)({
      color: color5.text.default,
      fontFamily: h3.fontFamily,
      fontWeight: h3.fontWeight,
      lineHeight: h3.lineHeight,
      fontSize: h3.fontSize,
      letterSpacing: h3.letterSpacing,
      textTransform: h3.textCase
    }, sx);
  }
};
var H4 = {
  baseStyle: ({ theme: theme3, sx }) => {
    const {
      colors: color5,
      typography: { headings: { h4 } }
    } = theme3;
    return (0, import_ramda.merge)({
      color: color5.text.default,
      fontFamily: h4.fontFamily,
      fontWeight: h4.fontWeight,
      lineHeight: h4.lineHeight,
      fontSize: h4.fontSize,
      letterSpacing: h4.letterSpacing,
      textTransform: h4.textCase
    }, sx);
  }
};
var H5 = {
  baseStyle: ({ theme: theme3, sx }) => {
    const {
      colors: color5,
      typography: { headings: { h5 } }
    } = theme3;
    return (0, import_ramda.merge)({
      color: color5.text.default,
      fontFamily: h5.fontFamily,
      fontWeight: h5.fontWeight,
      lineHeight: h5.lineHeight,
      fontSize: h5.fontSize,
      letterSpacing: h5.letterSpacing,
      textTransform: h5.textCase
    }, sx);
  }
};
var H6 = {
  baseStyle: ({ theme: theme3, sx }) => {
    const {
      colors: color5,
      typography: { headings: { h6 } }
    } = theme3;
    return (0, import_ramda.merge)({
      color: color5.text.default,
      fontFamily: h6.fontFamily,
      fontWeight: h6.fontWeight,
      lineHeight: h6.lineHeight,
      fontSize: h6.fontSize,
      letterSpacing: h6.letterSpacing,
      textTransform: h6.textCase
    }, sx);
  }
};
var Blockquote = {
  baseStyle: ({ theme: theme3, sx }) => {
    const { blockquote } = theme3.typography.stylized;
    return (0, import_ramda.merge)({
      color: "text.default",
      fontFamily: blockquote.fontFamily,
      fontWeight: blockquote.fontWeight,
      lineHeight: blockquote.lineHeight,
      fontSize: blockquote.fontSize,
      letterSpacing: blockquote.letterSpacing,
      textTransform: blockquote.textCase
    }, sx);
  }
};
var Tiny = {
  baseStyle: ({ theme: theme3, sx }) => {
    const { tiny } = theme3.typography.stylized;
    return (0, import_ramda.merge)({
      color: "text.default",
      fontFamily: tiny.fontFamily,
      fontWeight: tiny.fontWeight,
      lineHeight: tiny.lineHeight,
      fontSize: tiny.fontSize,
      letterSpacing: tiny.letterSpacing,
      textTransform: tiny.textCase
    }, sx);
  }
};
var Capitalized = {
  baseStyle: ({ theme: theme3, sx }) => {
    const { CAPITALIZED } = theme3.typography.stylized;
    return (0, import_ramda.merge)({
      color: "text.default",
      fontFamily: CAPITALIZED.fontFamily,
      fontWeight: CAPITALIZED.fontWeight,
      lineHeight: CAPITALIZED.lineHeight,
      fontSize: CAPITALIZED.fontSize,
      letterSpacing: CAPITALIZED.letterSpacing,
      textTransform: CAPITALIZED.textCase
    }, sx);
  }
};
var Lead = {
  baseStyle: ({ theme: theme3, sx }) => {
    const { lead } = theme3.typography.stylized;
    return (0, import_ramda.merge)({
      color: "text.default",
      fontFamily: lead.fontFamily,
      fontWeight: lead.fontWeight,
      lineHeight: lead.lineHeight,
      fontSize: lead.fontSize,
      letterSpacing: lead.letterSpacing,
      textTransform: lead.textCase
    }, sx);
  }
};
var Small = {
  baseStyle: ({ theme: theme3, sx }) => {
    const { small } = theme3.typography.stylized;
    return (0, import_ramda.merge)({
      color: "text.default",
      fontFamily: small.fontFamily,
      fontWeight: small.fontWeight,
      lineHeight: small.lineHeight,
      fontSize: small.fontSize,
      letterSpacing: small.letterSpacing,
      textTransform: small.textCase
    }, sx);
  }
};
var P = {
  variants: {
    14: ({ theme: theme3, sx }) => {
      const { body14 } = theme3.typography.body;
      return (0, import_ramda.merge)({
        fontFamily: body14.fontFamily,
        fontWeight: body14.fontWeight,
        lineHeight: body14.lineHeight,
        fontSize: body14.fontSize,
        letterSpacing: body14.letterSpacing,
        textTransform: body14.textCase
      }, sx);
    },
    16: ({ theme: theme3, sx }) => {
      const { body16 } = theme3.typography.body;
      return (0, import_ramda.merge)({
        fontFamily: body16.fontFamily,
        fontWeight: body16.fontWeight,
        lineHeight: body16.lineHeight,
        fontSize: body16.fontSize,
        letterSpacing: body16.letterSpacing,
        textTransform: body16.textCase
      }, sx);
    }
  },
  baseStyle: {
    color: "text.default"
  }
};
var Label = {
  baseStyle: ({ theme: { sizes: sizing2 }, sx }) => (0, import_ramda.merge)({
    color: "inherit",
    width: "100%",
    maxWidth: "100%",
    marginBottom: sizing2[0],
    marginInlineStart: sizing2[0],
    marginEnd: sizing2[0],
    marginInlineEnd: sizing2[0]
  }, sx),
  sizes: {
    "2xs": ({ theme: theme3, sx }) => {
      const { tinyLabel } = theme3.typography.labels;
      return (0, import_ramda.merge)({
        fontFamily: tinyLabel.fontFamily,
        fontWeight: tinyLabel.fontWeight,
        lineHeight: tinyLabel.lineHeight,
        fontSize: tinyLabel.fontSize,
        letterSpacing: tinyLabel.letterSpacing,
        textTransform: tinyLabel.textCase
      }, sx);
    },
    xs: ({ theme: theme3, sx }) => {
      const { xsLabel } = theme3.typography.labels;
      return (0, import_ramda.merge)({
        fontFamily: xsLabel.fontFamily,
        fontWeight: xsLabel.fontWeight,
        lineHeight: xsLabel.lineHeight,
        fontSize: xsLabel.fontSize,
        letterSpacing: xsLabel.letterSpacing,
        textTransform: xsLabel.textCase
      }, sx);
    },
    sm: ({ theme: theme3, sx }) => {
      const { smLabel } = theme3.typography.labels;
      return (0, import_ramda.merge)({
        fontFamily: smLabel.fontFamily,
        fontWeight: smLabel.fontWeight,
        lineHeight: smLabel.lineHeight,
        fontSize: smLabel.fontSize,
        letterSpacing: smLabel.letterSpacing,
        textTransform: smLabel.textCase
      }, sx);
    },
    md: ({ theme: theme3, sx }) => {
      const { mdLabel } = theme3.typography.labels;
      return (0, import_ramda.merge)({
        fontFamily: mdLabel.fontFamily,
        fontWeight: mdLabel.fontWeight,
        lineHeight: mdLabel.lineHeight,
        fontSize: mdLabel.fontSize,
        letterSpacing: mdLabel.letterSpacing,
        textTransform: mdLabel.textCase
      }, sx);
    },
    lg: ({ theme: theme3, sx }) => {
      const { lgLabel } = theme3.typography.labels;
      return (0, import_ramda.merge)({
        fontFamily: lgLabel.fontFamily,
        fontWeight: lgLabel.fontWeight,
        lineHeight: lgLabel.lineHeight,
        fontSize: lgLabel.fontSize,
        letterSpacing: lgLabel.letterSpacing,
        textTransform: lgLabel.textCase
      }, sx);
    }
  }
};
var NumVal = {
  baseStyle: ({ theme: { sizes: sizing2 }, sx }) => (0, import_ramda.merge)(
    {
      color: "inherit",
      width: "100%",
      maxWidth: "100%",
      marginBottom: sizing2[0],
      marginInlineStart: sizing2[0],
      marginEnd: sizing2[0],
      marginInlineEnd: sizing2[0]
    },
    sx
  ),
  sizes: {
    "2xs": ({ theme: theme3, sx }) => {
      const { tinyMono } = theme3.typography.numVal;
      return (0, import_ramda.merge)(
        {
          fontFamily: tinyMono.fontFamily,
          fontWeight: tinyMono.fontWeight,
          lineHeight: tinyMono.lineHeight,
          fontSize: tinyMono.fontSize,
          letterSpacing: tinyMono.letterSpacing,
          textTransform: tinyMono.textCase,
          textDecoration: tinyMono.textDecoration
        },
        sx
      );
    },
    xs: ({ theme: theme3, sx }) => {
      const { xsMono } = theme3.typography.numVal;
      return (0, import_ramda.merge)(
        {
          fontFamily: xsMono.fontFamily,
          fontWeight: xsMono.fontWeight,
          lineHeight: xsMono.lineHeight,
          fontSize: xsMono.fontSize,
          letterSpacing: xsMono.letterSpacing,
          textTransform: xsMono.textCase,
          textDecoration: xsMono.textDecoration
        },
        sx
      );
    },
    sm: ({ theme: theme3, sx }) => {
      const { smMono } = theme3.typography.numVal;
      return (0, import_ramda.merge)(
        {
          fontFamily: smMono.fontFamily,
          fontWeight: smMono.fontWeight,
          lineHeight: smMono.lineHeight,
          fontSize: smMono.fontSize,
          letterSpacing: smMono.letterSpacing,
          textTransform: smMono.textCase,
          textDecoration: smMono.textDecoration
        },
        sx
      );
    },
    md: ({ theme: theme3, sx }) => {
      const { mdMono } = theme3.typography.numVal;
      return (0, import_ramda.merge)(
        {
          fontFamily: mdMono.fontFamily,
          fontWeight: mdMono.fontWeight,
          lineHeight: mdMono.lineHeight,
          fontSize: mdMono.fontSize,
          letterSpacing: mdMono.letterSpacing,
          textTransform: mdMono.textCase,
          textDecoration: mdMono.textDecoration
        },
        sx
      );
    },
    lg: ({ theme: theme3, sx }) => {
      const { lgMono } = theme3.typography.numVal;
      return (0, import_ramda.merge)(
        {
          fontFamily: lgMono.fontFamily,
          fontWeight: lgMono.fontWeight,
          lineHeight: lgMono.lineHeight,
          fontSize: lgMono.fontSize,
          letterSpacing: lgMono.letterSpacing,
          textTransform: lgMono.textCase,
          textDecoration: lgMono.textDecoration
        },
        sx
      );
    }
  }
};
var SplitPane$1 = {
  baseStyle: ({ minLeftWidth, minRightWidth, initialSplit, isOpen }) => ({
    display: "grid",
    overflow: "hidden",
    gridTemplateColumns: !isOpen ? "1fr" : `minmax(${minLeftWidth}%, var(--split-pos, ${initialSplit}%)) auto minmax(${minRightWidth}%, 1fr)`,
    alignItems: "stretch",
    justifyItems: "stretch",
    height: "100%",
    width: "100%"
  })
};
var PaneDivider$1 = {
  baseStyle: ({ theme: { colors: color5, sizes: sizing2 } }) => ({
    bgColor: color5.background["pane-divider"].default,
    zIndex: 300,
    cursor: "col-resize",
    height: "100%",
    width: sizing2[1],
    _hover: {
      outlineColor: color5.border["pane-divider"].hover,
      outlineWidth: sizing2["0a"],
      outlineStyle: "solid"
    },
    _active: {
      outlineColor: color5.border["pane-divider"].hover,
      outlineWidth: sizing2["0a"],
      outlineStyle: "solid"
    }
  })
};
var Carousel$1 = {
  parts: ["container", "arrow", "radio"],
  baseStyle: {
    container: {
      display: "grid",
      placeItems: "center",
      position: "relative",
      overflow: "hidden",
      width: "full",
      height: "full"
    },
    radio: {
      position: "absolute",
      bottom: "1",
      left: "50%",
      transform: "translateX(-50%)",
      overflowX: "scroll",
      maxWidth: "90%",
      padding: "2"
    },
    arrow: {
      position: "absolute",
      bottom: "0",
      height: "100%",
      cursor: "pointer"
    }
  }
};
var EditableText$1 = {
  parts: ["button", "icon", "controls", "preview", "input"],
  sizes: {
    sm: ({ isEditing, theme: { sizes: sizing2 } }) => ({
      button: {
        height: sizing2.button.xs,
        minWidth: sizing2.button.xs
      },
      icon: {
        boxSize: sizing2.icon.xs
      },
      controls: {
        width: !isEditing ? 6 : "3.25rem"
      },
      preview: {
        pt: 1
      },
      input: {
        paddingInlineEnd: 16,
        paddingRight: 16
      }
    }),
    md: ({ isEditing, theme: { sizes: sizing2 } }) => ({
      button: {
        height: sizing2.button.sm,
        minWidth: sizing2.button.sm
      },
      icon: {
        boxSize: sizing2.icon.sm
      },
      controls: {
        width: !isEditing ? 8 : "4.25rem"
      },
      preview: {
        pt: "7px"
      },
      input: {
        paddingInlineEnd: 20,
        paddingRight: 20
      }
    }),
    lg: ({ isEditing, theme: { sizes: sizing2 } }) => ({
      button: {
        height: sizing2.button.md,
        minWidth: sizing2.button.md
      },
      icon: {
        boxSize: sizing2.icon.md
      },
      controls: {
        width: !isEditing ? 10 : "5.25rem"
      },
      preview: {
        pt: "8px"
      },
      input: {
        paddingInlineEnd: 24,
        paddingRight: 24
      }
    })
  },
  baseStyle: ({ value }) => ({
    controls: {
      mr: 1
    },
    preview: {
      fontWeight: "semibold",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden",
      paddingTop: 0,
      paddingBottom: 0,
      color: (0, import_ramda.isNil)(value) || (0, import_ramda.isEmpty)(value) ? "text.subdued" : "text.default"
    },
    input: {
      fontWeight: "semibold"
    }
  })
};
var Toolbox$1 = {
  parts: ["container", "header", "body", "footer"],
  baseStyle: ({ theme: { sizes: sizing2 } }) => ({
    container: {
      position: "relative",
      bg: "text.inverted",
      h: "100vh",
      borderLeftWidth: "1px",
      borderLeftStyle: "solid",
      borderLeftColor: "gray.100"
    },
    header: {
      alignItems: "center",
      height: "16",
      borderBottomWidth: "1px",
      borderBottomStyle: "solid",
      borderBottomColor: "gray.100",
      pl: "4",
      pr: "16"
    },
    footer: {
      position: "absolute",
      bottom: "0",
      w: "full",
      p: "4",
      alignItems: "center",
      height: "16",
      borderTopWidth: "1px",
      borderTopStyle: "solid",
      borderTopColor: "gray.100"
    },
    body: {
      p: sizing2["4"],
      flexDirection: "column",
      w: "100%",
      h: "100%",
      maxH: `calc(100vh - ${sizing2["16"]} * 2)`,
      overflowY: "scroll"
    }
  }),
  sizes: {
    sm: {
      container: {
        w: "xs"
      }
    },
    md: {
      container: {
        w: "md"
      }
    },
    lg: {
      container: {
        w: "xl"
      }
    }
  }
};
var __defProp$1H2 = Object.defineProperty;
var __getOwnPropSymbols$1H2 = Object.getOwnPropertySymbols;
var __hasOwnProp$1H2 = Object.prototype.hasOwnProperty;
var __propIsEnum$1H2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1H2 = (obj, key2, value) => key2 in obj ? __defProp$1H2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1H2 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1H2.call(b2, prop2))
      __defNormalProp$1H2(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1H2)
    for (var prop2 of __getOwnPropSymbols$1H2(b2)) {
      if (__propIsEnum$1H2.call(b2, prop2))
        __defNormalProp$1H2(a2, prop2, b2[prop2]);
    }
  return a2;
};
var shakeAnimation = keyframes`
  0% { transform: translate(1px, 1px) rotate(0deg); }
  10% { transform: translate(-1px, -2px) rotate(-1deg); }
  20% { transform: translate(-3px, 0px) rotate(1deg); }
  30% { transform: translate(3px, 2px) rotate(0deg); }
  40% { transform: translate(1px, -1px) rotate(1deg); }
  50% { transform: translate(-1px, 2px) rotate(-1deg); }
  60% { transform: translate(-3px, 1px) rotate(0deg); }
  70% { transform: translate(3px, 1px) rotate(-1deg); }
  80% { transform: translate(-1px, -1px) rotate(1deg); }
  90% { transform: translate(1px, 2px) rotate(0deg); }
  100% { transform: translate(1px, -2px) rotate(-1deg); }
`;
var thickRing = {
  _focusVisible: {
    outline: "none",
    ring: "3px",
    ringColor: "border.wcag",
    ringOffset: "1px"
  }
};
var getBgColor = (currentTheme) => {
  switch (currentTheme) {
    case "webappTheme":
      return "blue.50";
    case "tottTheme":
      return "blue.900";
    default:
      return "bg.filled";
  }
};
var getInvalidColorStyles = (isInvalid, isImage = true, currentTheme = "webappTheme") => ({
  borderColor: isInvalid ? "red.500" : "gray.300",
  bgColor: isInvalid && "red.50",
  animation: isInvalid && `500ms ${shakeAnimation} ease`,
  _hover: isImage && {
    bgColor: isInvalid ? "red.50" : getBgColor(currentTheme),
    borderColor: isInvalid ? "red.500" : "blue.500"
  }
});
var getAiColorStyles = (isInvalid, isImage = true) => ({
  borderColor: isInvalid ? "red.500" : "gray.300",
  bgColor: isInvalid && "red.50",
  animation: isInvalid && `500ms ${shakeAnimation} ease`,
  _hover: isImage && {
    bgColor: isInvalid ? "red.50" : "bg.filled",
    borderColor: isInvalid ? "red.500" : "border.ai"
  }
});
var FilePicker$1 = {
  parts: ["filePicker", "fileItem", "multiFilePicker"],
  baseStyle: ({ theme: { sizes: sizes24, colors: colors3 }, hasLoaded, isImage, isInvalid, currentTheme }) => ({
    filePicker: __spreadValues$1H2(__spreadValues$1H2({
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "center",
      width: "full",
      height: "40",
      textAlign: "center",
      position: "relative",
      borderWidth: hasLoaded && isImage ? "0" : sizes24["0a"],
      borderStyle: "dashed",
      borderRadius: "lg"
    }, getInvalidColorStyles(isInvalid, isImage, currentTheme)), thickRing),
    multiFilePicker: __spreadValues$1H2(__spreadValues$1H2({
      width: "full",
      maxWidth: "inherit",
      height: "32",
      position: "relative",
      borderWidth: sizes24["0a"],
      borderStyle: "dashed",
      borderRadius: "lg"
    }, getInvalidColorStyles(isInvalid, void 0, currentTheme)), thickRing),
    fileItem: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "center",
      paddingX: "2",
      paddingY: "1",
      borderRadius: sizes24["2"],
      textAlign: "center",
      position: "relative",
      border: `2px solid ${colors3.gray["100"]}`,
      minHeight: "20"
    }
  }),
  variants: {
    ai: ({ isInvalid }) => ({
      filePicker: __spreadValues$1H2({}, getAiColorStyles(isInvalid)),
      multiFilePicker: __spreadValues$1H2({}, getAiColorStyles(isInvalid))
    })
  }
};
var Table$1 = {
  parts: ["table", "th", "td"],
  variants: {
    rounded: () => ({
      table: {
        borderSpacing: "0",
        borderCollapse: "separate",
        borderRadius: "md",
        borderColor: "border.default",
        borderWidth: "xs",
        px: "3"
      },
      th: {
        color: "text.subdued",
        fontWeight: "bold",
        textTransform: "none",
        fontSize: "sm"
      },
      td: {
        borderColor: "border.default",
        borderTopWidth: "xs"
      }
    })
  }
};
var Menu$12 = {
  parts: ["list", "item"],
  baseStyle: ({ theme: {
    colors: color5,
    radii: borderRadius3
  } }) => ({
    menu: {
      borderColor: color5.border.default
    },
    list: {
      px: "2",
      bgColor: color5.bg.base
    },
    item: {
      py: "2",
      color: color5.text.default,
      borderRadius: borderRadius3.select.default,
      bgColor: color5.bg.base,
      _hover: {
        bgColor: color5.background.button.default
      },
      _active: {
        bgColor: color5.background.button.default
      },
      _focus: {
        bgColor: color5.background.button.default
      },
      _checked: {
        fontWeight: "bold"
      }
    }
  }),
  variants: {
    compact: ({ theme: { colors: color5 } }) => ({
      item: {
        fontSize: "sm",
        color: color5.text.default
      }
    }),
    relaxed: ({ theme: { colors: color5 } }) => ({
      item: {
        py: "2",
        fontSize: "md",
        color: color5.text.default
      }
    })
  }
};
var Badge3 = {
  baseStyle: ({ colorScheme, theme: { colors: colors3 } }) => {
    const bgColor = colorScheme === "mediatoolBlue" ? colors3[colorScheme][100] : colors3[colorScheme] && colors3[colorScheme][100];
    const textColor = colorScheme === "mediatoolBlue" ? colors3[colorScheme][800] : colors3[colorScheme] && colors3[colorScheme][800];
    return {
      bgColor,
      color: textColor
    };
  },
  variants: {
    solid: ({ colorScheme, theme: { colors: colors3 } }) => {
      const bgColor = colorScheme === "mediatoolBlue" ? colors3[colorScheme][500] : colors3[colorScheme] && colors3[colorScheme][500];
      return {
        bgColor,
        color: getContrastColor(bgColor != null ? bgColor : useToken("colors", colorScheme))
      };
    },
    outline: ({ colorScheme, theme: { colors: colors3 } }) => {
      const textColor = colorScheme === "mediatoolBlue" ? colors3[colorScheme][500] : colors3[colorScheme] && colors3[colorScheme][700];
      return {
        bgColor: "mono.transparent",
        color: textColor
      };
    }
  }
};
var Popover2 = {
  parts: ["popper"],
  baseStyle: {
    popper: {
      zIndex: "popover"
    }
  }
};
var components3 = Object.freeze({
  __proto__: null,
  Alert: Alert3,
  Avatar: Avatar2,
  Badge: Badge3,
  Blinker,
  Blockquote,
  Breadcrumb: Breadcrumb3,
  Button: Button2,
  Calendar: Calendar$1,
  Capitalized,
  Carousel: Carousel$1,
  Checkbox: Checkbox3,
  ClipboardInput: ClipboardInput$1,
  CloseButton: CloseButton3,
  ColorPicker,
  DatePicker: DatePicker$1,
  DragAndDrop: DragAndDrop$1,
  EditableText: EditableText$1,
  FilePicker: FilePicker$1,
  FlipButton,
  H1,
  H2,
  H3,
  H4,
  H5,
  H6,
  Icon: Icon2,
  Input: Input7,
  Label,
  Lead,
  Link: Link4,
  Menu: Menu$12,
  Modal: Modal$1,
  NotificationIconButton: NotificationIconButton$1,
  NumVal,
  NumberInput: NumberInput$1,
  P,
  PaneDivider: PaneDivider$1,
  PinInput: PinInput$1,
  Popover: Popover2,
  Radio: Radio$1,
  Select: Select$1,
  Small,
  Spinner: Spinner2,
  SplitPane: SplitPane$1,
  Step: Step$1,
  StepList: StepList$1,
  Switch: Switch$1,
  Table: Table$1,
  Tabs: Tabs$1,
  Tag: Tag$1,
  Textarea: Textarea$1,
  Tiny,
  Toolbox: Toolbox$1,
  Tooltip: Tooltip$1
});
var __defProp$1G = Object.defineProperty;
var __defProps$p = Object.defineProperties;
var __getOwnPropDescs$p = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1G = Object.getOwnPropertySymbols;
var __hasOwnProp$1G = Object.prototype.hasOwnProperty;
var __propIsEnum$1G = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1G = (obj, key2, value) => key2 in obj ? __defProp$1G(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1G = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1G.call(b2, prop2))
      __defNormalProp$1G(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1G)
    for (var prop2 of __getOwnPropSymbols$1G(b2)) {
      if (__propIsEnum$1G.call(b2, prop2))
        __defNormalProp$1G(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$p = (a2, b2) => __defProps$p(a2, __getOwnPropDescs$p(b2));
var WebappSkin = {
  colors: __spreadProps$p(__spreadValues$1G(__spreadValues$1G({}, webapp.st.color), webappComponents.color), {
    text: __spreadValues$1G(__spreadValues$1G({}, webapp.st.color.text), webappComponents.color.text),
    border: __spreadValues$1G(__spreadValues$1G({}, webapp.st.color.border), webappComponents.color.border)
  }),
  sizes: webappComponents.sizing,
  space: webappComponents.spacing,
  radii: __spreadValues$1G(__spreadValues$1G({}, webapp.st.borderRadius), webappComponents.borderRadius),
  borders: __spreadValues$1G(__spreadValues$1G({}, webapp.st.borderWidth), webappComponents.borderWidth),
  opacity: webappComponents.opacity,
  typography,
  shadows: __spreadValues$1G({}, webapp.st.boxShadow)
};
var __defProp$1F = Object.defineProperty;
var __defProps$o = Object.defineProperties;
var __getOwnPropDescs$o = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1F = Object.getOwnPropertySymbols;
var __hasOwnProp$1F = Object.prototype.hasOwnProperty;
var __propIsEnum$1F = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1F = (obj, key2, value) => key2 in obj ? __defProp$1F(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1F = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1F.call(b2, prop2))
      __defNormalProp$1F(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1F)
    for (var prop2 of __getOwnPropSymbols$1F(b2)) {
      if (__propIsEnum$1F.call(b2, prop2))
        __defNormalProp$1F(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$o = (a2, b2) => __defProps$o(a2, __getOwnPropDescs$o(b2));
var TottSkin = {
  colors: __spreadProps$o(__spreadValues$1F(__spreadValues$1F({}, tott.st.color), tottComponents.color), {
    border: __spreadValues$1F(__spreadValues$1F({}, tott.st.color.border), tottComponents.color.border)
  }),
  sizes: tottComponents.sizing,
  space: tottComponents.spacing,
  radii: __spreadValues$1F(__spreadValues$1F({}, tott.st.borderRadius), tottComponents.borderRadius),
  borders: __spreadValues$1F(__spreadValues$1F({}, tott.st.borderWidth), tottComponents.borderWidth),
  opacity: tottComponents.opacity,
  typography,
  shadows: __spreadValues$1F({}, tott.st.boxShadow)
};
var __defProp$1E = Object.defineProperty;
var __getOwnPropSymbols$1E = Object.getOwnPropertySymbols;
var __hasOwnProp$1E = Object.prototype.hasOwnProperty;
var __propIsEnum$1E = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1E = (obj, key2, value) => key2 in obj ? __defProp$1E(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1E = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1E.call(b2, prop2))
      __defNormalProp$1E(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1E)
    for (var prop2 of __getOwnPropSymbols$1E(b2)) {
      if (__propIsEnum$1E.call(b2, prop2))
        __defNormalProp$1E(a2, prop2, b2[prop2]);
    }
  return a2;
};
var overrides = {
  config: {
    cssVarPrefix: ""
  },
  semanticTokens: {
    colors: {
      "chakra-body-text": {
        _light: "text.default",
        _dark: "text.inverted"
      }
    }
  },
  styles: {
    global: __spreadValues$1E({
      html: {
        scrollBehavior: "smooth"
      },
      body: {
        height: "100%"
      },
      "#app": {
        height: "100%"
      }
    }, scrollbarStyles)
  },
  fonts: {
    heading: "Inter, sans-serif",
    body: "Inter, sans-serif"
  },
  components: __spreadValues$1E({}, components3),
  colors: color,
  zIndices: zIndex,
  sizes: sizing,
  space: spacing,
  fontWeights,
  shadows: boxShadow,
  fontSizes: fontSize,
  lineHeights,
  radii: borderRadius,
  borderWidths: WebappSkin.borders
};
var theme2 = extendTheme(overrides, WebappSkin);
var tottTheme = extendTheme(overrides, TottSkin);
var __defProp$1D = Object.defineProperty;
var __getOwnPropSymbols$1D = Object.getOwnPropertySymbols;
var __hasOwnProp$1D = Object.prototype.hasOwnProperty;
var __propIsEnum$1D = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1D = (obj, key2, value) => key2 in obj ? __defProp$1D(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1D = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1D.call(b2, prop2))
      __defNormalProp$1D(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1D)
    for (var prop2 of __getOwnPropSymbols$1D(b2)) {
      if (__propIsEnum$1D.call(b2, prop2))
        __defNormalProp$1D(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1f = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1D.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1D)
    for (var prop2 of __getOwnPropSymbols$1D(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1D.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var hoverAndActiveStyles = {
  borderLeftColor: theme2.colors.border["pane-divider"].hover
};
var ResizeHandle = (0, import_react291.forwardRef)(
  (_a9, ref) => {
    var _b5 = _a9, { color: color5 } = _b5, rest = __objRest$1f(_b5, ["color"]);
    return import_react291.default.createElement(
      Box,
      __spreadValues$1D({
        ref,
        cursor: "col-resize",
        _hover: hoverAndActiveStyles,
        _active: hoverAndActiveStyles,
        transition: "border 250ms linear",
        h: "inherit",
        w: "1",
        borderLeftWidth: "lg",
        borderLeftStyle: "solid",
        borderColor: color5 != null ? color5 : "transparent",
        zIndex: "docked"
      }, rest)
    );
  }
);
var __defProp$1C = Object.defineProperty;
var __defProps$n = Object.defineProperties;
var __getOwnPropDescs$n = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1C = Object.getOwnPropertySymbols;
var __hasOwnProp$1C = Object.prototype.hasOwnProperty;
var __propIsEnum$1C = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1C = (obj, key2, value) => key2 in obj ? __defProp$1C(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1C = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1C.call(b2, prop2))
      __defNormalProp$1C(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1C)
    for (var prop2 of __getOwnPropSymbols$1C(b2)) {
      if (__propIsEnum$1C.call(b2, prop2))
        __defNormalProp$1C(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$n = (a2, b2) => __defProps$n(a2, __getOwnPropDescs$n(b2));
var Trigger = (props) => {
  const { isDisabled: isDisabled3, handleClick } = props;
  const ref = (0, import_react291.useRef)(null);
  const { buttonProps } = $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref);
  return import_react291.default.createElement(
    Button$1,
    __spreadProps$n(__spreadValues$1C({}, buttonProps), {
      ref,
      size: "sm",
      boxSize: 8,
      variant: "ghost",
      isDisabled: isDisabled3,
      onPointerDown: handleClick,
      pointerEvents: isDisabled3 ? "none" : "auto"
    }),
    import_react291.default.createElement(Icon$1, { as: SvgCalendarDuo })
  );
};
var __defProp$1B = Object.defineProperty;
var __defProps$m = Object.defineProperties;
var __getOwnPropDescs$m = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1B = Object.getOwnPropertySymbols;
var __hasOwnProp$1B = Object.prototype.hasOwnProperty;
var __propIsEnum$1B = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1B = (obj, key2, value) => key2 in obj ? __defProp$1B(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1B = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1B.call(b2, prop2))
      __defNormalProp$1B(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1B)
    for (var prop2 of __getOwnPropSymbols$1B(b2)) {
      if (__propIsEnum$1B.call(b2, prop2))
        __defNormalProp$1B(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$m = (a2, b2) => __defProps$m(a2, __getOwnPropDescs$m(b2));
var DateSegment = ({ segment, state: state2 }) => {
  const ref = (0, import_react291.useRef)(null);
  const { segmentProps } = $32489daedd52963e$export$1315d136e6f7581(segment, state2, ref);
  const isDivider = segment.type === "literal";
  const { dateSegment } = useMultiStyleConfig("DatePicker");
  const minWidth = `${String(segment.maxValue).length}ch`;
  return import_react291.default.createElement(
    Box,
    __spreadProps$m(__spreadValues$1B({}, segmentProps), {
      ref,
      __css: dateSegment,
      minWidth: isDivider ? 0 : minWidth,
      paddingInline: isDivider ? 0 : "0.25rem",
      color: segment.isPlaceholder ? "gray.500" : isDivider ? "text.subduded" : "text.default",
      fontSize: "md"
    }),
    segment.text
  );
};
var mapFormat = {
  y: "yyyy",
  m: "mm",
  d: "dd"
};
var formatQuery = (query) => mapFormat[(0, import_ramda.toLower)(query)[0]];
var delimeterIncluded = /([.,:;|\-/\\])/;
var __defProp$1A = Object.defineProperty;
var __defProps$l = Object.defineProperties;
var __getOwnPropDescs$l = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1A = Object.getOwnPropertySymbols;
var __hasOwnProp$1A = Object.prototype.hasOwnProperty;
var __propIsEnum$1A = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1A = (obj, key2, value) => key2 in obj ? __defProp$1A(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1A = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1A.call(b2, prop2))
      __defNormalProp$1A(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1A)
    for (var prop2 of __getOwnPropSymbols$1A(b2)) {
      if (__propIsEnum$1A.call(b2, prop2))
        __defNormalProp$1A(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$l = (a2, b2) => __defProps$l(a2, __getOwnPropDescs$l(b2));
var DateField = (props) => {
  const ref = (0, import_react291.useRef)(null);
  const state2 = $3c0fc76039f1c516$export$60e84778edff6d26(__spreadProps$l(__spreadValues$1A({}, props), {
    /* Hard coding the United Kingdom locale,
     this enforces using english characters e.g.
      yyyy and not other such as åååå or chinese, which prevents hard to predict bugs */
    locale: "en-GB",
    createCalendar: $64244302c3013299$export$dd0bbc9b26defe37
  }));
  const { dateField } = useMultiStyleConfig("DatePicker");
  const { fieldProps } = $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state2, ref);
  const { segments } = state2;
  const { dateFormat = "dd/mm/yyyy" } = props;
  const getMatchingSegment = (query, index5) => (0, import_ramda.find)(
    (segment) => segment.placeholder === formatQuery(query)
  )(segments) || __spreadProps$l(__spreadValues$1A({}, segments[index5]), { text: query });
  const sortedSegments = (0, import_ramda.split)(delimeterIncluded, dateFormat).map(
    (query, index5) => getMatchingSegment(query, index5)
  );
  return import_react291.default.createElement(
    Box,
    __spreadProps$l(__spreadValues$1A({}, fieldProps), {
      ref,
      display: "flex",
      __css: dateField,
      "data-testid": "date-field-test-id"
    }),
    sortedSegments.map((segment, i2) => {
      const id3 = `${segment.type}-${i2}`;
      return import_react291.default.createElement(DateSegment, { segment, state: state2, key: id3 });
    })
  );
};
var __defProp$1z = Object.defineProperty;
var __defProps$k = Object.defineProperties;
var __getOwnPropDescs$k = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1z = Object.getOwnPropertySymbols;
var __hasOwnProp$1z = Object.prototype.hasOwnProperty;
var __propIsEnum$1z = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1z = (obj, key2, value) => key2 in obj ? __defProp$1z(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1z = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1z.call(b2, prop2))
      __defNormalProp$1z(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1z)
    for (var prop2 of __getOwnPropSymbols$1z(b2)) {
      if (__propIsEnum$1z.call(b2, prop2))
        __defNormalProp$1z(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$k = (a2, b2) => __defProps$k(a2, __getOwnPropDescs$k(b2));
var __objRest$1e = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1z.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1z)
    for (var prop2 of __getOwnPropSymbols$1z(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1z.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var StyledField = (0, import_react291.forwardRef)(
  (_a9, ref) => {
    var _b5 = _a9, { isInvalid, isDisabled: isDisabled3, children, variant } = _b5, rest = __objRest$1e(_b5, ["isInvalid", "isDisabled", "children", "variant"]);
    const { styledField } = useMultiStyleConfig("DatePicker", { variant });
    return import_react291.default.createElement(
      Box,
      __spreadProps$k(__spreadValues$1z({}, rest), {
        ref,
        "aria-invalid": isInvalid,
        "aria-disabled": isDisabled3,
        display: "flex",
        alignItems: "center",
        h: 10,
        __css: styledField
      }),
      children
    );
  }
);
var __defProp$1y = Object.defineProperty;
var __getOwnPropSymbols$1y = Object.getOwnPropertySymbols;
var __hasOwnProp$1y = Object.prototype.hasOwnProperty;
var __propIsEnum$1y = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1y = (obj, key2, value) => key2 in obj ? __defProp$1y(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1y = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1y.call(b2, prop2))
      __defNormalProp$1y(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1y)
    for (var prop2 of __getOwnPropSymbols$1y(b2)) {
      if (__propIsEnum$1y.call(b2, prop2))
        __defNormalProp$1y(a2, prop2, b2[prop2]);
    }
  return a2;
};
var Table2 = (props) => import_react291.default.createElement(Table, __spreadValues$1y({}, props));
var __defProp$1x = Object.defineProperty;
var __defProps$j = Object.defineProperties;
var __getOwnPropDescs$j = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1x = Object.getOwnPropertySymbols;
var __hasOwnProp$1x = Object.prototype.hasOwnProperty;
var __propIsEnum$1x = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1x = (obj, key2, value) => key2 in obj ? __defProp$1x(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1x = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1x.call(b2, prop2))
      __defNormalProp$1x(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1x)
    for (var prop2 of __getOwnPropSymbols$1x(b2)) {
      if (__propIsEnum$1x.call(b2, prop2))
        __defNormalProp$1x(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$j = (a2, b2) => __defProps$j(a2, __getOwnPropDescs$j(b2));
var CalendarCell = ({
  state: state2,
  date,
  currentMonth
}) => {
  const ref = (0, import_react291.useRef)(null);
  const { cellProps, buttonProps, isSelected, formattedDate } = $36a0ac60f04457c5$export$136073280381448e(
    { date },
    state2,
    ref
  );
  const isToday = date.compare($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(state2.timeZone)) === 0;
  const isOutsideMonth = !$14e0f24ef4ac5c92$export$a18c89cbd24170ff(currentMonth, date);
  return import_react291.default.createElement(chakra.td, __spreadValues$1x({}, cellProps), import_react291.default.createElement(
    Button$1,
    __spreadProps$j(__spreadValues$1x({}, buttonProps), {
      ref,
      borderRadius: "xs",
      boxSize: 8,
      hidden: isOutsideMonth,
      size: "sm",
      fontWeight: "medium",
      variant: isSelected ? "brand" : "ghost",
      ring: isToday && !isSelected ? "1px" : "0px",
      ringColor: "blue.500"
    }),
    formattedDate
  ));
};
var DayLabels = (0, import_react291.memo)(({
  weekDays
}) => {
  const { dayLabel } = useMultiStyleConfig("Calendar");
  const weekDaysWithIds = weekDays.map((day, i2) => ({ label: day, _id: i2 }));
  return import_react291.default.createElement(chakra.tr, null, import_react291.default.createElement(chakra.th, null), weekDaysWithIds.map(({ label, _id }) => import_react291.default.createElement(chakra.th, { key: _id, __css: dayLabel }, label)));
});
var __defProp$1w = Object.defineProperty;
var __getOwnPropSymbols$1w = Object.getOwnPropertySymbols;
var __hasOwnProp$1w = Object.prototype.hasOwnProperty;
var __propIsEnum$1w = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1w = (obj, key2, value) => key2 in obj ? __defProp$1w(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1w = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1w.call(b2, prop2))
      __defNormalProp$1w(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1w)
    for (var prop2 of __getOwnPropSymbols$1w(b2)) {
      if (__propIsEnum$1w.call(b2, prop2))
        __defNormalProp$1w(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1d = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1w.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1w)
    for (var prop2 of __getOwnPropSymbols$1w(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1w.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var CalendarGrid = (0, import_react291.memo)(
  (_a9) => {
    var _b5 = _a9, { state: state2, locale } = _b5, rest = __objRest$1d(_b5, ["state", "locale"]);
    const startDate = state2.visibleRange.start;
    const { gridProps, headerProps, weekDays } = $e3031d1f8c9d64eb$export$cb95147730a423f5(rest, state2);
    const weeksInMonth = $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(startDate, locale);
    return import_react291.default.createElement(Table2, __spreadValues$1w({ variant: "unstyled" }, gridProps), import_react291.default.createElement(Thead, __spreadValues$1w({}, headerProps), import_react291.default.createElement(DayLabels, { weekDays })), import_react291.default.createElement(Tbody, null, (0, import_ramda.times)((weekIndex) => import_react291.default.createElement(Tr, { key: weekIndex }, state2.getDatesInWeek(weekIndex, startDate).map(
      (date) => date ? import_react291.default.createElement(
        CalendarCell,
        {
          key: date.day,
          state: state2,
          date,
          currentMonth: startDate
        }
      ) : import_react291.default.createElement(chakra.td, null)
    )), weeksInMonth)));
  }
);
var __defProp$1v = Object.defineProperty;
var __defProps$i = Object.defineProperties;
var __getOwnPropDescs$i = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1v = Object.getOwnPropertySymbols;
var __hasOwnProp$1v = Object.prototype.hasOwnProperty;
var __propIsEnum$1v = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1v = (obj, key2, value) => key2 in obj ? __defProp$1v(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1v = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1v.call(b2, prop2))
      __defNormalProp$1v(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1v)
    for (var prop2 of __getOwnPropSymbols$1v(b2)) {
      if (__propIsEnum$1v.call(b2, prop2))
        __defNormalProp$1v(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$i = (a2, b2) => __defProps$i(a2, __getOwnPropDescs$i(b2));
var __objRest$1c = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1v.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1v)
    for (var prop2 of __getOwnPropSymbols$1v(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1v.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var MonthButton = (_a9) => {
  var _b5 = _a9, { children } = _b5, rest = __objRest$1c(_b5, ["children"]);
  const ref = (0, import_react291.useRef)(null);
  const { buttonProps } = $701a24aa0da5b062$export$ea18c227d4417cc3(rest, ref);
  return import_react291.default.createElement(
    Button$1,
    __spreadProps$i(__spreadValues$1v({}, buttonProps), {
      boxSize: 8,
      size: "xs",
      variant: "ghost",
      ref
    }),
    children
  );
};
var months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
  "January"
];
var MonthSelect = ({ state: state2 }) => {
  const { dateSelect } = useMultiStyleConfig("Calendar");
  const selectedMonth = state2.visibleRange.start.month - 1;
  const onChange2 = (e) => {
    const index5 = Number(e.target.value);
    const diff = index5 - selectedMonth;
    state2.setFocusedDate(state2.visibleRange.start.add({ months: diff }));
  };
  return import_react291.default.createElement(
    Select,
    {
      id: "month",
      "aria-label": "Select Month",
      onChange: onChange2,
      value: selectedMonth,
      iconSize: "0px",
      size: "sm",
      variant: "unstyled",
      sx: dateSelect,
      w: "max-content",
      textAlign: "center"
    },
    months.map((month, i2) => import_react291.default.createElement("option", { value: i2 }, month))
  );
};
var YearSelect = ({
  onChange: onChange2,
  years
}) => {
  const { dateSelect } = useMultiStyleConfig("Calendar");
  return import_react291.default.createElement(
    Select,
    {
      id: "year",
      "aria-label": "Year",
      onChange: onChange2,
      value: 10,
      size: "sm",
      iconSize: "0px",
      variant: "unstyled",
      sx: dateSelect,
      w: "max-content"
    },
    years.map((year, i2) => import_react291.default.createElement("option", { key: year.formatted, value: i2 }, year.formatted))
  );
};
var useYearsCalendar = ({
  state: state2
}) => {
  const years = [];
  const formatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({ year: "numeric", month: "long" });
  for (let i2 = -10; i2 < 10; i2 += 1) {
    const date = state2.focusedDate.add({ years: i2 });
    years.push({
      value: date,
      formatted: formatter.format(date.toDate(state2.timeZone))
    });
  }
  return { years };
};
var useYearsRangeCalendar = ({
  state: state2
}) => {
  const years = [];
  for (let i2 = -10; i2 < 10; i2 += 1) {
    const date = state2.visibleRange.start.add({ years: i2 });
    years.push({
      value: date,
      formatted: `${date.year}`
    });
  }
  return { years };
};
var YearSelectCalendar = ({ state: state2 }) => {
  const { years } = useYearsCalendar({ state: state2 });
  const onChange2 = (e) => {
    const index5 = Number(e.target.value);
    const date = years[index5].value;
    state2.setFocusedDate(date);
  };
  return import_react291.default.createElement(YearSelect, { onChange: onChange2, years });
};
var YearSelectRangeCalendar = ({
  state: state2
}) => {
  const { years } = useYearsRangeCalendar({ state: state2 });
  const onChange2 = (e) => {
    const index5 = Number(e.target.value);
    const date = years[index5].value;
    state2.setFocusedDate(date);
  };
  return import_react291.default.createElement(YearSelect, { onChange: onChange2, years });
};
var getWeekNumberAtStartOfMonth = (year, month, weekDay) => {
  if (month === 1) {
    return weekDay > 3 ? 52 : 1;
  }
  const isLeapYear = year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  const daysInMonths = [
    0,
    31,
    isLeapYear ? 29 : 28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
  ];
  const totalDaysUntilMonth = daysInMonths.slice(1, month).reduce(import_ramda.add, 0);
  const weekNumber = Math.ceil(totalDaysUntilMonth / 7);
  return weekNumber;
};
var __defProp$1u = Object.defineProperty;
var __defProps$h = Object.defineProperties;
var __getOwnPropDescs$h = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1u = Object.getOwnPropertySymbols;
var __hasOwnProp$1u = Object.prototype.hasOwnProperty;
var __propIsEnum$1u = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1u = (obj, key2, value) => key2 in obj ? __defProp$1u(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1u = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1u.call(b2, prop2))
      __defNormalProp$1u(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1u)
    for (var prop2 of __getOwnPropSymbols$1u(b2)) {
      if (__propIsEnum$1u.call(b2, prop2))
        __defNormalProp$1u(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$h = (a2, b2) => __defProps$h(a2, __getOwnPropDescs$h(b2));
var RangeCell = ({
  state: state2,
  date,
  currentMonth,
  range: range2
}) => {
  const isOutsideMonth = !$14e0f24ef4ac5c92$export$a18c89cbd24170ff(currentMonth, date);
  if (isOutsideMonth)
    return import_react291.default.createElement(chakra.td, null);
  const ref = (0, import_react291.useRef)(null);
  const {
    cellProps,
    buttonProps,
    isSelected: baseIsSelected,
    formattedDate
  } = $36a0ac60f04457c5$export$136073280381448e({ date }, state2, ref);
  const isToday = date.compare($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(state2.timeZone)) === 0;
  const isHighlighted = range2 && date < range2.end && date > range2.start;
  const isSelected = range2 && !isHighlighted && ((0, import_ramda.equals)(date, range2.start) || (0, import_ramda.equals)(date, range2.end));
  return import_react291.default.createElement(chakra.td, __spreadValues$1u({}, cellProps), import_react291.default.createElement(
    chakra.button,
    __spreadProps$h(__spreadValues$1u({}, buttonProps), {
      type: "button",
      ref,
      borderRadius: "xs",
      bgColor: isHighlighted ? "brand-alt" : isSelected ? "blue.500" : "transparent",
      color: isSelected ? "text.inverted" : "text.default",
      fontSize: "sm",
      ring: isToday && !isSelected ? "1px" : "0px",
      ringColor: "blue.500",
      mx: "-1px",
      my: "0a",
      w: "8",
      h: "8",
      fontWeight: "medium",
      opacity: isSelected && !baseIsSelected ? "0.4" : "1",
      _focusVisible: {
        outline: "none",
        ring: "2px",
        ringColor: "border.wcag",
        ringOffset: "1px"
      },
      _hover: {
        bgColor: isSelected ? "blue.400" : "bg.filled",
        _disabled: {
          bgColor: "transparent"
        }
      },
      _disabled: {
        opacity: 0.3
      }
    }),
    formattedDate
  ));
};
var __defProp$1t = Object.defineProperty;
var __defProps$g = Object.defineProperties;
var __getOwnPropDescs$g = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1t = Object.getOwnPropertySymbols;
var __hasOwnProp$1t = Object.prototype.hasOwnProperty;
var __propIsEnum$1t = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1t = (obj, key2, value) => key2 in obj ? __defProp$1t(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1t = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1t.call(b2, prop2))
      __defNormalProp$1t(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1t)
    for (var prop2 of __getOwnPropSymbols$1t(b2)) {
      if (__propIsEnum$1t.call(b2, prop2))
        __defNormalProp$1t(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$g = (a2, b2) => __defProps$g(a2, __getOwnPropDescs$g(b2));
var __objRest$1b = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1t.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1t)
    for (var prop2 of __getOwnPropSymbols$1t(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1t.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var StandaloneCalendarGrid = (_a9) => {
  var _b5 = _a9, {
    state: state2,
    range: range2
  } = _b5, rest = __objRest$1b(_b5, [
    "state",
    "range"
  ]);
  const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  const { calendarProps, prevButtonProps, nextButtonProps } = $9942cad8a072a530$export$3ee915f8151bd4f1(
    {},
    state2
  );
  const startDate = state2.visibleRange.start;
  const { gridProps, headerProps, weekDays } = $e3031d1f8c9d64eb$export$cb95147730a423f5(rest, state2);
  const weeksInMonth = $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(startDate, locale);
  const weekNumberStart = (0, import_react291.useMemo)(
    () => getWeekNumberAtStartOfMonth(
      startDate.year,
      startDate.month,
      $14e0f24ef4ac5c92$export$2061056d06d7cdf7(startDate, locale)
    ),
    [startDate.year, startDate.month]
  );
  return import_react291.default.createElement(Box, __spreadProps$g(__spreadValues$1t({}, calendarProps), { h: "265px", p: "0" }), import_react291.default.createElement(Stack, null, import_react291.default.createElement(Flex, { justify: "space-between", w: "full", p: "1", alignItems: "center" }, import_react291.default.createElement(MonthButton, __spreadValues$1t({}, prevButtonProps), import_react291.default.createElement(Icon$1, { as: SvgChevronLeftSolid, boxSize: 4 })), import_react291.default.createElement(HStack, { spacing: "0" }, import_react291.default.createElement(MonthSelect, { state: state2 }), import_react291.default.createElement(YearSelectRangeCalendar, { state: state2 })), import_react291.default.createElement(MonthButton, __spreadValues$1t({}, nextButtonProps), import_react291.default.createElement(Icon$1, { as: SvgChevronRightSolid, boxSize: 4 }))), import_react291.default.createElement(chakra.table, __spreadProps$g(__spreadValues$1t({}, gridProps), { sx: { borderSpacing: "0" } }), import_react291.default.createElement(chakra.thead, __spreadValues$1t({}, headerProps), import_react291.default.createElement(DayLabels, { weekDays })), import_react291.default.createElement(chakra.tbody, null, (0, import_ramda.times)(
    (weekIndex) => {
      const weekNumber = weekNumberStart + weekIndex;
      return import_react291.default.createElement(chakra.tr, { key: weekIndex }, import_react291.default.createElement(chakra.td, null, import_react291.default.createElement(Small$1, { sx: { color: "text.subdued" }, pr: "2" }, "w.", weekNumber > 52 ? weekNumber - 52 : weekNumber)), state2.getDatesInWeek(weekIndex, startDate).map(
        (date) => date ? import_react291.default.createElement(
          RangeCell,
          {
            key: date.day,
            state: state2,
            range: range2,
            date,
            currentMonth: startDate
          }
        ) : import_react291.default.createElement(chakra.td, null)
      ));
    },
    weeksInMonth
  )))));
};
var __defProp$1s = Object.defineProperty;
var __defProps$f = Object.defineProperties;
var __getOwnPropDescs$f = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1s = Object.getOwnPropertySymbols;
var __hasOwnProp$1s = Object.prototype.hasOwnProperty;
var __propIsEnum$1s = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1s = (obj, key2, value) => key2 in obj ? __defProp$1s(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1s = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1s.call(b2, prop2))
      __defNormalProp$1s(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1s)
    for (var prop2 of __getOwnPropSymbols$1s(b2)) {
      if (__propIsEnum$1s.call(b2, prop2))
        __defNormalProp$1s(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$f = (a2, b2) => __defProps$f(a2, __getOwnPropDescs$f(b2));
var Calendar = (props) => {
  const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  const { container: container2 } = useMultiStyleConfig("Calendar");
  const state2 = $131cf43a05231e1e$export$6d095e787d2b5e1f(__spreadProps$f(__spreadValues$1s({}, props), {
    locale,
    createCalendar: () => new $3b62074eb05584b2$export$80ee6245ec4f29ec()
  }));
  const { calendarProps, prevButtonProps, nextButtonProps } = $9942cad8a072a530$export$3ee915f8151bd4f1(
    props,
    state2
  );
  return import_react291.default.createElement(Box, __spreadProps$f(__spreadValues$1s({}, calendarProps), { __css: container2 }), import_react291.default.createElement(Stack, null, import_react291.default.createElement(Flex, { justifyContent: "space-between" }, import_react291.default.createElement(Box, { paddingInlineStart: "2" }, import_react291.default.createElement(YearSelectCalendar, { state: state2 })), import_react291.default.createElement(HStack, { spacing: 2 }, import_react291.default.createElement(MonthButton, __spreadValues$1s({}, prevButtonProps), import_react291.default.createElement(Icon$1, { as: SvgChevronLeftSolid, boxSize: 4 })), import_react291.default.createElement(MonthButton, __spreadValues$1s({}, nextButtonProps), import_react291.default.createElement(Icon$1, { as: SvgChevronRightSolid, boxSize: 4 })))), import_react291.default.createElement(CalendarGrid, { state: state2, locale })));
};
var __defProp$1r = Object.defineProperty;
var __defProps$e = Object.defineProperties;
var __getOwnPropDescs$e = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1r = Object.getOwnPropertySymbols;
var __hasOwnProp$1r = Object.prototype.hasOwnProperty;
var __propIsEnum$1r = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1r = (obj, key2, value) => key2 in obj ? __defProp$1r(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1r = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1r.call(b2, prop2))
      __defNormalProp$1r(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1r)
    for (var prop2 of __getOwnPropSymbols$1r(b2)) {
      if (__propIsEnum$1r.call(b2, prop2))
        __defNormalProp$1r(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$e = (a2, b2) => __defProps$e(a2, __getOwnPropDescs$e(b2));
var DatePicker = (props) => {
  const {
    isDisabled: isDisabled3,
    isClearable = true,
    resetDate,
    isInvalid = false,
    dateFormat,
    minValue,
    variant = "outline"
  } = props;
  const ref = (0, import_react291.useRef)();
  const { group } = useMultiStyleConfig("DatePicker");
  const state2 = $ab5bf3f618090389$export$87194bb378cc3ac2(__spreadProps$e(__spreadValues$1r({}, props), {
    shouldCloseOnSelect: false,
    hideTimeZone: true
  }));
  const { buttonProps, fieldProps, calendarProps, groupProps, dialogProps } = $6057a3d2a53a12fd$export$42df105a73306d51(
    __spreadProps$e(__spreadValues$1r({}, props), { minValue: minValue || $fae977aafc393c5c$export$6b862160d295c8e("1994-03-08") }),
    state2,
    ref
  );
  const togglePopup = () => state2.setOpen(!state2.isOpen);
  return import_react291.default.createElement(
    Popover$1,
    {
      isOpen: state2.isOpen,
      onClose: () => state2.setOpen(false),
      placement: "bottom-end"
    },
    import_react291.default.createElement(PopoverAnchor, null, import_react291.default.createElement(HStack, { minW: 56 }, import_react291.default.createElement(InputGroup, __spreadProps$e(__spreadValues$1r({}, groupProps), { ref, __css: group }), import_react291.default.createElement(StyledField, { isDisabled: isDisabled3, isInvalid, variant }, import_react291.default.createElement(
      Box,
      {
        paddingInlineStart: "1a",
        paddingInlineEnd: 10
      },
      import_react291.default.createElement(
        DateField,
        __spreadProps$e(__spreadValues$1r({}, fieldProps), {
          dateFormat
        })
      )
    )), import_react291.default.createElement(
      InputRightElement,
      {
        sx: { height: "100%", paddingRight: "1" },
        zIndex: 0
      },
      import_react291.default.createElement(
        Trigger,
        __spreadProps$e(__spreadValues$1r({}, buttonProps), {
          isDisabled: isDisabled3,
          handleClick: togglePopup
        })
      )
    )), import_react291.default.createElement(
      IconButton2,
      {
        "aria-label": "reset-date",
        variant: "danger",
        size: "sm",
        fontSize: "xs",
        onClick: resetDate,
        hidden: !state2.dateValue || !isClearable,
        isDisabled: isDisabled3,
        icon: import_react291.default.createElement(Icon$1, { as: SvgXCloseSolid })
      }
    ))),
    state2.isOpen && import_react291.default.createElement(PopoverContent, __spreadProps$e(__spreadValues$1r({}, dialogProps), { ref, w: 64, border: "none" }), import_react291.default.createElement($9bf71ea28793e738$export$20e40289641fbbb6, { contain: true, restoreFocus: true }, import_react291.default.createElement(Calendar, __spreadValues$1r({}, calendarProps))))
  );
};
var __defProp$1q = Object.defineProperty;
var __getOwnPropSymbols$1q = Object.getOwnPropertySymbols;
var __hasOwnProp$1q = Object.prototype.hasOwnProperty;
var __propIsEnum$1q = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1q = (obj, key2, value) => key2 in obj ? __defProp$1q(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1q = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1q.call(b2, prop2))
      __defNormalProp$1q(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1q)
    for (var prop2 of __getOwnPropSymbols$1q(b2)) {
      if (__propIsEnum$1q.call(b2, prop2))
        __defNormalProp$1q(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1a = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1q.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1q)
    for (var prop2 of __getOwnPropSymbols$1q(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1q.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Clickable = (_a9) => {
  var _b5 = _a9, { href, linkProps } = _b5, rest = __objRest$1a(_b5, ["href", "linkProps"]);
  const clickable = useClickable(rest);
  return import_react291.default.createElement(import_react291.default.Fragment, null, !(0, import_ramda.isNil)(href) && import_react291.default.createElement(
    Link,
    __spreadValues$1q(__spreadValues$1q({
      as: Link3,
      _focusVisible: ring2,
      to: href,
      _hover: { textDecoration: "none" }
    }, linkProps), clickable)
  ), (0, import_ramda.isNil)(href) && import_react291.default.createElement(chakra.button, __spreadValues$1q({ _focusVisible: ring2 }, clickable)));
};
var DateButton = ({
  isActive,
  onClick,
  children
}) => import_react291.default.createElement(Flex, { maxW: "120px" }, import_react291.default.createElement(Clickable, { onClick }, import_react291.default.createElement(
  Label$1,
  {
    _hover: {
      fontWeight: "semibold"
    },
    sx: {
      color: isActive ? "background.button.brand" : "text.default",
      cursor: "pointer",
      fontWeight: isActive ? "semibold" : "regular"
    },
    _active: {
      fontWeight: "semibold"
    },
    h: "8"
  },
  children
)));
var validRange = (date, state2) => !date || (!state2.minValue || date.start >= state2.minValue) && (!state2.maxValue || date.end <= state2.maxValue) && date.end >= date.start;
var getQuickSelectOptions = (state2, locale, fiscalStartMonth, fiscalStartDay) => {
  const thisDay = $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(state2.timeZone);
  const startOfMonthWithDays = (date, { months: months2, days }) => {
    const start2 = date.add({ months: months2 }).set({ day: days });
    return start2;
  };
  const endOfMonthWithDays = (date, { months: months2, days }) => {
    const end2 = date.add({ months: months2 }).set({ day: days }).subtract({ days: 1 });
    return end2;
  };
  const thisWeek = {
    value: {
      start: $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(thisDay, locale),
      end: $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(thisDay, locale)
    },
    label: "This Week"
  };
  const lastWeek = {
    value: {
      start: $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(thisDay.subtract({ weeks: 1 }), locale),
      end: $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(thisDay.subtract({ weeks: 1 }), locale)
    },
    label: "Last Week"
  };
  const thisMonth = {
    value: {
      start: $14e0f24ef4ac5c92$export$a5a3b454ada2268e(thisDay),
      end: $14e0f24ef4ac5c92$export$a2258d9c4118825c(thisDay)
    },
    label: "This Month"
  };
  const lastMonth = {
    value: {
      start: $14e0f24ef4ac5c92$export$a5a3b454ada2268e(thisDay.subtract({ months: 1 })),
      end: $14e0f24ef4ac5c92$export$a2258d9c4118825c(thisDay.subtract({ months: 1 }))
    },
    label: "Last Month"
  };
  const thisYear = {
    value: {
      start: $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay),
      end: $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(thisDay)
    },
    label: "This Year"
  };
  const lastYear = {
    value: {
      start: $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay.subtract({ years: 1 })),
      end: $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(thisDay.subtract({ years: 1 }))
    },
    label: "Last Year"
  };
  const nextMonth = {
    value: {
      start: $14e0f24ef4ac5c92$export$a5a3b454ada2268e(thisDay.add({ months: 1 })),
      end: $14e0f24ef4ac5c92$export$a2258d9c4118825c(thisDay.add({ months: 1 }))
    },
    label: "Next Month"
  };
  const nextThreeMonths = {
    value: {
      start: $14e0f24ef4ac5c92$export$a5a3b454ada2268e(thisDay.add({ months: 1 })),
      end: $14e0f24ef4ac5c92$export$a2258d9c4118825c(thisDay.add({ months: 3 }))
    },
    label: "Next 3 Months"
  };
  const nextSixMonths = {
    value: {
      start: $14e0f24ef4ac5c92$export$a5a3b454ada2268e(thisDay.add({ months: 1 })),
      end: $14e0f24ef4ac5c92$export$a2258d9c4118825c(thisDay.add({ months: 6 }))
    },
    label: "Next 6 Months"
  };
  const nextYear = {
    value: {
      start: $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay.add({ years: 1 })),
      end: $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(thisDay.add({ years: 1 }))
    },
    label: "Next Year"
  };
  const offsetFiscalYear = thisDay.month < fiscalStartMonth || thisDay.month === fiscalStartMonth && thisDay.day < fiscalStartDay ? 1 : 0;
  const thisFiscalYear = {
    value: {
      start: startOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        { months: fiscalStartMonth, days: fiscalStartDay }
      ),
      end: endOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        { months: fiscalStartMonth + 12, days: fiscalStartDay }
      )
    },
    label: "This Fiscal Year"
  };
  const lastFiscalYear = {
    value: {
      start: startOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear + 1 }),
        {
          months: fiscalStartMonth,
          days: fiscalStartDay
        }
      ),
      end: endOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear + 1 }),
        {
          months: fiscalStartMonth + 12,
          days: fiscalStartDay
        }
      )
    },
    label: "Last Fiscal Year"
  };
  const yearToDate = {
    value: {
      start: startOfMonthWithDays($14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay), {
        months: fiscalStartMonth,
        days: fiscalStartDay
      }),
      end: thisDay
    },
    label: "Year to Date"
  };
  const F1 = {
    value: {
      start: startOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        {
          months: fiscalStartMonth,
          days: fiscalStartDay
        }
      ),
      end: endOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        {
          months: fiscalStartMonth + 3,
          days: fiscalStartDay
        }
      )
    },
    label: fiscalStartMonth === 0 ? "Q1" : "FQ1"
  };
  const F2 = {
    value: {
      start: startOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        {
          months: fiscalStartMonth + 3,
          days: fiscalStartDay
        }
      ),
      end: endOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        {
          months: fiscalStartMonth + 6,
          days: fiscalStartDay
        }
      )
    },
    label: fiscalStartMonth === 0 ? "Q2" : "FQ2"
  };
  const F3 = {
    value: {
      start: startOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        {
          months: fiscalStartMonth + 6,
          days: fiscalStartDay
        }
      ),
      end: endOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        {
          months: fiscalStartMonth + 9,
          days: fiscalStartDay
        }
      )
    },
    label: fiscalStartMonth === 0 ? "Q3" : "FQ3"
  };
  const F4 = {
    value: {
      start: startOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        {
          months: fiscalStartMonth + 9,
          days: fiscalStartDay
        }
      ),
      end: endOfMonthWithDays(
        $14e0f24ef4ac5c92$export$f91e89d3d0406102(thisDay).subtract({ years: offsetFiscalYear }),
        {
          months: fiscalStartMonth + 12,
          days: fiscalStartDay
        }
      )
    },
    label: fiscalStartMonth === 0 ? "Q4" : "FQ4"
  };
  const fiscalQuarters = [F1, F2, F3, F4];
  const fiscalYears = fiscalStartMonth === 0 ? [] : [thisFiscalYear, lastFiscalYear];
  const quickDates = [
    thisWeek,
    lastWeek,
    thisMonth,
    lastMonth,
    thisYear,
    yearToDate,
    lastYear,
    nextMonth,
    nextThreeMonths,
    nextSixMonths,
    nextYear,
    ...fiscalYears
  ];
  return { quickDates, fiscalQuarters };
};
var seperator = `1px solid ${color.gray["100"]}`;
var QuickSelect = ({
  state: state2,
  fiscalStartMonth = 0,
  fiscalStartDay = 0,
  locale = "",
  height = "2xs"
}) => {
  const { quickDates, fiscalQuarters } = (0, import_react291.useMemo)(
    () => getQuickSelectOptions(state2, locale, fiscalStartMonth, fiscalStartDay),
    []
  );
  const updateDate = (newDate) => () => {
    if (newDate) {
      state2.setValue(newDate);
      state2.setFocusedDateRange(newDate);
    }
  };
  const getIsActive = (newDate) => (0, import_ramda.equals)(state2.value, newDate.value);
  const shouldShow = (dates) => (0, import_ramda.any)((date) => validRange(date.value, state2), dates);
  return import_react291.default.createElement(Stack, { alignItems: "start", borderRight: seperator, pt: "2" }, import_react291.default.createElement(
    Stack,
    {
      h: height,
      overflowY: "hidden",
      pr: "4",
      _hover: { overflowY: "scroll" },
      w: "36",
      display: shouldShow(quickDates) ? "initial" : "none",
      mb: "4"
    },
    (0, import_ramda.map)(
      (quickDate) => validRange(quickDate.value, state2) && import_react291.default.createElement(Box, { minH: "20px", key: `quick-select-${quickDate.label}` }, import_react291.default.createElement(
        DateButton,
        {
          onClick: updateDate(quickDate.value),
          isActive: getIsActive(quickDate)
        },
        quickDate.label
      )),
      quickDates
    )
  ), import_react291.default.createElement(
    Box,
    {
      w: "50%",
      borderTop: seperator,
      display: shouldShow(fiscalQuarters) ? "initial" : "none"
    }
  ), import_react291.default.createElement(
    Flex,
    {
      justifyContent: "space-between",
      w: "full",
      pt: "2",
      pr: "4",
      display: shouldShow(fiscalQuarters) ? "flex" : "none"
    },
    (0, import_ramda.map)(
      (quarter) => validRange(quarter.value, state2) && import_react291.default.createElement(
        DateButton,
        {
          onClick: updateDate(quarter.value),
          isActive: getIsActive(quarter),
          key: `quick-select-${quarter.label}`
        },
        quarter.label
      ),
      fiscalQuarters
    )
  ));
};
var __defProp$1p = Object.defineProperty;
var __getOwnPropSymbols$1p = Object.getOwnPropertySymbols;
var __hasOwnProp$1p = Object.prototype.hasOwnProperty;
var __propIsEnum$1p = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1p = (obj, key2, value) => key2 in obj ? __defProp$1p(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1p = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1p.call(b2, prop2))
      __defNormalProp$1p(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1p)
    for (var prop2 of __getOwnPropSymbols$1p(b2)) {
      if (__propIsEnum$1p.call(b2, prop2))
        __defNormalProp$1p(a2, prop2, b2[prop2]);
    }
  return a2;
};
var focusRing = {
  borderWidth: "xs",
  borderRadius: "md",
  borderColor: "border.brand.hover",
  borderStyle: "solid"
};
var RangeCalendar = (props) => {
  const {
    onChange: setRange = import_ramda.identity,
    value,
    handleClose,
    resetDate,
    isClearable = true,
    fiscalStartMonth,
    fiscalStartDay,
    minValue,
    maxValue
  } = props;
  const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  const ref = (0, import_react291.useRef)(null);
  const { rangeCalendarContainer } = useMultiStyleConfig("Calendar");
  const calendarOneState = $131cf43a05231e1e$export$6d095e787d2b5e1f({
    value: value && value.start ? value.start : null,
    minValue,
    maxValue,
    onChange: (newVal) => {
      setRange({
        end: value && value.end && newVal <= value.end ? value.end : newVal,
        start: newVal
      });
    },
    locale,
    createCalendar: () => new $3b62074eb05584b2$export$80ee6245ec4f29ec()
  });
  const calendarTwoState = $131cf43a05231e1e$export$6d095e787d2b5e1f({
    value: value && value.end ? value.end : null,
    minValue,
    maxValue,
    onChange: (newVal) => {
      setRange({
        start: value && value.end && value.start <= newVal ? value.start : newVal,
        end: newVal
      });
    },
    locale,
    createCalendar: () => new $3b62074eb05584b2$export$80ee6245ec4f29ec()
  });
  const focusDateRange = (dateRange) => {
    if (dateRange && dateRange.start && dateRange.end) {
      calendarOneState.setFocusedDate(dateRange.start);
      calendarTwoState.setFocusedDate(dateRange.end);
    }
  };
  const state2 = {
    setValue: setRange,
    setFocusedDateRange: focusDateRange,
    value,
    timeZone: calendarOneState.timeZone,
    minValue,
    maxValue
  };
  const focusedStartMonthProps = value && value.start ? {} : focusRing;
  return import_react291.default.createElement(Box, { ref, __css: rangeCalendarContainer }, import_react291.default.createElement(Stack, null, import_react291.default.createElement(Flex, { gap: 4 }, import_react291.default.createElement(
    QuickSelect,
    {
      state: state2,
      locale,
      fiscalStartMonth,
      fiscalStartDay
    }
  ), import_react291.default.createElement(Stack, null, import_react291.default.createElement(HStack, { alignItems: "start", spacing: 8, h: "full", pt: "2" }, import_react291.default.createElement(Stack, __spreadValues$1p({ h: "full" }, focusedStartMonthProps), import_react291.default.createElement(Box, { p: "2" }, import_react291.default.createElement(Label$1, { size: "xs" }, "Start date:"), import_react291.default.createElement(
    StandaloneCalendarGrid,
    {
      state: calendarOneState,
      range: value
    }
  ))), import_react291.default.createElement(Stack, { h: "full", justify: "space-between" }, import_react291.default.createElement(Stack, { opacity: value && value.start ? "1" : "0.4" }, import_react291.default.createElement(Box, { p: "2" }, import_react291.default.createElement(Label$1, { size: "xs" }, "End date:"), import_react291.default.createElement(
    StandaloneCalendarGrid,
    {
      state: calendarTwoState,
      range: value
    }
  ))), import_react291.default.createElement(HStack, { pt: "2", alignSelf: "end" }, isClearable && import_react291.default.createElement(Button$1, { onClick: resetDate, variant: "ghost", size: "sm" }, "Clear"), import_react291.default.createElement(Button$1, { variant: "brand", onClick: handleClose, size: "sm" }, "Save"))))))));
};
var isValidDateRange = (value) => (0, import_ramda.is)(Object, value) && (0, import_ramda.has)("startDate", value) && (0, import_ramda.has)("endDate", value) && (0, import_ramda.is)(String, value.startDate) && (0, import_ramda.is)(String, value.endDate);
var __defProp$1o = Object.defineProperty;
var __defProps$d = Object.defineProperties;
var __getOwnPropDescs$d = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1o = Object.getOwnPropertySymbols;
var __hasOwnProp$1o = Object.prototype.hasOwnProperty;
var __propIsEnum$1o = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1o = (obj, key2, value) => key2 in obj ? __defProp$1o(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1o = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1o.call(b2, prop2))
      __defNormalProp$1o(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1o)
    for (var prop2 of __getOwnPropSymbols$1o(b2)) {
      if (__propIsEnum$1o.call(b2, prop2))
        __defNormalProp$1o(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$d = (a2, b2) => __defProps$d(a2, __getOwnPropDescs$d(b2));
var parseValue = (value) => {
  if (!isValidDateRange(value))
    return null;
  return { start: $fae977aafc393c5c$export$6b862160d295c8e(value.startDate), end: $fae977aafc393c5c$export$6b862160d295c8e(value.endDate) };
};
var PortalWrapper = ({
  renderInPortal,
  children
}) => {
  if (renderInPortal) {
    return import_react291.default.createElement(Portal, null, children);
  }
  return import_react291.default.createElement(import_react291.default.Fragment, null, children);
};
var DateRangePicker = (props) => {
  const {
    isDisabled: isDisabled3,
    isClearable = true,
    resetDate,
    isInvalid = false,
    dateFormat,
    fiscalStartMonth,
    fiscalStartDay,
    variant = "outline",
    onChange: onChangeCallback = import_ramda.identity,
    value,
    minValue = "1994-03-08",
    maxValue,
    renderInPortal = false
  } = props;
  const ref = (0, import_react291.useRef)();
  const { group } = useMultiStyleConfig("DatePicker");
  const parsedProps = {
    onChange: (date) => {
      onChangeCallback({
        startDate: date == null ? void 0 : date.start.toString(),
        endDate: date == null ? void 0 : date.end.toString()
      });
    },
    value: parseValue(value),
    minValue: (0, import_ramda.isNil)(minValue) ? void 0 : $fae977aafc393c5c$export$6b862160d295c8e(minValue),
    maxValue: (0, import_ramda.isNil)(maxValue) ? void 0 : $fae977aafc393c5c$export$6b862160d295c8e(maxValue)
  };
  const state2 = $93c38a5e28be6249$export$e50a61c1de9f574(__spreadProps$d(__spreadValues$1o(__spreadValues$1o({}, props), parsedProps), {
    shouldCloseOnSelect: false,
    hideTimeZone: true
  }));
  const {
    groupProps,
    startFieldProps,
    endFieldProps,
    buttonProps,
    dialogProps,
    calendarProps
  } = $887cac91b7cc8801$export$12fd5f0e9f4bb192(
    __spreadProps$d(__spreadValues$1o(__spreadValues$1o({}, props), parsedProps), {
      minValue: parsedProps.minValue || $fae977aafc393c5c$export$6b862160d295c8e("1994-03-08")
    }),
    state2,
    ref
  );
  const togglePopup = () => state2.setOpen(!state2.isOpen);
  const handleClose = () => {
    state2.setOpen(false);
  };
  return import_react291.default.createElement(
    Popover$1,
    {
      isOpen: state2.isOpen,
      onClose: handleClose,
      placement: "bottom-start"
    },
    import_react291.default.createElement(PopoverAnchor, null, import_react291.default.createElement(HStack, null, import_react291.default.createElement(InputGroup, __spreadProps$d(__spreadValues$1o({}, groupProps), { ref, __css: group }), import_react291.default.createElement(
      StyledField,
      {
        isDisabled: isDisabled3,
        isInvalid,
        variant
      },
      import_react291.default.createElement(HStack, { paddingInlineStart: "1a", paddingInlineEnd: 10 }, import_react291.default.createElement(DateField, __spreadProps$d(__spreadValues$1o({}, startFieldProps), { dateFormat })), import_react291.default.createElement(P$1, null, "-"), import_react291.default.createElement(DateField, __spreadProps$d(__spreadValues$1o({}, endFieldProps), { dateFormat })))
    ), import_react291.default.createElement(InputRightElement, { sx: { height: "100%", paddingRight: "1" } }, import_react291.default.createElement(
      Trigger,
      __spreadProps$d(__spreadValues$1o({}, buttonProps), {
        isDisabled: isDisabled3,
        handleClick: togglePopup
      })
    ))), import_react291.default.createElement(
      IconButton2,
      {
        "aria-label": "reset-date",
        variant: "danger",
        size: "sm",
        fontSize: "xs",
        onClick: resetDate,
        hidden: !isClearable,
        isDisabled: isDisabled3,
        icon: import_react291.default.createElement(Icon$1, { as: SvgXCloseSolid })
      }
    ))),
    import_react291.default.createElement(PortalWrapper, { renderInPortal }, state2.isOpen && import_react291.default.createElement(PopoverContent, __spreadProps$d(__spreadValues$1o({}, dialogProps), { ref, w: "max-content" }), import_react291.default.createElement($9bf71ea28793e738$export$20e40289641fbbb6, { contain: true, restoreFocus: true }, import_react291.default.createElement(
      RangeCalendar,
      __spreadProps$d(__spreadValues$1o({}, calendarProps), {
        resetDate,
        handleClose,
        fiscalStartMonth: fiscalStartMonth || 0,
        fiscalStartDay: fiscalStartDay || 0,
        isClearable
      })
    ))))
  );
};
var __defProp$1n = Object.defineProperty;
var __getOwnPropSymbols$1n = Object.getOwnPropertySymbols;
var __hasOwnProp$1n = Object.prototype.hasOwnProperty;
var __propIsEnum$1n = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1n = (obj, key2, value) => key2 in obj ? __defProp$1n(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1n = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1n.call(b2, prop2))
      __defNormalProp$1n(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1n)
    for (var prop2 of __getOwnPropSymbols$1n(b2)) {
      if (__propIsEnum$1n.call(b2, prop2))
        __defNormalProp$1n(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$19 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1n.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1n)
    for (var prop2 of __getOwnPropSymbols$1n(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1n.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var InputGroupWrapper = (_a9) => {
  var _b5 = _a9, {
    inputLeftElement,
    inputRightElement,
    children
  } = _b5, rest = __objRest$19(_b5, [
    "inputLeftElement",
    "inputRightElement",
    "children"
  ]);
  const containsInputGroupElement = (0, import_ramda.not)((0, import_ramda.all)(import_ramda.isNil, [inputLeftElement, inputRightElement]));
  return containsInputGroupElement ? import_react291.default.createElement(InputGroup, __spreadValues$1n({}, rest), inputLeftElement, children, inputRightElement) : import_react291.default.createElement(import_react291.default.Fragment, null, children);
};
var __defProp$1m = Object.defineProperty;
var __getOwnPropSymbols$1m = Object.getOwnPropertySymbols;
var __hasOwnProp$1m = Object.prototype.hasOwnProperty;
var __propIsEnum$1m = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1m = (obj, key2, value) => key2 in obj ? __defProp$1m(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1m = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1m.call(b2, prop2))
      __defNormalProp$1m(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1m)
    for (var prop2 of __getOwnPropSymbols$1m(b2)) {
      if (__propIsEnum$1m.call(b2, prop2))
        __defNormalProp$1m(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$18 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1m.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1m)
    for (var prop2 of __getOwnPropSymbols$1m(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1m.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var DatePickerField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    minValue,
    maxValue,
    isRequired,
    direction: direction2 = "column",
    label,
    validate: validate2,
    firstDayOfWeek = "monday",
    onChange: onChangeCallback = import_ramda.identity,
    inputLeftElement,
    inputRightElement
  } = _b5, rest = __objRest$18(_b5, [
    "name",
    "minValue",
    "maxValue",
    "isRequired",
    "direction",
    "label",
    "validate",
    "firstDayOfWeek",
    "onChange",
    "inputLeftElement",
    "inputRightElement"
  ]);
  const { setValue, setError, trigger: trigger2 } = useFormContext();
  const handleChange = (date) => {
    setValue(name, date == null ? void 0 : date.toString());
    if (minValue && date < $fae977aafc393c5c$export$6b862160d295c8e(minValue) || maxValue && date > $fae977aafc393c5c$export$6b862160d295c8e(maxValue)) {
      setError(name, {
        type: "custom",
        message: minValue && maxValue ? `Date must be between ${minValue}-${maxValue}` : minValue ? `Select date earliest at ${minValue}` : `Select date latest at ${maxValue}`
      });
    } else {
      trigger2(name);
    }
    onChangeCallback(date);
  };
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      validate: validate2,
      ref
    },
    ({ value, onChange: onChange2 }, { formState: { errors } }) => import_react291.default.createElement(
      InputGroupWrapper,
      {
        inputLeftElement,
        inputRightElement
      },
      import_react291.default.createElement(
        DatePicker,
        __spreadValues$1m({
          firstDayOfWeek,
          "aria-label": label,
          isInvalid: !!errors[name],
          onChange: handleChange,
          resetDate: () => onChange2(null),
          value: value ? $fae977aafc393c5c$export$6b862160d295c8e(value) : null,
          minValue: minValue ? $fae977aafc393c5c$export$6b862160d295c8e(minValue) : void 0,
          maxValue: maxValue ? $fae977aafc393c5c$export$6b862160d295c8e(maxValue) : void 0,
          validationState: errors.name ? "invalid" : "valid"
        }, rest)
      )
    )
  );
});
var __defProp$1l = Object.defineProperty;
var __getOwnPropSymbols$1l = Object.getOwnPropertySymbols;
var __hasOwnProp$1l = Object.prototype.hasOwnProperty;
var __propIsEnum$1l = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1l = (obj, key2, value) => key2 in obj ? __defProp$1l(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1l = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1l.call(b2, prop2))
      __defNormalProp$1l(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1l)
    for (var prop2 of __getOwnPropSymbols$1l(b2)) {
      if (__propIsEnum$1l.call(b2, prop2))
        __defNormalProp$1l(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$17 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1l.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1l)
    for (var prop2 of __getOwnPropSymbols$1l(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1l.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var DateRangePickerField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    minValue,
    maxValue,
    isRequired,
    direction: direction2 = "column",
    label,
    validate: validate2,
    firstDayOfWeek = "monday",
    onChange: onChangeCallback = import_ramda.identity,
    isClearable = true
  } = _b5, rest = __objRest$17(_b5, [
    "name",
    "minValue",
    "maxValue",
    "isRequired",
    "direction",
    "label",
    "validate",
    "firstDayOfWeek",
    "onChange",
    "isClearable"
  ]);
  const { setValue, setError, trigger: trigger2 } = useFormContext();
  const handleChange = (dateRange) => {
    setValue(name, dateRange);
    if (minValue && (dateRange == null ? void 0 : dateRange.startDate) < minValue || maxValue && (dateRange == null ? void 0 : dateRange.endDate) > maxValue) {
      setError(name, {
        type: "custom",
        message: minValue && maxValue ? `Date must be between ${minValue}-${maxValue}` : minValue ? `Select date earliest at ${minValue}` : `Select date latest at ${maxValue}`
      });
    } else {
      trigger2(name);
    }
    onChangeCallback(dateRange);
  };
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      validate: validate2,
      ref
    },
    ({ value, onChange: onChange2 }, { formState: { errors } }) => import_react291.default.createElement(
      DateRangePicker,
      __spreadValues$1l({
        firstDayOfWeek,
        "aria-label": label,
        isInvalid: !!errors[name],
        onChange: handleChange,
        resetDate: () => onChange2(null),
        value,
        minValue,
        maxValue,
        validationState: errors.name ? "invalid" : "valid",
        isClearable
      }, rest)
    )
  );
});
var toastIconMap = {
  success: SvgCheckCircleSolid,
  warning: SvgAlertTriangleSolid,
  error: SvgAlertCircleSolid,
  danger: SvgAlertCircleSolid,
  info: SvgBellSolid,
  ai: SvgBrightnessSolid,
  default: SvgHelpCircleSolid,
  ghost: SvgHelpCircleSolid
};
var __defProp$1k = Object.defineProperty;
var __getOwnPropSymbols$1k = Object.getOwnPropertySymbols;
var __hasOwnProp$1k = Object.prototype.hasOwnProperty;
var __propIsEnum$1k = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1k = (obj, key2, value) => key2 in obj ? __defProp$1k(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1k = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1k.call(b2, prop2))
      __defNormalProp$1k(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1k)
    for (var prop2 of __getOwnPropSymbols$1k(b2)) {
      if (__propIsEnum$1k.call(b2, prop2))
        __defNormalProp$1k(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$162 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1k.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1k)
    for (var prop2 of __getOwnPropSymbols$1k(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1k.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Tooltip2 = (_a9) => {
  var _b5 = _a9, {
    variant = "default",
    hasArrow = true,
    title = "",
    description = "",
    hasIcon = "true"
  } = _b5, rest = __objRest$162(_b5, [
    "variant",
    "hasArrow",
    "title",
    "description",
    "hasIcon"
  ]);
  const iconVariant = variant;
  const icon = toastIconMap[iconVariant];
  const TooltipContent = import_react291.default.createElement(HStack, { alignItems: "flex-start" }, hasIcon && import_react291.default.createElement(Icon$1, { as: icon, color: `icon.toast.${iconVariant}` }), import_react291.default.createElement(VStack, { spacing: 0, alignItems: "flex-start" }, import_react291.default.createElement(Label$1, { size: "sm" }, title), import_react291.default.createElement(
    P$1,
    {
      variant: "14",
      sx: {
        color: !variant || variant === "ai" || variant === "default" ? "text.inverted" : void 0
      }
    },
    description
  )));
  return import_react291.default.createElement(
    Tooltip,
    __spreadValues$1k({
      hasArrow,
      hasIcon,
      label: title || description ? TooltipContent : void 0,
      variant
    }, rest)
  );
};
var __defProp$1j = Object.defineProperty;
var __getOwnPropSymbols$1j = Object.getOwnPropertySymbols;
var __hasOwnProp$1j = Object.prototype.hasOwnProperty;
var __propIsEnum$1j = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1j = (obj, key2, value) => key2 in obj ? __defProp$1j(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1j = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1j.call(b2, prop2))
      __defNormalProp$1j(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1j)
    for (var prop2 of __getOwnPropSymbols$1j(b2)) {
      if (__propIsEnum$1j.call(b2, prop2))
        __defNormalProp$1j(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$15 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1j.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1j)
    for (var prop2 of __getOwnPropSymbols$1j(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1j.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var TimeoutProgressCircle = (_a9) => {
  var _b5 = _a9, {
    progress: progress4,
    ringColor = "border.error"
  } = _b5, rest = __objRest$15(_b5, [
    "progress",
    "ringColor"
  ]);
  const RADIUS = 22;
  const STROKE_WIDTH = 3;
  const SVG_SIZE = 2 * (RADIUS + STROKE_WIDTH);
  const CIRCUMFERENCE = 2 * Math.PI * RADIUS;
  const strokeDashoffset = CIRCUMFERENCE - progress4 / 100 * CIRCUMFERENCE;
  return import_react291.default.createElement(
    Circle,
    __spreadValues$1j({
      as: "svg",
      size: `${SVG_SIZE}px`,
      viewBox: `0 0 ${SVG_SIZE} ${SVG_SIZE}`,
      sx: {
        transform: "rotate(-90deg)"
      }
    }, rest),
    import_react291.default.createElement(
      chakra.circle,
      {
        cx: SVG_SIZE / 2,
        cy: SVG_SIZE / 2,
        r: RADIUS,
        fill: "transparent",
        stroke: "border.hover",
        strokeWidth: STROKE_WIDTH
      }
    ),
    import_react291.default.createElement(
      chakra.circle,
      {
        cx: SVG_SIZE / 2,
        cy: SVG_SIZE / 2,
        r: RADIUS,
        fill: "transparent",
        stroke: ringColor,
        strokeWidth: STROKE_WIDTH,
        strokeDasharray: CIRCUMFERENCE,
        strokeDashoffset,
        strokeLinecap: "round"
      }
    )
  );
};
var __defProp$1i = Object.defineProperty;
var __getOwnPropSymbols$1i = Object.getOwnPropertySymbols;
var __hasOwnProp$1i = Object.prototype.hasOwnProperty;
var __propIsEnum$1i = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1i = (obj, key2, value) => key2 in obj ? __defProp$1i(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1i = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1i.call(b2, prop2))
      __defNormalProp$1i(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1i)
    for (var prop2 of __getOwnPropSymbols$1i(b2)) {
      if (__propIsEnum$1i.call(b2, prop2))
        __defNormalProp$1i(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$14 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1i.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1i)
    for (var prop2 of __getOwnPropSymbols$1i(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1i.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var IntentButton = (_a9) => {
  var _b5 = _a9, {
    icon = SvgTrashDuo,
    timeout = 1e3,
    ringColor = "border.error",
    onTimeout = () => {
    },
    tooltipText = "Hold to Delete",
    "aria-label": ariaLabel = "confirm delete"
  } = _b5, rest = __objRest$14(_b5, [
    "icon",
    "timeout",
    "ringColor",
    "onTimeout",
    "tooltipText",
    "aria-label"
  ]);
  const [progress4, setProgress] = (0, import_react291.useState)(0);
  const [isHovering, setIsHovering] = (0, import_react291.useState)(false);
  const timerRef = (0, import_react291.useRef)(void 0);
  const clearTimer = () => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = void 0;
    }
    setProgress(0);
  };
  (0, import_react291.useEffect)(() => clearTimer, []);
  const startTimer = () => {
    clearTimer();
    const startTime = Date.now();
    timerRef.current = setInterval(() => {
      const elapsedTime = Date.now() - startTime;
      const updatedProgress = elapsedTime / timeout * 100;
      if (updatedProgress >= 100) {
        clearInterval(timerRef.current);
        onTimeout();
      } else {
        setProgress(updatedProgress);
      }
    }, 10);
  };
  const handleMouseEnter = () => {
    setIsHovering(true);
  };
  const handleMouseLeave = () => {
    setIsHovering(false);
    clearTimer();
  };
  return import_react291.default.createElement(Tooltip2, { label: tooltipText, placement: "top" }, import_react291.default.createElement(
    Center,
    __spreadValues$1i({
      position: "relative",
      cursor: "pointer",
      onMouseDown: startTimer,
      onMouseUp: clearTimer,
      onMouseLeave: handleMouseLeave,
      onMouseEnter: handleMouseEnter,
      boxSize: "50px",
      opacity: `${(100 - progress4) / 100}`
    }, rest),
    import_react291.default.createElement(
      IconButton2,
      {
        icon: import_react291.default.createElement(Icon$1, { as: icon }),
        size: "md",
        "aria-label": ariaLabel,
        variant: "ghost"
      }
    ),
    isHovering && import_react291.default.createElement(
      TimeoutProgressCircle,
      {
        ringColor,
        progress: progress4,
        position: "absolute",
        top: "0",
        left: "0"
      }
    )
  ));
};
var defaultFadeDelay = 250;
var defaultOffset3 = 20;
var unFocusStyles = { tabIndex: "-1" };
var getChildrenWithFocus = (children, disableFocus, show) => show ? children : disableFocus ? getChildrenWithProps(children, unFocusStyles) : children;
var getDuration = (enterDuration, exitDuration, duration) => {
  const inDuration = enterDuration || duration || defaultFadeDelay;
  const outDuration = exitDuration || duration || defaultFadeDelay;
  const transition3 = {
    enter: {
      duration: inDuration / 1e3
    },
    exit: {
      duration: outDuration / 1e3
    }
  };
  return transition3;
};
var getOffsets = (direction2, offset3, offsetX, offsetY) => {
  if (offsetX || offsetY) {
    return { offsetX, offsetY };
  }
  if (direction2) {
    const delta2 = offset3 || defaultOffset3;
    switch (direction2) {
      case "right":
        return { offsetX: delta2, offsetY: 0 };
      case "left":
        return { offsetX: -delta2, offsetY: 0 };
      case "top":
        return { offsetX: 0, offsetY: -delta2 };
      case "bottom":
        return { offsetX: 0, offsetY: delta2 };
    }
  }
  return { offsetX: defaultOffset3, offsetY: defaultOffset3 };
};
var useDelay = (show, enterDelay, exitDelay) => {
  const [showWithDelay, setShowWithDelay] = (0, import_react291.useState)(false);
  (0, import_react291.useEffect)(() => {
    const ref = setTimeout(
      () => setShowWithDelay(show),
      show ? enterDelay : exitDelay
    );
    return () => clearTimeout(ref);
  }, [show]);
  return showWithDelay;
};
var useHiddenDisplay = (anchor = false, exitDelay = 0, exitDuration = 0, duration = 0, onTransitionComplete = import_ramda.identity) => {
  const [hidden, setHidden] = (0, import_react291.useState)(anchor);
  (0, import_react291.useEffect)(() => {
    const ref = setTimeout(() => {
      setHidden(anchor);
      onTransitionComplete(anchor);
    }, exitDelay + (exitDuration || duration || 0));
    return () => clearTimeout(ref);
  }, [anchor]);
  return hidden;
};
var __defProp$1h = Object.defineProperty;
var __getOwnPropSymbols$1h = Object.getOwnPropertySymbols;
var __hasOwnProp$1h = Object.prototype.hasOwnProperty;
var __propIsEnum$1h = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1h = (obj, key2, value) => key2 in obj ? __defProp$1h(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1h = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1h.call(b2, prop2))
      __defNormalProp$1h(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1h)
    for (var prop2 of __getOwnPropSymbols$1h(b2)) {
      if (__propIsEnum$1h.call(b2, prop2))
        __defNormalProp$1h(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$13 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1h.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1h)
    for (var prop2 of __getOwnPropSymbols$1h(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1h.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Fade3 = (_a9) => {
  var _b5 = _a9, {
    children,
    enterDuration = null,
    exitDuration = null,
    duration = null,
    in: show = false,
    disableFocus = true,
    hideDisplay = false,
    enterDelay = 0,
    exitDelay = 0,
    onTransitionComplete = import_ramda.identity
  } = _b5, rest = __objRest$13(_b5, [
    "children",
    "enterDuration",
    "exitDuration",
    "duration",
    "in",
    "disableFocus",
    "hideDisplay",
    "enterDelay",
    "exitDelay",
    "onTransitionComplete"
  ]);
  const transition3 = getDuration(enterDuration, exitDuration, duration);
  const showWithDelay = useDelay(show, enterDelay, exitDelay);
  const isHidden3 = useHiddenDisplay(show, exitDelay, exitDuration, duration, onTransitionComplete);
  const childrenWithProps = getChildrenWithFocus(children, disableFocus, isHidden3);
  return import_react291.default.createElement(
    Fade,
    __spreadValues$1h({
      in: showWithDelay,
      transition: transition3,
      unmountOnExit: hideDisplay
    }, rest),
    childrenWithProps
  );
};
var __defProp$1g = Object.defineProperty;
var __getOwnPropSymbols$1g = Object.getOwnPropertySymbols;
var __hasOwnProp$1g = Object.prototype.hasOwnProperty;
var __propIsEnum$1g = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1g = (obj, key2, value) => key2 in obj ? __defProp$1g(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1g = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1g.call(b2, prop2))
      __defNormalProp$1g(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1g)
    for (var prop2 of __getOwnPropSymbols$1g(b2)) {
      if (__propIsEnum$1g.call(b2, prop2))
        __defNormalProp$1g(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$12 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1g.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1g)
    for (var prop2 of __getOwnPropSymbols$1g(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1g.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ScaleFade3 = (_a9) => {
  var _b5 = _a9, {
    children,
    enterDuration = null,
    exitDuration = null,
    duration = null,
    in: show = false,
    disableFocus = true,
    hideDisplay = false,
    enterDelay = 0,
    exitDelay = 0,
    onTransitionComplete = import_ramda.identity
  } = _b5, rest = __objRest$12(_b5, [
    "children",
    "enterDuration",
    "exitDuration",
    "duration",
    "in",
    "disableFocus",
    "hideDisplay",
    "enterDelay",
    "exitDelay",
    "onTransitionComplete"
  ]);
  const transition3 = getDuration(enterDuration, exitDuration, duration);
  const showWithDelay = useDelay(show, enterDelay, exitDelay);
  const isHidden3 = useHiddenDisplay(show, exitDelay, exitDuration, duration, onTransitionComplete);
  const childrenWithProps = getChildrenWithFocus(children, disableFocus, isHidden3);
  return import_react291.default.createElement(
    ScaleFade,
    __spreadValues$1g({
      in: showWithDelay,
      transition: transition3,
      unmountOnExit: hideDisplay
    }, rest),
    childrenWithProps
  );
};
var __defProp$1f = Object.defineProperty;
var __getOwnPropSymbols$1f = Object.getOwnPropertySymbols;
var __hasOwnProp$1f = Object.prototype.hasOwnProperty;
var __propIsEnum$1f = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1f = (obj, key2, value) => key2 in obj ? __defProp$1f(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1f = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1f.call(b2, prop2))
      __defNormalProp$1f(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1f)
    for (var prop2 of __getOwnPropSymbols$1f(b2)) {
      if (__propIsEnum$1f.call(b2, prop2))
        __defNormalProp$1f(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$11 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1f.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1f)
    for (var prop2 of __getOwnPropSymbols$1f(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1f.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Slide3 = (_a9) => {
  var _b5 = _a9, {
    children,
    enterDuration = null,
    exitDuration = null,
    duration = null,
    in: show = false,
    disableFocus = true,
    hideDisplay = false,
    enterDelay = 0,
    exitDelay = 0,
    direction: direction2 = "bottom",
    onTransitionComplete = import_ramda.identity
  } = _b5, rest = __objRest$11(_b5, [
    "children",
    "enterDuration",
    "exitDuration",
    "duration",
    "in",
    "disableFocus",
    "hideDisplay",
    "enterDelay",
    "exitDelay",
    "direction",
    "onTransitionComplete"
  ]);
  const transition3 = getDuration(enterDuration, exitDuration, duration);
  const showWithDelay = useDelay(show, enterDelay, exitDelay);
  const isHidden3 = useHiddenDisplay(show, exitDelay, exitDuration, duration, onTransitionComplete);
  const childrenWithProps = getChildrenWithFocus(children, disableFocus, isHidden3);
  return import_react291.default.createElement(
    Slide,
    __spreadValues$1f({
      in: showWithDelay,
      transition: transition3,
      direction: direction2,
      unmountOnExit: hideDisplay
    }, rest),
    childrenWithProps
  );
};
var __defProp$1e = Object.defineProperty;
var __getOwnPropSymbols$1e = Object.getOwnPropertySymbols;
var __hasOwnProp$1e = Object.prototype.hasOwnProperty;
var __propIsEnum$1e = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1e = (obj, key2, value) => key2 in obj ? __defProp$1e(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1e = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1e.call(b2, prop2))
      __defNormalProp$1e(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1e)
    for (var prop2 of __getOwnPropSymbols$1e(b2)) {
      if (__propIsEnum$1e.call(b2, prop2))
        __defNormalProp$1e(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$10 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1e.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1e)
    for (var prop2 of __getOwnPropSymbols$1e(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1e.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SlideFade3 = (_a9) => {
  var _b5 = _a9, {
    children,
    enterDuration = null,
    exitDuration = null,
    duration = null,
    in: show = false,
    disableFocus = true,
    hideDisplay = false,
    direction: direction2 = "bottom",
    offset: delta2 = defaultOffset3,
    offsetX: deltaX = 0,
    offsetY: deltaY = 0,
    enterDelay = 0,
    exitDelay = 0,
    onTransitionComplete = import_ramda.identity
  } = _b5, rest = __objRest$10(_b5, [
    "children",
    "enterDuration",
    "exitDuration",
    "duration",
    "in",
    "disableFocus",
    "hideDisplay",
    "direction",
    "offset",
    "offsetX",
    "offsetY",
    "enterDelay",
    "exitDelay",
    "onTransitionComplete"
  ]);
  const transition3 = getDuration(enterDuration, exitDuration, duration);
  const { offsetX, offsetY } = getOffsets(direction2, delta2, deltaX, deltaY);
  const showWithDelay = useDelay(show, enterDelay, exitDelay);
  const isHidden3 = useHiddenDisplay(show, exitDelay, exitDuration, duration, onTransitionComplete);
  const childrenWithProps = getChildrenWithFocus(children, disableFocus, isHidden3);
  return import_react291.default.createElement(
    SlideFade,
    __spreadValues$1e({
      in: showWithDelay,
      transition: transition3,
      offsetX,
      offsetY,
      unmountOnExit: hideDisplay
    }, rest),
    childrenWithProps
  );
};
var __defProp$1d = Object.defineProperty;
var __getOwnPropSymbols$1d = Object.getOwnPropertySymbols;
var __hasOwnProp$1d = Object.prototype.hasOwnProperty;
var __propIsEnum$1d = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1d = (obj, key2, value) => key2 in obj ? __defProp$1d(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1d = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1d.call(b2, prop2))
      __defNormalProp$1d(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1d)
    for (var prop2 of __getOwnPropSymbols$1d(b2)) {
      if (__propIsEnum$1d.call(b2, prop2))
        __defNormalProp$1d(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$$ = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1d.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1d)
    for (var prop2 of __getOwnPropSymbols$1d(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1d.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Collapse2 = (_a9) => {
  var _b5 = _a9, {
    children,
    enterDuration = null,
    exitDuration = null,
    duration = null,
    in: show = false,
    disableFocus = true,
    hideDisplay = false,
    enterDelay = 0,
    exitDelay = 0,
    onTransitionComplete = import_ramda.identity
  } = _b5, rest = __objRest$$(_b5, [
    "children",
    "enterDuration",
    "exitDuration",
    "duration",
    "in",
    "disableFocus",
    "hideDisplay",
    "enterDelay",
    "exitDelay",
    "onTransitionComplete"
  ]);
  const transition3 = getDuration(enterDuration, exitDuration, duration);
  const showWithDelay = useDelay(show, enterDelay, exitDelay);
  const isHidden3 = useHiddenDisplay(show, exitDelay, exitDuration, duration, onTransitionComplete);
  const childrenWithProps = getChildrenWithFocus(children, disableFocus, isHidden3);
  return import_react291.default.createElement(
    Collapse,
    __spreadValues$1d({
      in: showWithDelay,
      transition: transition3,
      unmountOnExit: hideDisplay
    }, rest),
    childrenWithProps
  );
};
var __defProp$1c = Object.defineProperty;
var __defProps$c = Object.defineProperties;
var __getOwnPropDescs$c = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1c = Object.getOwnPropertySymbols;
var __hasOwnProp$1c = Object.prototype.hasOwnProperty;
var __propIsEnum$1c = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1c = (obj, key2, value) => key2 in obj ? __defProp$1c(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1c = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1c.call(b2, prop2))
      __defNormalProp$1c(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1c)
    for (var prop2 of __getOwnPropSymbols$1c(b2)) {
      if (__propIsEnum$1c.call(b2, prop2))
        __defNormalProp$1c(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$c = (a2, b2) => __defProps$c(a2, __getOwnPropDescs$c(b2));
var __objRest$_ = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1c.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1c)
    for (var prop2 of __getOwnPropSymbols$1c(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1c.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Toolbox = (_a9) => {
  var _b5 = _a9, {
    isResizable = false,
    isOpen = false,
    children,
    direction: direction2 = "right",
    shouldPush = false,
    size: size4 = "sm",
    onClose,
    autoFocus = true,
    resizeLimit = "full"
  } = _b5, rest = __objRest$_(_b5, [
    "isResizable",
    "isOpen",
    "children",
    "direction",
    "shouldPush",
    "size",
    "onClose",
    "autoFocus",
    "resizeLimit"
  ]);
  const { container: container2 } = useMultiStyleConfig("Toolbox", { size: size4 });
  const newChildren = getChildrenWithProps(
    children,
    { onClose },
    (_child, i2) => i2 === 0
  );
  const handleKeyDown = (e) => {
    if (e.key === "Escape") {
      e.stopPropagation();
      onClose == null ? void 0 : onClose();
    }
  };
  const getPixelSize = (sizeToken) => {
    const widthInRem = useToken("sizes", sizeToken);
    return parseFloat(widthInRem) * 16;
  };
  const defaultWidthPx = getPixelSize(size4);
  const minWidthPx = getPixelSize("sm");
  const maxWidthPx = resizeLimit === "half" ? 0.5 * window.innerWidth : window.innerWidth;
  const { adjustableWidth, resizeProps } = useResizeWidth({
    minWidthPx,
    maxWidthPx,
    defaultWidthPx,
    stationaryEdge: direction2
  });
  return import_react291.default.createElement(
    Box,
    {
      w: adjustableWidth,
      display: isOpen && shouldPush ? "initial" : "none"
    },
    import_react291.default.createElement(Portal, null, import_react291.default.createElement(
      Slide3,
      {
        direction: direction2,
        in: isOpen,
        style: {
          height: container2.h,
          width: adjustableWidth,
          zIndex: zIndex.overlay
        }
      },
      import_react291.default.createElement(
        Flex,
        __spreadValues$1c({
          sx: __spreadProps$c(__spreadValues$1c({}, container2), { w: adjustableWidth }),
          onKeyDown: handleKeyDown,
          position: "relative",
          overflow: "hidden",
          direction: direction2 === "left" ? "row-reverse" : "row"
        }, rest),
        isResizable && import_react291.default.createElement(ResizeHandle, __spreadValues$1c({}, resizeProps)),
        import_react291.default.createElement($9bf71ea28793e738$export$20e40289641fbbb6, { autoFocus }, import_react291.default.createElement(Box, { width: "full", height: "full" }, newChildren))
      )
    ))
  );
};
var __defProp$1b = Object.defineProperty;
var __getOwnPropSymbols$1b = Object.getOwnPropertySymbols;
var __hasOwnProp$1b = Object.prototype.hasOwnProperty;
var __propIsEnum$1b = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1b = (obj, key2, value) => key2 in obj ? __defProp$1b(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1b = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1b.call(b2, prop2))
      __defNormalProp$1b(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1b)
    for (var prop2 of __getOwnPropSymbols$1b(b2)) {
      if (__propIsEnum$1b.call(b2, prop2))
        __defNormalProp$1b(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$Z = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1b.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1b)
    for (var prop2 of __getOwnPropSymbols$1b(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1b.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ToolboxHeader = (_a9) => {
  var _b5 = _a9, {
    children,
    onClose
  } = _b5, rest = __objRest$Z(_b5, [
    "children",
    "onClose"
  ]);
  const { header } = useMultiStyleConfig("Toolbox", {});
  return import_react291.default.createElement(Flex, __spreadValues$1b({ sx: header }, rest), typeof children === "string" ? import_react291.default.createElement(H4$1, null, children) : children, import_react291.default.createElement(
    CloseButton,
    {
      "aria-label": "Close toolbox",
      position: "fixed",
      right: 4,
      onClick: onClose
    }
  ));
};
var __defProp$1a = Object.defineProperty;
var __getOwnPropSymbols$1a = Object.getOwnPropertySymbols;
var __hasOwnProp$1a = Object.prototype.hasOwnProperty;
var __propIsEnum$1a = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1a = (obj, key2, value) => key2 in obj ? __defProp$1a(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1a = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1a.call(b2, prop2))
      __defNormalProp$1a(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1a)
    for (var prop2 of __getOwnPropSymbols$1a(b2)) {
      if (__propIsEnum$1a.call(b2, prop2))
        __defNormalProp$1a(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$Y = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1a.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1a)
    for (var prop2 of __getOwnPropSymbols$1a(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1a.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ToolboxContent = (_a9) => {
  var _b5 = _a9, { children } = _b5, rest = __objRest$Y(_b5, ["children"]);
  const { body } = useMultiStyleConfig("Toolbox", {});
  return import_react291.default.createElement(
    Flex,
    __spreadValues$1a({
      sx: body
    }, rest),
    children
  );
};
var __defProp$19 = Object.defineProperty;
var __getOwnPropSymbols$19 = Object.getOwnPropertySymbols;
var __hasOwnProp$19 = Object.prototype.hasOwnProperty;
var __propIsEnum$19 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$19 = (obj, key2, value) => key2 in obj ? __defProp$19(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$19 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$19.call(b2, prop2))
      __defNormalProp$19(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$19)
    for (var prop2 of __getOwnPropSymbols$19(b2)) {
      if (__propIsEnum$19.call(b2, prop2))
        __defNormalProp$19(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$X = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$19.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$19)
    for (var prop2 of __getOwnPropSymbols$19(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$19.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ToolboxFooter = (_a9) => {
  var _b5 = _a9, { children } = _b5, rest = __objRest$X(_b5, ["children"]);
  const { footer } = useMultiStyleConfig("Toolbox", {});
  return import_react291.default.createElement(Flex, __spreadValues$19({ sx: footer }, rest), children);
};
var __defProp$18 = Object.defineProperty;
var __getOwnPropSymbols$18 = Object.getOwnPropertySymbols;
var __hasOwnProp$18 = Object.prototype.hasOwnProperty;
var __propIsEnum$18 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$18 = (obj, key2, value) => key2 in obj ? __defProp$18(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$18 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$18.call(b2, prop2))
      __defNormalProp$18(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$18)
    for (var prop2 of __getOwnPropSymbols$18(b2)) {
      if (__propIsEnum$18.call(b2, prop2))
        __defNormalProp$18(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$W = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$18.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$18)
    for (var prop2 of __getOwnPropSymbols$18(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$18.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Radio2 = (_a9) => {
  var _b5 = _a9, {
    size: size4 = "md",
    onChange: onChange2,
    name,
    value
  } = _b5, rest = __objRest$W(_b5, [
    "size",
    "onChange",
    "name",
    "value"
  ]);
  return import_react291.default.createElement(
    Radio,
    __spreadValues$18({
      size: size4,
      id: name,
      onChange: onChange2,
      value
    }, rest)
  );
};
var __defProp$17 = Object.defineProperty;
var __getOwnPropSymbols$17 = Object.getOwnPropertySymbols;
var __hasOwnProp$17 = Object.prototype.hasOwnProperty;
var __propIsEnum$17 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$17 = (obj, key2, value) => key2 in obj ? __defProp$17(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$17 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$17.call(b2, prop2))
      __defNormalProp$17(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$17)
    for (var prop2 of __getOwnPropSymbols$17(b2)) {
      if (__propIsEnum$17.call(b2, prop2))
        __defNormalProp$17(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$V = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$17.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$17)
    for (var prop2 of __getOwnPropSymbols$17(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$17.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var RadioGroup2 = (_a9) => {
  var _b5 = _a9, {
    direction: direction2 = "row",
    children,
    name
  } = _b5, rest = __objRest$V(_b5, [
    "direction",
    "children",
    "name"
  ]);
  return import_react291.default.createElement(RadioGroup, __spreadValues$17({ name, id: name }, rest), import_react291.default.createElement(Stack, { direction: direction2 }, children));
};
var __defProp$162 = Object.defineProperty;
var __getOwnPropSymbols$162 = Object.getOwnPropertySymbols;
var __hasOwnProp$162 = Object.prototype.hasOwnProperty;
var __propIsEnum$162 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$162 = (obj, key2, value) => key2 in obj ? __defProp$162(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$162 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$162.call(b2, prop2))
      __defNormalProp$162(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$162)
    for (var prop2 of __getOwnPropSymbols$162(b2)) {
      if (__propIsEnum$162.call(b2, prop2))
        __defNormalProp$162(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$U = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$162.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$162)
    for (var prop2 of __getOwnPropSymbols$162(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$162.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var RadioGroupField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    children,
    direction: direction2,
    isRequired,
    validate: validate2,
    onChange: onChangeCallback = import_ramda.identity
  } = _b5, rest = __objRest$U(_b5, [
    "name",
    "label",
    "children",
    "direction",
    "isRequired",
    "validate",
    "onChange"
  ]);
  return import_react291.default.createElement(Box, { w: label ? "full" : "fit-content" }, import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      validate: validate2,
      ref
    },
    ({ onChange: onChange2, value }) => import_react291.default.createElement(
      RadioGroup2,
      __spreadValues$162({
        name,
        onChange: (e) => {
          onChange2(e);
          onChangeCallback(e);
        },
        direction: direction2,
        value,
        "data-testid": "radio-group-field-test-id"
      }, rest),
      children
    )
  ));
});
var carouselItemWidth = 150;
var carouselItemSpacing = 60;
var variants18 = {
  active: { scale: 1.15, opacity: 1 },
  inActive: { scale: 0.95, opacity: 0.7 }
};
var CarouselItem = ({
  children,
  isActive = false,
  itemWidth = carouselItemWidth,
  itemHeight = carouselItemWidth
}) => import_react291.default.createElement(motion2.div, { animate: isActive ? "active" : "inActive", variants: variants18 }, import_react291.default.createElement(Center, { minW: `${itemWidth}px`, h: `${itemHeight}px ` }, children));
var __defProp$15 = Object.defineProperty;
var __getOwnPropSymbols$15 = Object.getOwnPropertySymbols;
var __hasOwnProp$15 = Object.prototype.hasOwnProperty;
var __propIsEnum$15 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$15 = (obj, key2, value) => key2 in obj ? __defProp$15(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$15 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$15.call(b2, prop2))
      __defNormalProp$15(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$15)
    for (var prop2 of __getOwnPropSymbols$15(b2)) {
      if (__propIsEnum$15.call(b2, prop2))
        __defNormalProp$15(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$T = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$15.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$15)
    for (var prop2 of __getOwnPropSymbols$15(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$15.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var CarouselArrow = (_a9) => {
  var _b5 = _a9, {
    onClick,
    direction: direction2
  } = _b5, rest = __objRest$T(_b5, [
    "onClick",
    "direction"
  ]);
  const { arrow: arrow3 } = useMultiStyleConfig("Carousel", {});
  return import_react291.default.createElement(
    Center,
    __spreadValues$15({
      sx: arrow3,
      onClick
    }, rest),
    import_react291.default.createElement(IconButton2, { "aria-label": `move carousel to ${direction2}`, variant: "ghost", size: "lg" }, import_react291.default.createElement(Icon$1, { as: direction2 === "right" ? SvgChevronRightSolid : SvgChevronLeftSolid }))
  );
};
var __defProp$14 = Object.defineProperty;
var __getOwnPropSymbols$14 = Object.getOwnPropertySymbols;
var __hasOwnProp$14 = Object.prototype.hasOwnProperty;
var __propIsEnum$14 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$14 = (obj, key2, value) => key2 in obj ? __defProp$14(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$14 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$14.call(b2, prop2))
      __defNormalProp$14(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$14)
    for (var prop2 of __getOwnPropSymbols$14(b2)) {
      if (__propIsEnum$14.call(b2, prop2))
        __defNormalProp$14(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$S = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$14.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$14)
    for (var prop2 of __getOwnPropSymbols$14(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$14.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Carousel = (_a9) => {
  var _b5 = _a9, {
    children,
    showArrows = true,
    showRadio = true,
    value: controlledIndex = 0,
    onChange: onChange2 = import_ramda.identity,
    itemWidth = carouselItemWidth,
    itemHeight = carouselItemWidth,
    spacing: spacing4 = carouselItemSpacing,
    carouselStyles = {}
  } = _b5, rest = __objRest$S(_b5, [
    "children",
    "showArrows",
    "showRadio",
    "value",
    "onChange",
    "itemWidth",
    "itemHeight",
    "spacing",
    "carouselStyles"
  ]);
  const [dragging, setDragging] = (0, import_react291.useState)(false);
  const [containerWidth, setContainerWidth] = (0, import_react291.useState)(0);
  const [activeIndex, setActiveIndex] = (0, import_react291.useState)(0);
  const x = useMotionValue2(0);
  const { radio, container: container2 } = useMultiStyleConfig("Carousel", {});
  const childrenAsArray = import_react291.Children.toArray(children);
  const numberOfChildren = import_react291.Children.count(children);
  const carouselTotalWidth = itemWidth + spacing4;
  const totalWidth = carouselTotalWidth * numberOfChildren;
  const containerRef = (0, import_react291.useRef)(null);
  (0, import_react291.useEffect)(() => {
    setContainerWidth(containerRef.current.clientWidth);
  }, []);
  const getNewX = () => -(activeIndex * carouselTotalWidth);
  const updateActiveIndex = () => {
    setActiveIndex(Math.abs(Math.round(x.get() / carouselTotalWidth)));
  };
  (0, import_react291.useEffect)(() => {
    animate3(x, getNewX());
    onChange2(activeIndex);
  }, [activeIndex]);
  (0, import_react291.useEffect)(() => {
    setActiveIndex(controlledIndex);
  }, [controlledIndex]);
  const handleRightArrowClick = () => {
    setActiveIndex(
      (prev2) => activeIndex === numberOfChildren - 1 ? 0 : prev2 + 1
    );
  };
  const handleLeftArrowClick = () => {
    setActiveIndex(
      (prev2) => activeIndex === 0 ? numberOfChildren - 1 : prev2 - 1
    );
  };
  return import_react291.default.createElement(
    Box,
    __spreadValues$14({
      cursor: dragging ? "grabbing" : "grab",
      onMouseDown: () => setDragging(true),
      onMouseUp: () => setDragging(false),
      ref: containerRef,
      pl: `${(containerWidth - itemWidth) / 2}px`,
      sx: container2
    }, rest),
    import_react291.default.createElement(
      motion2.div,
      {
        drag: "x",
        style: {
          width: `${totalWidth}px`,
          height: "100%",
          x
        },
        dragConstraints: { right: 0, left: -(totalWidth - itemWidth) },
        onDragEnd: updateActiveIndex
      },
      import_react291.default.createElement(
        HStack,
        __spreadValues$14({
          spacing: `${spacing4}px`,
          width: `${totalWidth}px`,
          h: "full"
        }, carouselStyles),
        childrenAsArray.map((child, index5) => import_react291.default.createElement(
          CarouselItem,
          {
            isActive: index5 === activeIndex,
            itemWidth,
            itemHeight,
            key: `carousel-item-${index5}`
          },
          child
        ))
      )
    ),
    showRadio && import_react291.default.createElement(
      RadioGroup2,
      {
        onChange: (val) => setActiveIndex(parseInt(val, 10)),
        value: `${activeIndex}`,
        sx: radio
      },
      import_react291.default.createElement(HStack, null, childrenAsArray.map((_child, i2) => import_react291.default.createElement(
        Radio2,
        {
          value: `${i2}`,
          size: "lg",
          key: `carousel-radio-${i2}`
        }
      )))
    ),
    showArrows && import_react291.default.createElement(import_react291.default.Fragment, null, import_react291.default.createElement(
      CarouselArrow,
      {
        direction: "left",
        onClick: handleLeftArrowClick,
        left: "2"
      }
    ), import_react291.default.createElement(
      CarouselArrow,
      {
        direction: "right",
        onClick: handleRightArrowClick,
        right: "2"
      }
    ))
  );
};
var __defProp$13 = Object.defineProperty;
var __defProps$b = Object.defineProperties;
var __getOwnPropDescs$b = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$13 = Object.getOwnPropertySymbols;
var __hasOwnProp$13 = Object.prototype.hasOwnProperty;
var __propIsEnum$13 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$13 = (obj, key2, value) => key2 in obj ? __defProp$13(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$13 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$13.call(b2, prop2))
      __defNormalProp$13(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$13)
    for (var prop2 of __getOwnPropSymbols$13(b2)) {
      if (__propIsEnum$13.call(b2, prop2))
        __defNormalProp$13(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$b = (a2, b2) => __defProps$b(a2, __getOwnPropDescs$b(b2));
var searchBarStyles = (sx) => (0, import_ramda.merge)({
  container: (provided) => __spreadProps$b(__spreadValues$13({}, provided), {
    width: "100%",
    color: "text.default",
    alignSelf: "center"
  }),
  option: (provided, state2) => __spreadProps$b(__spreadValues$13({}, provided), {
    background: state2.isFocused && "background.select.option-focus",
    _active: {
      background: "background.select.option-active"
    }
  }),
  valueContainer: (provided) => __spreadProps$b(__spreadValues$13({}, provided), {
    paddingInlineStart: "padding-inline.select.default"
  }),
  downChevron: (provided) => __spreadProps$b(__spreadValues$13({}, provided), {
    color: "icon.select.default"
  }),
  placeholder: (provided) => __spreadProps$b(__spreadValues$13({}, provided), {
    color: "text.select.placeholder"
  }),
  multiValue: (provided, state2) => {
    var _a9;
    const background2 = state2.data.isFixed ? "background.select.option-disabled" : (_a9 = state2.data.color) != null ? _a9 : provided.bgColor;
    return __spreadValues$13(__spreadProps$b(__spreadValues$13({}, provided), {
      bgColor: background2,
      color: getContrastColor(background2)
    }), sx.multiValue);
  },
  menuList: (provided) => __spreadProps$b(__spreadValues$13({}, provided), {
    bgColor: "background.default"
  })
}, sx);
var __defProp$12 = Object.defineProperty;
var __getOwnPropSymbols$12 = Object.getOwnPropertySymbols;
var __hasOwnProp$12 = Object.prototype.hasOwnProperty;
var __propIsEnum$12 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$12 = (obj, key2, value) => key2 in obj ? __defProp$12(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$12 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$12.call(b2, prop2))
      __defNormalProp$12(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$12)
    for (var prop2 of __getOwnPropSymbols$12(b2)) {
      if (__propIsEnum$12.call(b2, prop2))
        __defNormalProp$12(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$R = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$12.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$12)
    for (var prop2 of __getOwnPropSymbols$12(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$12.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
function getComponents() {
  return {
    Menu: (props) => import_react291.default.createElement(Box, { "data-testid": "select-menu-wrapper-test-id" }, import_react291.default.createElement(chakra_components_default.Menu, __spreadValues$12({}, props), props.children)),
    DropdownIndicator: (props) => props.selectProps.icon ? import_react291.default.createElement(chakra_components_default.DropdownIndicator, __spreadValues$12({}, props), import_react291.default.createElement(Icon$1, { as: props.selectProps.icon })) : import_react291.default.createElement(chakra_components_default.DropdownIndicator, __spreadValues$12({}, props)),
    Option: (props) => props.selectProps.customOption ? import_react291.default.createElement(chakra_components_default.Option, __spreadValues$12({}, props), props.selectProps.customOption(props.data)) : import_react291.default.createElement(chakra_components_default.Option, __spreadValues$12({}, props)),
    MultiValueContainer: (props) => props.selectProps.customTag ? import_react291.default.createElement(chakra_components_default.MultiValueContainer, __spreadValues$12({}, props), props.selectProps.customTag(props.data)) : import_react291.default.createElement(chakra_components_default.MultiValueContainer, __spreadValues$12({}, props)),
    Control: (_a9) => {
      var _b5 = _a9, { children } = _b5, props = __objRest$R(_b5, ["children"]);
      return props.selectProps.leftComponent ? import_react291.default.createElement(chakra_components_default.Control, __spreadValues$12({}, props), import_react291.default.createElement(HStack, { w: "full", pl: "2" }, props.selectProps.leftComponent, import_react291.default.createElement(HStack, { w: "full", justify: "space-between" }, children))) : import_react291.default.createElement(chakra_components_default.Control, __spreadValues$12({}, props), children);
    }
  };
}
var __defProp$11 = Object.defineProperty;
var __getOwnPropSymbols$11 = Object.getOwnPropertySymbols;
var __hasOwnProp$11 = Object.prototype.hasOwnProperty;
var __propIsEnum$11 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$11 = (obj, key2, value) => key2 in obj ? __defProp$11(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$11 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$11.call(b2, prop2))
      __defNormalProp$11(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$11)
    for (var prop2 of __getOwnPropSymbols$11(b2)) {
      if (__propIsEnum$11.call(b2, prop2))
        __defNormalProp$11(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$Q = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$11.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$11)
    for (var prop2 of __getOwnPropSymbols$11(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$11.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SearchBar = (0, import_react291.forwardRef)(
  (_a9, ref) => {
    var _b5 = _a9, {
      defaultOptions: defaultOptions5 = [],
      isMulti,
      customOption = null,
      customTag = null,
      sx = {},
      debouncedWaitTime = 200,
      loadOptions: getCustomOptions = null,
      clearInputOnSelect = true,
      closeMenuOnSelect = false,
      onChange: onChange2 = import_ramda.identity,
      onAdd = import_ramda.identity,
      onRemove = import_ramda.identity,
      "data-testid": testId,
      value,
      onSearchInputChange = import_ramda.identity,
      icon = SvgSearchDuo
    } = _b5, rest = __objRest$Q(_b5, [
      "defaultOptions",
      "isMulti",
      "customOption",
      "customTag",
      "sx",
      "debouncedWaitTime",
      "loadOptions",
      "clearInputOnSelect",
      "closeMenuOnSelect",
      "onChange",
      "onAdd",
      "onRemove",
      "data-testid",
      "value",
      "onSearchInputChange",
      "icon"
    ]);
    const [filtered, setFiltered] = (0, import_react291.useState)(defaultOptions5);
    const [filterInput, setFilterInput] = (0, import_react291.useState)("");
    const debounceFunction = (0, import_react291.useMemo)(
      () => createDebounceFunctionInstance(debouncedWaitTime),
      [debouncedWaitTime]
    );
    const handleChange = useSelectCallbacks({
      onChange: onChange2,
      onAdd,
      onRemove,
      isMulti,
      value: (0, import_ramda.is)(Array, value) ? value : []
    });
    const customComponents2 = (0, import_react291.useMemo)(
      () => getComponents(),
      []
    );
    const simpleFilter = (query) => (0, import_ramda.filter)(
      (option) => (0, import_ramda.test)(new RegExp((0, import_ramda.toLower)(query), "g"), (0, import_ramda.toLower)(option.label)),
      defaultOptions5
    );
    const getOptions = async (query) => {
      const newOptions = getCustomOptions ? await getCustomOptions(query) : simpleFilter(query);
      setFiltered(newOptions);
      return newOptions;
    };
    const loadOptions = debounceFunction(async (query, callback) => {
      const newOptions = await getOptions(query);
      callback(newOptions);
      return [];
    });
    const resetFiltered = (v, { action }) => {
      if (clearInputOnSelect || action !== "set-value") {
        setFilterInput(v);
        onSearchInputChange(v);
        if (v === "") {
          setFiltered(defaultOptions5);
        }
      }
    };
    return import_react291.default.createElement(Box, { w: "full", "data-testid": testId }, import_react291.default.createElement(
      async_select_default,
      __spreadValues$11({
        cacheOptions: true,
        defaultOptions: filtered,
        loadOptions,
        onChange: handleChange,
        placeholder: "Search...",
        chakraStyles: searchBarStyles(sx),
        isMulti,
        useBasicStyles: true,
        selectedOptionStyle: "check",
        hideSelectedOptions: false,
        closeMenuOnSelect,
        isClearable: false,
        onInputChange: resetFiltered,
        inputValue: filterInput,
        customOption,
        customTag,
        icon,
        components: customComponents2,
        ref,
        value
      }, rest)
    ));
  }
);
var __defProp$10 = Object.defineProperty;
var __getOwnPropSymbols$10 = Object.getOwnPropertySymbols;
var __hasOwnProp$10 = Object.prototype.hasOwnProperty;
var __propIsEnum$10 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$10 = (obj, key2, value) => key2 in obj ? __defProp$10(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$10 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$10.call(b2, prop2))
      __defNormalProp$10(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$10)
    for (var prop2 of __getOwnPropSymbols$10(b2)) {
      if (__propIsEnum$10.call(b2, prop2))
        __defNormalProp$10(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$P = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$10.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$10)
    for (var prop2 of __getOwnPropSymbols$10(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$10.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var BaseSearchBarField = (_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    direction: direction2 = "column",
    isMulti,
    isRequired,
    validate: validate2,
    isClearable = true,
    onChange: onChangeCallback = import_ramda.identity,
    inputLeftElement,
    inputRightElement
  } = _b5, rest = __objRest$P(_b5, [
    "name",
    "label",
    "direction",
    "isMulti",
    "isRequired",
    "validate",
    "isClearable",
    "onChange",
    "inputLeftElement",
    "inputRightElement"
  ]);
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      noLabelConnection: true,
      validate: validate2,
      ref
    },
    ({ value, onChange: onChange2 }) => import_react291.default.createElement(HStack, { w: "full" }, import_react291.default.createElement(
      InputGroupWrapper,
      {
        inputLeftElement,
        inputRightElement
      },
      import_react291.default.createElement(
        SearchBar,
        __spreadValues$10({
          name,
          isMulti,
          onChange: (values2, event) => {
            onChange2(
              isMulti ? values2 : values2.value
            );
            onChangeCallback(values2, event);
          },
          value
        }, rest)
      )
    ), import_react291.default.createElement(
      IconButton2,
      {
        "aria-label": `${name}-close-button`,
        variant: "danger",
        size: "lg",
        fontSize: "sm",
        hidden: (0, import_ramda.isEmpty)(value) || !isClearable,
        onClick: () => onChange2([]),
        icon: import_react291.default.createElement(Icon$1, { as: SvgXCloseSolid })
      }
    ))
  );
};
var SearchBarField = (0, import_react291.forwardRef)(BaseSearchBarField);
var __defProp$$ = Object.defineProperty;
var __getOwnPropSymbols$$ = Object.getOwnPropertySymbols;
var __hasOwnProp$$ = Object.prototype.hasOwnProperty;
var __propIsEnum$$ = Object.prototype.propertyIsEnumerable;
var __defNormalProp$$ = (obj, key2, value) => key2 in obj ? __defProp$$(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$$ = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$$.call(b2, prop2))
      __defNormalProp$$(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$$)
    for (var prop2 of __getOwnPropSymbols$$(b2)) {
      if (__propIsEnum$$.call(b2, prop2))
        __defNormalProp$$(a2, prop2, b2[prop2]);
    }
  return a2;
};
var DragAndDrop = (props) => import_react291.default.createElement(DndContext, __spreadValues$$({}, props));
var __defProp$_ = Object.defineProperty;
var __getOwnPropSymbols$_ = Object.getOwnPropertySymbols;
var __hasOwnProp$_ = Object.prototype.hasOwnProperty;
var __propIsEnum$_ = Object.prototype.propertyIsEnumerable;
var __defNormalProp$_ = (obj, key2, value) => key2 in obj ? __defProp$_(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$_ = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$_.call(b2, prop2))
      __defNormalProp$_(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$_)
    for (var prop2 of __getOwnPropSymbols$_(b2)) {
      if (__propIsEnum$_.call(b2, prop2))
        __defNormalProp$_(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$O = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$_.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$_)
    for (var prop2 of __getOwnPropSymbols$_(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$_.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Tag2 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    children,
    variant = "solid",
    bgColor,
    colorScheme
  } = _b5, rest = __objRest$O(_b5, [
    "children",
    "variant",
    "bgColor",
    "colorScheme"
  ]);
  return import_react291.default.createElement(
    Tag,
    __spreadValues$_({
      bgColor,
      colorScheme,
      ref,
      variant
    }, rest),
    children
  );
});
var OverflowIndicator = ({
  nbrRemainingTags
}) => import_react291.default.createElement(Tag2, { variant: "subtle", minW: "max-content" }, "+", nbrRemainingTags);
var __defProp$Z = Object.defineProperty;
var __getOwnPropSymbols$Z = Object.getOwnPropertySymbols;
var __hasOwnProp$Z = Object.prototype.hasOwnProperty;
var __propIsEnum$Z = Object.prototype.propertyIsEnumerable;
var __defNormalProp$Z = (obj, key2, value) => key2 in obj ? __defProp$Z(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$Z = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$Z.call(b2, prop2))
      __defNormalProp$Z(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$Z)
    for (var prop2 of __getOwnPropSymbols$Z(b2)) {
      if (__propIsEnum$Z.call(b2, prop2))
        __defNormalProp$Z(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$N = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$Z.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$Z)
    for (var prop2 of __getOwnPropSymbols$Z(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$Z.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var TagGroup = (_a9) => {
  var _b5 = _a9, {
    children,
    max: max3 = Infinity,
    spacing: spacing4 = "2",
    OverflowIndicator: OverflowIndicator$1 = OverflowIndicator
  } = _b5, rest = __objRest$N(_b5, [
    "children",
    "max",
    "spacing",
    "OverflowIndicator"
  ]);
  const [nbrRemainingTags, setNbrRemainingTags] = (0, import_react291.useState)(0);
  const { rect, containerRef } = useOverflowGroup();
  return import_react291.default.createElement(
    HStack,
    __spreadValues$Z({
      bgColor: "background.default",
      ref: containerRef,
      overflow: "hidden"
    }, rest),
    import_react291.default.createElement(HStack, { spacing: spacing4 }, import_react291.default.createElement(OverflowGroup, { max: max3, onChange: setNbrRemainingTags, rect }, children)),
    nbrRemainingTags > 0 && import_react291.default.createElement(OverflowIndicator$1, { nbrRemainingTags })
  );
};
var __defProp$Y = Object.defineProperty;
var __getOwnPropSymbols$Y = Object.getOwnPropertySymbols;
var __hasOwnProp$Y = Object.prototype.hasOwnProperty;
var __propIsEnum$Y = Object.prototype.propertyIsEnumerable;
var __defNormalProp$Y = (obj, key2, value) => key2 in obj ? __defProp$Y(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$Y = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$Y.call(b2, prop2))
      __defNormalProp$Y(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$Y)
    for (var prop2 of __getOwnPropSymbols$Y(b2)) {
      if (__propIsEnum$Y.call(b2, prop2))
        __defNormalProp$Y(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$M = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$Y.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$Y)
    for (var prop2 of __getOwnPropSymbols$Y(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$Y.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var DragItem = (0, import_react291.forwardRef)(
  (_a9, ref) => {
    var _b5 = _a9, {
      size: size4 = "md",
      isDragging,
      itemLabel = "Drag Me",
      bgColor
    } = _b5, rest = __objRest$M(_b5, [
      "size",
      "isDragging",
      "itemLabel",
      "bgColor"
    ]);
    return import_react291.default.createElement(
      Tag2,
      __spreadValues$Y({
        ref,
        cursor: isDragging ? "grabbing" : "grab",
        bgColor: bgColor || (isDragging ? "blue.200" : void 0),
        size: size4,
        minW: "max-content"
      }, rest),
      import_react291.default.createElement(TagLabel, null, itemLabel),
      import_react291.default.createElement(TagRightIcon, null, import_react291.default.createElement(Icon$1, { as: SvgDotsMatrixSolid }))
    );
  }
);
var __defProp$X = Object.defineProperty;
var __defProps$a = Object.defineProperties;
var __getOwnPropDescs$a = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$X = Object.getOwnPropertySymbols;
var __hasOwnProp$X = Object.prototype.hasOwnProperty;
var __propIsEnum$X = Object.prototype.propertyIsEnumerable;
var __defNormalProp$X = (obj, key2, value) => key2 in obj ? __defProp$X(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$X = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$X.call(b2, prop2))
      __defNormalProp$X(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$X)
    for (var prop2 of __getOwnPropSymbols$X(b2)) {
      if (__propIsEnum$X.call(b2, prop2))
        __defNormalProp$X(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$a = (a2, b2) => __defProps$a(a2, __getOwnPropDescs$a(b2));
var __objRest$L = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$X.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$X)
    for (var prop2 of __getOwnPropSymbols$X(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$X.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Draggable = (_a9) => {
  var _b5 = _a9, {
    itemLabel,
    children,
    disableDrag = false,
    "data-testid": dataTestId
  } = _b5, rest = __objRest$L(_b5, [
    "itemLabel",
    "children",
    "disableDrag",
    "data-testid"
  ]);
  const _a24 = useDraggable(__spreadValues$X({}, rest)), {
    attributes,
    listeners,
    setNodeRef,
    transform: transform4,
    isDragging
  } = _a24, props = __objRest$L(_a24, [
    "attributes",
    "listeners",
    "setNodeRef",
    "transform",
    "isDragging"
  ]);
  if (!listeners) {
    return import_react291.default.createElement(DragItem, { itemLabel });
  }
  const childrenWithDragCursor = (0, import_react291.isValidElement)(children) ? (0, import_react291.cloneElement)(children, {
    cursor: isDragging ? "grabbing" : "grab"
  }) : children;
  const dragEventListeners = !disableDrag && listeners;
  return import_react291.default.createElement(
    Box,
    __spreadValues$X(__spreadProps$a(__spreadValues$X({
      ref: setNodeRef
    }, attributes), {
      transform: CSS2.Translate.toString(transform4),
      _focusVisible: ring2,
      tabIndex: disableDrag ? -1 : 0,
      w: "max-content",
      "data-testid": dataTestId
    }), dragEventListeners),
    typeof childrenWithDragCursor === "function" ? childrenWithDragCursor(listeners, props) : childrenWithDragCursor || import_react291.default.createElement(DragItem, { isDragging, itemLabel })
  );
};
var __defProp$W = Object.defineProperty;
var __getOwnPropSymbols$W = Object.getOwnPropertySymbols;
var __hasOwnProp$W = Object.prototype.hasOwnProperty;
var __propIsEnum$W = Object.prototype.propertyIsEnumerable;
var __defNormalProp$W = (obj, key2, value) => key2 in obj ? __defProp$W(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$W = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$W.call(b2, prop2))
      __defNormalProp$W(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$W)
    for (var prop2 of __getOwnPropSymbols$W(b2)) {
      if (__propIsEnum$W.call(b2, prop2))
        __defNormalProp$W(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$K = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$W.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$W)
    for (var prop2 of __getOwnPropSymbols$W(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$W.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Droppable = (_a9) => {
  var _b5 = _a9, {
    children,
    "data-testid": testId
  } = _b5, rest = __objRest$K(_b5, [
    "children",
    "data-testid"
  ]);
  const _a24 = useDroppable(__spreadValues$W({}, rest)), { setNodeRef } = _a24, props = __objRest$K(_a24, ["setNodeRef"]);
  return import_react291.default.createElement(Box, { ref: setNodeRef, "data-testid": testId }, typeof children === "function" ? children(props) : children || import_react291.default.createElement(Center, null, "Drop here"));
};
var __defProp$V = Object.defineProperty;
var __getOwnPropSymbols$V = Object.getOwnPropertySymbols;
var __hasOwnProp$V = Object.prototype.hasOwnProperty;
var __propIsEnum$V = Object.prototype.propertyIsEnumerable;
var __defNormalProp$V = (obj, key2, value) => key2 in obj ? __defProp$V(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$V = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$V.call(b2, prop2))
      __defNormalProp$V(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$V)
    for (var prop2 of __getOwnPropSymbols$V(b2)) {
      if (__propIsEnum$V.call(b2, prop2))
        __defNormalProp$V(a2, prop2, b2[prop2]);
    }
  return a2;
};
var Sortable = (props) => import_react291.default.createElement(SortableContext, __spreadValues$V({}, props));
var __defProp$U = Object.defineProperty;
var __defProps$9 = Object.defineProperties;
var __getOwnPropDescs$9 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$U = Object.getOwnPropertySymbols;
var __hasOwnProp$U = Object.prototype.hasOwnProperty;
var __propIsEnum$U = Object.prototype.propertyIsEnumerable;
var __defNormalProp$U = (obj, key2, value) => key2 in obj ? __defProp$U(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$U = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$U.call(b2, prop2))
      __defNormalProp$U(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$U)
    for (var prop2 of __getOwnPropSymbols$U(b2)) {
      if (__propIsEnum$U.call(b2, prop2))
        __defNormalProp$U(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$9 = (a2, b2) => __defProps$9(a2, __getOwnPropDescs$9(b2));
var __objRest$J = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$U.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$U)
    for (var prop2 of __getOwnPropSymbols$U(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$U.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SortableItem = (_a9) => {
  var _b5 = _a9, {
    itemLabel = "Drag me",
    dblClickThreshold = 300,
    children,
    disableDrag = false,
    "data-testid": dataTestId
  } = _b5, rest = __objRest$J(_b5, [
    "itemLabel",
    "dblClickThreshold",
    "children",
    "disableDrag",
    "data-testid"
  ]);
  const _a24 = useSortable(__spreadValues$U({}, rest)), {
    attributes,
    listeners,
    setNodeRef,
    transform: transform4,
    transition: transition3,
    isDragging
  } = _a24, props = __objRest$J(_a24, [
    "attributes",
    "listeners",
    "setNodeRef",
    "transform",
    "transition",
    "isDragging"
  ]);
  if (!listeners) {
    return import_react291.default.createElement(DragItem, { itemLabel });
  }
  const timeStampSnapchot = (0, import_react291.useRef)(0);
  const inEditMode = (0, import_react291.useRef)(false);
  const { onPointerDown, onKeyDown } = listeners;
  const handlePointerDown = (e) => {
    const elapsedTime = e.timeStamp - timeStampSnapchot.current;
    if (elapsedTime > dblClickThreshold) {
      inEditMode.current = true;
      onPointerDown(e);
    } else {
      inEditMode.current = false;
    }
    timeStampSnapchot.current = e.timeStamp;
  };
  const handleKeyDown = (e) => {
    if (inEditMode.current) {
      onKeyDown(e);
    }
  };
  const style = {
    transform: CSS2.Translate.toString(transform4),
    transition: transition3
  };
  const childrenWithDragCursor = (0, import_react291.isValidElement)(children) ? (0, import_react291.cloneElement)(children, {
    cursor: isDragging ? "grabbing" : "grab"
  }) : children;
  const dragEventListeners = !disableDrag && {
    onPointerDown: handlePointerDown,
    onKeyDown: handleKeyDown
  };
  return import_react291.default.createElement(
    Box,
    __spreadValues$U(__spreadProps$9(__spreadValues$U({
      ref: setNodeRef,
      sx: style
    }, attributes), {
      _focusVisible: ring2,
      tabIndex: disableDrag ? -1 : 0,
      borderRadius: "tag.default",
      "data-testid": dataTestId
    }), dragEventListeners),
    (typeof childrenWithDragCursor === "function" ? childrenWithDragCursor(listeners, props) : childrenWithDragCursor) || import_react291.default.createElement(DragItem, { isDragging, itemLabel })
  );
};
var __defProp$T = Object.defineProperty;
var __getOwnPropSymbols$T = Object.getOwnPropertySymbols;
var __hasOwnProp$T = Object.prototype.hasOwnProperty;
var __propIsEnum$T = Object.prototype.propertyIsEnumerable;
var __defNormalProp$T = (obj, key2, value) => key2 in obj ? __defProp$T(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$T = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$T.call(b2, prop2))
      __defNormalProp$T(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$T)
    for (var prop2 of __getOwnPropSymbols$T(b2)) {
      if (__propIsEnum$T.call(b2, prop2))
        __defNormalProp$T(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$I = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$T.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$T)
    for (var prop2 of __getOwnPropSymbols$T(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$T.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var DragHandle = (_a9) => {
  var _b5 = _a9, { icon, isDragging } = _b5, rest = __objRest$I(_b5, ["icon", "isDragging"]);
  return import_react291.default.createElement(
    Icon$1,
    __spreadValues$T({
      as: icon || SvgDragDuo,
      cursor: isDragging ? "grabbing" : "grab"
    }, rest)
  );
};
var __defProp$S = Object.defineProperty;
var __getOwnPropSymbols$S = Object.getOwnPropertySymbols;
var __hasOwnProp$S = Object.prototype.hasOwnProperty;
var __propIsEnum$S = Object.prototype.propertyIsEnumerable;
var __defNormalProp$S = (obj, key2, value) => key2 in obj ? __defProp$S(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$S = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$S.call(b2, prop2))
      __defNormalProp$S(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$S)
    for (var prop2 of __getOwnPropSymbols$S(b2)) {
      if (__propIsEnum$S.call(b2, prop2))
        __defNormalProp$S(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$H = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$S.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$S)
    for (var prop2 of __getOwnPropSymbols$S(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$S.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var DropZone = (_a9) => {
  var _b5 = _a9, { sx = {}, name, children } = _b5, rest = __objRest$H(_b5, ["sx", "name", "children"]);
  const { dropZone } = useMultiStyleConfig("DragAndDrop", { sx });
  return import_react291.default.createElement(Droppable, { id: name }, import_react291.default.createElement(Stack, __spreadValues$S({ sx: dropZone }, rest), children));
};
var __defProp$R = Object.defineProperty;
var __defProps$8 = Object.defineProperties;
var __getOwnPropDescs$8 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$R = Object.getOwnPropertySymbols;
var __hasOwnProp$R = Object.prototype.hasOwnProperty;
var __propIsEnum$R = Object.prototype.propertyIsEnumerable;
var __defNormalProp$R = (obj, key2, value) => key2 in obj ? __defProp$R(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$R = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$R.call(b2, prop2))
      __defNormalProp$R(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$R)
    for (var prop2 of __getOwnPropSymbols$R(b2)) {
      if (__propIsEnum$R.call(b2, prop2))
        __defNormalProp$R(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$8 = (a2, b2) => __defProps$8(a2, __getOwnPropDescs$8(b2));
function MultiSort({
  items,
  onChange: onChange2 = () => {
  },
  children,
  collisionDetection,
  sensors
}) {
  const [activeItem, setActiveItem] = (0, import_react291.useState)(null);
  const moveBetweenContainers = (activeContainerName, activeIndex, overContainerName, overIndex, item) => __spreadProps$8(__spreadValues$R({}, items), {
    [activeContainerName]: (0, import_ramda.remove)(activeIndex, 1, items[activeContainerName]),
    [overContainerName]: (0, import_ramda.insert)(overIndex, item, items[overContainerName])
  });
  const customSensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates
    })
  );
  const findContainer = (id3) => id3 in items ? id3 : (0, import_ramda.keys)(items).find((key2) => items[key2].includes(id3));
  const getContainers = (e) => {
    const { active, over } = e;
    if (!over)
      return {};
    const { id: id3 } = active;
    const { id: overId } = over;
    const activeContainerName = findContainer(id3);
    const overContainerName = findContainer(overId);
    return { activeContainerName, overContainerName, id: id3, overId, active };
  };
  const handleDragStart = (e) => {
    const {
      active: { id: id3 }
    } = e;
    setActiveItem(id3);
  };
  const handleDragOver = (e) => {
    const { activeContainerName, overContainerName, id: id3, overId } = getContainers(e);
    if (!(!activeContainerName || !overContainerName || activeContainerName === overContainerName)) {
      const activeIndex = (0, import_ramda.indexOf)(id3, items[activeContainerName]);
      const overIndex = (0, import_ramda.indexOf)(overId, items[overContainerName]);
      onChange2(moveBetweenContainers(
        activeContainerName,
        activeIndex,
        overContainerName,
        overIndex,
        id3
      ));
    }
  };
  const handleDragEnd = (e) => {
    const { activeContainerName, overContainerName, id: id3, overId, active } = getContainers(e);
    if (!activeContainerName || !overContainerName)
      return;
    const activeIndex = (0, import_ramda.indexOf)(id3, items[activeContainerName]);
    const overIndex = (0, import_ramda.indexOf)(overId, items[overContainerName]);
    if (activeContainerName === overContainerName) {
      onChange2(__spreadProps$8(__spreadValues$R({}, items), {
        [overContainerName]: arrayMove(
          items[overContainerName],
          activeIndex,
          overIndex
        )
      }));
    } else {
      onChange2(moveBetweenContainers(
        activeContainerName,
        activeIndex,
        overContainerName,
        overIndex,
        active == null ? void 0 : active.id
      ));
    }
  };
  return import_react291.default.createElement(
    DragAndDrop,
    {
      sensors: sensors || customSensors,
      onDragStart: handleDragStart,
      onDragOver: handleDragOver,
      onDragEnd: handleDragEnd,
      collisionDetection: collisionDetection || rectIntersection
    },
    typeof children === "function" ? children(items, activeItem) : children
  );
}
function SortableList({
  children,
  items,
  collisionDetection,
  createKey = import_ramda.identity,
  strategy,
  onChange: onChange2 = () => {
  },
  onMovedItem = import_ramda.identity,
  displayOverlay = false,
  sensors,
  dblClickThreshold = 300,
  disableDrag = false,
  modifiers
}) {
  const [activeItem, setActiveItem] = (0, import_react291.useState)(null);
  const identifierItems = (0, import_react291.useMemo)(() => (0, import_ramda.map)(createKey, items), [items]);
  const customSensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates
    })
  );
  const handleDragStart = (event) => {
    const {
      active: { id: id3 }
    } = event;
    setActiveItem(id3);
  };
  const handleDragEnd = (event) => {
    const { active, over } = event;
    if (active && over && active.id !== over.id) {
      const prevIds = (0, import_ramda.map)(createKey, items);
      const oldIndex = (0, import_ramda.indexOf)(active.id, prevIds);
      const newIndex = (0, import_ramda.indexOf)(over.id, prevIds);
      onMovedItem({ item: items[oldIndex], oldIndex, newIndex });
      const newItems = arrayMove(items, oldIndex, newIndex);
      onChange2(newItems);
    }
  };
  return import_react291.default.createElement(
    DragAndDrop,
    {
      sensors: sensors || customSensors,
      collisionDetection: collisionDetection || rectIntersection,
      onDragStart: handleDragStart,
      onDragEnd: handleDragEnd,
      modifiers
    },
    import_react291.default.createElement(
      Sortable,
      {
        items: identifierItems,
        strategy: strategy || rectSortingStrategy
      },
      items.map((item, index5) => {
        const id3 = createKey(item);
        return import_react291.default.createElement(
          SortableItem,
          {
            key: id3,
            id: id3,
            itemLabel: id3,
            dblClickThreshold,
            disableDrag
          },
          (listeners, props) => typeof children === "function" ? children(item, listeners, props, index5) : children
        );
      })
    ),
    displayOverlay && import_react291.default.createElement(DragOverlay, null, activeItem ? import_react291.default.createElement(DragItem, { itemLabel: activeItem }) : null)
  );
}
var SortableContainer = ({ children, items, strategy }) => import_react291.default.createElement(Sortable, { items, strategy: strategy || rectSortingStrategy }, items.map((id3) => import_react291.default.createElement(SortableItem, { key: id3, id: id3, itemLabel: id3 }, typeof children === "function" ? children(id3) : children)));
var __defProp$Q = Object.defineProperty;
var __getOwnPropSymbols$Q = Object.getOwnPropertySymbols;
var __hasOwnProp$Q = Object.prototype.hasOwnProperty;
var __propIsEnum$Q = Object.prototype.propertyIsEnumerable;
var __defNormalProp$Q = (obj, key2, value) => key2 in obj ? __defProp$Q(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$Q = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$Q.call(b2, prop2))
      __defNormalProp$Q(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$Q)
    for (var prop2 of __getOwnPropSymbols$Q(b2)) {
      if (__propIsEnum$Q.call(b2, prop2))
        __defNormalProp$Q(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$G = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$Q.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$Q)
    for (var prop2 of __getOwnPropSymbols$Q(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$Q.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FastList = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    itemCount,
    itemSize,
    direction: direction2 = "column",
    children,
    width,
    height,
    overscanCount = 0,
    initialScrollOffset
  } = _b5, rest = __objRest$G(_b5, [
    "itemCount",
    "itemSize",
    "direction",
    "children",
    "width",
    "height",
    "overscanCount",
    "initialScrollOffset"
  ]);
  return import_react291.default.createElement(AutoSizer, null, ({ width: autoWidth, height: autoHeight }) => import_react291.default.createElement(
    VariableSizeList,
    __spreadValues$Q({
      itemCount,
      itemSize: typeof itemSize === "number" ? (_index) => itemSize : itemSize,
      height: height != null ? height : autoHeight,
      width: width != null ? width : autoWidth,
      layout: direction2 === "column" ? "vertical" : "horizontal",
      initialScrollOffset,
      overscanCount,
      ref
    }, rest),
    ({ style, index: index5 }) => import_react291.default.createElement("div", { style }, typeof children === "function" ? children(index5) : children)
  ));
});
var __defProp$P = Object.defineProperty;
var __getOwnPropSymbols$P = Object.getOwnPropertySymbols;
var __hasOwnProp$P = Object.prototype.hasOwnProperty;
var __propIsEnum$P = Object.prototype.propertyIsEnumerable;
var __defNormalProp$P = (obj, key2, value) => key2 in obj ? __defProp$P(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$P = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$P.call(b2, prop2))
      __defNormalProp$P(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$P)
    for (var prop2 of __getOwnPropSymbols$P(b2)) {
      if (__propIsEnum$P.call(b2, prop2))
        __defNormalProp$P(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$F2 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$P.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$P)
    for (var prop2 of __getOwnPropSymbols$P(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$P.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FastGrid = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    columns: columns2,
    rows,
    columnSize,
    rowSize,
    children,
    width,
    height,
    overscanRowCount = 0,
    overscanColumnCount = 0
  } = _b5, rest = __objRest$F2(_b5, [
    "columns",
    "rows",
    "columnSize",
    "rowSize",
    "children",
    "width",
    "height",
    "overscanRowCount",
    "overscanColumnCount"
  ]);
  return import_react291.default.createElement(AutoSizer, null, ({ width: autoWidth, height: autoHeight }) => import_react291.default.createElement(
    VariableSizeGrid,
    __spreadValues$P({
      rowCount: rows,
      columnCount: columns2,
      columnWidth: typeof columnSize === "number" ? (_index) => columnSize : columnSize,
      rowHeight: typeof rowSize === "number" ? (_index) => rowSize : rowSize,
      height: height != null ? height : autoHeight,
      width: width != null ? width : autoWidth,
      overscanRowCount,
      overscanColumnCount,
      ref
    }, rest),
    ({ style, rowIndex, columnIndex }) => import_react291.default.createElement("div", { style }, typeof children === "function" ? children(rowIndex, columnIndex) : children)
  ));
});
var __defProp$O = Object.defineProperty;
var __getOwnPropSymbols$O = Object.getOwnPropertySymbols;
var __hasOwnProp$O = Object.prototype.hasOwnProperty;
var __propIsEnum$O = Object.prototype.propertyIsEnumerable;
var __defNormalProp$O = (obj, key2, value) => key2 in obj ? __defProp$O(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$O = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$O.call(b2, prop2))
      __defNormalProp$O(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$O)
    for (var prop2 of __getOwnPropSymbols$O(b2)) {
      if (__propIsEnum$O.call(b2, prop2))
        __defNormalProp$O(a2, prop2, b2[prop2]);
    }
  return a2;
};
var EditableControls = ({ size: size4 }) => {
  const {
    getSubmitButtonProps,
    getCancelButtonProps
  } = useEditableControls();
  const { onEdit, isEditing } = useEditableState();
  const { button, icon, controls } = useMultiStyleConfig("EditableText", { size: size4, isEditing });
  return import_react291.default.createElement(HStack, { spacing: 1, sx: controls }, isEditing ? import_react291.default.createElement(import_react291.default.Fragment, null, import_react291.default.createElement(
    IconButton2,
    __spreadValues$O({
      "aria-label": "Cancel",
      sx: button,
      variant: "danger"
    }, getCancelButtonProps()),
    import_react291.default.createElement(Icon$1, { sx: icon, as: SvgXCloseSolid })
  ), import_react291.default.createElement(
    IconButton2,
    __spreadValues$O({
      "aria-label": "Save",
      sx: button,
      variant: "success"
    }, getSubmitButtonProps()),
    import_react291.default.createElement(Icon$1, { sx: icon, as: SvgCheckDuo })
  )) : import_react291.default.createElement(
    IconButton2,
    {
      "aria-label": "Edit",
      variant: "ghost",
      sx: button,
      onClick: onEdit
    },
    import_react291.default.createElement(Icon$1, { sx: icon, as: SvgEditDuo })
  ));
};
var __defProp$N = Object.defineProperty;
var __getOwnPropSymbols$N = Object.getOwnPropertySymbols;
var __hasOwnProp$N = Object.prototype.hasOwnProperty;
var __propIsEnum$N = Object.prototype.propertyIsEnumerable;
var __defNormalProp$N = (obj, key2, value) => key2 in obj ? __defProp$N(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$N = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$N.call(b2, prop2))
      __defNormalProp$N(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$N)
    for (var prop2 of __getOwnPropSymbols$N(b2)) {
      if (__propIsEnum$N.call(b2, prop2))
        __defNormalProp$N(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$E2 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$N.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$N)
    for (var prop2 of __getOwnPropSymbols$N(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$N.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var EditableText = (_a9) => {
  var _b5 = _a9, {
    size: size4 = "md",
    value: inputValue,
    onSubmit,
    leftItem
  } = _b5, rest = __objRest$E2(_b5, [
    "size",
    "value",
    "onSubmit",
    "leftItem"
  ]);
  const [value, setValue] = (0, import_react291.useState)(inputValue);
  const { input, preview } = useMultiStyleConfig("EditableText", { size: size4, value });
  (0, import_react291.useEffect)(() => {
    setValue(inputValue);
  }, [inputValue]);
  return import_react291.default.createElement(
    Editable,
    __spreadValues$N({
      isPreviewFocusable: true,
      selectAllOnFocus: false,
      value,
      onChange: (newValue) => setValue(newValue),
      onSubmit
    }, rest),
    import_react291.default.createElement(InputGroup, { size: size4 }, leftItem && import_react291.default.createElement(InputLeftElement, null, leftItem), import_react291.default.createElement(
      Input,
      {
        as: EditablePreview,
        sx: preview
      }
    ), import_react291.default.createElement(
      Input,
      {
        as: EditableInput,
        size: size4,
        sx: input
      }
    ), import_react291.default.createElement(InputRightElement, { sx: { width: "min-content" } }, import_react291.default.createElement(EditableControls, { size: size4 })))
  );
};
var __defProp$M = Object.defineProperty;
var __getOwnPropSymbols$M = Object.getOwnPropertySymbols;
var __hasOwnProp$M = Object.prototype.hasOwnProperty;
var __propIsEnum$M = Object.prototype.propertyIsEnumerable;
var __defNormalProp$M = (obj, key2, value) => key2 in obj ? __defProp$M(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$M = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$M.call(b2, prop2))
      __defNormalProp$M(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$M)
    for (var prop2 of __getOwnPropSymbols$M(b2)) {
      if (__propIsEnum$M.call(b2, prop2))
        __defNormalProp$M(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$D = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$M.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$M)
    for (var prop2 of __getOwnPropSymbols$M(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$M.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ModalBase = (_a9) => {
  var _b5 = _a9, {
    isCentered = true,
    children
  } = _b5, rest = __objRest$D(_b5, [
    "isCentered",
    "children"
  ]);
  return import_react291.default.createElement(
    Modal,
    __spreadValues$M({
      isCentered,
      scrollBehavior: "inside",
      motionPreset: "slideInBottom"
    }, rest),
    import_react291.default.createElement(ModalOverlay, null),
    import_react291.default.createElement(ModalContent, { "data-testid": "modal-test-id" }, import_react291.default.createElement(ModalCloseButton, { "data-testid": "modal-test-button-id" }), children)
  );
};
var __defProp$L = Object.defineProperty;
var __getOwnPropSymbols$L = Object.getOwnPropertySymbols;
var __hasOwnProp$L = Object.prototype.hasOwnProperty;
var __propIsEnum$L = Object.prototype.propertyIsEnumerable;
var __defNormalProp$L = (obj, key2, value) => key2 in obj ? __defProp$L(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$L = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$L.call(b2, prop2))
      __defNormalProp$L(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$L)
    for (var prop2 of __getOwnPropSymbols$L(b2)) {
      if (__propIsEnum$L.call(b2, prop2))
        __defNormalProp$L(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$C = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$L.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$L)
    for (var prop2 of __getOwnPropSymbols$L(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$L.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Modal2 = (_a9) => {
  var _b5 = _a9, {
    stayMountedOnClose = false,
    isOpen
  } = _b5, rest = __objRest$C(_b5, [
    "stayMountedOnClose",
    "isOpen"
  ]);
  return import_react291.default.createElement(import_react291.default.Fragment, null, (stayMountedOnClose || isOpen) && import_react291.default.createElement(ModalBase, __spreadValues$L({ isOpen }, rest)));
};
var __defProp$K = Object.defineProperty;
var __getOwnPropSymbols$K = Object.getOwnPropertySymbols;
var __hasOwnProp$K = Object.prototype.hasOwnProperty;
var __propIsEnum$K = Object.prototype.propertyIsEnumerable;
var __defNormalProp$K = (obj, key2, value) => key2 in obj ? __defProp$K(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$K = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$K.call(b2, prop2))
      __defNormalProp$K(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$K)
    for (var prop2 of __getOwnPropSymbols$K(b2)) {
      if (__propIsEnum$K.call(b2, prop2))
        __defNormalProp$K(a2, prop2, b2[prop2]);
    }
  return a2;
};
var ModalBody2 = (props) => import_react291.default.createElement(ModalBody, __spreadValues$K({ minH: props.h, maxH: props.h }, props));
var __defProp$J = Object.defineProperty;
var __getOwnPropSymbols$J = Object.getOwnPropertySymbols;
var __hasOwnProp$J = Object.prototype.hasOwnProperty;
var __propIsEnum$J = Object.prototype.propertyIsEnumerable;
var __defNormalProp$J = (obj, key2, value) => key2 in obj ? __defProp$J(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$J = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$J.call(b2, prop2))
      __defNormalProp$J(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$J)
    for (var prop2 of __getOwnPropSymbols$J(b2)) {
      if (__propIsEnum$J.call(b2, prop2))
        __defNormalProp$J(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$B = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$J.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$J)
    for (var prop2 of __getOwnPropSymbols$J(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$J.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FileEditorModal = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    fileName,
    setFileName,
    isOpen,
    onClose,
    image = "",
    handleCrop,
    isImage,
    canEditFileName = true,
    canCropImage = false
  } = _b5, rest = __objRest$B(_b5, [
    "fileName",
    "setFileName",
    "isOpen",
    "onClose",
    "image",
    "handleCrop",
    "isImage",
    "canEditFileName",
    "canCropImage"
  ]);
  const [zoomLevel, setZoomLevel] = (0, import_react291.useState)(1);
  const [position3, setPosition] = (0, import_react291.useState)({ x: 0.5, y: 0.5 });
  const handleClose = () => {
    setZoomLevel(1);
    onClose();
  };
  return import_react291.default.createElement(
    Modal2,
    __spreadValues$J({
      isOpen,
      onClose,
      closeOnOverlayClick: false
    }, rest),
    import_react291.default.createElement(ModalHeader, null, "Edit ", isImage ? "image" : "file"),
    import_react291.default.createElement(
      ModalBody2,
      {
        display: "flex",
        justifyContent: "start",
        flexDirection: "column",
        alignItems: "center",
        gap: 4,
        minH: "300px"
      },
      import_react291.default.createElement(Stack, { display: isImage && canCropImage ? "inherit" : "none" }, import_react291.default.createElement(
        import_react_avatar_editor.default,
        {
          ref,
          image: image || "",
          onPositionChange: (pos) => setPosition(pos),
          position: position3,
          width: 250,
          height: 250,
          border: 50,
          color: [255, 255, 255, 0.7],
          scale: zoomLevel,
          rotate: 0
        }
      ), import_react291.default.createElement(HStack, { w: "90%" }, import_react291.default.createElement(FormLabel3, null, "Zoom"), import_react291.default.createElement(
        Slider,
        {
          "aria-label": "zoom",
          defaultValue: zoomLevel,
          maxW: "50%",
          min: 0.1,
          step: 0.05,
          max: 10,
          onChange: (value) => setZoomLevel(value)
        },
        import_react291.default.createElement(SliderTrack, null, import_react291.default.createElement(SliderFilledTrack, null)),
        import_react291.default.createElement(SliderThumb, { boxSize: 6 }, import_react291.default.createElement(Icon$1, { as: SvgZoomInDuo }))
      ))),
      canEditFileName && import_react291.default.createElement(Stack, { w: "90%", direction: isImage ? "row" : "column", pt: 2 }, import_react291.default.createElement(FormLabel3, null, "Name the file:"), import_react291.default.createElement(Box, { maxW: "50%" }, import_react291.default.createElement(EditableText, { onSubmit: (v) => setFileName(v), value: fileName, size: "sm" })))
    ),
    import_react291.default.createElement(ModalFooter, null, import_react291.default.createElement(HStack, null, import_react291.default.createElement(Button$1, { variant: "danger", onClick: handleClose }, "Cancel"), import_react291.default.createElement(Button$1, { variant: "success", onClick: handleCrop }, "Save")))
  );
});
var __defProp$I = Object.defineProperty;
var __getOwnPropSymbols$I = Object.getOwnPropertySymbols;
var __hasOwnProp$I = Object.prototype.hasOwnProperty;
var __propIsEnum$I = Object.prototype.propertyIsEnumerable;
var __defNormalProp$I = (obj, key2, value) => key2 in obj ? __defProp$I(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$I = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$I.call(b2, prop2))
      __defNormalProp$I(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$I)
    for (var prop2 of __getOwnPropSymbols$I(b2)) {
      if (__propIsEnum$I.call(b2, prop2))
        __defNormalProp$I(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$A = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$I.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$I)
    for (var prop2 of __getOwnPropSymbols$I(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$I.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ConfirmDeleteModal = (_a9) => {
  var _b5 = _a9, {
    isOpen,
    onClose,
    confirmDelete,
    fileName
  } = _b5, rest = __objRest$A(_b5, [
    "isOpen",
    "onClose",
    "confirmDelete",
    "fileName"
  ]);
  const handleDelete = () => {
    confirmDelete();
    onClose();
  };
  return import_react291.default.createElement(Modal2, __spreadValues$I({ isOpen, onClose }, rest), import_react291.default.createElement(
    ModalHeader,
    {
      sx: { fontSize: "lg" },
      overflow: "hidden",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      pr: 16
    },
    "Delete ",
    fileName
  ), import_react291.default.createElement(ModalBody2, null, "Deleting this file is a permanent action. You will not be able to recover this file at a later time."), import_react291.default.createElement(ModalFooter, null, import_react291.default.createElement(Button$1, { variant: "danger", onClick: handleDelete }, "Delete")));
};
var updateTimeThreshold = 0.5;
var animationSlideTime = 250;
var __defProp$H = Object.defineProperty;
var __getOwnPropSymbols$H = Object.getOwnPropertySymbols;
var __hasOwnProp$H = Object.prototype.hasOwnProperty;
var __propIsEnum$H = Object.prototype.propertyIsEnumerable;
var __defNormalProp$H = (obj, key2, value) => key2 in obj ? __defProp$H(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$H = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$H.call(b2, prop2))
      __defNormalProp$H(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$H)
    for (var prop2 of __getOwnPropSymbols$H(b2)) {
      if (__propIsEnum$H.call(b2, prop2))
        __defNormalProp$H(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$z = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$H.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$H)
    for (var prop2 of __getOwnPropSymbols$H(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$H.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ProgressBar = (0, import_react291.forwardRef)(
  (_a9, ref) => {
    var _b5 = _a9, { animationSlideTimeMs = animationSlideTime, sx } = _b5, props = __objRest$z(_b5, ["animationSlideTimeMs", "sx"]);
    return import_react291.default.createElement(
      Progress,
      __spreadValues$H({
        ref,
        width: "full",
        height: "1a",
        borderRadius: "full",
        sx: __spreadValues$H({
          '>[role="progressbar"]': {
            transition: `width ${animationSlideTimeMs}ms ease-out`
          }
        }, sx)
      }, props)
    );
  }
);
var formattedTime = (seconds) => {
  let baseString = "";
  const hours = Math.floor(seconds / 3600);
  if (hours > 0) {
    baseString += ` ${hours}h`;
  }
  const minutes = Math.floor((seconds - hours * 3600) / 60);
  if (minutes > 0) {
    baseString += ` ${minutes}min`;
  }
  const newSeconds = Math.floor(seconds - hours * 3600 - minutes * 60);
  if (newSeconds > 0) {
    baseString += ` ${newSeconds}s`;
  }
  return baseString;
};
var __defProp$G = Object.defineProperty;
var __getOwnPropSymbols$G = Object.getOwnPropertySymbols;
var __hasOwnProp$G = Object.prototype.hasOwnProperty;
var __propIsEnum$G = Object.prototype.propertyIsEnumerable;
var __defNormalProp$G = (obj, key2, value) => key2 in obj ? __defProp$G(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$G = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$G.call(b2, prop2))
      __defNormalProp$G(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$G)
    for (var prop2 of __getOwnPropSymbols$G(b2)) {
      if (__propIsEnum$G.call(b2, prop2))
        __defNormalProp$G(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$y2 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$G.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$G)
    for (var prop2 of __getOwnPropSymbols$G(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$G.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var LoadingBar = (_a9) => {
  var _b5 = _a9, {
    loaded,
    onLoadEnd = () => {
    },
    hideDisplay = true
  } = _b5, rest = __objRest$y2(_b5, [
    "loaded",
    "onLoadEnd",
    "hideDisplay"
  ]);
  const ref = (0, import_react291.useRef)(null);
  const timeRef = (0, import_react291.useRef)(0);
  const progress4 = Math.max(0, Math.min(loaded, 1));
  const [timeLeft, setTimeLeft] = (0, import_react291.useState)(0);
  (0, import_react291.useEffect)(() => {
    if (ref.current) {
      ref.current.children[0].style.width = `${progress4 * 100}%`;
    }
    if (timeRef.current) {
      const deltaTime = timeRef.current ? (Date.now() - timeRef.current) / 1e3 : 0;
      if (deltaTime > updateTimeThreshold) {
        const newEstimate = progress4 !== 0 ? deltaTime / progress4 : 0;
        setTimeLeft(Math.round(newEstimate - deltaTime));
      }
    } else if (progress4 > 0) {
      timeRef.current = Date.now();
    }
  }, [progress4]);
  return import_react291.default.createElement(
    Fade3,
    {
      in: progress4 < 1,
      enterDuration: 1,
      exitDelay: 250,
      exitDuration: 1e3,
      hideDisplay,
      onTransitionComplete: () => {
        if (progress4 >= 1) {
          onLoadEnd();
        }
      }
    },
    import_react291.default.createElement(VStack, __spreadValues$G({}, rest), import_react291.default.createElement(Small$1, null, Math.round(progress4 * 100), "%", " ", !!timeLeft && `· ${formattedTime(timeLeft)} left`), import_react291.default.createElement(
      ProgressBar,
      {
        ref,
        animationSlideTimeMs: animationSlideTime
      }
    ))
  );
};
var fiveHundredMB = 524288e3;
var imageLazyThreshold = 15728540;
var defaultEditOptions = {
  canEdit: true,
  canEditImage: true,
  canEditName: true
};
var __defProp$F2 = Object.defineProperty;
var __defProps$7 = Object.defineProperties;
var __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$F2 = Object.getOwnPropertySymbols;
var __hasOwnProp$F2 = Object.prototype.hasOwnProperty;
var __propIsEnum$F2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$F2 = (obj, key2, value) => key2 in obj ? __defProp$F2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$F2 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$F2.call(b2, prop2))
      __defNormalProp$F2(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$F2)
    for (var prop2 of __getOwnPropSymbols$F2(b2)) {
      if (__propIsEnum$F2.call(b2, prop2))
        __defNormalProp$F2(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$7 = (a2, b2) => __defProps$7(a2, __getOwnPropDescs$7(b2));
var getResizingFactor = (imgWidth, imgHeight, maxWidth, maxHeight) => Math.min(1, Math.min(maxWidth / imgWidth, maxHeight / imgHeight));
var convertBlobToFile = (blob, name, type) => new File([blob], name, { type });
var compressImage = (file, maxWidth = 3e3, maxHeight = 3e3, quality = 0.75) => {
  const canvas = document.createElement("canvas");
  const context2 = canvas.getContext("2d");
  if (!context2)
    return file;
  const imageBuffer = new Image();
  imageBuffer.src = URL.createObjectURL(file);
  return new Promise((resolve) => {
    imageBuffer.onload = () => {
      const resizingFactor = getResizingFactor(
        imageBuffer.width,
        imageBuffer.height,
        maxWidth,
        maxHeight
      );
      const scaledWidth = imageBuffer.width * resizingFactor;
      const scaledHeight = imageBuffer.height * resizingFactor;
      canvas.width = scaledWidth;
      canvas.height = scaledHeight;
      context2.drawImage(imageBuffer, 0, 0, scaledWidth, scaledHeight);
      canvas.toBlob(
        (blob) => {
          if (file && blob) {
            const newImage = convertBlobToFile(blob, file.name, file.type);
            resolve(newImage);
          } else {
            resolve(file);
          }
        },
        "image/jpeg",
        quality
      );
    };
  });
};
var readableFileSize = (size4) => {
  if (size4 <= 0)
    return 0;
  const i2 = Math.floor(Math.log(size4) / Math.log(1024));
  return `${(size4 / 1024 ** i2).toFixed(1)} ${["B", "kB", "MB", "GB", "TB"][i2]}`;
};
var getImageAsFile = async (image, name) => fetch(image.src).then((res) => res.blob()).then(
  (blob) => new Promise((resolve) => {
    const newImage = convertBlobToFile(blob, name || image.name, image.type);
    resolve(newImage);
  })
);
var getFormatsAsArray = (acceptFormat) => (0, import_ramda.split)(",", acceptFormat).map((format2) => (0, import_ramda.trim)(format2));
var getAcceptedExtensions = (acceptFormat) => getFormatsAsArray(acceptFormat).filter((format2) => (0, import_ramda.test)(/^\./, format2)).map((format2) => format2.substring(1));
var getAcceptedFormats = (acceptFormat) => getFormatsAsArray(acceptFormat).filter((format2) => (0, import_ramda.test)(/\//, format2)).map((format2) => (0, import_ramda.split)("/", format2)[0]);
var getFileExtension = (file) => (0, import_ramda.last)((0, import_ramda.split)("/", file.type));
var getFileFormat = (file) => (0, import_ramda.split)("/", file.type)[0];
var validFileFormat = (file, acceptFormat) => acceptFormat === "*" || getAcceptedFormats(acceptFormat).includes(getFileFormat(file)) || getAcceptedExtensions(acceptFormat).includes(getFileExtension(file));
var isValidFile = (file, acceptFormat, maxFileSize) => {
  const isValid = file.size < maxFileSize && validFileFormat(file, acceptFormat);
  return {
    isValid,
    errorMessage: file.size > maxFileSize ? "File size is too big" : isValid ? "" : "File format not supported"
  };
};
function getNewUploadingFiles(prev2, curr, files) {
  let buffer = prev2;
  const prevIDs = prev2 ? prev2.map((file) => file.name) : null;
  const currentIDs = curr ? curr.map((file) => file.name) : null;
  const removedItemsIDs = prevIDs && currentIDs && (0, import_ramda.difference)(prevIDs, currentIDs);
  const filesIDs = files.map((file) => file.name);
  if (removedItemsIDs) {
    if (removedItemsIDs.length === 0 || (0, import_ramda.intersection)(removedItemsIDs, filesIDs).length > 0) {
      buffer = curr;
    } else {
      buffer.forEach(
        (value, index5) => {
          if (removedItemsIDs.includes(value.name)) {
            const updatedData = __spreadProps$7(__spreadValues$F2({}, value), {
              uploaded: (0, import_ramda.has)("size", value) ? value.size : 0
            });
            buffer[index5] = updatedData;
          }
        }
      );
    }
  } else {
    buffer = curr;
  }
  return buffer;
}
var generateId2 = () => Math.random().toString().substring(3);
var isFile = (file) => "File" in window && file instanceof File;
var isFileImage = (file) => {
  if (isFile(file)) {
    return getFileFormat(file) === "image";
  }
  switch (getFileFormat(file)) {
    case "image":
    case "jpeg":
    case "jpg":
    case "png":
    case "gif":
    case "tiff":
    case "jfif":
      return true;
    default:
      return false;
  }
};
var onlyAcceptsImages = (acceptFormat) => {
  if (acceptFormat === "*" || acceptFormat === "") {
    return false;
  }
  const formats = getAcceptedFormats(acceptFormat);
  const extensions = getAcceptedExtensions(acceptFormat);
  const premiseOne = (0, import_ramda.isEmpty)(formats) || (0, import_ramda.all)((type) => type === "image", formats);
  const premiseTwo = (0, import_ramda.isEmpty)(extensions) || (0, import_ramda.all)((type) => isFileImage({ type }), extensions);
  return premiseOne && premiseTwo;
};
var createFileObject = (file) => {
  const fileId = generateId2();
  const fileObject = {
    _id: fileId,
    size: null,
    src: null,
    type: file.type,
    name: file.name,
    isUploading: true,
    isLazy: file.size > imageLazyThreshold && isFileImage(file)
  };
  return fileObject;
};
var createPreviewFileObject = (file) => {
  const fileId = generateId2();
  const fileObject = {
    _id: fileId,
    size: file.size,
    src: URL.createObjectURL(file),
    type: file.type,
    name: file.name,
    isUploading: false,
    isLazy: false
  };
  return fileObject;
};
var createFileObjectFromSrc = (file) => {
  const fileId = generateId2();
  const fileObject = {
    _id: fileId,
    size: null,
    src: file.src,
    type: file.type,
    name: file.name,
    isUploading: false,
    isLazy: false
  };
  return fileObject;
};
var isOverflowing = (element) => element ? element.scrollHeight > element.clientHeight : false;
var toBase64 = (file) => new Promise((resolve, reject) => {
  const reader = new FileReader();
  reader.readAsDataURL(file);
  reader.onload = () => resolve(reader.result);
  reader.onerror = (error2) => reject(error2);
});
var correctFileExtension = (str) => (0, import_ramda.test)(/./g, str);
var getFileFormattedName = (file) => correctFileExtension(file.name) ? file.name : `${file.name}.${getFileExtension(file)}`;
var handleDownload = (file) => () => {
  if (!file)
    return;
  const anchor = document.createElement("a");
  anchor.href = isFile(file) ? URL.createObjectURL(file) : file.src || "";
  anchor.download = isFile(file) ? "downloaded-file.jpg" : getFileFormattedName(file);
  anchor.click();
};
var __defProp$E2 = Object.defineProperty;
var __getOwnPropSymbols$E2 = Object.getOwnPropertySymbols;
var __hasOwnProp$E2 = Object.prototype.hasOwnProperty;
var __propIsEnum$E2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$E2 = (obj, key2, value) => key2 in obj ? __defProp$E2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$E2 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$E2.call(b2, prop2))
      __defNormalProp$E2(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$E2)
    for (var prop2 of __getOwnPropSymbols$E2(b2)) {
      if (__propIsEnum$E2.call(b2, prop2))
        __defNormalProp$E2(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$x2 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$E2.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$E2)
    for (var prop2 of __getOwnPropSymbols$E2(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$E2.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FileIconButton = (_a9) => {
  var _b5 = _a9, {
    icon,
    color: color5 = "unset"
  } = _b5, rest = __objRest$x2(_b5, [
    "icon",
    "color"
  ]);
  return import_react291.default.createElement(IconButton2, __spreadValues$E2({ variant: "ghost", size: "sm" }, rest), import_react291.default.createElement(Icon$1, { as: icon, boxSize: "24px", color: color5 }));
};
var __defProp$D = Object.defineProperty;
var __defProps$6 = Object.defineProperties;
var __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$D = Object.getOwnPropertySymbols;
var __hasOwnProp$D = Object.prototype.hasOwnProperty;
var __propIsEnum$D = Object.prototype.propertyIsEnumerable;
var __defNormalProp$D = (obj, key2, value) => key2 in obj ? __defProp$D(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$D = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$D.call(b2, prop2))
      __defNormalProp$D(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$D)
    for (var prop2 of __getOwnPropSymbols$D(b2)) {
      if (__propIsEnum$D.call(b2, prop2))
        __defNormalProp$D(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$6 = (a2, b2) => __defProps$6(a2, __getOwnPropDescs$6(b2));
var __objRest$w = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$D.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$D)
    for (var prop2 of __getOwnPropSymbols$D(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$D.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FilePicker = (_a9) => {
  var _b5 = _a9, {
    acceptFormat = "*",
    onChange: onChange2 = import_ramda.identity,
    compression,
    uploaded: uploadedInitial = 0,
    maxFileSize = fiveHundredMB,
    showProgress = false,
    value = "",
    loadWithSpinner = false,
    confirmDelete = false,
    editFileOptions = defaultEditOptions
  } = _b5, rest = __objRest$w(_b5, [
    "acceptFormat",
    "onChange",
    "compression",
    "uploaded",
    "maxFileSize",
    "showProgress",
    "value",
    "loadWithSpinner",
    "confirmDelete",
    "editFileOptions"
  ]);
  const fileInputRef = (0, import_react291.useRef)(null);
  const imageEditorRef = (0, import_react291.useRef)(null);
  const [file, setFile] = (0, import_react291.useState)(value);
  const [isInvalid, setIsInvalid] = (0, import_react291.useState)(false);
  const [name, setName] = (0, import_react291.useState)("");
  const editModal = useDisclosure();
  const deleteModal = useDisclosure();
  const [editable, setEditable] = (0, import_react291.useState)(false);
  const [hasLoaded, setHasLoaded] = (0, import_react291.useState)(false);
  const [isLoading, setIsLoading] = (0, import_react291.useState)(false);
  const [isImage, setIsImage] = (0, import_react291.useState)(true);
  const [uploaded, setUploaded] = (0, import_react291.useState)(uploadedInitial);
  const onlyImageAccepted = onlyAcceptsImages(acceptFormat);
  const isUploading = uploaded < 1;
  (0, import_react291.useEffect)(() => {
    setUploaded(uploadedInitial);
  }, [uploadedInitial]);
  (0, import_react291.useEffect)(() => {
    if (!isUploading) {
      setIsLoading(false);
      setHasLoaded(true);
    }
  }, [isUploading]);
  const currentTheme = useCurrentTheme();
  const { filePicker } = useMultiStyleConfig("FilePicker", __spreadValues$D({
    isImage,
    hasLoaded,
    isInvalid,
    currentTheme
  }, rest));
  (0, import_react291.useEffect)(() => {
    if (isInvalid) {
      setTimeout(() => {
        setIsInvalid(false);
      }, 1500);
    }
  }, [isInvalid]);
  const handleOnClick = () => {
    if (fileInputRef.current && !file) {
      fileInputRef.current.click();
    }
  };
  const handleCrop = () => {
    if (imageEditorRef.current) {
      const canvas = imageEditorRef.current.getImageScaledToCanvas();
      canvas.toBlob((blob) => {
        if (file && blob) {
          const fileName = name || isFile(file) ? file.name : "downloaded-file";
          const fileType = isFile(file) ? file.type : ".jpg";
          const newFile = convertBlobToFile(blob, fileName, fileType);
          setFile(newFile);
          setHasLoaded(true);
          onChange2(newFile);
        }
      });
      editModal.onClose();
    }
  };
  const clearImage = () => {
    if (fileInputRef.current) {
      setIsInvalid(false);
      setName("");
      setFile(null);
      setIsImage(true);
      setHasLoaded(false);
      if (!showProgress) {
        setUploaded(0);
      }
      onChange2(null);
      fileInputRef.current.value = "";
    }
  };
  const handleImageUpload = async (newImage) => {
    if (newImage) {
      setIsInvalid(false);
      const isFileTypeImage = isFileImage(newImage);
      setIsImage(isFileTypeImage);
      const compressedImage = isFileTypeImage ? await compressImage(
        newImage,
        compression == null ? void 0 : compression.width,
        compression == null ? void 0 : compression.height,
        compression == null ? void 0 : compression.quality
      ) : newImage;
      setFile(compressedImage);
      if (!showProgress) {
        setUploaded(1);
      }
      onChange2(compressedImage);
      setIsLoading(isUploading);
    }
  };
  const handleChange = async (e) => {
    if (e.target.files) {
      setIsInvalid(false);
      const newImage = e.target.files[0];
      handleImageUpload(newImage);
    }
  };
  const handleDrop = (e) => {
    e.preventDefault();
    if (e.dataTransfer.files) {
      const newFile = e.dataTransfer.files[0];
      if (isValidFile(newFile, acceptFormat, maxFileSize).isValid) {
        handleImageUpload(newFile);
      } else {
        setIsInvalid(true);
      }
    }
  };
  return import_react291.default.createElement(Stack, __spreadValues$D({ maxW: filePicker.width }, rest), import_react291.default.createElement(
    Clickable,
    {
      onClick: handleOnClick,
      onDrop: handleDrop,
      onDragOver: (e) => e.preventDefault(),
      onMouseEnter: () => setEditable(true),
      onMouseLeave: () => setEditable(false)
    },
    import_react291.default.createElement(Box, { sx: filePicker }, import_react291.default.createElement(
      SlideFade,
      {
        in: hasLoaded,
        style: {
          width: "100%",
          height: "100%",
          display: hasLoaded && isImage ? "initial" : "none"
        }
      },
      import_react291.default.createElement(
        Image2,
        {
          src: file ? isFile(file) ? URL.createObjectURL(file) : file : "",
          alt: "preview-image",
          objectFit: "cover",
          borderRadius: 8,
          display: hasLoaded && isImage ? "inherit" : "none",
          h: "full",
          w: "full"
        }
      )
    ), import_react291.default.createElement(
      Input,
      {
        type: "file",
        display: "none",
        accept: acceptFormat,
        ref: fileInputRef,
        onChange: handleChange
      }
    ), import_react291.default.createElement(
      Stack,
      {
        display: hasLoaded && isImage ? "none" : "default",
        alignItems: "center",
        w: "85%",
        spacing: "0a"
      },
      import_react291.default.createElement(
        Icon$1,
        {
          as: onlyImageAccepted ? SvgImage03Solid : SvgUploadCloudSolid,
          boxSize: "32px",
          color: isInvalid ? "red.500" : editable ? "blue.500" : "gray.300",
          display: isImage && !hasLoaded ? "inline-block" : "none",
          "aria-label": "file-icon-upload"
        }
      ),
      import_react291.default.createElement(
        Icon$1,
        {
          as: SvgFileBlankDuo,
          boxSize: "32px",
          color: "gray.300",
          display: hasLoaded && !isImage ? "inline-block" : "none"
        }
      ),
      import_react291.default.createElement(
        P$1,
        {
          variant: isInvalid ? "16" : "14",
          whiteSpace: "nowrap",
          textOverflow: "ellipsis",
          overflow: "hidden",
          maxWidth: filePicker.width,
          textAlign: "center",
          alignSelf: "center"
        },
        isInvalid ? "File not supported" : file && isFile(file) ? file.name : `Drag & drop ${onlyImageAccepted ? "image" : "file"} or`
      ),
      import_react291.default.createElement(
        Lead$1,
        {
          sx: {
            textDecoration: "underline",
            color: isInvalid ? "red.500" : "blue.500"
          },
          display: isLoading || hasLoaded ? "none" : "default"
        },
        "Click to upload"
      ),
      import_react291.default.createElement(Box, { display: isLoading ? "block" : "none", pt: 1 }, loadWithSpinner ? import_react291.default.createElement(Spinner$1, null) : import_react291.default.createElement(LoadingBar, { loaded: uploaded }))
    ), import_react291.default.createElement(
      Fade,
      {
        in: hasLoaded && editable,
        style: {
          display: hasLoaded && editable ? "flex" : "none",
          justifyContent: "center"
        }
      },
      import_react291.default.createElement(
        HStack,
        {
          spacing: 2,
          position: "absolute",
          bottom: "3",
          justifyContent: "center",
          bgColor: "bg.layer",
          borderRadius: 6,
          width: "44",
          py: 2
        },
        editFileOptions.canEdit && import_react291.default.createElement(
          FileIconButton,
          {
            "aria-label": "edit-file",
            onClick: editModal.onOpen,
            icon: SvgEditBoxDuo
          }
        ),
        import_react291.default.createElement(
          FileIconButton,
          {
            "aria-label": "download-file",
            onClick: handleDownload(file),
            icon: SvgDownloadDuo
          }
        ),
        import_react291.default.createElement(
          FileIconButton,
          {
            "aria-label": "delete-file",
            onClick: confirmDelete ? deleteModal.onOpen : clearImage,
            icon: SvgTrashFullDuo,
            color: "red.500"
          }
        )
      )
    ), import_react291.default.createElement(
      P$1,
      {
        variant: "14",
        sx: { color: "gray.400" },
        display: hasLoaded && !isImage && !isLoading ? "inline-block" : "none"
      },
      isFile(file) && readableFileSize(file == null ? void 0 : file.size)
    ))
  ), import_react291.default.createElement(
    FileEditorModal,
    __spreadProps$6(__spreadValues$D({}, editModal), {
      fileName: name,
      setFileName: setName,
      image: file,
      handleCrop,
      isImage,
      ref: imageEditorRef,
      canEditFileName: editFileOptions.canEditName,
      canCropImage: editFileOptions.canEditImage
    })
  ), import_react291.default.createElement(
    ConfirmDeleteModal,
    __spreadProps$6(__spreadValues$D({}, deleteModal), {
      confirmDelete: clearImage,
      fileName: name || "file"
    })
  ));
};
var __defProp$C = Object.defineProperty;
var __getOwnPropSymbols$C = Object.getOwnPropertySymbols;
var __hasOwnProp$C = Object.prototype.hasOwnProperty;
var __propIsEnum$C = Object.prototype.propertyIsEnumerable;
var __defNormalProp$C = (obj, key2, value) => key2 in obj ? __defProp$C(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$C = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$C.call(b2, prop2))
      __defNormalProp$C(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$C)
    for (var prop2 of __getOwnPropSymbols$C(b2)) {
      if (__propIsEnum$C.call(b2, prop2))
        __defNormalProp$C(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$v = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$C.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$C)
    for (var prop2 of __getOwnPropSymbols$C(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$C.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FilePickerField = (_a9) => {
  var _b5 = _a9, {
    name,
    label,
    direction: direction2,
    isRequired,
    validate: validate2,
    onChange: onChangeCallback = import_ramda.identity
  } = _b5, rest = __objRest$v(_b5, [
    "name",
    "label",
    "direction",
    "isRequired",
    "validate",
    "onChange"
  ]);
  const [uploaded, setUploaded] = (0, import_react291.useState)(0);
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      validate: validate2
    },
    ({ onChange: onChange2, value }) => import_react291.default.createElement(
      FilePicker,
      __spreadValues$C({
        onChange: async (file) => {
          if (file) {
            const formattedFile = await toBase64(file);
            setUploaded(1);
            onChange2(formattedFile);
            onChangeCallback(formattedFile);
          } else {
            setUploaded(0);
            onChange2(null);
            onChangeCallback(null);
          }
        },
        value,
        uploaded: value ? 1 : uploaded,
        loadWithSpinner: true,
        acceptFormat: "image/*"
      }, rest)
    )
  );
};
var __defProp$B = Object.defineProperty;
var __getOwnPropSymbols$B = Object.getOwnPropertySymbols;
var __hasOwnProp$B = Object.prototype.hasOwnProperty;
var __propIsEnum$B = Object.prototype.propertyIsEnumerable;
var __defNormalProp$B = (obj, key2, value) => key2 in obj ? __defProp$B(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$B = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$B.call(b2, prop2))
      __defNormalProp$B(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$B)
    for (var prop2 of __getOwnPropSymbols$B(b2)) {
      if (__propIsEnum$B.call(b2, prop2))
        __defNormalProp$B(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$u = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$B.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$B)
    for (var prop2 of __getOwnPropSymbols$B(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$B.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
function MultiFileUploader(_a9) {
  var _b5 = _a9, {
    acceptFormat = "*",
    compression,
    onChange: onChange2 = import_ramda.identity,
    addFilesToQueue = import_ramda.identity,
    updatePreviewFiles = import_ramda.identity,
    maxFileSize = fiveHundredMB
  } = _b5, rest = __objRest$u(_b5, [
    "acceptFormat",
    "compression",
    "onChange",
    "addFilesToQueue",
    "updatePreviewFiles",
    "maxFileSize"
  ]);
  const inputRef = (0, import_react291.useRef)(null);
  const [isInvalid, setIsInvalid] = (0, import_react291.useState)(false);
  const currentTheme = useCurrentTheme();
  const { multiFilePicker } = useMultiStyleConfig("FilePicker", __spreadValues$B({ isInvalid, currentTheme }, rest));
  const [active, setActive] = (0, import_react291.useState)(false);
  const [errorMessage, setErrorMessage] = (0, import_react291.useState)("");
  const onlyImageAccepted = onlyAcceptsImages(acceptFormat);
  (0, import_react291.useEffect)(() => {
    if (isInvalid) {
      setTimeout(() => {
        setIsInvalid(false);
      }, 1500);
    }
  }, [isInvalid]);
  const toggleHover = () => {
    setActive((prev2) => !prev2);
  };
  const handleClick = () => {
    if (inputRef.current) {
      inputRef.current.click();
    }
  };
  const updateMultipleFiles = async (newFiles) => {
    const filesArr = Array.prototype.slice.call(newFiles);
    const validFiles = (0, import_ramda.filter)((file) => {
      const fileCheck = isValidFile(file, acceptFormat, maxFileSize);
      if (!fileCheck.isValid) {
        setErrorMessage(fileCheck.errorMessage || "");
      }
      return fileCheck.isValid;
    }, filesArr);
    if (filesArr.length > 0 && validFiles.length === 0) {
      setIsInvalid(true);
    }
    addFilesToQueue(validFiles.map((file) => createFileObject(file)));
    updatePreviewFiles(validFiles.map((file) => createPreviewFileObject(file)));
    const compressedFiles = validFiles.map(
      async (file) => isFileImage(file) ? compressImage(
        file,
        compression == null ? void 0 : compression.width,
        compression == null ? void 0 : compression.height,
        compression == null ? void 0 : compression.quality
      ) : file
    );
    Promise.all(compressedFiles).then((values2) => {
      onChange2(values2);
      if (inputRef.current) {
        inputRef.current.value = "";
      }
    });
  };
  const handleDrop = (e) => {
    e.preventDefault();
    updateMultipleFiles(e.dataTransfer.files);
  };
  const handleChange = (e) => {
    if (e.target.files) {
      updateMultipleFiles(e.target.files);
    }
  };
  return import_react291.default.createElement(
    Clickable,
    {
      onClick: handleClick,
      onDragOver: (e) => e.preventDefault(),
      onDrop: handleDrop,
      onMouseEnter: toggleHover,
      onMouseLeave: toggleHover
    },
    import_react291.default.createElement(Box, __spreadValues$B({ sx: multiFilePicker }, rest), import_react291.default.createElement(
      Stack,
      {
        alignItems: "center",
        justifyContent: "center",
        h: "full",
        w: "full",
        spacing: 0
      },
      import_react291.default.createElement(
        Icon$1,
        {
          as: onlyImageAccepted ? SvgImage03Solid : SvgUploadCloudSolid,
          boxSize: "32px",
          color: isInvalid ? "red.500 " : active ? "blue.500 " : "gray.300",
          "aria-label": "image-icon-upload",
          mb: onlyImageAccepted ? "0a" : 0
        }
      ),
      import_react291.default.createElement(HStack, { spacing: 1, display: isInvalid ? "none" : "flex" }, import_react291.default.createElement(P$1, { variant: "14", textAlign: "center", alignSelf: "center" }, "Drag & drop ", onlyImageAccepted ? "images" : "files", " here or"), import_react291.default.createElement(Lead$1, { sx: { textDecoration: "underline", color: "blue.500" } }, "choose ", onlyImageAccepted ? "image" : "file")),
      import_react291.default.createElement(P$1, { variant: "14", textAlign: "center", alignSelf: "center", display: isInvalid ? "initial" : "none" }, errorMessage),
      import_react291.default.createElement(P$1, { variant: "14", sx: { color: "gray.400" } }, "Max file size is ", readableFileSize(maxFileSize))
    ), import_react291.default.createElement(
      Input,
      {
        type: "file",
        display: "none",
        accept: acceptFormat,
        onChange: handleChange,
        multiple: true,
        ref: inputRef
      }
    ))
  );
}
var __defProp$A = Object.defineProperty;
var __defProps$5 = Object.defineProperties;
var __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$A = Object.getOwnPropertySymbols;
var __hasOwnProp$A = Object.prototype.hasOwnProperty;
var __propIsEnum$A = Object.prototype.propertyIsEnumerable;
var __defNormalProp$A = (obj, key2, value) => key2 in obj ? __defProp$A(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$A = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$A.call(b2, prop2))
      __defNormalProp$A(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$A)
    for (var prop2 of __getOwnPropSymbols$A(b2)) {
      if (__propIsEnum$A.call(b2, prop2))
        __defNormalProp$A(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$5 = (a2, b2) => __defProps$5(a2, __getOwnPropDescs$5(b2));
function FileItem({
  onChangeCallback,
  addFile = import_ramda.identity,
  deleteFile,
  file,
  confirmDelete = true,
  isLazy = false,
  editFileOptions = defaultEditOptions
}) {
  const { canEdit, canEditImage, canEditName } = editFileOptions;
  const { fileItem } = useMultiStyleConfig("FilePicker");
  const editModalDisclosure = useDisclosure();
  const deleteModalDisclosure = useDisclosure();
  const imageEditorRef = (0, import_react291.useRef)(null);
  const [fileName, setFileName] = (0, import_react291.useState)("");
  const [show, setShow] = (0, import_react291.useState)(true);
  const [hasLoaded, setHasLoaded] = (0, import_react291.useState)(false);
  const [loadingImage, setLoadingImage] = (0, import_react291.useState)(true);
  (0, import_react291.useEffect)(() => {
    if (file.src) {
      const buffer = new Image();
      buffer.src = file.src;
      buffer.onload = () => {
        setLoadingImage(false);
      };
    }
  }, [file.isUploading]);
  const handleCrop = async () => {
    if (imageEditorRef.current && isFileImage(file)) {
      const canvas = imageEditorRef.current.getImageScaledToCanvas();
      canvas.toBlob(async (blob) => {
        if (file && blob) {
          const newFile = convertBlobToFile(blob, fileName || file.name, file.type);
          deleteFile(file);
          addFile(newFile, file._id);
          onChangeCallback([newFile]);
        }
      });
      editModalDisclosure.onClose();
    } else if (file.src) {
      const newFile = await getImageAsFile(file, fileName);
      deleteFile(file);
      addFile(newFile, file._id);
      onChangeCallback([newFile]);
    }
  };
  const clearImage = () => {
    setShow(false);
    setTimeout(() => {
      deleteFile(file);
    }, 500);
  };
  return import_react291.default.createElement(
    SlideFade3,
    {
      in: show,
      direction: "left",
      offset: 30,
      enterDuration: !isLazy ? 300 : 1,
      exitDuration: 300
    },
    import_react291.default.createElement(Box, { sx: fileItem }, import_react291.default.createElement(
      HStack,
      {
        w: "full",
        h: "full",
        borderRadius: 6,
        alignItems: "center",
        justifyContent: "space-between",
        px: 2,
        pt: file.isUploading && !hasLoaded ? 2 : 0
      },
      import_react291.default.createElement(HStack, { spacing: 4, alignItems: "start", maxW: "50%" }, isFileImage(file) ? file.isUploading || loadingImage ? import_react291.default.createElement(
        Icon$1,
        {
          as: SvgImage03Duo,
          bgColor: "gray.100",
          color: "gray.400",
          boxSize: "10",
          borderRadius: "8",
          p: "2"
        }
      ) : import_react291.default.createElement(
        Image2,
        {
          src: file.src || "",
          alt: "preview-image",
          objectFit: "cover",
          display: file.src ? "inherit" : "none",
          borderRadius: "8",
          boxSize: "10"
        }
      ) : import_react291.default.createElement(
        Icon$1,
        {
          as: SvgFileBlankDuo,
          boxSize: "10",
          p: "1",
          color: "gray.300"
        }
      ), import_react291.default.createElement(
        Stack,
        {
          alignItems: "start",
          justifyContent: "start",
          spacing: "0",
          maxW: "100%"
        },
        import_react291.default.createElement(
          P$1,
          {
            variant: "14",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
            overflow: "hidden",
            maxW: "100%"
          },
          file == null ? void 0 : file.name
        ),
        import_react291.default.createElement(P$1, { variant: "14", sx: { color: "gray.400" } }, (file == null ? void 0 : file.size) && readableFileSize(file.size))
      )),
      import_react291.default.createElement(
        HStack,
        {
          spacing: "3",
          justifyContent: "center",
          borderRadius: "6",
          bgColor: "bg.filled",
          display: file.isUploading ? "none" : "flex",
          p: "1"
        },
        canEdit && import_react291.default.createElement(
          FileIconButton,
          {
            "aria-label": "Edit-image",
            onClick: editModalDisclosure.onOpen,
            icon: SvgEditBoxDuo
          }
        ),
        import_react291.default.createElement(
          FileIconButton,
          {
            "aria-label": "download-image",
            onClick: handleDownload(file),
            icon: SvgDownloadDuo
          }
        ),
        import_react291.default.createElement(
          CloseButton,
          {
            onClick: confirmDelete ? deleteModalDisclosure.onOpen : clearImage
          }
        )
      )
    ), import_react291.default.createElement(
      Box,
      {
        w: "full",
        pl: "16",
        pr: "4",
        pb: "2",
        mt: "-2",
        display: file.isUploading ? "block" : "none"
      },
      import_react291.default.createElement(
        LoadingBar,
        {
          loaded: file.size ? ((file == null ? void 0 : file.uploaded) || 0) / file.size : 0,
          onLoadEnd: () => setHasLoaded(true)
        }
      )
    ), canEdit && import_react291.default.createElement(
      FileEditorModal,
      __spreadProps$5(__spreadValues$A({}, editModalDisclosure), {
        fileName: fileName || file.name,
        setFileName,
        image: file.src,
        canCropImage: canEditImage,
        canEditFileName: canEditName,
        handleCrop,
        isImage: isFileImage(file),
        ref: imageEditorRef
      })
    ), import_react291.default.createElement(
      ConfirmDeleteModal,
      __spreadProps$5(__spreadValues$A({}, deleteModalDisclosure), {
        confirmDelete: clearImage,
        fileName: fileName || file.name
      })
    ))
  );
}
var __defProp$z = Object.defineProperty;
var __getOwnPropSymbols$z = Object.getOwnPropertySymbols;
var __hasOwnProp$z = Object.prototype.hasOwnProperty;
var __propIsEnum$z = Object.prototype.propertyIsEnumerable;
var __defNormalProp$z = (obj, key2, value) => key2 in obj ? __defProp$z(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$z = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$z.call(b2, prop2))
      __defNormalProp$z(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$z)
    for (var prop2 of __getOwnPropSymbols$z(b2)) {
      if (__propIsEnum$z.call(b2, prop2))
        __defNormalProp$z(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$t = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$z.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$z)
    for (var prop2 of __getOwnPropSymbols$z(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$z.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
function MultiFileList(_a9) {
  var _b5 = _a9, {
    files,
    uploadingFiles,
    onChange: onChange2 = import_ramda.identity,
    deleteFile = import_ramda.identity,
    addFile = import_ramda.identity,
    confirmDelete,
    editFileOptions = defaultEditOptions,
    enableSmartLoad = true
  } = _b5, rest = __objRest$t(_b5, [
    "files",
    "uploadingFiles",
    "onChange",
    "deleteFile",
    "addFile",
    "confirmDelete",
    "editFileOptions",
    "enableSmartLoad"
  ]);
  const [uploadingFilesReference, setUploadingFilesReference] = (0, import_react291.useState)(uploadingFiles);
  const [overflowing, setOverflowing] = (0, import_react291.useState)(false);
  const formattedFiles = files == null ? void 0 : files.map((file) => isFile(file) ? createPreviewFileObject(file) : file);
  const listRef = (0, import_react291.useRef)(null);
  (0, import_react291.useEffect)(() => {
    if (uploadingFiles && uploadingFilesReference && files) {
      if (enableSmartLoad) {
        const newVal = getNewUploadingFiles(uploadingFilesReference, uploadingFiles, files);
        setUploadingFilesReference(newVal);
      } else {
        setUploadingFilesReference(uploadingFiles);
      }
    }
    if (listRef.current) {
      setOverflowing(isOverflowing(listRef.current));
    }
  }, [uploadingFiles, files]);
  const isLazy = uploadingFilesReference ? (0, import_ramda.any)((file) => file.isLazy || false, uploadingFilesReference) : false;
  return import_react291.default.createElement(
    Stack,
    __spreadValues$z({
      ref: listRef,
      spacing: 2,
      maxH: "sm",
      pr: overflowing ? 2 : 0,
      overflowY: "auto"
    }, rest),
    uploadingFilesReference && (0, import_ramda.map)((file) => import_react291.default.createElement(
      FileItem,
      {
        onChangeCallback: onChange2,
        file,
        key: file._id,
        deleteFile,
        confirmDelete,
        isLazy,
        editFileOptions
      }
    ), uploadingFilesReference),
    formattedFiles && (0, import_ramda.map)((file) => import_react291.default.createElement(
      FileItem,
      {
        onChangeCallback: onChange2,
        addFile,
        file,
        key: file._id,
        deleteFile,
        confirmDelete,
        editFileOptions
      }
    ), formattedFiles)
  );
}
var __defProp$y2 = Object.defineProperty;
var __getOwnPropSymbols$y2 = Object.getOwnPropertySymbols;
var __hasOwnProp$y2 = Object.prototype.hasOwnProperty;
var __propIsEnum$y2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$y2 = (obj, key2, value) => key2 in obj ? __defProp$y2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$y2 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$y2.call(b2, prop2))
      __defNormalProp$y2(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$y2)
    for (var prop2 of __getOwnPropSymbols$y2(b2)) {
      if (__propIsEnum$y2.call(b2, prop2))
        __defNormalProp$y2(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$s = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$y2.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$y2)
    for (var prop2 of __getOwnPropSymbols$y2(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$y2.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
function MultiFilePicker(_a9) {
  var _b5 = _a9, {
    acceptFormat = "*",
    compression,
    onChange: onChange2 = import_ramda.identity,
    files = null,
    uploadingFiles,
    deleteFile = null,
    confirmDelete = true,
    maxFileSize = fiveHundredMB,
    enablePreLoad = true,
    enableSmartLoad = true,
    editFileOptions = defaultEditOptions,
    variant
  } = _b5, rest = __objRest$s(_b5, [
    "acceptFormat",
    "compression",
    "onChange",
    "files",
    "uploadingFiles",
    "deleteFile",
    "confirmDelete",
    "maxFileSize",
    "enablePreLoad",
    "enableSmartLoad",
    "editFileOptions",
    "variant"
  ]);
  const [bufferFiles, setBufferFiles] = (0, import_react291.useState)([]);
  const [previewFiles, setPreviewFiles] = (0, import_react291.useState)([]);
  const getIndexById = (id3) => (0, import_ramda.findIndex)((file) => file._id === id3, previewFiles);
  const addFile = (file, id3) => {
    const addedFile = createPreviewFileObject(file);
    const indexOfChanged = getIndexById(id3);
    const newPreviewFiles = (0, import_ramda.remove)(indexOfChanged, 1, previewFiles);
    const newFiles = (0, import_ramda.insert)(indexOfChanged, addedFile, newPreviewFiles);
    setPreviewFiles(newFiles);
  };
  const handleDelete = (file) => {
    const indexOfRemoved = getIndexById(file._id);
    const newPreviewFiles = (0, import_ramda.remove)(indexOfRemoved, 1, previewFiles);
    setPreviewFiles(newPreviewFiles);
  };
  const updateQueuedFiles = (queuedFiles) => {
    if (enablePreLoad) {
      setBufferFiles(queuedFiles);
    }
  };
  return import_react291.default.createElement(
    Stack,
    __spreadValues$y2({
      spacing: 4,
      maxW: "inherit",
      maxH: "inherit"
    }, rest),
    import_react291.default.createElement(
      MultiFileUploader,
      {
        acceptFormat,
        compression,
        onChange: onChange2,
        addFilesToQueue: updateQueuedFiles,
        updatePreviewFiles: setPreviewFiles,
        maxFileSize,
        variant
      }
    ),
    import_react291.default.createElement(
      MultiFileList,
      {
        files: files || previewFiles,
        onChange: onChange2,
        uploadingFiles: (0, import_ramda.isEmpty)(files) && ((uploadingFiles == null ? void 0 : uploadingFiles.length) === 0 || (0, import_ramda.isNil)(uploadingFiles)) ? bufferFiles : uploadingFiles,
        deleteFile: deleteFile || handleDelete,
        confirmDelete,
        enableSmartLoad,
        editFileOptions,
        addFile
      }
    )
  );
}
var __defProp$x2 = Object.defineProperty;
var __getOwnPropSymbols$x2 = Object.getOwnPropertySymbols;
var __hasOwnProp$x2 = Object.prototype.hasOwnProperty;
var __propIsEnum$x2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$x2 = (obj, key2, value) => key2 in obj ? __defProp$x2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$x2 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$x2.call(b2, prop2))
      __defNormalProp$x2(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$x2)
    for (var prop2 of __getOwnPropSymbols$x2(b2)) {
      if (__propIsEnum$x2.call(b2, prop2))
        __defNormalProp$x2(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$r = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$x2.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$x2)
    for (var prop2 of __getOwnPropSymbols$x2(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$x2.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var MultiFilePickerField = (_a9) => {
  var _b5 = _a9, {
    name,
    label,
    direction: direction2,
    isRequired,
    validate: validate2,
    onChange: onChangeCallback = import_ramda.identity
  } = _b5, rest = __objRest$r(_b5, [
    "name",
    "label",
    "direction",
    "isRequired",
    "validate",
    "onChange"
  ]);
  const getFiles = (sources) => {
    const buffer = (0, import_ramda.map)((source) => ({
      type: "jpg",
      src: source,
      name: ""
    }), sources);
    const formattedFiles = (0, import_ramda.map)((file) => isFile(file) ? file : createFileObjectFromSrc(file), buffer);
    return formattedFiles;
  };
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      validate: validate2
    },
    ({ onChange: onChange2, value }) => {
      const handleDelete = (file) => {
        const removedIndex = (0, import_ramda.findIndex)((src) => src === file.src, value);
        const newValues = (0, import_ramda.remove)(removedIndex, 1, value);
        onChange2(newValues);
      };
      return import_react291.default.createElement(
        MultiFilePicker,
        __spreadValues$x2({
          onChange: async (files) => {
            if (!(0, import_ramda.isEmpty)(files)) {
              const newFiles = files == null ? void 0 : files.map(async (file) => toBase64(file));
              if (newFiles) {
                Promise.all(newFiles).then((values2) => {
                  onChange2((0, import_ramda.concat)(value, values2));
                  onChangeCallback(values2);
                });
              }
            } else {
              onChange2([]);
              onChangeCallback([]);
            }
          },
          enablePreLoad: false,
          enableSmartLoad: false,
          deleteFile: handleDelete,
          acceptFormat: "image/*",
          editFileOptions: { canEdit: true, canEditImage: true, canEditName: false },
          confirmDelete: false,
          files: getFiles(value)
        }, rest)
      );
    }
  );
};
var MediatoolThemeProvider = ({
  children,
  theme: theme$1 = theme2,
  themeName = "webappTheme"
}) => import_react291.default.createElement(ChakraProvider2, { resetCSS: true, theme: theme$1 }, import_react291.default.createElement(CustomTheme.Provider, { value: themeName }, children));
var __defProp$w = Object.defineProperty;
var __getOwnPropSymbols$w = Object.getOwnPropertySymbols;
var __hasOwnProp$w = Object.prototype.hasOwnProperty;
var __propIsEnum$w = Object.prototype.propertyIsEnumerable;
var __defNormalProp$w = (obj, key2, value) => key2 in obj ? __defProp$w(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$w = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$w.call(b2, prop2))
      __defNormalProp$w(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$w)
    for (var prop2 of __getOwnPropSymbols$w(b2)) {
      if (__propIsEnum$w.call(b2, prop2))
        __defNormalProp$w(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$q = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$w.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$w)
    for (var prop2 of __getOwnPropSymbols$w(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$w.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Menu6 = (_a9) => {
  var _b5 = _a9, { variant = "relaxed" } = _b5, props = __objRest$q(_b5, ["variant"]);
  return import_react291.default.createElement(Menu, __spreadValues$w({ variant }, props));
};
var NumberInputStepper3 = ({
  includePercentage = false,
  enableStepperArrows = false
}) => import_react291.default.createElement(NumberInputStepper, null, import_react291.default.createElement(HStack, { alignItems: "center", h: "full" }, includePercentage && import_react291.default.createElement(Center, { bgColor: "gray.50", borderRadius: "md", boxSize: "6" }, import_react291.default.createElement(P$1, null, "%")), enableStepperArrows && import_react291.default.createElement(HStack, { alignItems: "center", h: "full" }, import_react291.default.createElement(Divider, { orientation: "vertical", h: "50%" }), import_react291.default.createElement(NumberIncrementStepper, { border: "none" }, import_react291.default.createElement(
  Icon$1,
  {
    as: SvgChevronUpSolid,
    color: "icon.input-stepper.default",
    boxSize: 4
  }
)), import_react291.default.createElement(NumberDecrementStepper, null, import_react291.default.createElement(
  Icon$1,
  {
    as: SvgChevronDownSolid,
    color: "icon.input-stepper.default",
    boxSize: 4
  }
)))));
var regex = /(9{13,}|0{13,})(\d)*$/gm;
var advancedParseFloat = (value) => {
  if ((0, import_ramda.isNil)(value) || Number.isNaN(parseFloat(value))) {
    return value;
  }
  const splitValue = (0, import_ramda.split)(".", `${value}`);
  const intPart = (0, import_ramda.head)(splitValue);
  const decimalPart = (0, import_ramda.last)(splitValue);
  if ((0, import_ramda.isNil)(decimalPart)) {
    return value;
  }
  const roundingError = (0, import_ramda.match)(regex, decimalPart);
  if ((0, import_ramda.isNil)(roundingError)) {
    return value;
  }
  const decimalsErrorLength = (0, import_ramda.length)((0, import_ramda.head)(roundingError));
  const correctDecimalsLength = decimalPart.length - decimalsErrorLength;
  return parseFloat(
    parseFloat(`${intPart}.${decimalPart}`).toFixed(correctDecimalsLength)
  );
};
var __defProp$v = Object.defineProperty;
var __getOwnPropSymbols$v = Object.getOwnPropertySymbols;
var __hasOwnProp$v = Object.prototype.hasOwnProperty;
var __propIsEnum$v = Object.prototype.propertyIsEnumerable;
var __defNormalProp$v = (obj, key2, value) => key2 in obj ? __defProp$v(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$v = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$v.call(b2, prop2))
      __defNormalProp$v(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$v)
    for (var prop2 of __getOwnPropSymbols$v(b2)) {
      if (__propIsEnum$v.call(b2, prop2))
        __defNormalProp$v(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$p = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$v.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$v)
    for (var prop2 of __getOwnPropSymbols$v(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$v.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var NumberInput3 = (_a9) => {
  var _b5 = _a9, {
    variant = "default",
    size: size4 = "md",
    onChange: onChange2 = import_ramda.identity,
    onInputChange = import_ramda.identity,
    enableStepperArrows = false,
    name,
    onlyAcceptPercentage = false
  } = _b5, rest = __objRest$p(_b5, [
    "variant",
    "size",
    "onChange",
    "onInputChange",
    "enableStepperArrows",
    "name",
    "onlyAcceptPercentage"
  ]);
  const percentageProps = onlyAcceptPercentage && {
    step: 0.1
  };
  const percentageFactor = onlyAcceptPercentage ? 0.01 : 1;
  const handleChange = (e) => {
    const input = (0, import_ramda.defaultTo)(e, (0, import_ramda.path)(["target", "value"], e));
    onInputChange(input);
    const value = advancedParseFloat(parseFloat(input) * percentageFactor);
    const filteredNaN = Number.isNaN(value) ? "" : value;
    onChange2(`${filteredNaN}`);
  };
  return import_react291.default.createElement(
    NumberInput,
    __spreadValues$v(__spreadValues$v({
      variant,
      size: size4,
      onChange: handleChange,
      id: name
    }, percentageProps), rest),
    import_react291.default.createElement(NumberInputField, { onChange: handleChange }),
    import_react291.default.createElement(
      NumberInputStepper3,
      {
        includePercentage: onlyAcceptPercentage,
        enableStepperArrows
      }
    )
  );
};
var __defProp$u = Object.defineProperty;
var __getOwnPropSymbols$u = Object.getOwnPropertySymbols;
var __hasOwnProp$u = Object.prototype.hasOwnProperty;
var __propIsEnum$u = Object.prototype.propertyIsEnumerable;
var __defNormalProp$u = (obj, key2, value) => key2 in obj ? __defProp$u(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$u = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$u.call(b2, prop2))
      __defNormalProp$u(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$u)
    for (var prop2 of __getOwnPropSymbols$u(b2)) {
      if (__propIsEnum$u.call(b2, prop2))
        __defNormalProp$u(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$o = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$u.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$u)
    for (var prop2 of __getOwnPropSymbols$u(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$u.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var NumberInputField3 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    direction: direction2,
    isRequired,
    validate: validate2,
    onChange: onChangeCallback = import_ramda.identity,
    onlyAcceptPercentage = false,
    inputLeftElement,
    inputRightElement
  } = _b5, rest = __objRest$o(_b5, [
    "name",
    "label",
    "direction",
    "isRequired",
    "validate",
    "onChange",
    "onlyAcceptPercentage",
    "inputLeftElement",
    "inputRightElement"
  ]);
  const formatNumber = (value, factor) => onlyAcceptPercentage ? advancedParseFloat(value * factor) : value;
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      validate: validate2,
      ref
    },
    ({ onChange: onChange2, value }) => {
      const initialValue = (0, import_ramda.isNil)(value) || Number.isNaN(parseFloat(value)) ? "" : formatNumber(value, 100);
      const [displayValue, setDisplayValue] = (0, import_react291.useState)(initialValue);
      return import_react291.default.createElement(
        InputGroupWrapper,
        {
          inputLeftElement,
          inputRightElement
        },
        import_react291.default.createElement(
          NumberInput3,
          __spreadValues$u({
            name,
            "data-testid": "number-input-field-test-id",
            onInputChange: (v) => {
              setDisplayValue(v);
              const parsed = formatNumber(parseFloat(v), 0.01);
              onChange2(parsed);
              onChangeCallback(parsed);
            },
            value: displayValue,
            onlyAcceptPercentage
          }, rest)
        )
      );
    }
  );
});
var __defProp$t = Object.defineProperty;
var __getOwnPropSymbols$t = Object.getOwnPropertySymbols;
var __hasOwnProp$t = Object.prototype.hasOwnProperty;
var __propIsEnum$t = Object.prototype.propertyIsEnumerable;
var __defNormalProp$t = (obj, key2, value) => key2 in obj ? __defProp$t(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$t = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$t.call(b2, prop2))
      __defNormalProp$t(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$t)
    for (var prop2 of __getOwnPropSymbols$t(b2)) {
      if (__propIsEnum$t.call(b2, prop2))
        __defNormalProp$t(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$n = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$t.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$t)
    for (var prop2 of __getOwnPropSymbols$t(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$t.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var NotificationIconButton = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    variant = "ghost",
    icon,
    "aria-label": ariaLabel,
    hasNotification = false,
    blinkerColor = "green.500",
    size: size4
  } = _b5, rest = __objRest$n(_b5, [
    "variant",
    "icon",
    "aria-label",
    "hasNotification",
    "blinkerColor",
    "size"
  ]);
  const [isBlinking, setIsBlinking] = (0, import_react291.useState)(false);
  const { container: container2, notifier } = useMultiStyleConfig("NotificationIconButton", { size: size4, variant });
  return import_react291.default.createElement(
    Box,
    {
      onMouseEnter: () => setIsBlinking(true),
      onMouseLeave: () => setIsBlinking(false),
      sx: container2
    },
    hasNotification && import_react291.default.createElement(Box, { sx: notifier }, import_react291.default.createElement(Blinker$1, { isBlinking, color: blinkerColor, size: "2xs" })),
    import_react291.default.createElement(
      IconButton2,
      __spreadValues$t({
        variant,
        icon,
        "aria-label": ariaLabel,
        ref,
        size: size4
      }, rest)
    )
  );
});
var __defProp$s = Object.defineProperty;
var __defProps$4 = Object.defineProperties;
var __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$s = Object.getOwnPropertySymbols;
var __hasOwnProp$s = Object.prototype.hasOwnProperty;
var __propIsEnum$s = Object.prototype.propertyIsEnumerable;
var __defNormalProp$s = (obj, key2, value) => key2 in obj ? __defProp$s(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$s = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$s.call(b2, prop2))
      __defNormalProp$s(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$s)
    for (var prop2 of __getOwnPropSymbols$s(b2)) {
      if (__propIsEnum$s.call(b2, prop2))
        __defNormalProp$s(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$4 = (a2, b2) => __defProps$4(a2, __getOwnPropDescs$4(b2));
var __objRest$m = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$s.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$s)
    for (var prop2 of __getOwnPropSymbols$s(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$s.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var PinInput2 = (_a9) => {
  var _b5 = _a9, {
    variant = "outline",
    hidden,
    children
  } = _b5, rest = __objRest$m(_b5, [
    "variant",
    "hidden",
    "children"
  ]);
  return import_react291.default.createElement(PinInput, __spreadProps$4(__spreadValues$s({}, rest), { variant, placeholder: "●", mask: hidden }), children);
};
var isStringArray = (value) => (0, import_ramda.is)(Array, value) && (0, import_ramda.length)(value) > 0 && typeof value[0] === "string";
var getMatchingValue = (value, options2) => {
  if (typeof value === "string") {
    return (0, import_ramda.find)((0, import_ramda.propEq)("value", value), options2);
  }
  if (isStringArray(value)) {
    return (0, import_ramda.filter)(
      (option) => value.includes(option.value),
      options2
    );
  }
  return value;
};
var __defProp$r = Object.defineProperty;
var __defProps$3 = Object.defineProperties;
var __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$r = Object.getOwnPropertySymbols;
var __hasOwnProp$r = Object.prototype.hasOwnProperty;
var __propIsEnum$r = Object.prototype.propertyIsEnumerable;
var __defNormalProp$r = (obj, key2, value) => key2 in obj ? __defProp$r(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$r = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$r.call(b2, prop2))
      __defNormalProp$r(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$r)
    for (var prop2 of __getOwnPropSymbols$r(b2)) {
      if (__propIsEnum$r.call(b2, prop2))
        __defNormalProp$r(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$3 = (a2, b2) => __defProps$3(a2, __getOwnPropDescs$3(b2));
var __objRest$l = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$r.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$r)
    for (var prop2 of __getOwnPropSymbols$r(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$r.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Select4 = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    options: options2,
    isMulti,
    onChange: onChange2 = import_ramda.identity,
    onAdd = import_ramda.identity,
    onRemove = import_ramda.identity,
    isLoading,
    loadingList = () => null,
    "data-testid": testId,
    customOption = null,
    customTag = null,
    isClearable = false,
    value,
    icon
  } = _b5, rest = __objRest$l(_b5, [
    "options",
    "isMulti",
    "onChange",
    "onAdd",
    "onRemove",
    "isLoading",
    "loadingList",
    "data-testid",
    "customOption",
    "customTag",
    "isClearable",
    "value",
    "icon"
  ]);
  const handleChange = useSelectCallbacks({
    onChange: onChange2,
    onAdd,
    onRemove,
    isMulti,
    value: (0, import_ramda.is)(Array, value) ? value : []
  });
  const customComponents2 = (0, import_react291.useMemo)(
    () => getComponents(),
    []
  );
  const prevOptions = (0, import_react291.useRef)(
    options2
  );
  const renderedOptions = (0, import_react291.useMemo)(() => {
    if (!(0, import_ramda.equals)(prevOptions.current, options2)) {
      prevOptions.current = options2;
    }
    return prevOptions.current;
  }, [options2]);
  return import_react291.default.createElement(Box, { w: "full", "data-testid": testId }, import_react291.default.createElement(
    select_default,
    __spreadValues$r(__spreadProps$3(__spreadValues$r({
      isMulti,
      options: renderedOptions,
      useBasicStyles: true,
      closeMenuOnSelect: !isMulti,
      hideSelectedOptions: false,
      isClearable,
      onChange: handleChange,
      selectedOptionStyle: "check",
      chakraStyles: customSelectStyles,
      isLoading
    }, isLoading && { components: { MenuList: loadingList } }), {
      value: getMatchingValue(value, options2),
      customOption,
      customTag,
      icon,
      components: customComponents2,
      ref,
      menuPortalTarget: document.body,
      styles: { menuPortal: (base) => __spreadProps$3(__spreadValues$r({}, base), { zIndex: theme2.zIndices.popover }) }
    }), rest)
  ));
});
var __defProp$q = Object.defineProperty;
var __getOwnPropSymbols$q = Object.getOwnPropertySymbols;
var __hasOwnProp$q = Object.prototype.hasOwnProperty;
var __propIsEnum$q = Object.prototype.propertyIsEnumerable;
var __defNormalProp$q = (obj, key2, value) => key2 in obj ? __defProp$q(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$q = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$q.call(b2, prop2))
      __defNormalProp$q(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$q)
    for (var prop2 of __getOwnPropSymbols$q(b2)) {
      if (__propIsEnum$q.call(b2, prop2))
        __defNormalProp$q(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$k = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$q.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$q)
    for (var prop2 of __getOwnPropSymbols$q(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$q.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var BaseSelectField = (_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    options: options2,
    direction: direction2 = "column",
    isMulti,
    isRequired,
    validate: validate2,
    isClearable = true,
    onChange: onChangeCallback = import_ramda.identity,
    inputLeftElement,
    inputRightElement
  } = _b5, rest = __objRest$k(_b5, [
    "name",
    "label",
    "options",
    "direction",
    "isMulti",
    "isRequired",
    "validate",
    "isClearable",
    "onChange",
    "inputLeftElement",
    "inputRightElement"
  ]);
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      direction: direction2,
      isRequired,
      noLabelConnection: true,
      validate: validate2,
      ref
    },
    ({ value, onChange: onChange2 }) => import_react291.default.createElement(HStack, { w: "full" }, import_react291.default.createElement(
      InputGroupWrapper,
      {
        inputLeftElement,
        inputRightElement
      },
      import_react291.default.createElement(
        Select4,
        __spreadValues$q({
          name,
          options: options2,
          isMulti,
          onChange: (values2, event) => {
            onChange2(
              isMulti ? values2.map((item) => item.value) : values2.value
            );
            onChangeCallback(values2, event);
          },
          value: value ? options2 == null ? void 0 : options2.flatMap((inner) => inner.options ? inner.options : inner).filter((option) => value.includes(option.value)) : null
        }, rest)
      )
    ), import_react291.default.createElement(
      IconButton2,
      {
        "aria-label": `${name}-close-button`,
        variant: "danger",
        size: "sm",
        fontSize: "xs",
        hidden: value === void 0 || !isClearable,
        onClick: () => {
          onChange2(void 0);
        },
        icon: import_react291.default.createElement(Icon$1, { as: SvgXCloseSolid })
      }
    ))
  );
};
var SelectField3 = (0, import_react291.forwardRef)(BaseSelectField);
var __defProp$p = Object.defineProperty;
var __getOwnPropSymbols$p = Object.getOwnPropertySymbols;
var __hasOwnProp$p = Object.prototype.hasOwnProperty;
var __propIsEnum$p = Object.prototype.propertyIsEnumerable;
var __defNormalProp$p = (obj, key2, value) => key2 in obj ? __defProp$p(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$p = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$p.call(b2, prop2))
      __defNormalProp$p(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$p)
    for (var prop2 of __getOwnPropSymbols$p(b2)) {
      if (__propIsEnum$p.call(b2, prop2))
        __defNormalProp$p(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$j = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$p.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$p)
    for (var prop2 of __getOwnPropSymbols$p(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$p.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Switch4 = (_a9) => {
  var _b5 = _a9, {
    value,
    onChange: onChange2,
    name,
    size: size4 = "md"
  } = _b5, rest = __objRest$j(_b5, [
    "value",
    "onChange",
    "name",
    "size"
  ]);
  return import_react291.default.createElement(
    Switch,
    __spreadValues$p({
      size: size4,
      id: name,
      isChecked: value,
      onChange: onChange2
    }, rest)
  );
};
var __defProp$o = Object.defineProperty;
var __getOwnPropSymbols$o = Object.getOwnPropertySymbols;
var __hasOwnProp$o = Object.prototype.hasOwnProperty;
var __propIsEnum$o = Object.prototype.propertyIsEnumerable;
var __defNormalProp$o = (obj, key2, value) => key2 in obj ? __defProp$o(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$o = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$o.call(b2, prop2))
      __defNormalProp$o(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$o)
    for (var prop2 of __getOwnPropSymbols$o(b2)) {
      if (__propIsEnum$o.call(b2, prop2))
        __defNormalProp$o(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$i = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$o.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$o)
    for (var prop2 of __getOwnPropSymbols$o(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$o.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SwitchField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    isRequired,
    validate: validate2,
    onChange: onChangeCallback = import_ramda.identity,
    direction: direction2 = "row",
    labelPlacement = "right",
    labelSize = "md"
  } = _b5, rest = __objRest$i(_b5, [
    "name",
    "label",
    "isRequired",
    "validate",
    "onChange",
    "direction",
    "labelPlacement",
    "labelSize"
  ]);
  return import_react291.default.createElement(Box, { w: label ? "full" : "fit-content", display: "inline-flex" }, import_react291.default.createElement(
    Field,
    {
      name,
      label: "",
      isRequired,
      direction: direction2,
      validate: validate2,
      ref
    },
    ({ onChange: onChange2, value }) => import_react291.default.createElement(
      Flex,
      {
        display: "inline-flex",
        alignItems: "center",
        gap: 2,
        direction: labelPlacement === "left" ? "row-reverse" : "row"
      },
      import_react291.default.createElement(
        Switch4,
        __spreadValues$o({
          name,
          onChange: (e) => {
            onChange2(e);
            onChangeCallback(e);
          },
          value,
          "data-testid": "switch-field-test-id"
        }, rest)
      ),
      import_react291.default.createElement(Label$1, { htmlFor: name, sx: { fontWeight: "normal" }, size: labelSize }, label)
    )
  ));
});
var __defProp$n = Object.defineProperty;
var __getOwnPropSymbols$n = Object.getOwnPropertySymbols;
var __hasOwnProp$n = Object.prototype.hasOwnProperty;
var __propIsEnum$n = Object.prototype.propertyIsEnumerable;
var __defNormalProp$n = (obj, key2, value) => key2 in obj ? __defProp$n(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$n = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$n.call(b2, prop2))
      __defNormalProp$n(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$n)
    for (var prop2 of __getOwnPropSymbols$n(b2)) {
      if (__propIsEnum$n.call(b2, prop2))
        __defNormalProp$n(a2, prop2, b2[prop2]);
    }
  return a2;
};
var TabPanel3 = (props) => import_react291.default.createElement(TabPanel, __spreadValues$n({ padding: 0 }, props));
var __defProp$m = Object.defineProperty;
var __getOwnPropSymbols$m = Object.getOwnPropertySymbols;
var __hasOwnProp$m = Object.prototype.hasOwnProperty;
var __propIsEnum$m = Object.prototype.propertyIsEnumerable;
var __defNormalProp$m = (obj, key2, value) => key2 in obj ? __defProp$m(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$m = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$m.call(b2, prop2))
      __defNormalProp$m(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$m)
    for (var prop2 of __getOwnPropSymbols$m(b2)) {
      if (__propIsEnum$m.call(b2, prop2))
        __defNormalProp$m(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$h = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$m.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$m)
    for (var prop2 of __getOwnPropSymbols$m(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$m.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Tabs3 = (_a9) => {
  var _b5 = _a9, {
    children,
    variant = "soft-rounded",
    isManual = true
  } = _b5, rest = __objRest$h(_b5, [
    "children",
    "variant",
    "isManual"
  ]);
  return import_react291.default.createElement(
    Tabs,
    __spreadValues$m({
      isManual,
      variant
    }, rest),
    children
  );
};
var __defProp$l = Object.defineProperty;
var __getOwnPropSymbols$l = Object.getOwnPropertySymbols;
var __hasOwnProp$l = Object.prototype.hasOwnProperty;
var __propIsEnum$l = Object.prototype.propertyIsEnumerable;
var __defNormalProp$l = (obj, key2, value) => key2 in obj ? __defProp$l(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$l = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$l.call(b2, prop2))
      __defNormalProp$l(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$l)
    for (var prop2 of __getOwnPropSymbols$l(b2)) {
      if (__propIsEnum$l.call(b2, prop2))
        __defNormalProp$l(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$g = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$l.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$l)
    for (var prop2 of __getOwnPropSymbols$l(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$l.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Textarea2 = (_a9) => {
  var _b5 = _a9, {
    size: size4 = "md",
    onChange: onChange2,
    name,
    value
  } = _b5, rest = __objRest$g(_b5, [
    "size",
    "onChange",
    "name",
    "value"
  ]);
  return import_react291.default.createElement(
    Textarea,
    __spreadValues$l({
      size: size4,
      id: name,
      onChange: onChange2,
      value
    }, rest)
  );
};
var __defProp$k = Object.defineProperty;
var __getOwnPropSymbols$k = Object.getOwnPropertySymbols;
var __hasOwnProp$k = Object.prototype.hasOwnProperty;
var __propIsEnum$k = Object.prototype.propertyIsEnumerable;
var __defNormalProp$k = (obj, key2, value) => key2 in obj ? __defProp$k(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$k = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$k.call(b2, prop2))
      __defNormalProp$k(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$k)
    for (var prop2 of __getOwnPropSymbols$k(b2)) {
      if (__propIsEnum$k.call(b2, prop2))
        __defNormalProp$k(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$f = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$k.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$k)
    for (var prop2 of __getOwnPropSymbols$k(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$k.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var TextareaField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    isRequired,
    validate: validate2,
    direction: direction2,
    onChange: onChangeCallback = import_ramda.identity
  } = _b5, rest = __objRest$f(_b5, [
    "name",
    "label",
    "isRequired",
    "validate",
    "direction",
    "onChange"
  ]);
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      isRequired,
      validate: validate2,
      direction: direction2,
      ref
    },
    ({ onChange: onChange2, value }) => import_react291.default.createElement(
      Textarea2,
      __spreadValues$k({
        name,
        "data-testid": "textarea-field-test-id",
        onChange: (e) => {
          onChange2(e);
          onChangeCallback(e);
        },
        value
      }, rest)
    )
  );
});
var roundToPrecision2 = (value, numberOfDecimals) => parseFloat(value.toFixed(numberOfDecimals));
var __defProp$j = Object.defineProperty;
var __defProps$2 = Object.defineProperties;
var __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$j = Object.getOwnPropertySymbols;
var __hasOwnProp$j = Object.prototype.hasOwnProperty;
var __propIsEnum$j = Object.prototype.propertyIsEnumerable;
var __defNormalProp$j = (obj, key2, value) => key2 in obj ? __defProp$j(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$j = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$j.call(b2, prop2))
      __defNormalProp$j(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$j)
    for (var prop2 of __getOwnPropSymbols$j(b2)) {
      if (__propIsEnum$j.call(b2, prop2))
        __defNormalProp$j(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$2 = (a2, b2) => __defProps$2(a2, __getOwnPropDescs$2(b2));
var __objRest$e = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$j.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$j)
    for (var prop2 of __getOwnPropSymbols$j(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$j.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var presetMap = {
  eu: {
    thousandSeparator: " ",
    decimalSeparator: ","
  },
  us: {
    thousandSeparator: ",",
    decimalSeparator: "."
  },
  nor: {
    thousandSeparator: ".",
    decimalSeparator: ","
  }
};
var FormattedNumberInput = (_a9) => {
  var _b5 = _a9, {
    preset = "eu",
    isPercentage = false,
    onChange: onChange2 = import_ramda.identity,
    value,
    numberOfDecimals = 2,
    max: max3 = Infinity,
    min: min3 = -Infinity,
    inputLeftElement,
    inputRightElement
  } = _b5, rest = __objRest$e(_b5, [
    "preset",
    "isPercentage",
    "onChange",
    "value",
    "numberOfDecimals",
    "max",
    "min",
    "inputLeftElement",
    "inputRightElement"
  ]);
  const props = presetMap[preset];
  const [v, setV] = (0, import_react291.useState)(value);
  const validateRange = () => {
    if ((0, import_ramda.isNil)(v))
      return;
    const vNum = typeof v === "string" ? parseFloat(v) : v;
    const factor = isPercentage ? 100 : 1;
    if (vNum * factor > max3) {
      const newValue = roundToPrecision2(max3 / factor, numberOfDecimals);
      setV(newValue);
    }
    if (vNum * factor < min3) {
      const newValue = roundToPrecision2(min3 / factor, numberOfDecimals);
      setV(newValue);
    }
  };
  const onValueChangeHandler = (values2, sourceInfo) => {
    const newFloatValue = values2.floatValue && isPercentage ? roundToPrecision2(values2.floatValue / 100, numberOfDecimals) : values2.floatValue;
    setV(newFloatValue);
    onChange2(
      __spreadProps$2(__spreadValues$j({}, values2), {
        floatValue: newFloatValue
      }),
      sourceInfo
    );
  };
  return import_react291.default.createElement(
    InputGroupWrapper,
    {
      inputLeftElement,
      inputRightElement
    },
    import_react291.default.createElement(
      NumericFormat,
      __spreadValues$j(__spreadValues$j({
        allowLeadingZeros: true,
        customInput: Input,
        onBlur: validateRange,
        onValueChange: onValueChangeHandler,
        decimalScale: numberOfDecimals,
        value: isPercentage ? roundToPrecision2(parseFloat(`${v != null ? v : 0}`) * 100, numberOfDecimals) : v,
        suffix: isPercentage ? "%" : ""
      }, props), rest)
    )
  );
};
var __defProp$i = Object.defineProperty;
var __getOwnPropSymbols$i = Object.getOwnPropertySymbols;
var __hasOwnProp$i = Object.prototype.hasOwnProperty;
var __propIsEnum$i = Object.prototype.propertyIsEnumerable;
var __defNormalProp$i = (obj, key2, value) => key2 in obj ? __defProp$i(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$i = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$i.call(b2, prop2))
      __defNormalProp$i(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$i)
    for (var prop2 of __getOwnPropSymbols$i(b2)) {
      if (__propIsEnum$i.call(b2, prop2))
        __defNormalProp$i(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$d = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$i.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$i)
    for (var prop2 of __getOwnPropSymbols$i(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$i.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var FormattedNumberInputField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    isRequired,
    validate: validate2,
    onChange: onChangeCallback = import_ramda.identity,
    direction: direction2 = "row"
  } = _b5, rest = __objRest$d(_b5, [
    "name",
    "label",
    "isRequired",
    "validate",
    "onChange",
    "direction"
  ]);
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      isRequired,
      direction: direction2,
      validate: validate2,
      ref
    },
    ({ onChange: onChange2, value }) => import_react291.default.createElement(
      FormattedNumberInput,
      __spreadValues$i({
        name,
        onChange: (values2, sourceInfo) => {
          onChange2(values2.floatValue);
          onChangeCallback(values2, sourceInfo);
        },
        value
      }, rest)
    )
  );
});
var __defProp$h = Object.defineProperty;
var __getOwnPropSymbols$h = Object.getOwnPropertySymbols;
var __hasOwnProp$h = Object.prototype.hasOwnProperty;
var __propIsEnum$h = Object.prototype.propertyIsEnumerable;
var __defNormalProp$h = (obj, key2, value) => key2 in obj ? __defProp$h(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$h = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$h.call(b2, prop2))
      __defNormalProp$h(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$h)
    for (var prop2 of __getOwnPropSymbols$h(b2)) {
      if (__propIsEnum$h.call(b2, prop2))
        __defNormalProp$h(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$c = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$h.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$h)
    for (var prop2 of __getOwnPropSymbols$h(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$h.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var CustomInput = import_react_input_mask.default;
var MaskedTextInput = (_a9) => {
  var _b5 = _a9, {
    mask,
    maskPlaceholder,
    alwaysShowMask,
    name,
    value,
    placeholder,
    onChange: onChange2,
    onBlur: onBlur3
  } = _b5, rest = __objRest$c(_b5, [
    "mask",
    "maskPlaceholder",
    "alwaysShowMask",
    "name",
    "value",
    "placeholder",
    "onChange",
    "onBlur"
  ]);
  return import_react291.default.createElement(
    CustomInput,
    {
      mask,
      maskPlaceholder,
      alwaysShowMask,
      name,
      value,
      onChange: onChange2,
      onBlur: onBlur3
    },
    ({ name: nameProp }) => import_react291.default.createElement(
      Input,
      __spreadValues$h({
        placeholder: maskPlaceholder != null ? maskPlaceholder : placeholder,
        name: nameProp
      }, rest)
    )
  );
};
var __defProp$g = Object.defineProperty;
var __getOwnPropSymbols$g = Object.getOwnPropertySymbols;
var __hasOwnProp$g = Object.prototype.hasOwnProperty;
var __propIsEnum$g = Object.prototype.propertyIsEnumerable;
var __defNormalProp$g = (obj, key2, value) => key2 in obj ? __defProp$g(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$g = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$g.call(b2, prop2))
      __defNormalProp$g(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$g)
    for (var prop2 of __getOwnPropSymbols$g(b2)) {
      if (__propIsEnum$g.call(b2, prop2))
        __defNormalProp$g(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$b = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$g.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$g)
    for (var prop2 of __getOwnPropSymbols$g(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$g.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var TextField = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    name,
    label,
    as: As = Input,
    isRequired,
    validate: validate2,
    direction: direction2 = "column",
    onChange: onChangeCallback = import_ramda.identity,
    inputLeftElement,
    inputRightElement
  } = _b5, rest = __objRest$b(_b5, [
    "name",
    "label",
    "as",
    "isRequired",
    "validate",
    "direction",
    "onChange",
    "inputLeftElement",
    "inputRightElement"
  ]);
  return import_react291.default.createElement(
    Field,
    {
      name,
      label,
      isRequired,
      validate: (0, import_ramda.isNil)(validate2) && isRequired ? { validate: (value) => !!value.trim() } : validate2,
      direction: direction2,
      ref
    },
    ({ onChange: onChange2, value }) => import_react291.default.createElement(
      InputGroupWrapper,
      {
        inputLeftElement,
        inputRightElement
      },
      import_react291.default.createElement(
        As,
        __spreadValues$g({
          id: name,
          name,
          onChange: (e) => {
            onChange2(e);
            onChangeCallback(e);
          },
          value,
          "data-testid": "text-field-test-id"
        }, rest)
      )
    )
  );
});
var __defProp$f = Object.defineProperty;
var __getOwnPropSymbols$f = Object.getOwnPropertySymbols;
var __hasOwnProp$f = Object.prototype.hasOwnProperty;
var __propIsEnum$f = Object.prototype.propertyIsEnumerable;
var __defNormalProp$f = (obj, key2, value) => key2 in obj ? __defProp$f(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$f = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$f.call(b2, prop2))
      __defNormalProp$f(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$f)
    for (var prop2 of __getOwnPropSymbols$f(b2)) {
      if (__propIsEnum$f.call(b2, prop2))
        __defNormalProp$f(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$a = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$f.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$f)
    for (var prop2 of __getOwnPropSymbols$f(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$f.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Toast2 = (_a9) => {
  var _b5 = _a9, {
    variant = "success",
    title = "",
    description = "",
    onClose
  } = _b5, rest = __objRest$a(_b5, [
    "variant",
    "title",
    "description",
    "onClose"
  ]);
  const icon = toastIconMap[variant];
  return import_react291.default.createElement(
    Alert,
    __spreadValues$f({
      variant,
      "data-testid": "toast-test"
    }, rest),
    import_react291.default.createElement(HStack, { alignItems: "flex-start" }, icon && import_react291.default.createElement(
      Icon$1,
      {
        as: icon,
        color: `icon.toast.${variant}`,
        boxSize: 6
      }
    ), import_react291.default.createElement(Stack, { spacing: 0, alignItems: "flex-start" }, title && import_react291.default.createElement(Label$1, { size: "md" }, title), description && import_react291.default.createElement(P$1, null, description)), import_react291.default.createElement(
      CloseButton,
      {
        size: "sm",
        onClick: onClose,
        position: "absolute",
        insetEnd: 1,
        top: 1
      }
    ))
  );
};
var __defProp$e = Object.defineProperty;
var __getOwnPropSymbols$e = Object.getOwnPropertySymbols;
var __hasOwnProp$e = Object.prototype.hasOwnProperty;
var __propIsEnum$e = Object.prototype.propertyIsEnumerable;
var __defNormalProp$e = (obj, key2, value) => key2 in obj ? __defProp$e(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$e = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$e.call(b2, prop2))
      __defNormalProp$e(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$e)
    for (var prop2 of __getOwnPropSymbols$e(b2)) {
      if (__propIsEnum$e.call(b2, prop2))
        __defNormalProp$e(a2, prop2, b2[prop2]);
    }
  return a2;
};
var useToast2 = (defaultOpts = {}) => {
  const toast = useToast(defaultOpts);
  const toastIdRef = (0, import_react291.useRef)(null);
  return (opts = {}) => {
    const toastProps = __spreadValues$e({
      render: ({ onClose }) => {
        const {
          variant = "success",
          title = "Success",
          description = ""
        } = opts;
        return import_react291.default.createElement(
          Toast2,
          {
            variant,
            title,
            description,
            onClose
          }
        );
      },
      position: "top"
    }, opts);
    const { replacePreviousToast = false } = opts;
    if (replacePreviousToast && toastIdRef && toastIdRef.current) {
      toast.update(toastIdRef.current, toastProps);
    } else {
      toastIdRef.current = toast(toastProps);
    }
  };
};
var pinVariantMap = {
  green: "green.500",
  running: "green.500",
  yellow: "yellow.600",
  inProgress: "yellow.600",
  gray: "gray.300",
  notExecuted: "gray.300",
  red: "red.500",
  rejected: "red.500"
};
var pinSizeMap = {
  sm: [4, 2],
  md: [5, 3],
  lg: [6, 3.5]
};
var __defProp$d = Object.defineProperty;
var __getOwnPropSymbols$d = Object.getOwnPropertySymbols;
var __hasOwnProp$d = Object.prototype.hasOwnProperty;
var __propIsEnum$d = Object.prototype.propertyIsEnumerable;
var __defNormalProp$d = (obj, key2, value) => key2 in obj ? __defProp$d(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$d = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$d.call(b2, prop2))
      __defNormalProp$d(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$d)
    for (var prop2 of __getOwnPropSymbols$d(b2)) {
      if (__propIsEnum$d.call(b2, prop2))
        __defNormalProp$d(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$9 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$d.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$d)
    for (var prop2 of __getOwnPropSymbols$d(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$d.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var StatusPin = (_a9) => {
  var _b5 = _a9, { size: size4 = "md", variant } = _b5, rest = __objRest$9(_b5, ["size", "variant"]);
  const pinColor = pinVariantMap[variant];
  const pinSizeTuple = pinSizeMap[size4];
  const [outerSize, innerSize] = pinSizeTuple;
  return import_react291.default.createElement(
    Circle,
    __spreadValues$d({
      size: outerSize,
      bg: "white",
      borderWidth: "1px",
      borderColor: pinColor
    }, rest),
    import_react291.default.createElement(
      Circle,
      {
        size: innerSize,
        bg: pinColor
      }
    )
  );
};
var blockVariantMap = {
  approved: ["green.100", "green.500"],
  pending: ["yellow.300", "yellow.700"],
  working: ["gray.50", "gray.400"],
  rejected: ["red.100", "red.400"]
};
var statusIconMap = {
  working: SvgStatusWorkingSolid,
  pending: SvgHourglassSolid,
  approved: SvgCheckCircleSolid,
  rejected: SvgCDeleteSolid
};
var __defProp$c = Object.defineProperty;
var __getOwnPropSymbols$c = Object.getOwnPropertySymbols;
var __hasOwnProp$c = Object.prototype.hasOwnProperty;
var __propIsEnum$c = Object.prototype.propertyIsEnumerable;
var __defNormalProp$c = (obj, key2, value) => key2 in obj ? __defProp$c(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$c = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$c.call(b2, prop2))
      __defNormalProp$c(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$c)
    for (var prop2 of __getOwnPropSymbols$c(b2)) {
      if (__propIsEnum$c.call(b2, prop2))
        __defNormalProp$c(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$8 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$c.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$c)
    for (var prop2 of __getOwnPropSymbols$c(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$c.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var StatusBlock = (_a9) => {
  var _b5 = _a9, { variant } = _b5, rest = __objRest$8(_b5, ["variant"]);
  const [bgColor, contentColor] = blockVariantMap[variant];
  return import_react291.default.createElement(
    Tag2,
    __spreadValues$c({
      w: 28,
      h: 8,
      justifyContent: "center",
      bgColor,
      color: contentColor,
      borderRadius: 4
    }, rest),
    import_react291.default.createElement(TagLeftIcon, null, import_react291.default.createElement(Icon, { as: statusIconMap[variant] })),
    import_react291.default.createElement(
      TagLabel,
      {
        lineHeight: 5,
        fontWeight: "semibold",
        textTransform: "capitalize"
      },
      variant
    )
  );
};
var __defProp$b = Object.defineProperty;
var __getOwnPropSymbols$b = Object.getOwnPropertySymbols;
var __hasOwnProp$b = Object.prototype.hasOwnProperty;
var __propIsEnum$b = Object.prototype.propertyIsEnumerable;
var __defNormalProp$b = (obj, key2, value) => key2 in obj ? __defProp$b(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$b = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$b.call(b2, prop2))
      __defNormalProp$b(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$b)
    for (var prop2 of __getOwnPropSymbols$b(b2)) {
      if (__propIsEnum$b.call(b2, prop2))
        __defNormalProp$b(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$7 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$b.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$b)
    for (var prop2 of __getOwnPropSymbols$b(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$b.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var AsyncError = (_a9) => {
  var _b5 = _a9, {
    message = ""
  } = _b5, rest = __objRest$7(_b5, [
    "message"
  ]);
  return import_react291.default.createElement(Alert, __spreadValues$b({ backgroundColor: "background.default", color: "text.default", width: "100%" }, rest), import_react291.default.createElement(VStack, { w: "full" }, import_react291.default.createElement(Icon$1, { as: toastIconMap.error, color: "icon.toast.error", boxSize: 6 }), import_react291.default.createElement(AlertTitle, null, " Error "), message && import_react291.default.createElement(AlertDescription, null, message)));
};
var __defProp$a = Object.defineProperty;
var __getOwnPropSymbols$a = Object.getOwnPropertySymbols;
var __hasOwnProp$a = Object.prototype.hasOwnProperty;
var __propIsEnum$a = Object.prototype.propertyIsEnumerable;
var __defNormalProp$a = (obj, key2, value) => key2 in obj ? __defProp$a(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$a = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$a.call(b2, prop2))
      __defNormalProp$a(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$a)
    for (var prop2 of __getOwnPropSymbols$a(b2)) {
      if (__propIsEnum$a.call(b2, prop2))
        __defNormalProp$a(a2, prop2, b2[prop2]);
    }
  return a2;
};
var StepPanel = (props) => import_react291.default.createElement(TabPanel3, __spreadValues$a({ padding: 0 }, props));
var __defProp$9 = Object.defineProperty;
var __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;
var __hasOwnProp$9 = Object.prototype.hasOwnProperty;
var __propIsEnum$9 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$9 = (obj, key2, value) => key2 in obj ? __defProp$9(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$9 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$9.call(b2, prop2))
      __defNormalProp$9(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$9)
    for (var prop2 of __getOwnPropSymbols$9(b2)) {
      if (__propIsEnum$9.call(b2, prop2))
        __defNormalProp$9(a2, prop2, b2[prop2]);
    }
  return a2;
};
var Steps = (props) => import_react291.default.createElement(Tabs, __spreadValues$9({ isManual: true }, props));
var __defProp$8 = Object.defineProperty;
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$8 = (obj, key2, value) => key2 in obj ? __defProp$8(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$8 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$8.call(b2, prop2))
      __defNormalProp$8(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$8)
    for (var prop2 of __getOwnPropSymbols$8(b2)) {
      if (__propIsEnum$8.call(b2, prop2))
        __defNormalProp$8(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$6 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$8.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$8)
    for (var prop2 of __getOwnPropSymbols$8(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$8.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var Step3 = (_a9) => {
  var _b5 = _a9, { label, description } = _b5, rest = __objRest$6(_b5, ["label", "description"]);
  const {
    step,
    label: labelStyle,
    description: descriptionStyle
  } = useMultiStyleConfig("Step");
  return import_react291.default.createElement(
    Tab,
    __spreadValues$8({
      sx: step
    }, rest),
    import_react291.default.createElement(
      Flex,
      {
        flexDirection: "column",
        alignItems: "flex-start",
        _groupFocusVisible: ring2
      },
      import_react291.default.createElement(Capitalized$1, { sx: labelStyle }, label),
      import_react291.default.createElement(Lead$1, { sx: descriptionStyle }, description)
    )
  );
};
var __defProp$7 = Object.defineProperty;
var __defProps$1 = Object.defineProperties;
var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;
var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
var __propIsEnum$7 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$7 = (obj, key2, value) => key2 in obj ? __defProp$7(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$7 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$7.call(b2, prop2))
      __defNormalProp$7(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$7)
    for (var prop2 of __getOwnPropSymbols$7(b2)) {
      if (__propIsEnum$7.call(b2, prop2))
        __defNormalProp$7(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps$1 = (a2, b2) => __defProps$1(a2, __getOwnPropDescs$1(b2));
var __objRest$5 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$7.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$7)
    for (var prop2 of __getOwnPropSymbols$7(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$7.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var StepList = (_a9) => {
  var _b5 = _a9, { children } = _b5, rest = __objRest$5(_b5, ["children"]);
  const tabs = import_react291.Children.count(children);
  const styles2 = useStyleConfig("StepList", { tabs });
  return import_react291.default.createElement(TabList, __spreadProps$1(__spreadValues$7({}, rest), { sx: styles2 }), children);
};
var __defProp$6 = Object.defineProperty;
var __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;
var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
var __propIsEnum$6 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6 = (obj, key2, value) => key2 in obj ? __defProp$6(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$6 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$6.call(b2, prop2))
      __defNormalProp$6(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$6)
    for (var prop2 of __getOwnPropSymbols$6(b2)) {
      if (__propIsEnum$6.call(b2, prop2))
        __defNormalProp$6(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$42 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$6.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$6)
    for (var prop2 of __getOwnPropSymbols$6(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$6.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var ClipboardInput = (0, import_react291.forwardRef)((_a9, ref) => {
  var _b5 = _a9, {
    size: size4 = "md",
    value,
    "aria-label": ariaLabel
  } = _b5, rest = __objRest$42(_b5, [
    "size",
    "value",
    "aria-label"
  ]);
  const { hasCopied, onCopy, setValue } = useClipboard(value);
  const { button, icon, tooltip } = useMultiStyleConfig("ClipboardInput", { size: size4 });
  (0, import_react291.useEffect)(() => {
    setValue(value);
  }, [value]);
  return import_react291.default.createElement(InputGroup, { size: size4, "data-testid": "clipboard-input-test-id", ref }, import_react291.default.createElement(
    Input,
    __spreadValues$6({
      textOverflow: "ellipsis",
      "aria-label": `Value to copy: ${value}`,
      isReadOnly: true,
      value
    }, rest)
  ), import_react291.default.createElement(InputRightElement, null, import_react291.default.createElement(
    Tooltip2,
    {
      label: hasCopied ? "Copied!" : "Copy",
      placement: "left",
      closeOnClick: false,
      sx: tooltip
    },
    import_react291.default.createElement(
      IconButton2,
      {
        "aria-label": ariaLabel || "Click to copy",
        onClick: onCopy,
        variant: hasCopied ? "success" : "default",
        sx: button
      },
      import_react291.default.createElement(
        Icon$1,
        {
          as: hasCopied ? SvgCheckDuo : SvgCopyDuo,
          sx: icon
        }
      )
    )
  )));
});
var __defProp$5 = Object.defineProperty;
var __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;
var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
var __propIsEnum$5 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5 = (obj, key2, value) => key2 in obj ? __defProp$5(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$5 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$5.call(b2, prop2))
      __defNormalProp$5(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$5)
    for (var prop2 of __getOwnPropSymbols$5(b2)) {
      if (__propIsEnum$5.call(b2, prop2))
        __defNormalProp$5(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$32 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$5.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$5)
    for (var prop2 of __getOwnPropSymbols$5(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$5.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var SplitPane = (_a9) => {
  var _b5 = _a9, {
    children,
    initialSplit = 50,
    isOpen,
    minLeftWidth = 25,
    minRightWidth = 50
  } = _b5, rest = __objRest$32(_b5, [
    "children",
    "initialSplit",
    "isOpen",
    "minLeftWidth",
    "minRightWidth"
  ]);
  const dividerRef = (0, import_react291.useRef)(null);
  const mouseDownHandler = (0, import_react291.useCallback)(
    (e) => {
      if (e.target !== dividerRef.current) {
        return;
      }
      let requestedFrame = null;
      e.stopPropagation();
      e.preventDefault();
      const target = e.currentTarget;
      target.setPointerCapture(e.pointerId);
      target.onpointermove = (moveEvent) => {
        if (!(moveEvent.buttons && 1)) {
          target.onpointermove = null;
          target.releasePointerCapture(moveEvent.pointerId);
          return;
        }
        moveEvent.stopPropagation();
        moveEvent.preventDefault();
        if (!requestedFrame) {
          const { offsetX } = moveEvent;
          requestedFrame = requestAnimationFrame(() => {
            target.style.setProperty(
              "--split-pos",
              `${Math.max(offsetX, 0)}px`
            );
            requestedFrame = null;
          });
        }
      };
    },
    []
  );
  const containerStyle2 = useStyleConfig("SplitPane", { minLeftWidth, minRightWidth, initialSplit, isOpen });
  return import_react291.default.createElement(
    Grid,
    __spreadValues$5({
      sx: containerStyle2,
      onPointerDown: mouseDownHandler
    }, rest),
    children[0],
    isOpen && (0, import_react291.cloneElement)(children[1], { ref: dividerRef }),
    isOpen && children[2]
  );
};
var __defProp$42 = Object.defineProperty;
var __getOwnPropSymbols$42 = Object.getOwnPropertySymbols;
var __hasOwnProp$42 = Object.prototype.hasOwnProperty;
var __propIsEnum$42 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$42 = (obj, key2, value) => key2 in obj ? __defProp$42(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$42 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$42.call(b2, prop2))
      __defNormalProp$42(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$42)
    for (var prop2 of __getOwnPropSymbols$42(b2)) {
      if (__propIsEnum$42.call(b2, prop2))
        __defNormalProp$42(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$42.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$42)
    for (var prop2 of __getOwnPropSymbols$42(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$42.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var PaneItem = (_a9) => {
  var _b5 = _a9, { children } = _b5, rest = __objRest$2(_b5, ["children"]);
  return import_react291.default.createElement(GridItem, __spreadValues$42({ overflow: "hidden" }, rest), children);
};
var __defProp$32 = Object.defineProperty;
var __getOwnPropSymbols$32 = Object.getOwnPropertySymbols;
var __hasOwnProp$32 = Object.prototype.hasOwnProperty;
var __propIsEnum$32 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$32 = (obj, key2, value) => key2 in obj ? __defProp$32(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$32 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$32.call(b2, prop2))
      __defNormalProp$32(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$32)
    for (var prop2 of __getOwnPropSymbols$32(b2)) {
      if (__propIsEnum$32.call(b2, prop2))
        __defNormalProp$32(a2, prop2, b2[prop2]);
    }
  return a2;
};
var PaneDivider = forwardRef3((props, ref) => {
  const style = useStyleConfig("PaneDivider");
  return import_react291.default.createElement(
    Box,
    __spreadValues$32({
      ref,
      sx: style
    }, props)
  );
});
var __defProp$2 = Object.defineProperty;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key2, value) => key2 in obj ? __defProp$2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$2 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$2.call(b2, prop2))
      __defNormalProp$2(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$2)
    for (var prop2 of __getOwnPropSymbols$2(b2)) {
      if (__propIsEnum$2.call(b2, prop2))
        __defNormalProp$2(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$2.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$2)
    for (var prop2 of __getOwnPropSymbols$2(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$2.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var StepStack = (_a9) => {
  var _b5 = _a9, {
    children,
    spacing: spacing4 = "4",
    rowHeight = "10",
    stepCircleAlignment = "center",
    stepCircleMarginTopPx = 0
  } = _b5, rest = __objRest$1(_b5, [
    "children",
    "spacing",
    "rowHeight",
    "stepCircleAlignment",
    "stepCircleMarginTopPx"
  ]);
  const rows = getChildrenWithProps(children, {});
  const parsedRowHeight = useToken("sizes", rowHeight);
  return import_react291.default.createElement(Stack, __spreadValues$2({ spacing: spacing4, position: "relative" }, rest), rows.map(
    (row, i2) => import_react291.default.createElement(HStack, { key: `row-${i2}`, alignItems: stepCircleAlignment }, import_react291.default.createElement(import_react291.default.Fragment, null, import_react291.default.createElement(
      Box,
      {
        borderRadius: "full",
        bgColor: "blue.500",
        boxSize: "6",
        minW: "6",
        minH: "6",
        zIndex: "docked",
        marginTop: `${stepCircleMarginTopPx}px`
      },
      import_react291.default.createElement(
        Label$1,
        {
          size: "sm",
          sx: { color: "text.inverted" },
          w: "max-content",
          textAlign: "center"
        },
        i2 + 1
      )
    ), row))
  ), import_react291.default.createElement(
    Divider,
    {
      orientation: "vertical",
      left: "3",
      top: `calc(${parsedRowHeight} / 2 + ${stepCircleMarginTopPx}px)`,
      h: `calc(100% - ${parsedRowHeight} - ${stepCircleMarginTopPx}px)`,
      position: "absolute"
    }
  ));
};
var __defProp$1 = Object.defineProperty;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key2, value) => key2 in obj ? __defProp$1(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1 = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp$1.call(b2, prop2))
      __defNormalProp$1(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols$1)
    for (var prop2 of __getOwnPropSymbols$1(b2)) {
      if (__propIsEnum$1.call(b2, prop2))
        __defNormalProp$1(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop2 in source)
    if (__hasOwnProp$1.call(source, prop2) && exclude.indexOf(prop2) < 0)
      target[prop2] = source[prop2];
  if (source != null && __getOwnPropSymbols$1)
    for (var prop2 of __getOwnPropSymbols$1(source)) {
      if (exclude.indexOf(prop2) < 0 && __propIsEnum$1.call(source, prop2))
        target[prop2] = source[prop2];
    }
  return target;
};
var customComponents = {
  Option: (_a9) => {
    var _b5 = _a9, { children } = _b5, props = __objRest(_b5, ["children"]);
    return import_react291.default.createElement(chakra_components_default.Option, __spreadValues$1({}, props), import_react291.default.createElement(import_react291.default.Fragment, null, props.data.isCreation ? import_react291.default.createElement(Flex, { mr: 3, width: 1.5, mb: 0.5, justifyContent: "center", alignItems: "center" }, import_react291.default.createElement(Icon$1, { mb: "4px", as: SvgPlusSolid, color: "brand" })) : import_react291.default.createElement(Box, { mr: 3, width: 1.5 }), children));
  }
};
var __defProp4 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp4 = (obj, key2, value) => key2 in obj ? __defProp4(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues = (a2, b2) => {
  for (var prop2 in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop2))
      __defNormalProp4(a2, prop2, b2[prop2]);
  if (__getOwnPropSymbols)
    for (var prop2 of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop2))
        __defNormalProp4(a2, prop2, b2[prop2]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
var CreatableSelectDropdown = ({
  standardOptions,
  initialPlaceholder = "Select or create...",
  addOptionPlaceholder = "Enter text...",
  creationOption = {
    label: "Add option...",
    value: "Add option...",
    isCreation: true
  },
  onOptionChange,
  width = "100%",
  variant = "outline",
  initialValue
}) => {
  const initialSelectedOption = (0, import_react291.useMemo)(
    () => {
      var _a9;
      if ((0, import_ramda.isNil)(initialValue)) {
        return null;
      }
      return (_a9 = standardOptions.find((option) => option.value === initialValue)) != null ? _a9 : null;
    },
    []
  );
  const [selectedOption, setSelectedOption] = (0, import_react291.useState)(initialSelectedOption);
  const [newOptionText, setNewOptionText] = (0, import_react291.useState)("");
  const [newOptionPlaceholder, setNewOptionPlaceholder] = (0, import_react291.useState)(initialPlaceholder);
  const [createdOptions, setCreatedOptions] = (0, import_react291.useState)([]);
  function isCreationOption(option) {
    return option && typeof option.isCreation === "boolean";
  }
  const ref = (0, import_react291.useRef)(null);
  useOutsideClick({
    ref,
    handler: () => {
      if (isCreationOption(selectedOption)) {
        setSelectedOption(initialSelectedOption);
        setNewOptionPlaceholder(initialPlaceholder);
      }
    }
  });
  const handleInputChange2 = (newValue) => {
    setNewOptionText(newValue);
  };
  const handleCreateOption = () => {
    const newOptionTextLower = newOptionText.toLowerCase();
    const newOptionExists = standardOptions.some((option) => option.value.toLowerCase() === newOptionTextLower);
    if (!newOptionExists) {
      const newOption = { label: newOptionText, value: newOptionText };
      setCreatedOptions((currentCreatedOptions) => [...currentCreatedOptions, newOption]);
      setSelectedOption(newOption);
      onOptionChange(newOption);
    }
    setNewOptionText("");
    setNewOptionPlaceholder(initialPlaceholder);
  };
  const handleChange = (newValue, _actionMeta) => {
    const option = newValue;
    if (option === null) {
      return;
    }
    if (isCreationOption(option)) {
      setNewOptionPlaceholder(addOptionPlaceholder);
    } else {
      setNewOptionPlaceholder(initialPlaceholder);
    }
    setSelectedOption(option);
    onOptionChange(option);
  };
  const handleKeyDown = (event) => {
    if (event.key === "Enter" && newOptionText) {
      handleCreateOption();
      event.preventDefault();
    }
  };
  const combinedOptions = [...standardOptions, ...createdOptions];
  const customOptions = [
    __spreadProps(__spreadValues({}, creationOption), {
      icon: import_react291.default.createElement(Icon, { as: SvgPlusSolid, color: "brand" })
    }),
    ...combinedOptions
  ];
  return import_react291.default.createElement(Box, { ref }, import_react291.default.createElement(
    creatable_select_default,
    {
      chakraStyles: __spreadProps(__spreadValues({}, customSelectStyles), {
        container: (provided) => __spreadProps(__spreadValues({}, provided), {
          width
        }),
        option: (provided, { isSelected }) => __spreadValues(__spreadValues({}, provided), isSelected && {
          color: "black"
        })
      }),
      components: customComponents,
      options: customOptions,
      value: selectedOption,
      onChange: handleChange,
      isMulti: false,
      onInputChange: handleInputChange2,
      onKeyDown: handleKeyDown,
      onCreateOption: handleCreateOption,
      placeholder: newOptionPlaceholder,
      inputValue: newOptionText,
      useBasicStyles: true,
      variant
    }
  ));
};
export {
  AbsoluteCenter,
  Accordion3 as Accordion,
  AccordionButton3 as AccordionButton,
  AccordionIcon,
  AccordionItem3 as AccordionItem,
  AccordionPanel3 as AccordionPanel,
  Alert$1 as Alert,
  AlertDescription,
  AlertDialog,
  ModalBody as AlertDialogBody,
  ModalCloseButton as AlertDialogCloseButton,
  AlertDialogContent,
  ModalFooter as AlertDialogFooter,
  ModalHeader as AlertDialogHeader,
  ModalOverlay as AlertDialogOverlay,
  AlertIcon,
  AlertTitle,
  AspectRatio2 as AspectRatio,
  async_creatable_select_default as AsyncCreatableSelect,
  AsyncError,
  async_select_default as AsyncSelect,
  AutoScrollActivator,
  Avatar$1 as Avatar,
  AvatarGroup3 as AvatarGroup,
  Badge$1 as Badge,
  Blinker$1 as Blinker,
  Blockquote$1 as Blockquote,
  Box,
  BreadcrumbItem as Breadcrumb,
  BreadcrumbLink,
  BreadcrumbSeparator,
  Breadcrumb as Breadcrumbs,
  Button$1 as Button,
  ButtonGroup,
  CSS2 as CSS,
  Capitalized$1 as Capitalized,
  Card,
  CardBody,
  CardFooter,
  CardHeader,
  Carousel,
  Center,
  Modal as ChakraModal,
  select_default as ChakraReactSelect,
  Checkbox$1 as Checkbox,
  CheckboxField,
  CheckboxGroup,
  Circle,
  CircularProgress,
  CircularProgressLabel,
  Clickable,
  ClipboardInput,
  CloseButton,
  Code,
  Collapse2 as Collapse,
  ColorPicker$1 as ColorPicker,
  ColorPickerField,
  Container2 as Container,
  creatable_select_default as CreatableSelect,
  CreatableSelectDropdown,
  CustomTheme,
  DatePicker,
  DatePickerField,
  DateRangePicker,
  DateRangePickerField,
  Divider,
  DndContext,
  DragAndDrop,
  DragHandle,
  DragItem,
  DragOverlay,
  Draggable,
  Drawer,
  ModalBody as DrawerBody,
  ModalCloseButton as DrawerCloseButton,
  DrawerContent,
  ModalFooter as DrawerFooter,
  ModalHeader as DrawerHeader,
  ModalOverlay as DrawerOverlay,
  DropZone,
  Droppable,
  Editable,
  EditableInput,
  EditablePreview,
  EditableText,
  Fade3 as Fade,
  FastGrid,
  FastList,
  Field,
  FilePicker,
  FilePickerField,
  Flex,
  FlipButton$1 as FlipButton,
  FlipButtonGroup,
  FlipButtonGroupField,
  Form,
  FormControl,
  FormErrorMessage,
  FormHelperText,
  FormLabel3 as FormLabel,
  FormattedNumberInput,
  FormattedNumberInputField,
  Grid,
  GridItem,
  H1$1 as H1,
  H2$1 as H2,
  H3$1 as H3,
  H4$1 as H4,
  H5$1 as H5,
  H6$1 as H6,
  HStack,
  Heading,
  Hide,
  Highlight,
  Icon$1 as Icon,
  IconButton2 as IconButton,
  Image2 as Image,
  Input,
  InputAddon,
  InputGroup,
  InputLeftAddon,
  InputLeftElement,
  InputRightAddon,
  InputRightElement,
  IntentButton,
  Kbd,
  KeyboardCode,
  KeyboardSensor,
  Label$1 as Label,
  Lead$1 as Lead,
  Link,
  LinkBox,
  LinkOverlay,
  List,
  ListIcon,
  ListItem,
  LoadingBar,
  MaskedTextInput,
  MeasuringFrequency,
  MeasuringStrategy,
  MediatoolThemeProvider,
  Menu6 as Menu,
  MenuButton,
  MenuCommand,
  MenuDivider,
  MenuGroup,
  MenuIcon,
  MenuItem,
  MenuItemOption,
  MenuList,
  MenuOptionGroup,
  Modal2 as Modal,
  ModalBase,
  ModalBody2 as ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  MouseSensor,
  MultiFileList,
  MultiFilePicker,
  MultiFilePickerField,
  MultiFileUploader,
  MultiSort,
  NotificationIconButton,
  NumVal$1 as NumVal,
  NumberDecrementStepper,
  NumberIncrementStepper,
  NumberInput3 as NumberInput,
  NumberInputField3 as NumberInputField,
  OrderedList,
  OrganizationLogo,
  OverflowGroup,
  P$1 as P,
  PaneDivider,
  PaneItem,
  PinInput2 as PinInput,
  PinInputField,
  PointerSensor,
  Popover$1 as Popover,
  PopoverAnchor,
  PopoverArrow,
  PopoverBody,
  PopoverCloseButton,
  PopoverContent,
  PopoverFooter,
  PopoverHeader,
  PopoverTrigger,
  Portal,
  ProgressBar,
  Radio2 as Radio,
  RadioGroup2 as RadioGroup,
  RadioGroupField,
  RangeSlider,
  RangeSliderFilledTrack,
  RangeSliderMark,
  RangeSliderThumb,
  RangeSliderTrack,
  ResizeHandle,
  ScaleFade3 as ScaleFade,
  SearchBar,
  SearchBarField,
  Select4 as Select,
  SelectField3 as SelectField,
  Show,
  SimpleGrid,
  Skeleton,
  SkeletonCircle,
  SkeletonText,
  Slide3 as Slide,
  SlideFade3 as SlideFade,
  Slider,
  SliderFilledTrack,
  SliderMark,
  SliderThumb,
  SliderTrack,
  Small$1 as Small,
  Sortable,
  SortableContainer,
  SortableContext,
  SortableItem,
  SortableList,
  Spacer,
  Spinner$1 as Spinner,
  SplitPane,
  Stack,
  StackDivider,
  Stat,
  StatArrow,
  StatGroup,
  StatHelpText,
  StatLabel,
  StatNumber,
  StatusBlock,
  StatusPin,
  Step3 as Step,
  TabIndicator as StepIndicator,
  StepList,
  StepPanel,
  TabPanels as StepPanels,
  StepStack,
  Steps,
  Switch4 as Switch,
  SwitchField,
  Tab,
  TabIndicator,
  TabList,
  TabPanel3 as TabPanel,
  TabPanels,
  Table2 as Table,
  TableCaption,
  TableContainer,
  Tabs3 as Tabs,
  Tag2 as Tag,
  TagCloseButton,
  TagGroup,
  TagLabel,
  TagLeftIcon,
  TagRightIcon,
  TagsInput,
  Tbody,
  Td,
  Text,
  TextField,
  Textarea2 as Textarea,
  TextareaField,
  Tfoot,
  Th,
  Thead,
  Tiny$1 as Tiny,
  Toast2 as Toast,
  Toolbox,
  ToolboxContent,
  ToolboxFooter,
  ToolboxHeader,
  Tooltip2 as Tooltip,
  TouchSensor,
  Tr,
  TraversalOrder,
  UnorderedList,
  VStack,
  VisuallyHidden,
  VisuallyHiddenInput,
  Wrap,
  WrapItem,
  add3 as add,
  addAlpha,
  advancedParseFloat,
  applyModifiers,
  arrayMove,
  arraySwap,
  canUseDOM4 as canUseDOM,
  clamp7 as clamp,
  closestCenter,
  closestCorners,
  createDebounceFunctionInstance,
  createSnapModifier,
  defaultAnimateLayoutChanges,
  defaultAnnouncements,
  defaultCoordinates,
  defaultDropAnimationConfiguration as defaultDropAnimation,
  defaultDropAnimationSideEffects,
  defaultNewIndexGetter,
  defaultScreenReaderInstructions,
  useInterval3 as dndUseInterval,
  findFirstFocusableNode,
  getChildrenWithProps,
  getClientRect,
  getContrastColor,
  getEventCoordinates,
  getFieldError,
  getFirstCollision,
  getInitials,
  getMatchingValue,
  getOwnerDocument5 as getOwnerDocument,
  getScrollableAncestors,
  getShades,
  getWindow3 as getWindow,
  hasSortableData,
  hasViewportRelativeCoordinates,
  highlight,
  horizontalListSortingStrategy,
  isDocument,
  isHTMLElement7 as isHTMLElement,
  isKeyboardEvent,
  isNode3 as isNode,
  isSVGElement2 as isSVGElement,
  isTouchEvent4 as isTouchEvent,
  isWindow,
  keyframes,
  luminosity,
  pointerWithin,
  rectIntersection,
  rectSortingStrategy,
  rectSwappingStrategy,
  restrictToFirstScrollableAncestor,
  restrictToHorizontalAxis,
  restrictToParentElement,
  restrictToVerticalAxis,
  restrictToWindowEdges,
  ring2 as ring,
  snapCenterToCursor,
  sortableKeyboardCoordinates,
  statusIconMap,
  subtract5 as subtract,
  theme2 as theme,
  tottTheme,
  trimFormValues,
  useArrowFocus,
  useBoolean,
  useBreakpoint,
  useBreakpointValue,
  useClipboard,
  useCombinedRefs,
  useControllableProp,
  useControllableState2 as useControllableState,
  useController,
  useCurrentTheme,
  useDebounce,
  useDidUpdateEffect,
  useDisclosure,
  useDndContext,
  useDndMonitor,
  useDraggable,
  useDroppable,
  useEditable,
  useEditableControls,
  useEditableState,
  useEvent,
  useFieldArray,
  useForm,
  useFormContext,
  useFormState,
  useInterval,
  useIsomorphicLayoutEffect3 as useIsomorphicLayoutEffect,
  useLatestValue,
  useLazyMemo,
  useLoadingMessage,
  useMediaQuery,
  useMergeRefs3 as useMergeRefs,
  useNodeRef,
  useNumberInput,
  useOutsideClick,
  useOutsideRectClick,
  useOverflowGroup,
  usePrefersReducedMotion,
  usePrevious3 as usePrevious,
  useRadio,
  useRadioGroup,
  useResizeWidth,
  useScreenSize,
  useScrollToBottom,
  useSelectCallbacks,
  useSensor,
  useSensors,
  useSetValueRefreshed,
  useSortable,
  useTab,
  useTabs,
  useTheme2 as useTheme,
  useToast2 as useToast,
  useToken,
  useUniqueId2 as useUniqueId,
  useWatch,
  verticalListSortingStrategy
};
/*! Bundled license information:

@northlight/ui/dist/es/northlight.js:
  (*! Overload error in @types/react-input-mask, overwriting faulty types as unknown as any *)
*/
//# sourceMappingURL=@northlight_ui.js.map
